* [[https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/][面试题
55 - II. 平衡二叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-55---ii.-平衡二叉树
  :END:
** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:
输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过
1，那么它就是一棵平衡二叉树。

*示例 1:*

给定二叉树 =[3,9,20,null,null,15,7]=

#+begin_example
      3
     / \
    9  20
      /  \
     15   7
#+end_example

返回 =true=。

*示例 2:*

给定二叉树 =[1,2,2,3,3,null,null,4,4]=

#+begin_example
         1
        / \
       2   2
      / \
     3   3
    / \
   4   4
#+end_example

返回  =false=。

*限制：*

- =1 <= 树的结点个数 <= 10000=

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def isBalanced(self, root: TreeNode) -> bool:
          def height(root):
              if root is None:
                  return 0
              return 1 + max(height(root.left), height(root.right))
          
          if root is None:
              return True
          return abs(height(root.left) - height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public boolean isBalanced(TreeNode root) {
          if (root == null) {
              return true;
          }
          return Math.abs(depth(root.left) - depth(root.right)) <= 1 && isBalanced(root.left) && isBalanced(root.right);
      }

      private int depth(TreeNode tree) {
          if (tree == null) {
              return 0;
          }
          return 1 + Math.max(depth(tree.left), depth(tree.right));
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for a binary tree node.
   * function TreeNode(val) {
   *     this.val = val;
   *     this.left = this.right = null;
   * }
   */
  /**
   * @param {TreeNode} root
   * @return {boolean}
   */
  var isBalanced = function(root) {
      const depth = (root) => {
          if (!root) {
              return 0;
          }
          return 1 + Math.max(depth(root.left), depth(root.right));
      }

      if (!root) {
          return true;
      }
      return Math.abs(depth(root.left) - depth(root.right)) <= 1 && isBalanced(root.left) && isBalanced(root.right);
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
   * };
   */
  class Solution {
  public:
      bool isBalanced(TreeNode* root) {
          if (!root) {
              return true;
          }
          return abs(depth(root->left) - depth(root->right)) <= 1 && isBalanced(root->left) && isBalanced(root->right);
      }

  private:
      int depth(TreeNode* root) {
          if (!root) {
              return 0;
          }
          return 1 + max(depth(root->left), depth(root->right));
      }
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  /**
   * Definition for a binary tree node.
   * type TreeNode struct {
   *     Val int
   *     Left *TreeNode
   *     Right *TreeNode
   * }
   */
  func isBalanced(root *TreeNode) bool {
      if (root == nil) {
          return true
      }
      return math.Abs(float64(depth(root.Left)-depth(root.Right))) <= 1 && isBalanced(root.Left) && isBalanced(root.Right)
  }

  func depth(root *TreeNode) int {
      if (root == nil) {
          return 0
      }
      left, right := depth(root.Left), depth(root.Right)
      if (left > right) {
          return 1 + left
      }
      return 1 + right
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
