* [[https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/][面试题 31.
栈的压入、弹出序列]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-31.-栈的压入弹出序列
  :END:
** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列
{1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1}
是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2}
就不可能是该压栈序列的弹出序列。

*示例 1：*

#+begin_example
  输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
  输出：true
  解释：我们可以按以下顺序执行：
  push(1), push(2), push(3), push(4), pop() -> 4,
  push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
#+end_example

*示例 2：*

#+begin_example
  输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
  输出：false
  解释：1 不能在 2 之前弹出。
#+end_example

*提示：*

1. =0 <= pushed.length == popped.length <= 1000=
2. =0 <= pushed[i], popped[i] < 1000=
3. =pushed=  是  =popped=  的排列。

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

借助一个辅助栈实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
          s = []
          q = 0
          for num in pushed:
              s.append(num)
              while s and s[-1] == popped[q]:
                  s.pop()
                  q += 1
          return not s
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean validateStackSequences(int[] pushed, int[] popped) {
          Deque<Integer> s = new ArrayDeque<>();
          int q = 0;
          for (int num : pushed) {
              s.push(num);
              while (!s.isEmpty() && s.peek() == popped[q]) {
                  s.pop();
                  ++q;
              }
          }
          return s.isEmpty();
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} pushed
   * @param {number[]} popped
   * @return {boolean}
   */
  var validateStackSequences = function (pushed, popped) {
    let s = [];
    let q = 0;
    for (let num of pushed) {
      s.push(num);
      while (s.length > 0 && s[s.length - 1] == popped[q]) {
        ++q;
        s.pop();
      }
    }
    return s.length == 0;
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
          stack<int> s;
          int i = 0;
          for (int x : pushed) {
              s.push(x);
              while (!s.empty() && s.top() == popped[i]) {
                  s.pop();
                  ++i;
              }
          }
          return s.empty();
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
