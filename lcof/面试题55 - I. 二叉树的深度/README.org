* [[https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/][面试题
55 - I. 二叉树的深度]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-55---i.-二叉树的深度
  :END:
** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:
输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。

例如：

给定二叉树 =[3,9,20,null,null,15,7]=，

#+begin_example
      3
     / \
    9  20
      /  \
     15   7
#+end_example

返回它的最大深度  3 。

*提示：*

- =节点总数 <= 10000=

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def maxDepth(self, root: TreeNode) -> int:
          if root is None:
              return 0
          return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public int maxDepth(TreeNode root) {
          if (root == null) {
              return 0;
          }
          return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for a binary tree node.
   * function TreeNode(val) {
   *     this.val = val;
   *     this.left = this.right = null;
   * }
   */
  /**
   * @param {TreeNode} root
   * @return {number}
   */
  var maxDepth = function(root) {
      if (!root) {
          return 0;
      }
      return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
   * };
   */
  class Solution {
  public:
      int maxDepth(TreeNode* root) {
          if (!root) {
              return 0;
          }
          return 1 + max(maxDepth(root->left), maxDepth(root->right));
      }
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  /**
   * Definition for a binary tree node.
   * type TreeNode struct {
   *     Val int
   *     Left *TreeNode
   *     Right *TreeNode
   * }
   */
  func maxDepth(root *TreeNode) int {
      if (root == nil) {
          return 0
      }
      left, right := maxDepth(root.Left), maxDepth(root.Right)
      if left > right {
          return 1 + left
      }
      return 1 + right
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
