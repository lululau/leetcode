* [[https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/][面试题
58 - I. 翻转单词顺序]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-58---i.-翻转单词顺序
  :END:
** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:
输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I
am a student. "，则输出"student. a am I”。

*示例 1：*

#+begin_example
  输入: "the sky is blue"
  输出: "blue is sky the"
#+end_example

*示例 2：*

#+begin_example
  输入: "  hello world!  "
  输出: "world! hello"
  解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
#+end_example

*示例 3：*

#+begin_example
  输入: "a good   example"
  输出: "example good a"
  解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
#+end_example

*说明：*

- 无空格字符构成一个单词。
- 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
- 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。

*注意：* 本题与主站 151
题相同：https://leetcode-cn.com/problems/reverse-words-in-a-string/

*注意：* 此题对比原题有改动

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:
按空格分割字符串后逆序。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def reverseWords(self, s: str) -> str:
          if s is None:
              return s
          return ' '.join(list(filter(lambda x: x != '', s.strip(' ').split(' ')))[::-1])
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public String reverseWords(String s) {
          if (s == null || s.length() == 0) {
              return s;
          }
          String[] words = s.split("\\s+");
          StringBuilder sb = new StringBuilder();
          int len = words.length;
          for (int i = len - 1; i >= 0; --i) {
              if (!"".equals(words[i])) {
                  sb.append(words[i]).append(" ");
              }
          }
          s = sb.toString();
          len = s.length();
          return len > 0 ? s.substring(0, len - 1) : "";
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} s
   * @return {string}
   */
  var reverseWords = function (s) {
    return s
      .split(" ")
      .reduce((acc, cur) => (cur !== "" ? acc.concat(cur) : acc), [])
      .reverse()
      .join(" ");
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func reverseWords(s string) string {
      s = strings.Trim(s, " ")
      n := len(s) - 1
      builder := new(strings.Builder)
      for i, j := n, n; i >= 0; j = i {
          for i >= 0 && s[i] != ' ' {
              i--
          }
          if builder.Len() != 0 {
              builder.WriteRune(' ')
          }
          builder.WriteString(s[i+1 : j+1])
          for i >= 0 && s[i] == ' ' {
              i--
          }
      }
      return builder.String()
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
