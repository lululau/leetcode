* [[https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/][面试题
32 - II. 从上到下打印二叉树 II]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-32---ii.-从上到下打印二叉树-ii
  :END:
** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:
从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。

*例如:*

给定二叉树: =[3,9,20,null,null,15,7]=,

#+begin_example
      3
     / \
    9  20
      /  \
     15   7
#+end_example

返回其层次遍历结果：

#+begin_example
  [
    [3],
    [9,20],
    [15,7]
  ]
#+end_example

*提示：*

- =节点总数 <= 1000=

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def levelOrder(self, root: TreeNode) -> List[List[int]]:
          if root is None:
              return []
          q = deque()
          res = []
          q.append(root)
          while q:
              size = len(q)
              t = []
              for _ in range(size):
                  node = q.popleft()
                  t.append(node.val)
                  if node.left is not None:
                      q.append(node.left)
                  if node.right is not None:
                      q.append(node.right)
              res.append(t)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public List<List<Integer>> levelOrder(TreeNode root) {
          if (root == null) return Collections.emptyList();
          Deque<TreeNode> q = new ArrayDeque<>();
          List<List<Integer>> res = new ArrayList<>();
          q.offer(root);
          while (!q.isEmpty()) {
              int size = q.size();
              List<Integer> t = new ArrayList<>();
              while (size-- > 0) {
                  TreeNode node = q.poll();
                  t.add(node.val);
                  if (node.left != null) q.offer(node.left);
                  if (node.right != null) q.offer(node.right);
              }
              res.add(t);
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for a binary tree node.
   * function TreeNode(val) {
   *     this.val = val;
   *     this.left = this.right = null;
   * }
   */
  /**
   * @param {TreeNode} root
   * @return {number[][]}
   */
  var levelOrder = function (root) {
    if (!root) return [];
    let queue = [root];
    let res = [];
    let depth = 0;
    while (queue.length) {
      let len = queue.length;
      for (let i = 0; i < len; i++) {
        let node = queue.shift();
        if (!node) continue;
        if (!res[depth]) res[depth] = [];
        res[depth].push(node.val);
        queue.push(node.left, node.right);
      }
      depth++;
    }
    return res;
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func levelOrder(root *TreeNode) [][]int {
      if root == nil {
          return nil
      }
      res := [][]int{}
      queue := []*TreeNode{}
      queue = append(queue,root)
      for len(queue) != 0 {
          size := len(queue)
          ans := []int{}
          //利用一个变量记录每层大小
          for size > 0 {
              cur := queue[0]
              ans = append(ans, cur.Val)
              queue = queue[1:]
              size--
              if cur.Left != nil {
                  queue = append(queue, cur.Left)
              }
              if cur.Right != nil {
                  queue = append(queue, cur.Right)
              }
          }
          res = append(res, ans)
      }
      return res
  }
#+end_example

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      vector<vector<int>> levelOrder(TreeNode* root) {
          vector<vector<int>> ans;
          if (root == NULL) return ans;
          queue<TreeNode*> q;
          q.push(root);
          while (!q.empty()) {
              int n = q.size();
              vector<int> v;
              for (int i = 0; i < n; ++i) {
                  TreeNode* node = q.front();
                  q.pop();
                  v.emplace_back(node->val);
                  if (node->left) q.push(node->left);
                  if (node->right) q.push(node->right);
              }
              ans.emplace_back(v);
          }
          return ans;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
