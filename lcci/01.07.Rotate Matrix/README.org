* [[https://leetcode-cn.com/problems/rotate-matrix-lcci][面试题 01.07.
旋转矩阵]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-01.07.-旋转矩阵
  :END:
[[./lcci/01.07.Rotate Matrix/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一幅由N ×
N矩阵表示的图像，其中每个像素的大小为4字节，编写一种方法，将图像旋转90度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

不占用额外内存空间能否做到？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>给定 <strong>matrix</strong> = 
  [
    [1,2,3],
    [4,5,6],
    [7,8,9]
  ],

  <strong>原地</strong>旋转输入矩阵，使其变为:
  [
    [7,4,1],
    [8,5,2],
    [9,6,3]
  ]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>给定 <strong>matrix</strong> =
  [
    [ 5, 1, 9,11],
    [ 2, 4, 8,10],
    [13, 3, 6, 7],
    [15,14,12,16]
  ], 

  <strong>原地</strong>旋转输入矩阵，使其变为:
  [
    [15,13, 2, 5],
    [14, 3, 4, 1],
    [12, 6, 8, 9],
    [16, 7,10,11]
  ]
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

原地旋转，i 的范围是 =[0, n/2)=，j 的范围是 =[i, n-1-i)=。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def rotate(self, matrix: List[List[int]]) -> None:
          """
          Do not return anything, modify matrix in-place instead.
          """
          n = len(matrix)
          for i in range(n // 2):
              for j in range(i, n - 1 - i):
                  t = matrix[i][j]
                  matrix[i][j] = matrix[n - j - 1][i]
                  matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]
                  matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]
                  matrix[j][n - i - 1] = t
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public void rotate(int[][] matrix) {
          int n = matrix.length;
          for (int i = 0; i < n / 2; ++i) {
              for (int j = i; j < n - 1 - i; ++j) {
                  int t = matrix[i][j];
                  matrix[i][j] = matrix[n - j - 1][i];
                  matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                  matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                  matrix[j][n - i - 1] = t;
              }
          }
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[][]} matrix
   * @return {void} Do not return anything, modify matrix in-place instead.
   */
  var rotate = function(matrix) {
      const n = matrix.length;
      for (let i = 0; i < (n / 2); i++) {
          for (let j = i; j < n - i - 1; j++) {
              let t = matrix[i][j];
              matrix[i][j] = matrix[n - j - 1][i];
              matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
              matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
              matrix[j][n - i - 1] = t;
          }
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
