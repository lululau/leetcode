* [[https://leetcode-cn.com/problems/three-in-one-lcci][面试题 03.01.
三合一]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-03.01.-三合一
  :END:
[[./lcci/03.01.Three in One/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

三合一。描述如何只用一个数组来实现三个栈。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你应该实现push(stackNum,
value)、pop(stackNum)、isEmpty(stackNum)、peek(stackNum)方法。stackNum表示栈下标，value表示压入的值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

构造函数会传入一个stackSize参数，代表每个栈的大小。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong> 输入</strong>：
  [&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;isEmpty&quot;]
  [[1], [0, 1], [0, 2], [0], [0], [0], [0]]
  <strong> 输出</strong>：
  [null, null, null, 1, -1, -1, true]
  <strong>说明</strong>：当栈为空时`pop, peek`返回-1，当栈满时`push`不压入元素。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong> 输入</strong>：
  [&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;peek&quot;]
  [[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]
  <strong> 输出</strong>：
  [null, null, null, null, 2, 1, -1, -1]
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

二维数组解决；也可以使用一维数组，以下标
=0,3,6,..=、=1,4,7,..=、=2,5,8,..=
区分，一维数组最后三个元素记录每个栈的元素个数。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class TripleInOne:

      def __init__(self, stackSize: int):
          self._capacity = stackSize
          self._s = [[], [], []]

      def push(self, stackNum: int, value: int) -> None:
          if len(self._s[stackNum]) < self._capacity:
              self._s[stackNum].append(value)

      def pop(self, stackNum: int) -> int:
          return -1 if self.isEmpty(stackNum) else self._s[stackNum].pop()

      def peek(self, stackNum: int) -> int:
          return -1 if self.isEmpty(stackNum) else self._s[stackNum][-1]

      def isEmpty(self, stackNum: int) -> bool:
          return len(self._s[stackNum]) == 0


  # Your TripleInOne object will be instantiated and called as such:
  # obj = TripleInOne(stackSize)
  # obj.push(stackNum,value)
  # param_2 = obj.pop(stackNum)
  # param_3 = obj.peek(stackNum)
  # param_4 = obj.isEmpty(stackNum)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class TripleInOne {
      private int[] s;
      private int capacity;

      public TripleInOne(int stackSize) {
          s = new int[stackSize * 3 + 3];
          capacity = stackSize;
      }

      public void push(int stackNum, int value) {
          if (s[stackNum + 3 * capacity] < capacity) {
              s[s[stackNum + 3 * capacity] * 3 + stackNum] = value;
              ++s[stackNum + 3 * capacity];
          }
      }

      public int pop(int stackNum) {
          if (isEmpty(stackNum)) {
              return -1;
          }
          --s[stackNum + 3 * capacity];
          return s[s[stackNum + 3 * capacity] * 3 + stackNum];
      }

      public int peek(int stackNum) {
          return isEmpty(stackNum) ? -1 : s[(s[stackNum + 3 * capacity] - 1) * 3 + stackNum];
      }

      public boolean isEmpty(int stackNum) {
          return s[stackNum + 3 * capacity] == 0;
      }
  }

  /**
   * Your TripleInOne object will be instantiated and called as such:
   * TripleInOne obj = new TripleInOne(stackSize);
   * obj.push(stackNum,value);
   * int param_2 = obj.pop(stackNum);
   * int param_3 = obj.peek(stackNum);
   * boolean param_4 = obj.isEmpty(stackNum);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
