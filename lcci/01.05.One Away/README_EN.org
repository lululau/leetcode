* [[https://leetcode-cn.com/problems/one-away-lcci][01.05. One Away]]
  :PROPERTIES:
  :CUSTOM_ID: one-away
  :END:
[[./lcci/01.05.One Away/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There are three types of edits that can be performed on strings: insert
a character, remove a character, or replace a character. Given two
strings, write a function to check if they are one edit (or zero edits)
away.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> 

  first = &quot;pale&quot;

  second = &quot;ple&quot;

  <strong>Output:</strong> True

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> 

  first = &quot;pales&quot;

  second = &quot;pal&quot;

  <strong>Output:</strong> False

  </pre>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def oneEditAway(self, first: str, second: str) -> bool:
          n1, n2 = len(first), len(second)
          diff = n1 - n2
          if abs(diff) > 1:
              return False
          i, j, op = 0, 0, 1
          while i < n1 and j < n2:
              not_same = first[i] != second[j]
              if not_same:
                  if diff == 1:
                      i += 1
                  elif diff == -1:
                      j += 1
                  else:
                      i += 1
                      j += 1
                  op -= 1
              else:
                  i += 1
                  j += 1
              if op < 0:
                  return False
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean oneEditAway(String first, String second) {
          int n1 = first.length(), n2 = second.length();
          int diff = n1 - n2;
          if (Math.abs(diff) > 1) {
              return false;
          }
          int op = 1;
          for (int i = 0, j = 0; i < n1 && j < n2; ++i, ++j) {
              boolean notSame = first.charAt(i) != second.charAt(j);
              if (notSame) {
                  if (diff == 1) {
                      // --j, ++i, ++j => ++i
                      --j;
                  } else if (diff == -1) {
                      // --i, ++i, ++j => ++j
                      --i;
                  }
                  --op;
              }
              if (op < 0) {
                  return false;
              }
          }
          return true;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool oneEditAway(string first, string second) {
          int n1 = first.size(), n2 = second.size();
          int diff = n1 - n2;
          if (abs(diff) > 1) {
              return false;
          }
          int op = 1;
          for (int i = 0, j = 0; i < n1 && j < n2; ++i, ++j) {
              bool notSame = first[i] != second[j];
              if (notSame) {
                  if (diff == 1) {
                      --j;
                  } else if (diff == -1) {
                      --i;
                  }
                  --op;
              }
              if (op < 0) {
                  return false;
              }
          }
          return true;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
