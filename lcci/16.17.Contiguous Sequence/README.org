* [[https://leetcode-cn.com/problems/contiguous-sequence-lcci][面试题
16.17. 连续数列]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-16.17.-连续数列
  :END:
[[./lcci/16.17.Contiguous Sequence/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个整数数组（有正数有负数），找出总和最大的连续数列，并返回总和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong> [-2,1,-3,4,-1,2,1,-5,4]
  <strong>输出：</strong> 6
  <strong>解释：</strong> 连续子数组 [4,-1,2,1] 的和最大，为 6。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:
动态规划

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
   var maxSubArray = function(nums) {
      let dp = [-Infinity];
      for (let i = 0; i < nums.length; i++) {
          let cur = nums[i];
          dp[i + 1] = Math.max(dp[i] + cur, cur);
      }
      return Math.max(...dp);
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
