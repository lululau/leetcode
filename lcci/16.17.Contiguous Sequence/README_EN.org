* [[https://leetcode-cn.com/problems/contiguous-sequence-lcci][16.17.
Contiguous Sequence]]
  :PROPERTIES:
  :CUSTOM_ID: contiguous-sequence
  :END:
[[./lcci/16.17.Contiguous Sequence/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an array of integers (both positive and negative). Find
the contiguous sequence with the largest sum. Return the sum.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong> [-2,1,-3,4,-1,2,1,-5,4]

  <strong>Output: </strong> 6

  <strong>Explanation: </strong> [4,-1,2,1] has the largest sum 6.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Follow Up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If you have figured out the O(n) solution, try coding another solution
using the divide and conquer approach, which is more subtle.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
   var maxSubArray = function(nums) {
      let dp = [-Infinity];
      for (let i = 0; i < nums.length; i++) {
          let cur = nums[i];
          dp[i + 1] = Math.max(dp[i] + cur, cur);
      }
      return Math.max(...dp);
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
