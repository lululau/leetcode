* [[https://leetcode-cn.com/problems/animal-shelter-lcci][03.06. Animal
Shelter]]
  :PROPERTIES:
  :CUSTOM_ID: animal-shelter
  :END:
[[./lcci/03.06.Animal Shelter/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

An animal shelter, which holds only dogs and cats, operates on a
strictly"first in, first out" basis. People must adopt either
the"oldest" (based on arrival time) of all animals at the shelter, or
they can select whether they would prefer a dog or a cat (and will
receive the oldest animal of that type). They cannot select which
specific animal they would like. Create the data structures to maintain
this system and implement operations such as enqueue, dequeueAny,
dequeueDog, and dequeueCat. You may use the built-in Linked list data
structure.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

enqueue method has a animal parameter, animal[0] represents the number
of the animal, animal[1] represents the type of the animal, 0 for cat
and 1 for dog.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

dequeue* method returns [animal number, animal type], if there's no
animal that can be adopted, return [-1, -1].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong> Input</strong>: 

  [&quot;AnimalShelf&quot;, &quot;enqueue&quot;, &quot;enqueue&quot;, &quot;dequeueCat&quot;, &quot;dequeueDog&quot;, &quot;dequeueAny&quot;]

  [[], [[0, 0]], [[1, 0]], [], [], []]

  <strong> Output</strong>: 

  [null,null,null,[0,0],[-1,-1],[1,0]]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong> Input</strong>: 

  [&quot;AnimalShelf&quot;, &quot;enqueue&quot;, &quot;enqueue&quot;, &quot;enqueue&quot;, &quot;dequeueDog&quot;, &quot;dequeueCat&quot;, &quot;dequeueAny&quot;]

  [[], [[0, 0]], [[1, 0]], [[2, 1]], [], [], []]

  <strong> Output</strong>: 

  [null,null,null,null,[2,1],[0,0],[1,0]]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The number of animals in the shelter will not exceed 20000.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class AnimalShelf:

      def __init__(self):
          self.cats = []
          self.dogs = []

      def enqueue(self, animal: List[int]) -> None:
          if animal[1] == 0:
              self.cats.insert(0, animal[0])
          else:
              self.dogs.insert(0, animal[0])

      def dequeueAny(self) -> List[int]:
          if len(self.dogs) == 0: return self.dequeueCat()
          if len(self.cats) == 0: return self.dequeueDog()
          return self.dequeueDog() if self.dogs[-1] < self.cats[-1] else self.dequeueCat()

      def dequeueDog(self) -> List[int]:
          return [-1, -1] if len(self.dogs) == 0 else [self.dogs.pop(), 1]

      def dequeueCat(self) -> List[int]:
          return [-1, -1] if len(self.cats) == 0 else [self.cats.pop(), 0]


  # Your AnimalShelf object will be instantiated and called as such:
  # obj = AnimalShelf()
  # obj.enqueue(animal)
  # param_2 = obj.dequeueAny()
  # param_3 = obj.dequeueDog()
  # param_4 = obj.dequeueCat()
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class AnimalShelf {
      Queue<Integer> cats;
      Queue<Integer> dogs;
      public AnimalShelf() {
          cats = new LinkedList<>();
          dogs = new LinkedList<>();
      }

      public void enqueue(int[] animal) {
          if (animal[1] == 0) {
              cats.offer(animal[0]);
          } else {
              dogs.offer(animal[0]);
          }
      }

      public int[] dequeueAny() {
          return dogs.isEmpty() ? dequeueCat() : (cats.isEmpty() ? dequeueDog() : (dogs.peek() < cats.peek() ? dequeueDog() : dequeueCat()));
      }

      public int[] dequeueDog() {
          return dogs.isEmpty() ? new int[]{-1, -1} : new int[]{dogs.poll(), 1};
      }

      public int[] dequeueCat() {
          return cats.isEmpty() ? new int[]{-1, -1} : new int[]{cats.poll(), 0};
      }
  }

  /**
   * Your AnimalShelf object will be instantiated and called as such:
   * AnimalShelf obj = new AnimalShelf();
   * obj.enqueue(animal);
   * int[] param_2 = obj.dequeueAny();
   * int[] param_3 = obj.dequeueDog();
   * int[] param_4 = obj.dequeueCat();
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
