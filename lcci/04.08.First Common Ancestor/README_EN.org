* [[https://leetcode-cn.com/problems/first-common-ancestor-lcci][04.08.
First Common Ancestor]]
  :PROPERTIES:
  :CUSTOM_ID: first-common-ancestor
  :END:
[[./lcci/04.08.First Common Ancestor/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design an algorithm and write code to find the first common ancestor of
two nodes in a binary tree. Avoid storing additional nodes in a data
structure. NOTE: This is not necessarily a binary search tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, Given the following tree: root =
[3,5,1,6,2,0,8,null,null,7,4]

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

      3

     / \

    5   1

   / \ / \

  6  2 0  8

    / \

   7   4

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1

  <strong>Input:</strong> 3

  <strong>Explanation:</strong> The first common ancestor of node 5 and node 1 is node 3.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4

  <strong>Output:</strong> 5

  <strong>Explanation:</strong> The first common ancestor of node 5 and node 4 is node 5.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Notes:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

All node values are pairwise distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p, q are different node and both can be found in the given tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:
          if root is None or root == p or root == q:
              return root
          left = self.lowestCommonAncestor(root.left, p, q)
          right = self.lowestCommonAncestor(root.right, p, q)
          return right if left is None else (left if right is None else root)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
          if (root == null || root == p || root == q) {
              return root;
          }
          TreeNode left = lowestCommonAncestor(root.left, p, q);
          TreeNode right = lowestCommonAncestor(root.right, p, q);
          return left == null ? right : (right == null ? left : root);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
