* [[https://leetcode-cn.com/problems/stack-of-plates-lcci][03.03. Stack
of Plates]]
  :PROPERTIES:
  :CUSTOM_ID: stack-of-plates
  :END:
[[./lcci/03.03.Stack of Plates/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Imagine a (literal) stack of plates. If the stack gets too high, it
might topple. Therefore, in real life, we would likely start a new stack
when the previous stack exceeds some threshold. Implement a data
structure SetOfStacks that mimics this. SetOfStacks should be composed
of several stacks and should create a new stack once the previous one
exceeds capacity. SetOfStacks.push() and SetOfStacks.pop() should behave
identically to a single stack (that is, pop() should return the same
values as it would if there were just a single stack). Follow Up:
Implement a function popAt(int index) which performs a pop operation on
a specific sub-stack.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You should delete the sub-stack when it becomes empty. pop, popAt should
return -1 when there's no element to pop.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong> Input</strong>: 

  [&quot;StackOfPlates&quot;, &quot;push&quot;, &quot;push&quot;, &quot;popAt&quot;, &quot;pop&quot;, &quot;pop&quot;]

  [[1], [1], [2], [1], [], []]

  <strong> Output</strong>: 

  [null, null, null, 2, 1, -1]

  <strong> Explanation</strong>: 

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong> Input</strong>: 

  [&quot;StackOfPlates&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;popAt&quot;, &quot;popAt&quot;, &quot;popAt&quot;]

  [[2], [1], [2], [3], [0], [0], [0]]

  <strong> Output</strong>: 

  [null, null, null, null, 2, 1, 3]

  </pre>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
