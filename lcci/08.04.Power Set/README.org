* [[https://leetcode-cn.com/problems/power-set-lcci][面试题 08.04.
幂集]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-08.04.-幂集
  :END:
[[./lcci/08.04.Power Set/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

幂集。编写一种方法，返回某集合的所有子集。集合中不包含重复的元素。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明：解集不能包含重复的子集。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong> 输入</strong>： nums = [1,2,3]
  <strong> 输出</strong>：
  [
    [3],
  &nbsp; [1],
  &nbsp; [2],
  &nbsp; [1,2,3],
  &nbsp; [1,3],
  &nbsp; [2,3],
  &nbsp; [1,2],
  &nbsp; []
  ]
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

回溯法

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number[][]}
   */
  var subsets = function(nums) {
      let prev = [];
      let res = [];
      dfs(nums, 0, prev, res);
      return res;
  };

  function dfs (nums, depth, prev, res) {
      res.push(prev.slice());
      for (let i = depth; i < nums.length; i++) {
          prev.push(nums[i]);
          depth++;
          dfs(nums, depth, prev, res);
          prev.pop();
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
