* [[https://leetcode-cn.com/problems/three-steps-problem-lcci][08.01.
Three Steps Problem]]
  :PROPERTIES:
  :CUSTOM_ID: three-steps-problem
  :END:
[[./lcci/08.01.Three Steps Problem/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A child is running up a staircase with n steps and can hop either 1
step, 2 steps, or 3 steps at a time. Implement a method to count how
many possible ways the child can run up the stairs. The result may be
large, so return it modulo 1000000007.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong> Input</strong>: n = 3 

  <strong> Output</strong>: 4

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong> Input</strong>: n = 5

  <strong> Output</strong>: 13

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

1. =1 <= n <= 1000000=

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def waysToStep(self, n: int) -> int:
          if n < 3:
              return n
          a, b, c = 1, 2, 4
          for _ in range(4, n + 1):
              a, b, c = b, c, (a + b + c) % 1000000007
          return c
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int waysToStep(int n) {
          if (n < 3) {
              return n;
          }
          int a = 1, b = 2, c = 4;
          for (int i = 4; i <= n; ++i) {
              int t = a;
              a = b;
              b = c;
              c = ((a + b) % 1000000007 + t) % 1000000007;
          }
          return c;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number} n
   * @return {number}
   */
   var waysToStep = function(n) {
      if (n < 3) return n;
      let a = 1, b = 2, c = 4;
      for (let i = 3; i < n; i++) {
          [a, b, c] = [b, c, (a + b + c) % 1000000007];
      }
      return c;
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int waysToStep(int n) {
          if (n < 3) {
              return n;
          }
          int a = 1, b = 2, c = 4, i = 4;
          while (i++ <= n) {
              int t = ((a + b) % 1000000007 + c) % 1000000007;
              a = b;
              b = c;
              c = t;
          }
          return c;
      }
  };
#+end_src

#+begin_html
  <!-- tabs:end -->
#+end_html
