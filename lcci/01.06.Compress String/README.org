* [[https://leetcode-cn.com/problems/compress-string-lcci][面试题 01.06.
字符串压缩]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-01.06.-字符串压缩
  :END:
[[./lcci/01.06.Compress String/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong> 输入</strong>："aabcccccaaa"
  <strong> 输出</strong>："a2b1c5a3"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong> 输入</strong>："abbccd"
  <strong> 输出</strong>："abbccd"
  <strong> 解释</strong>："abbccd"压缩后为"a1b2c2d1"，比原字符串长度更长。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

字符串长度在[0, 50000]范围内。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

双指针遍历字符串求解。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def compressString(self, S: str) -> str:
          if len(S) < 2:
              return S
          p, q = 0, 1
          res = ''
          while q < len(S):
              if S[p] != S[q]:
                  res += (S[p] + str(q - p))
                  p = q
              q += 1
          res += (S[p] + str(q - p))
          return res if len(res) < len(S) else S
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public String compressString(String S) {
          int n;
          if (S == null || (n = S.length()) < 2) {
              return S;
          }
          int p = 0, q = 1;
          StringBuilder sb = new StringBuilder();
          while (q < n) {
              if (S.charAt(p) != S.charAt(q)) {
                  sb.append(S.charAt(p)).append(q - p);
                  p = q;
              }
              ++q;
          }
          sb.append(S.charAt(p)).append(q - p);
          String res = sb.toString();
          return res.length() < n ? res : S;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} S
   * @return {string}
   */
  var compressString = function(S) {
      if (!S) return S;
      let p = 0, q = 1;
      let res = '';
      while (q < S.length) {
          if (S[p] != S[q]) {
              res += (S[p] + (q - p));
              p = q;
          }
          ++q;
      }
      res += (S[p] + (q - p));
      return res.length < S.length ? res : S;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
