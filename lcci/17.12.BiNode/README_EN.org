* [[https://leetcode-cn.com/problems/binode-lcci][17.12. BiNode]]
  :PROPERTIES:
  :CUSTOM_ID: binode
  :END:
[[./lcci/17.12.BiNode/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

The data structure TreeNode is used for binary tree, but it can also
used to represent a single linked list (where left is null, and right is
the next node in the list). Implement a method to convert a binary
search tree (implemented with TreeNode) into a single linked list. The
values should be kept in order and the operation should be performed in
place (that is, on the original data structure).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the head node of the linked list after converting.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note: This problem is slightly different from the original one in the
book.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong> [4,2,5,1,3,null,6,0]

  <strong>Output: </strong> [0,null,1,null,2,null,3,null,4,null,5,null,6]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes will not exceed 100000.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:
See
[[./solution/0800-0899/0897.Increasing Order Search Tree/README_EN.org][897.
Increasing Order Search Tree]].

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def convertBiNode(self, root: TreeNode) -> TreeNode:
          if root is None:
              return None
          left = self.convertBiNode(root.left)
          right = self.convertBiNode(root.right)
          if left is None:
              root.right = right
              return root
          res = left
          while left and left.right:
              left = left.right
          left.right = root
          root.right = right
          root.left = None
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public TreeNode convertBiNode(TreeNode root) {
          if (root == null) return null;
          TreeNode left = convertBiNode(root.left);
          TreeNode right = convertBiNode(root.right);
          if (left == null) {
              root.right = right;
              return root;
          }
          TreeNode res = left;
          while (left != null && left.right != null) {
              left = left.right;
          }
          left.right = root;
          root.right = right;
          root.left = null;
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
