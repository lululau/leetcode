* [[https://leetcode-cn.com/problems/tic-tac-toe-lcci][面试题 16.04.
井字游戏]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-16.04.-井字游戏
  :END:
[[./lcci/16.04.Tic-Tac-Toe/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

设计一个算法，判断玩家是否赢了井字游戏。输入是一个 N x N
的数组棋盘，由字符" "，"X"和"O"组成，其中字符" "代表一个空位。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

以下是井字游戏的规则：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

玩家轮流将字符放入空位（" "）中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第一个玩家总是放字符"O"，且第二个玩家总是放字符"X"。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"X"和"O"只允许放置在空位中，不允许对已放有字符的位置进行填充。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

当有N个相同（且非空）的字符填充任何行、列或对角线时，游戏结束，对应该字符的玩家获胜。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

当所有位置非空时，也算为游戏结束。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果游戏结束，玩家不允许再放置字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

如果游戏存在获胜者，就返回该游戏的获胜者使用的字符（"X"或"O"）；如果游戏以平局结束，则返回
"Draw"；如果仍会有行动（游戏未结束），则返回 "Pending"。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong> board = [&quot;O X&quot;,&quot; XO&quot;,&quot;X O&quot;]
  <strong>输出：</strong> &quot;X&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong> board = [&quot;OOX&quot;,&quot;XXO&quot;,&quot;OXO&quot;]
  <strong>输出：</strong> &quot;Draw&quot;
  <strong>解释：</strong> 没有玩家获胜且不存在空位
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong> board = [&quot;OOX&quot;,&quot;XXO&quot;,&quot;OX &quot;]
  <strong>输出：</strong> &quot;Pending&quot;
  <strong>解释：</strong> 没有玩家获胜且仍存在空位
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= board.length == board[i].length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

输入一定遵循井字棋规则

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
