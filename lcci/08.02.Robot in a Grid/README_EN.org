* [[https://leetcode-cn.com/problems/robot-in-a-grid-lcci][08.02. Robot
in a Grid]]
  :PROPERTIES:
  :CUSTOM_ID: robot-in-a-grid
  :END:
[[./lcci/08.02.Robot in a Grid/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Imagine a robot sitting on the upper left corner of grid with r rows and
c columns. The robot can only move in two directions, right and down,
but certain cells are "off limits" such that the robot cannot step on
them. Design an algorithm to find a path for the robot from the top left
to the bottom right.

#+begin_html
  </p>
#+end_html

[[./images/robot_maze.png]]

#+begin_html
  <p>
#+end_html

"off limits" and empty grid are represented by 1 and 0 respectively.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return a valid path, consisting of row number and column number of grids
in the path.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:

  </strong>[

  &nbsp; [<strong>0</strong>,<strong>0</strong>,<strong>0</strong>],

  &nbsp; [0,1,<strong>0</strong>],

  &nbsp; [0,0,<strong>0</strong>]

  ]

  <strong>Output:</strong> [[0,0],[0,1],[0,2],[1,2],[2,2]]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

r, c <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
