* [[https://leetcode-cn.com/problems/sum-lists-lcci][面试题 02.05.
链表求和]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-02.05.-链表求和
  :END:
[[./lcci/02.05.Sum Lists/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定两个用链表表示的整数，每个节点包含一个数位。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

这些数位是反向存放的，也就是个位排在链表首部。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

编写函数对这两个整数求和，并用链表形式返回结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>(7 -&gt; 1 -&gt; 6) + (5 -&gt; 9 -&gt; 2)，即617 + 295
  <strong>输出：</strong>2 -&gt; 1 -&gt; 9，即912
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：假设这些数位是正向存放的，请再做一遍。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>(6 -&gt; 1 -&gt; 7) + (2 -&gt; 9 -&gt; 5)，即617 + 295
  <strong>输出：</strong>9 -&gt; 1 -&gt; 2，即912
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

同时遍历两链表，求节点的和与进位。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
          carry = 0
          dummy = ListNode(-1)
          cur = dummy
          while l1 or l2 or carry:
              s = (0 if not l1 else l1.val) + (0 if not l2 else l2.val) + carry
              carry, val = divmod(s, 10)
              cur.next = ListNode(val)
              cur = cur.next
              l1 = None if not l1 else l1.next
              l2 = None if not l2 else l2.next
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  class Solution {
      public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
          int carry = 0;
          ListNode dummy = new ListNode(-1);
          ListNode cur = dummy;
          while (l1 != null || l2 != null || carry != 0) {
              int s = (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val) + carry;
              carry = s / 10;
              cur.next = new ListNode(s % 10);
              cur = cur.next;
              l1 = l1 == null ? null : l1.next;
              l2 = l2 == null ? null : l2.next;
          }
          return dummy.next;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
          int carry = 0;
          ListNode* dummy = new ListNode(-1);
          ListNode* cur = dummy;
          while (l1 != NULL || l2 != NULL || carry != 0) {
              int s = (l1 == NULL ? 0 : l1-> val) + (l2 == NULL ? 0 : l2->val) + carry;
              carry = s / 10;
              cur->next = new ListNode(s % 10);
              cur = cur->next;
              l1 = l1 == NULL ? NULL : l1->next;
              l2 = l2 == NULL ? NULL : l2->next;
          }
          return dummy->next;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val) {
   *     this.val = val;
   *     this.next = null;
   * }
   */
  /**
   * @param {ListNode} l1
   * @param {ListNode} l2
   * @return {ListNode}
   */
  var addTwoNumbers = function (l1, l2) {
    let carry = 0;
    const dummy = new ListNode(-1);
    let cur = dummy;
    while (l1 || l2 || carry) {
      const s = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + carry;
      carry = Math.floor(s / 10);
      cur.next = new ListNode(s % 10);
      cur = cur.next;
      l1 = l1 ? l1.next : l1;
      l2 = l2 ? l2.next : l2;
    }
    return dummy.next;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
