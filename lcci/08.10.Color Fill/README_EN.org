* [[https://leetcode-cn.com/problems/color-fill-lcci][08.10. Color
Fill]]
  :PROPERTIES:
  :CUSTOM_ID: color-fill
  :END:
[[./lcci/08.10.Color Fill/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement the "paint fill" function that one might see on many image
editing programs. That is, given a screen (represented by a
two-dimensional array of colors), a point, and a new color, fill in the
surrounding area until the color changes from the original color.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input</strong>: 

  image = [[1,1,1],[1,1,0],[1,0,1]] 

  sr = 1, sc = 1, newColor = 2

  <strong>Output</strong>: [[2,2,2],[2,2,0],[2,0,1]]

  <strong>Explanation</strong>: 

  From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected 

  by a path of the same color as the starting pixel are colored with the new color.

  Note the bottom corner is not colored 2, because it is not 4-directionally connected

  to the starting pixel.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The length of image and image[0] will be in the range [1, 50].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The given starting pixel will satisfy 0 <= sr < image.length and 0 <= sc
< image[0].length.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The value of each color in image[i][j] and newColor will be an integer
in [0, 65535].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
          int oldColor = image[sr][sc];
          dfs(image, sr, sc, oldColor, newColor);
          return image;
      }

      private void dfs(int[][] image, int sr, int sc, int oldColor, int newColor) {
          if (sr < 0 || sc < 0 || sr >= image.length || sc >= image[0].length) {
              return;
          }

          int color = image[sr][sc];
          if (color != newColor && color == oldColor) {
              image[sr][sc] = newColor;
              // up down left right
              dfs(image, sr, sc + 1, oldColor, newColor);
              dfs(image, sr, sc - 1, oldColor, newColor);
              dfs(image, sr + 1, sc, oldColor, newColor);
              dfs(image, sr - 1, sc, oldColor, newColor);
          }
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
