* [[https://leetcode-cn.com/problems/missing-number-lcci][17.04. Missing
Number]]
  :PROPERTIES:
  :CUSTOM_ID: missing-number
  :END:
[[./lcci/17.04.Missing Number/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

An array contains all the integers from 0 to n, except for one number
which is missing.  Write code to find the missing integer. Can you do it
in O(n) time?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note: This problem is slightly different from the original one the book.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong>[3,0,1]

  <strong>Output: </strong>2</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong>[9,6,4,2,3,5,7,0,1]

  <strong>Output: </strong>8

  </pre>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def missingNumber(self, nums: List[int]) -> int:
          res = 0
          for i, num in enumerate(nums):
              res = res ^ num ^ (i + 1)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int missingNumber(int[] nums) {
          int res = 0;
          for (int i = 0; i < nums.length; ++i) {
              res = res ^ nums[i] ^ (i + 1);
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var missingNumber = function(nums) {
      let res;
      for (let i = 0; i < nums.length; i++) {
          res = res ^ nums[i] ^ (i + 1);
      }
      return res;
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int missingNumber(vector<int>& nums) {
          int res = 0;
          for (int i = 0; i < nums.size(); ++i) {
              res = res ^ nums[i] ^ (i + 1);
          }
          return res;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
