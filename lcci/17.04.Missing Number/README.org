* [[https://leetcode-cn.com/problems/missing-number-lcci][面试题 17.04.
消失的数字]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-17.04.-消失的数字
  :END:
[[./lcci/17.04.Missing Number/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

数组nums包含从0到n的所有整数，但其中缺了一个。请编写代码找出那个缺失的整数。你有办法在O(n)时间内完成吗？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：本题相对书上原题稍作改动

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[3,0,1]
  <strong>输出：</strong>2</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[9,6,4,2,3,5,7,0,1]
  <strong>输出：</strong>8
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

利用异或的特性，=res = res ^ x ^ x=。对同一个值异或两次，结果等于它本身。最后异或的结果，就是只出现一次的数字，即数组中缺失的整数。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def missingNumber(self, nums: List[int]) -> int:
          res = 0
          for i, num in enumerate(nums):
              res = res ^ num ^ (i + 1)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int missingNumber(int[] nums) {
          int res = 0;
          for (int i = 0; i < nums.length; ++i) {
              res = res ^ nums[i] ^ (i + 1);
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var missingNumber = function(nums) {
      let res;
      for (let i = 0; i < nums.length; i++) {
          res = res ^ nums[i] ^ (i + 1);
      }
      return res;
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int missingNumber(vector<int>& nums) {
          int res = 0;
          for (int i = 0; i < nums.size(); ++i) {
              res = res ^ nums[i] ^ (i + 1);
          }
          return res;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
