* [[https://leetcode-cn.com/problems/insert-into-bits-lcci][05.01.
Insert Into Bits]]
  :PROPERTIES:
  :CUSTOM_ID: insert-into-bits
  :END:
[[./lcci/05.01.Insert Into Bits/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two 32-bit numbers, N and M, and two bit positions, i and
j. Write a method to insert M into N such that M starts at bit j and
ends at bit i. You can assume that the bits j through i have enough
space to fit all of M. That is, if M = 10011, you can assume that there
are at least 5 bits between j and i. You would not, for example, have j
= 3 and i = 2, because M could not fully fit between bit 3 and bit 2.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong> Input</strong>: N = 10000000000, M = 10011, i = 2, j = 6

  <strong> Output</strong>: N = 10001001100

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong> Input</strong>:  N = 0, M = 11111, i = 0, j = 4

  <strong> Output</strong>: N = 11111

  </pre>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int insertBits(int N, int M, int i, int j) {
          for (int k = i; k <= j; k++) {
              N &= ~(1 << k);
          }
          return N ^ (M << i);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
