* [[https://leetcode-cn.com/problems/sorted-matrix-search-lcci][10.09.
Sorted Matrix Search]]
  :PROPERTIES:
  :CUSTOM_ID: sorted-matrix-search
  :END:
[[./lcci/10.09.Sorted Matrix Search/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an M x N matrix in which each row and each column is sorted in
ascending order, write a method to find an element.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given matrix:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  [

    [1,   4,  7, 11, 15],

    [2,   5,  8, 12, 19],

    [3,   6,  9, 16, 22],

    [10, 13, 14, 17, 24],

    [18, 21, 23, 26, 30]

  ]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Given target = 5, return true.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given target = 20, return false.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
          if not matrix or not matrix[0]:
              return False
          rows, cols = len(matrix), len(matrix[0])
          i, j = rows - 1, 0
          while i >= 0 and j < cols:
              if matrix[i][j] == target:
                  return True
              if matrix[i][j] > target:
                  i -= 1
              else:
                  j += 1
          return False
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean searchMatrix(int[][] matrix, int target) {
          if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {
              return false;
          }
          int rows = matrix.length, cols = matrix[0].length;
          int i = rows - 1, j = 0;
          while (i >= 0 && j < cols) {
              if (matrix[i][j] == target) {
                  return true;
              }
              if (matrix[i][j] > target) {
                  --i;
              } else {
                  ++j;
              }
          }
          return false;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
