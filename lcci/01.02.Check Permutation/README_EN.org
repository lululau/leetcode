* [[https://leetcode-cn.com/problems/check-permutation-lcci][01.02.
Check Permutation]]
  :PROPERTIES:
  :CUSTOM_ID: check-permutation
  :END:
[[./lcci/01.02.Check Permutation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two strings,write a method to decide if one is a permutation of
the other.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><code>s1</code> = &quot;abc&quot;, <code>s2</code> = &quot;bca&quot;

  <strong>Output: </strong>true

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><code>s1</code> = &quot;abc&quot;, <code>s2</code> = &quot;bad&quot;

  <strong>Output: </strong>false

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= len(s1) <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= len(s2) <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def CheckPermutation(self, s1: str, s2: str) -> bool:
          n1, n2 = len(s1), len(s2)
          if n1 != n2:
              return False
          counter = collections.Counter()
          for i in range(n1):
              counter[s1[i]] += 1
              counter[s2[i]] -= 1
          for val in counter.values():
              if val != 0:
                  return False
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean CheckPermutation(String s1, String s2) {
          int n1 = s1.length(), n2 = s2.length();
          if (n1 != n2) {
              return false;
          }
          Map<Character, Integer> counter = new HashMap<>();
          for (int i = 0; i < n1; ++i) {
              char c1 = s1.charAt(i), c2 = s2.charAt(i);
              counter.put(c1, counter.getOrDefault(c1, 0) + 1);
              counter.put(c2, counter.getOrDefault(c2, 0) - 1);
          }
          for (int val : counter.values()) {
              if (val != 0) {
                  return false;
              }
          }
          return true;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  var CheckPermutation = function(s1, s2) {
      let n1 = s1.length, n2 = s2.length;
      if (n1 != n2) return false;
      let counter = {};
      for (let i = 0; i < n1; i++) {
          let cur1 = s1.charAt(i), cur2 = s2.charAt(i);
          counter[cur1] = (counter[cur1] || 0) + 1;
          counter[cur2] = (counter[cur2] || 0) - 1;
      }
      return Object.values(counter).every(v => v == 0);
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
