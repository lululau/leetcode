* [[https://leetcode-cn.com/problems/add-without-plus-lcci][17.01. Add
Without Plus]]
  :PROPERTIES:
  :CUSTOM_ID: add-without-plus
  :END:
[[./lcci/17.01.Add Without Plus/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Write a function that adds two numbers. You should not use + or any
arithmetic operators.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> a = 1, b = 1

  <strong>Output:</strong> 2</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

a and b may be 0 or negative.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The result fits in 32-bit integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int add(int a, int b) {
          int sum = 0, carry = 0;
          while (b != 0) {
              sum = a ^ b;
              carry = (a & b) << 1;
              a = sum;
              b = carry;
          }
          return a;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
