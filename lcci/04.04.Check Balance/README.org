* [[https://leetcode-cn.com/problems/check-balance-lcci][面试题 04.04.
检查平衡性]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-04.04.-检查平衡性
  :END:
[[./lcci/04.04.Check Balance/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个节点，其两棵子树的高度差不超过
1。

#+begin_html
  </p>
#+end_html

示例 1:

#+begin_html
  <pre>给定二叉树 [3,9,20,null,null,15,7]<br>    3<br>   / &#92<br>  9  20<br>    /  &#92<br>   15   7<br>返回 true 。</pre>
#+end_html

示例 2:

#+begin_html
  <pre>给定二叉树 [1,2,2,3,3,null,null,4,4]<br>      1<br>     / &#92<br>    2   2<br>   / &#92<br>  3   3<br> / &#92<br>4   4<br>返回 false 。</pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

递归法。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def isBalanced(self, root: TreeNode) -> bool:
          if not root:
              return True
          l, r = self._height(root.left), self._height(root.right)
          return abs(l - r) < 2 and self.isBalanced(root.left) and self.isBalanced(root.right)

      def _height(self, node):
          if not node:
              return 0
          return 1 + max(self._height(node.left), self._height(node.right))
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public boolean isBalanced(TreeNode root) {
          if (root == null) {
              return true;
          }
          int l = height(root.left), r = height(root.right);
          return Math.abs(l - r) < 2 && isBalanced(root.left) && isBalanced(root.right);
      }

      private int height(TreeNode node) {
          if (node == null) {
              return 0;
          }
          return 1 + Math.max(height(node.left), height(node.right));
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
