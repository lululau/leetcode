* [[https://leetcode-cn.com/problems/check-balance-lcci][04.04. Check
Balance]]
  :PROPERTIES:
  :CUSTOM_ID: check-balance
  :END:
[[./lcci/04.04.Check Balance/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement a function to check if a binary tree is balanced. For the
purposes of this question, a balanced tree is defined to be a tree such
that the heights of the two subtrees of any node never differ by more
than one.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  Given tree [3,9,20,null,null,15,7]

      3

     / \

    9  20

      /  \

     15   7

  return true.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  Given [1,2,2,3,3,null,null,4,4]

        1

       / \

      2   2

     / \

    3   3

   / \

  4   4

  return&nbsp;false.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def isBalanced(self, root: TreeNode) -> bool:
          if not root:
              return True
          l, r = self._height(root.left), self._height(root.right)
          return abs(l - r) < 2 and self.isBalanced(root.left) and self.isBalanced(root.right)

      def _height(self, node):
          if not node:
              return 0
          return 1 + max(self._height(node.left), self._height(node.right))
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public boolean isBalanced(TreeNode root) {
          if (root == null) {
              return true;
          }
          int l = height(root.left), r = height(root.right);
          return Math.abs(l - r) < 2 && isBalanced(root.left) && isBalanced(root.right);
      }

      private int height(TreeNode node) {
          if (node == null) {
              return 0;
          }
          return 1 + Math.max(height(node.left), height(node.right));
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
