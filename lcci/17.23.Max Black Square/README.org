* [[https://leetcode-cn.com/problems/max-black-square-lcci][面试题
17.23. 最大黑方阵]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-17.23.-最大黑方阵
  :END:
[[./lcci/17.23.Max Black Square/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个方阵，其中每个单元(像素)非黑即白。设计一个算法，找出 4
条边皆为黑色像素的最大子方阵。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回一个数组 [r, c, size]
，其中 r, c 分别代表子方阵左上角的行号和列号，size
是子方阵的边长。若有多个满足条件的子方阵，返回 r 最小的，若 r 相同，返回
c 最小的子方阵。若无满足条件的子方阵，返回空数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:
  </strong>[
  &nbsp;  [1,0,1],
  &nbsp;  [<strong>0,0</strong>,1],
  &nbsp;  [<strong>0,0</strong>,1]
  ]
  <strong>输出: </strong>[1,0,2]
  <strong>解释: </strong>输入中 0 代表黑色，1 代表白色，标粗的元素即为满足条件的最大子方阵
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:
  </strong>[
  &nbsp;  [<strong>0</strong>,1,1],
  &nbsp;  [1,0,1],
  &nbsp;  [1,1,0]
  ]
  <strong>输出: </strong>[0,0,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

matrix.length == matrix[0].length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
