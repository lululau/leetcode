* [[https://leetcode-cn.com/problems/words-frequency-lcci][16.02. Words
Frequency]]
  :PROPERTIES:
  :CUSTOM_ID: words-frequency
  :END:
[[./lcci/16.02.Words Frequency/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a method to find the frequency of occurrences of any given word
in a book. What if we were running this algorithm multiple times?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You should implement following methods:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

WordsFrequency(book) constructor, parameter is a array of strings,
representing the book.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

get(word) get the frequency of word in the book. 

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  WordsFrequency wordsFrequency = new WordsFrequency({&quot;i&quot;, &quot;have&quot;, &quot;an&quot;, &quot;apple&quot;, &quot;he&quot;, &quot;have&quot;, &quot;a&quot;, &quot;pen&quot;});

  wordsFrequency.get(&quot;you&quot;); //returns 0，&quot;you&quot; is not in the book

  wordsFrequency.get(&quot;have&quot;); //returns 2，&quot;have&quot; occurs twice in the book

  wordsFrequency.get(&quot;an&quot;); //returns 1

  wordsFrequency.get(&quot;apple&quot;); //returns 1

  wordsFrequency.get(&quot;pen&quot;); //returns 1

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

There are only lowercase letters in book[i].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= book.length <= 100000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= book[i].length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

get function will not be called more than 100000 times.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class WordsFrequency:

      def __init__(self, book: List[str]):
          self.counter = collections.Counter(book)

      def get(self, word: str) -> int:
          return self.counter[word]

  # Your WordsFrequency object will be instantiated and called as such:
  # obj = WordsFrequency(book)
  # param_1 = obj.get(word)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class WordsFrequency {

      private Map<String, Integer> counter = new HashMap<>();

      public WordsFrequency(String[] book) {
          for (String word : book) {
              counter.put(word, counter.getOrDefault(word, 0) + 1);
          }
      }

      public int get(String word) {
          return counter.containsKey(word) ? counter.get(word) : 0;
      }
  }

  /**
   * Your WordsFrequency object will be instantiated and called as such:
   * WordsFrequency obj = new WordsFrequency(book);
   * int param_1 = obj.get(word);
   */
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string[]} book
   */
  var WordsFrequency = function (book) {
    this.counter = {};
    for (const word of book) {
      this.counter[word] = (this.counter[word] || 0) + 1;
    }
  };

  /**
   * @param {string} word
   * @return {number}
   */
  WordsFrequency.prototype.get = function (word) {
    return this.counter[word] || 0;
  };

  /**
   * Your WordsFrequency object will be instantiated and called as such:
   * var obj = new WordsFrequency(book)
   * var param_1 = obj.get(word)
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
