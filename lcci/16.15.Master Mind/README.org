* [[https://leetcode-cn.com/problems/master-mind-lcci][面试题 16.15.
珠玑妙算]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-16.15.-珠玑妙算
  :END:
[[./lcci/16.15.Master Mind/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

珠玑妙算游戏（the game of master mind）的玩法如下。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

计算机有4个槽，每个槽放一个球，颜色可能是红色（R）、黄色（Y）、绿色（G）或蓝色（B）。例如，计算机可能有RGGB
4种（槽1为红色，槽2、3为绿色，槽4为蓝色）。作为用户，你试图猜出颜色组合。打个比方，你可能会猜YRGB。要是猜对某个槽的颜色，则算一次“猜中”；要是只猜对颜色但槽位猜错了，则算一次“伪猜中”。注意，"猜中"不能算入“伪猜中”。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定一种颜色组合solution和一个猜测guess，编写一个方法，返回猜中和伪猜中的次数answer，其中answer[0]为猜中的次数，answer[1]为伪猜中的次数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong> solution="RGBY",guess="GGRR"
  <strong>输出：</strong> [1,1]
  <strong>解释：</strong> 猜中1次，伪猜中1次。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

len(solution) = len(guess) = 4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

solution和guess仅包含"R","G","B","Y"这4种字符

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} solution
   * @param {string} guess
   * @return {number[]}
   */
   var masterMind = function(solution, guess) {
      let counts1 = {R: 0, G: 0, B: 0, Y: 0};
      let counts2 = {R: 0, G: 0, B: 0, Y: 0};
      let res1 = 0;
      for (let i = 0; i < solution.length; i++) {
          let s1 = solution.charAt(i), s2 = guess.charAt(i);
          if (s1 == s2) {
              res1++;
          } else {
              counts1[s1] += 1;
              counts2[s2] += 1;
          }
      }
      let res2 = ['R', 'G', 'B', 'Y'].reduce((a, c) => a + Math.min(counts1[c], counts2[c]), 0);
      return [res1, res2];
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
