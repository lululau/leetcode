* [[https://leetcode-cn.com/problems/sum-swap-lcci][面试题 16.21.
交换和]]
  :PROPERTIES:
  :CUSTOM_ID: 面试题-16.21.-交换和
  :END:
[[./lcci/16.21.Sum Swap/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定两个整数数组，请交换一对数值（每个数组中取一个数值），使得两个数组所有元素的和相等。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回一个数组，第一个元素是第一个数组中要交换的元素，第二个元素是第二个数组中要交换的元素。若有多个答案，返回任意一个均可。若无满足条件的数值，返回空数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> array1 = [4, 1, 2, 1, 1, 2], array2 = [3, 6, 3, 3]
  <strong>输出:</strong> [1, 3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> array1 = <code>[1, 2, 3], array2 = [4, 5, 6]</code>
  <strong>输出: </strong>[]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= array1.length, array2.length <= 100000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

先计算两个数组的差值 =diff=，若 =diff=
为奇数，则说明无满足条件的数值，返回空数组。否则，将 =array2= 转为
=set=。然后遍历 =array1= 中的每个数 =e=，若值 =e - diff= 在 =set=
中，则说明找到满足条件的数值对。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def findSwapValues(self, array1: List[int], array2: List[int]) -> List[int]:
          diff = sum(array1) - sum(array2)
          if diff & 1: return []
          diff >>= 1
          s = set(array2)
          for e in array1:
              if (e - diff) in s: return [e, e - diff]
          return []
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[] findSwapValues(int[] array1, int[] array2) {
          int diff = sum(array1) - sum(array2);
          if ((diff & 1) == 1) {
              return new int[]{};
          }
          diff >>= 1;
          Set<Integer> s = Arrays.stream(array2).boxed().collect(Collectors.toSet());
          for (int e : array1) {
              if (s.contains((e - diff))) {
                  return new int[]{e, e - diff};
              }
          }
          return new int[]{};
      }

      private int sum(int[] array) {
          int res = 0;
          for (int e : array) {
              res += e;
          }
          return res;
      }
  }s
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
