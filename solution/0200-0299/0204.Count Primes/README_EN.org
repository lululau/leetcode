* [[https://leetcode.com/problems/count-primes][204. Count Primes]]
  :PROPERTIES:
  :CUSTOM_ID: count-primes
  :END:
[[./solution/0200-0299/0204.Count Primes/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Count the number of prime numbers less than a non-negative number, n.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 10
  <strong>Output:</strong> 4
  <strong>Explanation:</strong> There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 0
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 1
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= n <= 5 * 106

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def countPrimes(self, n: int) -> int:
          if n < 2:
              return 0
          res = 0
          primes = [True for _ in range(n)]
          for i in range(2, n):
              if primes[i]:
                  res += 1
                  for j in range(i * i, n, i):
                      primes[j] = False
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int countPrimes(int n) {
          if (n < 2) return 0;
          boolean[] primes = new boolean[n];
          Arrays.fill(primes, true);
          int res = 0;
          for (int i = 2; i < n; ++i) {
              if (primes[i]) {
                  ++res;
                  if ((long) i * i < n) {
                      for (int j = i * i; j < n; j += i) {
                          primes[j] = false;
                      }
                  }
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
