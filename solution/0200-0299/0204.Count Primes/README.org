* [[https://leetcode-cn.com/problems/count-primes][204. 计数质数]]
  :PROPERTIES:
  :CUSTOM_ID: 计数质数
  :END:
[[./solution/0200-0299/0204.Count Primes/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

统计所有小于非负整数 n 的质数的数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 10
  <strong>输出：</strong>4
  <strong>解释：</strong>小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 0
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 1
  <strong>输出</strong>：0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= n <= 5 * 106

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

如果 x 是质数，那么大于 x 的 x 的倍数 2x,3x,...
一定不是质数，因此我们可以从这里入手。

我们设 =primes[i]= 表示数 i 是不是质数，如果是质数则为 true，否则为
false。从小到大遍历每个数，如果这个数为质数，则将其所有的倍数都标记为合数（除了该质数本身），即
false，这样在运行结束的时候我们即能知道质数的个数。

对于一个质数 x，我们从 2x 开始标记其实是冗余的，应该直接从 x⋅x
开始标记，因为 2x,3x,... 这些数一定在 x
之前就被其他数的倍数标记过了，例如 2 的所有倍数，3 的所有倍数等。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def countPrimes(self, n: int) -> int:
          if n < 2:
              return 0
          res = 0
          primes = [True for _ in range(n)]
          for i in range(2, n):
              if primes[i]:
                  res += 1
                  for j in range(i * i, n, i):
                      primes[j] = False
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int countPrimes(int n) {
          if (n < 2) return 0;
          boolean[] primes = new boolean[n];
          Arrays.fill(primes, true);
          int res = 0;
          for (int i = 2; i < n; ++i) {
              if (primes[i]) {
                  ++res;
                  if ((long) i * i < n) {
                      for (int j = i * i; j < n; j += i) {
                          primes[j] = false;
                      }
                  }
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
