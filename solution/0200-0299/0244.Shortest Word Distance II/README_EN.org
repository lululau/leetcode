* [[https://leetcode.com/problems/shortest-word-distance-ii][244.
Shortest Word Distance II]]
  :PROPERTIES:
  :CUSTOM_ID: shortest-word-distance-ii
  :END:
[[./solution/0200-0299/0244.Shortest Word Distance II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a data structure that will be initialized with a string array,
and then it should answer queries of the shortest distance between two
different strings from the array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the WordDistance class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

WordDistance(String[] wordsDict) initializes the object with the strings
array wordsDict.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int shortest(String word1, String word2) returns the shortest distance
between word1 and word2 in the array wordsDict.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;WordDistance&quot;, &quot;shortest&quot;, &quot;shortest&quot;]
  [[[&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;]], [&quot;coding&quot;, &quot;practice&quot;], [&quot;makes&quot;, &quot;coding&quot;]]
  <strong>Output</strong>
  [null, 3, 1]

  <strong>Explanation</strong>
  WordDistance wordDistance = new WordDistance([&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;]);
  wordDistance.shortest(&quot;coding&quot;, &quot;practice&quot;); // return 3
  wordDistance.shortest(&quot;makes&quot;, &quot;coding&quot;);    // return 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= wordsDict.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= wordsDict[i].length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

wordsDict[i] consists of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word1 and word2 are in wordsDict.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word1 != word2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 5000 calls will be made to shortest.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class WordDistance:

      def __init__(self, wordsDict: List[str]):
          self.words = {}
          for i, word in enumerate(wordsDict):
              indexes = self.words.get(word, [])
              indexes.append(i)
              self.words[word] = indexes

      def shortest(self, word1: str, word2: str) -> int:
          idx1, idx2 = self.words[word1], self.words[word2]
          i1 = i2 = 0
          shortest = float('inf')
          while i1 < len(idx1) and i2 < len(idx2):
              shortest = min(shortest, abs(idx1[i1] - idx2[i2]))
              smaller = idx1[i1] < idx2[i2]
              if smaller:
                  i1 += 1
              else:
                  i2 += 1
          return shortest


  # Your WordDistance object will be instantiated and called as such:
  # obj = WordDistance(wordsDict)
  # param_1 = obj.shortest(word1,word2)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class WordDistance {
      private Map<String, List<Integer>> words;

      public WordDistance(String[] wordsDict) {
          words = new HashMap<>();
          for (int i = 0; i < wordsDict.length; ++i) {
              List<Integer> indexes = words.getOrDefault(wordsDict[i], new ArrayList<>());
              indexes.add(i);
              words.put(wordsDict[i], indexes);
          }
      }

      public int shortest(String word1, String word2) {
          List<Integer> idx1 = words.get(word1);
          List<Integer> idx2 = words.get(word2);
          int i1 = 0, i2 = 0, shortest = Integer.MAX_VALUE;
          while (i1 < idx1.size() && i2 < idx2.size()) {
              shortest = Math.min(shortest, Math.abs(idx1.get(i1) - idx2.get(i2)));
              boolean smaller = idx1.get(i1) < idx2.get(i2);
              if (smaller) {
                  ++i1;
              } else {
                  ++i2;
              }
          }
          return shortest;
      }
  }

  /**
   * Your WordDistance object will be instantiated and called as such:
   * WordDistance obj = new WordDistance(wordsDict);
   * int param_1 = obj.shortest(word1,word2);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
