* [[https://leetcode.com/problems/remove-linked-list-elements][203.
Remove Linked List Elements]]
  :PROPERTIES:
  :CUSTOM_ID: remove-linked-list-elements
  :END:
[[./solution/0200-0299/0203.Remove Linked List Elements/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the head of a linked list and an integer val, remove all the nodes
of the linked list that has Node.val == val, and return the new head.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,6,3,4,5,6], val = 6
  <strong>Output:</strong> [1,2,3,4,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [], val = 1
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [7,7,7,7], val = 7
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the list is in the range [0, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= k <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def removeElements(self, head: ListNode, val: int) -> ListNode:
          dummy = ListNode(-1, head)
          pre = dummy
          while pre and pre.next:
              if pre.next.val != val:
                  pre = pre.next
              else:
                  pre.next = pre.next.next
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode removeElements(ListNode head, int val) {
          ListNode dummy = new ListNode(-1, head);
          ListNode pre = dummy;
          while (pre != null && pre.next != null) {
              if (pre.next.val != val) pre = pre.next;
              else pre.next = pre.next.next;
          }
          return dummy.next;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      ListNode* removeElements(ListNode* head, int val) {
          ListNode* dummy = new ListNode();
          dummy->next = head;
          ListNode* p = dummy;
          while (p->next) {
              if (p->next->val == val) {
                  p->next = p->next->next;
              } else {
                  p = p->next;
              }
          }
          return dummy->next;
      }
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func removeElements(head *ListNode, val int) *ListNode {
      dummy := new(ListNode)
      dummy.Next = head
      p := dummy
      for p.Next != nil {
          if p.Next.Val == val {
              p.Next = p.Next.Next
          } else {
              p = p.Next
          }
      }
      return dummy.Next
  }
#+end_example

*** *TypeScript*
    :PROPERTIES:
    :CUSTOM_ID: typescript
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * class ListNode {
   *     val: number
   *     next: ListNode | null
   *     constructor(val?: number, next?: ListNode | null) {
   *         this.val = (val===undefined ? 0 : val)
   *         this.next = (next===undefined ? null : next)
   *     }
   * }
   */

   function removeElements(head: ListNode | null, val: number): ListNode | null {
      let dummy: ListNode = new ListNode(0, head);
      let cur: ListNode = dummy;
      while (cur.next != null) {
          if (cur.next.val == val) {
              cur.next = cur.next.next;
          } else {
              cur = cur.next;
          }
      }
      return dummy.next;
  };
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
