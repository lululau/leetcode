* [[https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree][235.
Lowest Common Ancestor of a Binary Search Tree]]
  :PROPERTIES:
  :CUSTOM_ID: lowest-common-ancestor-of-a-binary-search-tree
  :END:
[[./solution/0200-0299/0235.Lowest Common Ancestor of a Binary Search Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a binary search tree (BST), find the lowest common ancestor (LCA)
of two given nodes in the BST.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

According to the definition of LCA on Wikipedia: “The lowest common
ancestor is defined between two nodes p and q as the lowest node in T
that has both p and q as descendants (where we allow a node to be a
descendant of itself).”

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> The LCA of nodes 2 and 8 is 6.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [2,1], p = 2, q = 1
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [2, 105].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= Node.val <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All Node.val are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p != q

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p and q will exist in the BST.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
Iterative:

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
          while root:
              if root.val < p.val and root.val < q.val:
                  root = root.right
              elif root.val > p.val and root.val > q.val:
                  root = root.left
              else:
                  return root
#+end_src

Recursive:

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
          if root is None:
              return None
          if root.val < p.val and root.val < q.val:
              return self.lowestCommonAncestor(root.right, p, q)
          if root.val > p.val and root.val > q.val:
              return self.lowestCommonAncestor(root.left, p, q)
          return root
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
Iterative:

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */

  class Solution {
      public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
          while (root != null) {
              if (root.val < p.val && root.val < q.val) root = root.right;
              else if (root.val > p.val && root.val > q.val) root = root.left;
              else return root;
          }
          return root;
      }
  }
#+end_src

Recursive:

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */

  class Solution {
      public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
          if (root == null) return null;
          if (root.val < p.val && root.val < q.val) return lowestCommonAncestor(root.right, p, q);
          if (root.val > p.val && root.val > q.val) return lowestCommonAncestor(root.left, p, q);
          return root;
      }
  }
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
Iterative:

#+begin_example
  /**
   * Definition for a binary tree node.
   * type TreeNode struct {
   *     Val   int
   *     Left  *TreeNode
   *     Right *TreeNode
   * }
   */

  func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
      for root != nil {
          if root.Val > p.Val && root.Val > q.Val {
              root = root.Left
          } else if root.Val < p.Val && root.Val < q.Val {
              root = root.Right
          } else {
              return root
          }
      }
      return nil
  }
#+end_example

Recursive:

#+begin_example
  /**
   * Definition for a binary tree node.
   * type TreeNode struct {
   *     Val   int
   *     Left  *TreeNode
   *     Right *TreeNode
   * }
   */

  func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
      if root == nil {
          return root
      }
      if root.Val < p.Val && root.Val < q.Val {
          return lowestCommonAncestor(root.Right, p, q)
      }
      if root.Val > p.Val && root.Val > q.Val {
          return lowestCommonAncestor(root.Left, p, q)
      }
      return root
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
