* [[https://leetcode-cn.com/problems/game-of-life][289. 生命游戏]]
  :PROPERTIES:
  :CUSTOM_ID: 生命游戏
  :END:
[[./solution/0200-0299/0289.Game of Life/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970
年发明的细胞自动机。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定一个包含 m × n
个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1
即为活细胞（live），或 0
即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果死细胞周围正好有三个活细胞，则该位置死细胞复活；

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。给你
m x n 网格面板 board 的当前状态，返回下一个状态。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
  <strong>输出：</strong>[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>board = [[1,1],[1,0]]
  <strong>输出：</strong>[[1,1],[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == board.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == board[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 25

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

board[i][j] 为 0 或 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
