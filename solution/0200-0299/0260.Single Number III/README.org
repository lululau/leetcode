* [[https://leetcode-cn.com/problems/single-number-iii][260.
只出现一次的数字 III]]
  :PROPERTIES:
  :CUSTOM_ID: 只出现一次的数字-iii
  :END:
[[./solution/0200-0299/0260.Single Number III/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。
找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,2,1,3,2,5]
  <strong>输出：</strong>[3,5]
  <strong>解释：</strong>[5, 3] 也是有效的答案。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [-1,0]
  <strong>输出：</strong>[-1,0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [0,1]
  <strong>输出：</strong>[1,0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= nums.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= nums[i] <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

除两个只出现一次的整数外，nums 中的其他数字都出现两次

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def singleNumber(self, nums: List[int]) -> List[int]:
          eor = 0
          for num in nums:
              eor ^= num
          # 提取最右边的 1
          diff = eor & (~eor + 1)
          a = 0
          for num in nums:
              if (num & diff) == 0:
                  a ^= num
          b = eor ^ a
          return [a, b]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[] singleNumber(int[] nums) {
          int eor = 0;
          for (int num : nums) {
              eor ^= num;
          }
          // 提取最右的 1
          int diff = eor & (~eor + 1);
          int a = 0;
          for (int num : nums) {
              if ((num & diff) == 0) {
                  a ^= num;
              }
          }
          int b = eor ^ a;
          return new int[]{a, b};
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
