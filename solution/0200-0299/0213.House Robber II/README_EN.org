* [[https://leetcode.com/problems/house-robber-ii][213. House Robber
II]]
  :PROPERTIES:
  :CUSTOM_ID: house-robber-ii
  :END:
[[./solution/0200-0299/0213.House Robber II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are a professional robber planning to rob houses along a street.
Each house has a certain amount of money stashed. All houses at this
place are arranged in a circle. That means the first house is the
neighbor of the last one. Meanwhile, adjacent houses have a security
system connected, and it will automatically contact the police if two
adjacent houses were broken into on the same night.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given an integer array nums representing the amount of money of each
house, return the maximum amount of money you can rob tonight without
alerting the police.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [2,3,2]
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,2,3,1]
  <strong>Output:</strong> 4
  <strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).
  Total amount you can rob = 1 + 3 = 4.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [0]
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def rob(self, nums: List[int]) -> int:
          def robRange(nums, start, end):
              if end - start == 0:
                  return nums[start]
              pre, cur = 0, nums[start]
              for i in range(start + 1, end + 1):
                  pre, cur = cur, max(pre + nums[i], cur)
              return cur
          n = len(nums)
          if n == 1:
              return nums[0]
          s1, s2 = robRange(nums, 0, n - 2), robRange(nums, 1, n - 1)
          return max(s1, s2)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int rob(int[] nums) {
          int n;
          if ((n = nums.length) == 1) return nums[0];
          int s1 = robRange(nums, 0, n - 2);
          int s2 = robRange(nums, 1, n - 1);
          return Math.max(s1, s2);
      }

      private int robRange(int[] nums, int start, int end) {
          if (end - start == 0) return nums[start];
          int pre = 0;
          int cur = nums[start];
          for (int i = start + 1; i < end + 1; ++i) {
              int t = Math.max(pre + nums[i], cur);
              pre = cur;
              cur = t;
          }
          return cur;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int rob(vector<int>& nums) {
          int n = nums.size();
          if (n == 1) return nums[0];
          int s1 = robRange(nums, 0, n - 2);
          int s2 = robRange(nums, 1, n - 1);
          return max(s1, s2);
      }
  private:
      int robRange(vector<int>& nums, int start, int end) {
          if (end - start == 0) return nums[start];
          int pre = 0;
          int cur = nums[start];
          for (int i = start + 1; i < end + 1; ++i) {
              int t = max(pre + nums[i], cur);
              pre = cur;
              cur = t;
          }
          return cur;
      }
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func rob(nums []int) int {
      n := len(nums)
      if n == 1 {
          return nums[0]
      }
      s1, s2 := robRange(nums, 0, n - 2), robRange(nums, 1, n - 1)
      return max(s1, s2)
  }

  func robRange(nums[]int, start int, end int) int {
      if end - start == 0 {
          return nums[start]
      }
      pre, cur := 0, nums[start]
      for i := start + 1; i < end + 1; i++ {
          pre, cur = cur, max(pre + nums[i], cur)
      }
      return cur
  }

  func max(a, b int) int {
      if (a > b) {
          return a
      }
      return b
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
