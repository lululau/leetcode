* [[https://leetcode.com/problems/palindrome-permutation][266.
Palindrome Permutation]]
  :PROPERTIES:
  :CUSTOM_ID: palindrome-permutation
  :END:
[[./solution/0200-0299/0266.Palindrome Permutation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s, return true if a permutation of the string could form
a palindrome.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;code&quot;
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;aab&quot;
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;carerac&quot;
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consists of only lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def canPermutePalindrome(self, s: str) -> bool:
          mapper = {}
          for ch in s:
              mapper[ch] = mapper.get(ch, 0) + 1
          cnt = 0
          for _, v in mapper.items():
              if v % 2 != 0:
                  cnt += 1
          return cnt <= 1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean canPermutePalindrome(String s) {
          Map<Character, Integer> map = new HashMap<>();
          for (int i = 0, n = s.length(); i < n; ++i) {
              char ch = s.charAt(i);
              map.put(ch, map.getOrDefault(ch, 0) + 1);
          }
          int cnt = 0;
          for (Map.Entry<Character, Integer> entry : map.entrySet()) {
              if (entry.getValue() % 2 != 0) {
                  ++cnt;
              }
          }
          return cnt <= 1;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
