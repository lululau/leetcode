* [[https://leetcode-cn.com/problems/word-pattern][290. 单词规律]]
  :PROPERTIES:
  :CUSTOM_ID: 单词规律
  :END:
[[./solution/0200-0299/0290.Word Pattern/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>
  <strong>输出:</strong> true</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat fish&quot;</code>
  <strong>输出:</strong> false</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> pattern = <code>&quot;aaaa&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>
  <strong>输出:</strong> false</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog dog dog dog&quot;</code>
  <strong>输出:</strong> false</pre>
#+end_html

#+begin_html
  <p>
#+end_html

说明:
你可以假设 pattern 只包含小写字母， str 包含了由单个空格分隔的小写字母。 
  

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def wordPattern(self, pattern: str, s: str) -> bool:
          ch2str, str2ch = {}, {}
          ss = s.split(' ')
          n = len(pattern)
          if n != len(ss):
              return False
          for i in range(n):
              if ch2str.get(pattern[i]) is not None and ch2str.get(pattern[i]) != ss[i]:
                  return False
              if str2ch.get(ss[i]) is not None and str2ch.get(ss[i]) != pattern[i]:
                  return False
              ch2str[pattern[i]] = ss[i]
              str2ch[ss[i]] = pattern[i]
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean wordPattern(String pattern, String s) {
          Map<Character, String> ch2str = new HashMap<>();
          Map<String, Character> str2ch = new HashMap<>();
          String[] ss = s.split(" ");
          int n = pattern.length();
          if (n != ss.length) {
              return false;
          }
          for (int i = 0; i < n; ++i) {
              char ch = pattern.charAt(i);
              if (ch2str.containsKey(ch) && !ch2str.get(ch).equals(ss[i])) {
                  return false;
              }
              if (str2ch.containsKey(ss[i]) && !str2ch.get(ss[i]).equals(ch)) {
                  return false;
              }
              ch2str.put(ch, ss[i]);
              str2ch.put(ss[i], ch);
          }
          return true;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
