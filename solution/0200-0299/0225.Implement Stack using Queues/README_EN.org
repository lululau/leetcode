* [[https://leetcode.com/problems/implement-stack-using-queues][225.
Implement Stack using Queues]]
  :PROPERTIES:
  :CUSTOM_ID: implement-stack-using-queues
  :END:
[[./solution/0200-0299/0225.Implement Stack using Queues/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement a last in first out (LIFO) stack using only two queues. The
implemented stack should support all the functions of a normal queue
(push, top, pop, and empty).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the MyStack class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

void push(int x) Pushes element x to the top of the stack.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int pop() Removes the element on the top of the stack and returns it.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int top() Returns the element on the top of the stack.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean empty() Returns true if the stack is empty, false otherwise.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Notes:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

You must use only standard operations of a queue, which means only push
to back, peek/pop from front, size, and is empty operations are valid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Depending on your language, the queue may not be supported natively. You
may simulate a queue using a list or deque (double-ended queue), as long
as you use only a queue's standard operations.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]
  [[], [1], [2], [], [], []]
  <strong>Output</strong>
  [null, null, null, 2, 2, false]

  <strong>Explanation</strong>
  MyStack myStack = new MyStack();
  myStack.push(1);
  myStack.push(2);
  myStack.top(); // return 2
  myStack.pop(); // return 2
  myStack.empty(); // return False
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= x <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 100 calls will be made to push, pop, top, and empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the calls to pop and top are valid.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow-up: Can you implement the stack such that each operation is
amortized O(1) time complexity? In other words, performing n operations
will take overall O(n) time even if one of those operations may take
longer. You can use more than two queues.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class MyStack:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.q = []


      def push(self, x: int) -> None:
          """
          Push element x onto stack.
          """
          self.q.append(x)
          n = len(self.q)
          for i in range(1, n):
              self.q.append(self.q.pop(0))


      def pop(self) -> int:
          """
          Removes the element on top of the stack and returns that element.
          """
          return self.q.pop(0)


      def top(self) -> int:
          """
          Get the top element.
          """
          return self.q[0]


      def empty(self) -> bool:
          """
          Returns whether the stack is empty.
          """
          return len(self.q) == 0



  # Your MyStack object will be instantiated and called as such:
  # obj = MyStack()
  # obj.push(x)
  # param_2 = obj.pop()
  # param_3 = obj.top()
  # param_4 = obj.empty()
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class MyStack {

      private Deque<Integer> q;

      /** Initialize your data structure here. */
      public MyStack() {
          q = new ArrayDeque<>();
      }

      /** Push element x onto stack. */
      public void push(int x) {
          q.offerLast(x);
          int n = q.size();
          while (n-- > 1) {
              q.offerLast(q.pollFirst());
          }
      }

      /** Removes the element on top of the stack and returns that element. */
      public int pop() {
          return q.pollFirst();
      }

      /** Get the top element. */
      public int top() {
          return q.peekFirst();
      }

      /** Returns whether the stack is empty. */
      public boolean empty() {
          return q.isEmpty();
      }
  }

  /**
   * Your MyStack object will be instantiated and called as such:
   * MyStack obj = new MyStack();
   * obj.push(x);
   * int param_2 = obj.pop();
   * int param_3 = obj.top();
   * boolean param_4 = obj.empty();
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
