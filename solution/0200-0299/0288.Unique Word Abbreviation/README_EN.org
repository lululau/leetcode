* [[https://leetcode.com/problems/unique-word-abbreviation][288. Unique
Word Abbreviation]]
  :PROPERTIES:
  :CUSTOM_ID: unique-word-abbreviation
  :END:
[[./solution/0200-0299/0288.Unique Word Abbreviation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

The abbreviation of a word is a concatenation of its first letter, the
number of characters between the first and last letter, and its last
letter. If a word has only two characters, then it is an abbreviation of
itself.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

dog --> d1g because there is one letter between the first letter 'd' and
the last letter 'g'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

internationalization --> i18n because there are 18 letters between the
first letter 'i' and the last letter 'n'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

it --> it because any word with only two characters is an abbreviation
of itself.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the ValidWordAbbr class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

ValidWordAbbr(String[] dictionary) Initializes the object with a
dictionary of words.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean isUnique(string word) Returns true if either of the following
conditions are met (otherwise returns false):

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

There is no word in dictionary whose abbreviation is equal to word's
abbreviation.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

For any word in dictionary whose abbreviation is equal to word's
abbreviation, that word and word are the same.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;ValidWordAbbr&quot;, &quot;isUnique&quot;, &quot;isUnique&quot;, &quot;isUnique&quot;, &quot;isUnique&quot;]
  [[[&quot;deer&quot;, &quot;door&quot;, &quot;cake&quot;, &quot;card&quot;]], [&quot;dear&quot;], [&quot;cart&quot;], [&quot;cane&quot;], [&quot;make&quot;]]
  <strong>Output</strong>
  [null, false, true, false, true]

  <strong>Explanation</strong>
  ValidWordAbbr validWordAbbr = new ValidWordAbbr([&quot;deer&quot;, &quot;door&quot;, &quot;cake&quot;, &quot;card&quot;]);
  validWordAbbr.isUnique(&quot;dear&quot;); // return false, dictionary word &quot;deer&quot; and word &quot;dear&quot; have the same abbreviation
  &nbsp;                               // &quot;d2r&quot; but are not the same.
  validWordAbbr.isUnique(&quot;cart&quot;); // return true, no words in the dictionary have the abbreviation &quot;c2t&quot;.
  validWordAbbr.isUnique(&quot;cane&quot;); // return false, dictionary word &quot;cake&quot; and word &quot;cane&quot; have the same abbreviation 
                                  // &quot;c2e&quot; but are not the same.
  validWordAbbr.isUnique(&quot;make&quot;); // return true, no words in the dictionary have the abbreviation &quot;m2e&quot;.
  validWordAbbr.isUnique(&quot;cake&quot;); // return true, because &quot;cake&quot; is already in the dictionary and no other word in the dictionary has &quot;c2e&quot; abbreviation.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= dictionary.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= dictionary[i].length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

dictionary[i] consists of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= word.length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word consists of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 5000 calls will be made to isUnique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class ValidWordAbbr:

      def __init__(self, dictionary: List[str]):
          self.words = {}
          for word in dictionary:
              abbr = self._word_abbr(word)
              vals = self.words.get(abbr, set())
              vals.add(word)
              self.words[abbr] = vals

      def isUnique(self, word: str) -> bool:
          abbr = self._word_abbr(word)
          vals = self.words.get(abbr)
          return vals is None or (len(vals) == 1 and word in vals)

      def _word_abbr(self, word: str) -> str:
          n = len(word)
          if n < 3:
              return word
          return f'{word[0]}{n - 2}{word[n - 1]}'


  # Your ValidWordAbbr object will be instantiated and called as such:
  # obj = ValidWordAbbr(dictionary)
  # param_1 = obj.isUnique(word)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class ValidWordAbbr {
      private Map<String, Set<String>> words;

      public ValidWordAbbr(String[] dictionary) {
          words = new HashMap<>();
          for (String word : dictionary) {
              String abbr = wordAbbr(word);
              Set<String> vals = words.getOrDefault(abbr, new HashSet<>());
              vals.add(word);
              words.put(abbr, vals);
          }
      }

      public boolean isUnique(String word) {
          String abbr = wordAbbr(word);
          Set<String> vals = words.get(abbr);
          return vals == null || (vals.size() == 1 && vals.contains(word));
      }

      private String wordAbbr(String word) {
          int n = word.length();
          if (n < 3) {
              return word;
          }
          StringBuilder sb = new StringBuilder();
          sb.append(word.charAt(0)).append(n - 2).append(word.charAt(n - 1));
          return sb.toString();
      }
  }

  /**
   * Your ValidWordAbbr object will be instantiated and called as such:
   * ValidWordAbbr obj = new ValidWordAbbr(dictionary);
   * boolean param_1 = obj.isUnique(word);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
