* [[https://leetcode-cn.com/problems/sliding-window-maximum][239.
滑动窗口最大值]]
  :PROPERTIES:
  :CUSTOM_ID: 滑动窗口最大值
  :END:
[[./solution/0200-0299/0239.Sliding Window Maximum/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组
nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的
k 个数字。滑动窗口每次只向右移动一位。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回滑动窗口中的最大值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [1,3,-1,-3,5,3,6,7], k = 3
  <b>输出：</b>[3,3,5,5,6,7]
  <b>解释：</b>
  滑动窗口的位置                最大值
  ---------------               -----
  [1  3  -1] -3  5  3  6  7       <strong>3</strong>
   1 [3  -1  -3] 5  3  6  7       <strong>3</strong>
   1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>
   1  3  -1 [-3  5  3] 6  7       <strong>5</strong>
   1  3  -1  -3 [5  3  6] 7       <strong>6</strong>
   1  3  -1  -3  5 [3  6  7]      <strong>7</strong>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [1], k = 1
  <b>输出：</b>[1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [1,-1], k = 1
  <b>输出：</b>[1,-1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [9,11], k = 2
  <b>输出：</b>[11]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [4,-2], k = 2
  <b>输出：</b>[4]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} k
   * @return {number[]}
   */
  var maxSlidingWindow = function (nums, k) {
      let len = nums.length;
      if (len < k) return [];
      let res = [], win = [];
      for (let i = 0; i < k; i++) {
          while (win.length > 0 && nums[i] >= nums[win[win.length - 1]])
              win.pop();
          win.push(i);
      }
      res.push(nums[win[0]]);
      for (let i = k; i < len; i++) {
          while (win.length > 0 && nums[i] >= nums[win[win.length - 1]])
              win.pop();
          if (win.length > 0 && win[0] < i - k + 1)
              win.shift();
          win.push(i);
          res.push(nums[win[0]]);
      }
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
