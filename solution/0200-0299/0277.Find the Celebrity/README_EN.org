* [[https://leetcode.com/problems/find-the-celebrity][277. Find the
Celebrity]]
  :PROPERTIES:
  :CUSTOM_ID: find-the-celebrity
  :END:
[[./solution/0200-0299/0277.Find the Celebrity/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Suppose you are at a party with n people (labeled from 0 to n - 1), and
among them, there may exist one celebrity. The definition of a celebrity
is that all the other n - 1 people know him/her, but he/she does not
know any of them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Now you want to find out who the celebrity is or verify that there is
not one. The only thing you are allowed to do is to ask questions like:
"Hi, A. Do you know B?" to get information about whether A knows B. You
need to find out the celebrity (or verify there is not one) by asking as
few questions as possible (in the asymptotic sense).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are given a helper function bool knows(a, b) which tells you whether
A knows B. Implement a function int findCelebrity(n). There will be
exactly one celebrity if he/she is in the party. Return the celebrity's
label if there is a celebrity in the party. If there is no celebrity,
return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> graph = [[1,1,0],[0,1,0],[1,1,1]]
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> graph = [[1,0,1],[1,1,0],[0,1,1]]
  <strong>Output:</strong> -1
  <strong>Explanation:</strong> There is no celebrity.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == graph.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == graph[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

graph[i][j] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

graph[i][i] == 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: If the maximum number of allowed calls to the API knows is 3
* n, could you find a solution without exceeding the maximum number of
calls?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
