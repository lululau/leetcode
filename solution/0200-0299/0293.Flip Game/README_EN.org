* [[https://leetcode.com/problems/flip-game][293. Flip Game]]
  :PROPERTIES:
  :CUSTOM_ID: flip-game
  :END:
[[./solution/0200-0299/0293.Flip Game/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are playing a Flip Game with your friend.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are given a string currentState that contains only '+' and '-'. You
and your friend take turns to flip two consecutive "++" into "--". The
game ends when a person can no longer make a move, and therefore the
other person will be the winner.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return all possible states of the string currentState after one valid
move. You may return the answer in any order. If there is no valid move,
return an empty list [].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> currentState = &quot;++++&quot;
  <strong>Output:</strong> [&quot;--++&quot;,&quot;+--+&quot;,&quot;++--&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> currentState = &quot;+&quot;
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= currentState.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

currentState[i] is either '+' or '-'.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def generatePossibleNextMoves(self, s: str) -> List[str]:
          if not s or len(s) < 2:
              return []
          n = len(s)
          res = []
          for i in range(n - 1):
              if s[i] == '+' and s[i + 1] == '+':
                  res.append(s[:i] + "--" + s[i + 2:])
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<String> generatePossibleNextMoves(String s) {
          int n;
          if (s == null || (n = s.length()) < 2) return Collections.emptyList();
          List<String> res = new ArrayList<>();
          for (int i = 0; i < n - 1; ++i) {
              if (s.charAt(i) == '+' && s.charAt(i + 1) == '+') {
                  StringBuilder sb = new StringBuilder(s);
                  sb.replace(i, i + 2, "--");
                  res.add(sb.toString());
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
