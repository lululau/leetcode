* [[https://leetcode-cn.com/problems/flip-game][293. 翻转游戏]]
  :PROPERTIES:
  :CUSTOM_ID: 翻转游戏
  :END:
[[./solution/0200-0299/0293.Flip Game/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你和朋友玩一个叫做「翻转游戏」的游戏。游戏规则如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 currentState ，其中只含 '+' 和 '-' 。你和朋友轮流将 连续
的两个 "++" 反转成 "--"
。当一方无法进行有效的翻转时便意味着游戏结束，则另一方获胜。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

计算并返回 一次有效操作 后，字符串 currentState
所有的可能状态，返回结果可以按 任意顺序
排列。如果不存在可能的有效操作，请返回一个空列表 [] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>currentState = "++++"
  <strong>输出：</strong>["--++","+--+","++--"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>currentState = "+"
  <strong>输出：</strong>[]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= currentState.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

currentState[i] 不是 '+' 就是 '-'

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def generatePossibleNextMoves(self, s: str) -> List[str]:
          if not s or len(s) < 2:
              return []
          n = len(s)
          res = []
          for i in range(n - 1):
              if s[i] == '+' and s[i + 1] == '+':
                  res.append(s[:i] + "--" + s[i + 2:])
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public List<String> generatePossibleNextMoves(String s) {
          int n;
          if (s == null || (n = s.length()) < 2) return Collections.emptyList();
          List<String> res = new ArrayList<>();
          for (int i = 0; i < n - 1; ++i) {
              if (s.charAt(i) == '+' && s.charAt(i + 1) == '+') {
                  StringBuilder sb = new StringBuilder(s);
                  sb.replace(i, i + 2, "--");
                  res.add(sb.toString());
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
