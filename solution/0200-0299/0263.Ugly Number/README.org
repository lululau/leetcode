* [[https://leetcode-cn.com/problems/ugly-number][263. 丑数]]
  :PROPERTIES:
  :CUSTOM_ID: 丑数
  :END:
[[./solution/0200-0299/0263.Ugly Number/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数 n ，请你判断 n 是否为 丑数 。如果是，返回 true ；否则，返回
false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

丑数 就是只包含质因数 2、3 和/或 5 的正整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 6
  <strong>输出：</strong>true
  <strong>解释：</strong>6 = 2 × 3</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 8
  <strong>输出：</strong>true
  <strong>解释：</strong>8 = 2 × 2 × 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 14
  <strong>输出：</strong>false
  <strong>解释：</strong>14 不是丑数，因为它包含了另外一个质因数 <code>7 </code>。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 1
  <strong>输出：</strong>true
  <strong>解释：</strong>1 通常被视为丑数。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= n <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

- 若 =n < 1=，说明 n 一定不是丑数，返回 false。
- 若 =n % 2 == 0=，说明 2 是 n 的因子，此时应 =n /= 2=，然后继续判断 n
  除以 2 后的值的因子。
- 若 =n % 3 == 0=，说明 3 是 n 的因子，此时应 =n /= 3=，然后继续判断 n
  除以 3 后的值的因子。
- 若 =n % 5 == 0=，说明 5 是 n 的因子，此时应 =n /= 5=，然后继续判断 n
  除以 5 后的值的因子。
- 最后，判断 n 是否等于 1，若是，说明 n 的因子只可能包含 2、3、5，返回
  true；否则返回 false。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def isUgly(self, n: int) -> bool:
          if n < 1:
              return False
          while n % 2 == 0:
              n //= 2
          while n % 3 == 0:
              n //= 3
          while n % 5 == 0:
              n //= 5
          return n == 1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean isUgly(int n) {
          if (n < 1) return false;
          while (n % 2 == 0) {
              n /= 2;
          }
          while (n % 3 == 0) {
              n /= 3;
          }
          while (n % 5 == 0) {
              n /= 5;
          }
          return n == 1;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool isUgly(int n) {
          if (n < 1) return false;
          while (n % 2 == 0) {
              n /= 2;
          }
          while (n % 3 == 0) {
              n /= 3;
          }
          while (n % 5 == 0) {
              n /= 5;
          }
          return n == 1;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number} n
   * @return {boolean}
   */
  var isUgly = function (n) {
    if (n < 1) return false;
    while (n % 2 == 0) {
      n /= 2;
    }
    while (n % 3 == 0) {
      n /= 3;
    }
    while (n % 5 == 0) {
      n /= 5;
    }
    return n == 1;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
