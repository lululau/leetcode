* [[https://leetcode-cn.com/problems/find-the-duplicate-number][287.
寻找重复数]]
  :PROPERTIES:
  :CUSTOM_ID: 寻找重复数
  :END:
[[./solution/0200-0299/0287.Find the Duplicate Number/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和
n），可知至少存在一个重复的整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设 nums 只有 一个重复的整数 ，找出 这个重复的数 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,3,4,2,2]
  <strong>输出：</strong>2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [3,1,3,4,2]
  <strong>输出：</strong>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,1]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,1,2]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums.length == n + 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums 中 只有一个整数 出现 两次或多次 ，其余整数均只出现 一次

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如何证明 nums 中至少存在一个重复的数字?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你可以在不修改数组 nums 的情况下解决这个问题吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你可以只用常量级 O(1) 的额外空间解决这个问题吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你可以设计一个时间复杂度小于 O(n2) 的解决方案吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

二分法。

如果值范围在 =[1, mid]= 的数小于等于
mid，说明此范围内没有重复的数，否则说明有重复数。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def findDuplicate(self, nums: List[int]) -> int:
          l, r = 0, len(nums) - 1
          while l < r:
              mid = (l + r) >> 1
              cnt = 0
              for e in nums:
                  if e <= mid:
                      cnt += 1
              if cnt <= mid:
                  l = mid + 1
              else:
                  r = mid
          return l
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int findDuplicate(int[] nums) {
          int l = 1, r = nums.length - 1;
          while (l < r) {
              int mid = (l + r) >>> 1;
              int cnt = 0;
              for (int e : nums) {
                  if (e <= mid) ++cnt;
              }
              if (cnt <= mid) l = mid + 1;
              else r = mid;
          }
          return l;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int findDuplicate(vector<int>& nums) {
          int l = 0, r = nums.size() - 1;
          while (l < r) {
              int mid = l + ((r - l) >> 1);
              int cnt = 0;
              for (auto e : nums) {
                  if (e <= mid) ++cnt;
              }
              if (cnt <= mid) l = mid + 1;
              else r = mid;
          }
          return l;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
