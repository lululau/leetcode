* [[https://leetcode.com/problems/find-the-duplicate-number][287. Find
the Duplicate Number]]
  :PROPERTIES:
  :CUSTOM_ID: find-the-duplicate-number
  :END:
[[./solution/0200-0299/0287.Find the Duplicate Number/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array of integers nums containing n + 1 integers where each
integer is in the range [1, n] inclusive.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

There is only one repeated number in nums, return this repeated number.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,3,4,2,2]
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [3,1,3,4,2]
  <strong>Output:</strong> 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,1]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,1,2]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums.length == n + 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the integers in nums appear only once except for precisely one
integer which appears two or more times.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

How can we prove that at least one duplicate number must exist in nums?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Can you solve the problem without modifying the array nums?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Can you solve the problem using only constant, O(1) extra space?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Can you solve the problem with runtime complexity less than O(n2)?

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def findDuplicate(self, nums: List[int]) -> int:
          l, r = 0, len(nums) - 1
          while l < r:
              mid = (l + r) >> 1
              cnt = 0
              for e in nums:
                  if e <= mid:
                      cnt += 1
              if cnt <= mid:
                  l = mid + 1
              else:
                  r = mid
          return l
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int findDuplicate(int[] nums) {
          int l = 1, r = nums.length - 1;
          while (l < r) {
              int mid = (l + r) >>> 1;
              int cnt = 0;
              for (int e : nums) {
                  if (e <= mid) ++cnt;
              }
              if (cnt <= mid) l = mid + 1;
              else r = mid;
          }
          return l;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int findDuplicate(vector<int>& nums) {
          int l = 0, r = nums.size() - 1;
          while (l < r) {
              int mid = l + ((r - l) >> 1);
              int cnt = 0;
              for (auto e : nums) {
                  if (e <= mid) ++cnt;
              }
              if (cnt <= mid) l = mid + 1;
              else r = mid;
          }
          return l;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
