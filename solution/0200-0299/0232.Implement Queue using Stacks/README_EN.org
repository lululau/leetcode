* [[https://leetcode.com/problems/implement-queue-using-stacks][232.
Implement Queue using Stacks]]
  :PROPERTIES:
  :CUSTOM_ID: implement-queue-using-stacks
  :END:
[[./solution/0200-0299/0232.Implement Queue using Stacks/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement a first in first out (FIFO) queue using only two stacks. The
implemented queue should support all the functions of a normal queue
(push, peek, pop, and empty).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the MyQueue class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

void push(int x) Pushes element x to the back of the queue.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int pop() Removes the element from the front of the queue and returns
it.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int peek() Returns the element at the front of the queue.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean empty() Returns true if the queue is empty, false otherwise.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Notes:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

You must use only standard operations of a stack, which means only push
to top, peek/pop from top, size, and is empty operations are valid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Depending on your language, the stack may not be supported natively. You
may simulate a stack using a list or deque (double-ended queue) as long
as you use only a stack's standard operations.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Follow-up: Can you implement the queue such that each operation is
amortized O(1) time complexity? In other words, performing n operations
will take overall O(n) time even if one of those operations may take
longer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]
  [[], [1], [2], [], [], []]
  <strong>Output</strong>
  [null, null, null, 1, 1, false]

  <strong>Explanation</strong>
  MyQueue myQueue = new MyQueue();
  myQueue.push(1); // queue is: [1]
  myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
  myQueue.peek(); // return 1
  myQueue.pop(); // return 1, queue is [2]
  myQueue.empty(); // return false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= x <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 100 calls will be made to push, pop, peek, and empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the calls to pop and peek are valid.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class MyQueue:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.s1 = []
          self.s2 = []


      def push(self, x: int) -> None:
          """
          Push element x to the back of queue.
          """
          self.s1.append(x)


      def pop(self) -> int:
          """
          Removes the element from in front of queue and returns that element.
          """
          self._move()
          return self.s2.pop()

      def peek(self) -> int:
          """
          Get the front element.
          """
          self._move()
          return self.s2[-1]


      def empty(self) -> bool:
          """
          Returns whether the queue is empty.
          """
          return len(self.s1) + len(self.s2) == 0


      def _move(self):
          """
          Move elements from s1 to s2.
          """
          if len(self.s2) == 0:
              while len(self.s1) > 0:
                  self.s2.append(self.s1.pop())


  # Your MyQueue object will be instantiated and called as such:
  # obj = MyQueue()
  # obj.push(x)
  # param_2 = obj.pop()
  # param_3 = obj.peek()
  # param_4 = obj.empty()
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class MyQueue {

      private Deque<Integer> s1 = new ArrayDeque<>();
      private Deque<Integer> s2 = new ArrayDeque<>();

      /** Initialize your data structure here. */
      public MyQueue() {

      }

      /** Push element x to the back of queue. */
      public void push(int x) {
          s1.push(x);
      }

      /** Removes the element from in front of queue and returns that element. */
      public int pop() {
          move();
          return s2.pop();
      }

      /** Get the front element. */
      public int peek() {
          move();
          return s2.peek();
      }

      /** Returns whether the queue is empty. */
      public boolean empty() {
          return s1.isEmpty() && s2.isEmpty();
      }

      /** Move elements from s1 to s2. */
      private void move() {
          if (s2.isEmpty()) {
              while (!s1.isEmpty()) {
                  s2.push(s1.pop());
              }
          }
      }
  }

  /**
   * Your MyQueue object will be instantiated and called as such:
   * MyQueue obj = new MyQueue();
   * obj.push(x);
   * int param_2 = obj.pop();
   * int param_3 = obj.peek();
   * boolean param_4 = obj.empty();
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
