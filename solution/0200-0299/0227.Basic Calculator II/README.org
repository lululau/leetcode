* [[https://leetcode-cn.com/problems/basic-calculator-ii][227.
基本计算器 II]]
  :PROPERTIES:
  :CUSTOM_ID: 基本计算器-ii
  :END:
[[./solution/0200-0299/0227.Basic Calculator II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

整数除法仅保留整数部分。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "3+2*2"
  <strong>输出：</strong>7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = " 3/2 "
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = " 3+5 / 2 "
  <strong>输出：</strong>5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 3 * 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 由整数和算符 ('+', '-', '*','/') 组成，中间由一些空格隔开

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 表示一个 有效表达式

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

表达式中的所有整数都是非负整数，且在范围 [0, 231 - 1] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目数据保证答案是一个 32-bit 整数

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

遍历字符串 s，并用变量 =preSign=
记录每个数字之前的运算符，对于第一个数字，其之前的运算符视为加号。每次遍历到数字末尾时，根据
=preSign= 来决定计算方式：

- 加号：将数字压入栈；
- 减号：将数字的相反数压入栈；
- 乘除号：计算数字与栈顶元素，并将栈顶元素替换为计算结果。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def calculate(self, s: str) -> int:
          num, n = 0, len(s)
          pre_sign = '+'
          stack = []
          for i in range(n):
              if s[i].isdigit():
                  num = num * 10 + int(s[i])
              if i == n - 1 or (not s[i].isdigit() and s[i] != ' '):
                  if pre_sign == '+':
                      stack.append(num)
                  elif pre_sign == '-':
                      stack.append(-num)
                  elif pre_sign == '*':
                      stack.append(stack.pop() * num)
                  else:
                      stack.append(int(stack.pop() / num))
                  pre_sign = s[i]
                  num = 0
          res = 0
          while stack:
              res += stack.pop()
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int calculate(String s) {
          int num = 0;
          char preSign = '+';
          Deque<Integer> stack = new ArrayDeque<>();
          for (int i = 0, n = s.length(); i < n; ++i) {
              if (Character.isDigit(s.charAt(i))) {
                  num = num * 10 + (s.charAt(i) - '0');
              }
              if (i == n - 1 || (!Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ')) {
                  switch (preSign) {
                      case '+':
                          stack.push(num);
                          break;
                      case '-':
                          stack.push(-num);
                          break;
                      case '*':
                          stack.push(stack.pop() * num);
                          break;
                      case '/':
                          stack.push(stack.pop() / num);
                          break;
                  }
                  preSign = s.charAt(i);
                  num = 0;
              }
          }

          int res = 0;
          while (!stack.isEmpty()) {
              res += stack.pop();
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
