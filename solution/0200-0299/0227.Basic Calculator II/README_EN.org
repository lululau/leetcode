* [[https://leetcode.com/problems/basic-calculator-ii][227. Basic
Calculator II]]
  :PROPERTIES:
  :CUSTOM_ID: basic-calculator-ii
  :END:
[[./solution/0200-0299/0227.Basic Calculator II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s which represents an expression, evaluate this
expression and return its value. 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The integer division should truncate toward zero.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> s = "3+2*2"
  <strong>Output:</strong> 7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> s = " 3/2 "
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> s = " 3+5 / 2 "
  <strong>Output:</strong> 5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 3 * 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consists of integers and operators ('+', '-', '*', '/') separated by
some number of spaces.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s represents a valid expression.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the integers in the expression are non-negative integers in the
range [0, 231 - 1].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The answer is guaranteed to fit in a 32-bit integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def calculate(self, s: str) -> int:
          num, n = 0, len(s)
          pre_sign = '+'
          stack = []
          for i in range(n):
              if s[i].isdigit():
                  num = num * 10 + int(s[i])
              if i == n - 1 or (not s[i].isdigit() and s[i] != ' '):
                  if pre_sign == '+':
                      stack.append(num)
                  elif pre_sign == '-':
                      stack.append(-num)
                  elif pre_sign == '*':
                      stack.append(stack.pop() * num)
                  else:
                      stack.append(int(stack.pop() / num))
                  pre_sign = s[i]
                  num = 0
          res = 0
          while stack:
              res += stack.pop()
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int calculate(String s) {
          int num = 0;
          char preSign = '+';
          Deque<Integer> stack = new ArrayDeque<>();
          for (int i = 0, n = s.length(); i < n; ++i) {
              if (Character.isDigit(s.charAt(i))) {
                  num = num * 10 + (s.charAt(i) - '0');
              }
              if (i == n - 1 || (!Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ')) {
                  switch (preSign) {
                      case '+':
                          stack.push(num);
                          break;
                      case '-':
                          stack.push(-num);
                          break;
                      case '*':
                          stack.push(stack.pop() * num);
                          break;
                      case '/':
                          stack.push(stack.pop() / num);
                          break;
                  }
                  preSign = s.charAt(i);
                  num = 0;
              }
          }

          int res = 0;
          while (!stack.isEmpty()) {
              res += stack.pop();
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
