* [[https://leetcode.com/problems/missing-number][268. Missing Number]]
  :PROPERTIES:
  :CUSTOM_ID: missing-number
  :END:
[[./solution/0200-0299/0268.Missing Number/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array nums containing n distinct numbers in the range [0, n],
return the only number in the range that is missing from the array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you implement a solution using only O(1) extra space
complexity and O(n) runtime complexity?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [3,0,1]
  <strong>Output:</strong> 2
  <b>Explanation</b><strong>:</strong> n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [0,1]
  <strong>Output:</strong> 2
  <b>Explanation</b><strong>:</strong> n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [9,6,4,2,3,5,7,0,1]
  <strong>Output:</strong> 8
  <b>Explanation</b><strong>:</strong> n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [0]
  <strong>Output:</strong> 1
  <b>Explanation</b><strong>:</strong> n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums[i] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the numbers of nums are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def missingNumber(self, nums: List[int]) -> int:
          res = len(nums)
          for i, v in enumerate(nums):
              res ^= (i ^ v)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

- XOR

#+begin_src java
  class Solution {
      public int missingNumber(int[] nums) {
          int res = nums.length;
          for (int i = 0, n = res; i < n; ++i) {
              res ^= (i ^ nums[i]);
          }
          return res;
      }
  }
#+end_src

- Math

#+begin_src java
  class Solution {
      public int missingNumber(int[] nums) {
          int res = nums.length;
          for (int i = 0, n = res; i < n; ++i) {
              res += (i - nums[i]);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
