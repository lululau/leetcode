* [[https://leetcode-cn.com/problems/3sum-smaller][259. 较小的三数之和]]
  :PROPERTIES:
  :CUSTOM_ID: 较小的三数之和
  :END:
[[./solution/0200-0299/0259.3Sum Smaller/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个长度为 n 的整数数组和一个目标值 target，寻找能够使条件 nums[i] +
nums[j] + nums[k] < target 成立的三元组  i, j, k 个数（0 <= i < j < k <
n）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong><em>nums</em> = <code>[-2,0,1,3]</code>, <em>target</em> = 2
  <strong>输出: </strong>2 
  <strong>解释: </strong>因为一共有两个三元组满足累加和小于 2:
  &nbsp;    [-2,0,1]
       [-2,0,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：是否能在 O(n2) 的时间复杂度内解决？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

双指针解决。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def threeSumSmaller(self, nums: List[int], target: int) -> int:
          def threeSumSmaller(nums, start, end, target):
              count = 0
              while start < end:
                  if nums[start] + nums[end] < target:
                      count += (end - start)
                      start += 1
                  else:
                      end -= 1
              return count

          nums.sort()
          n, count = len(nums), 0
          for i in range(n - 2):
              count += threeSumSmaller(nums, i + 1, n - 1, target - nums[i])
          return count
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int threeSumSmaller(int[] nums, int target) {
          Arrays.sort(nums);
          int n = nums.length;
          int count = 0;
          for (int i = 0; i < n - 2; ++i) {
              count += threeSumSmaller(nums, i + 1, n - 1, target - nums[i]);
          }
          return count;
      }

      private int threeSumSmaller(int[] nums, int start, int end, int target) {
          int count = 0;
          while (start < end) {
              if (nums[start] + nums[end] < target) {
                  count += (end - start);
                  ++start;
              } else {
                  --end;
              }
          }
          return count;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} target
   * @return {number}
   */
  var threeSumSmaller = function (nums, target) {
      let len = nums.length;
      if (len < 3) return 0;
      nums.sort((a, b) => a - b)
      let res = 0;
      for (let i = 0; i < len - 2; i++) {
          let left = i + 1, right = len - 1;
          if (nums[i] + nums[left] + nums[i + 2] >= target) break;
          while (left < right) {
              if (nums[i] + nums[left] + nums[right] < target) {
                  res += (right - left);
                  left++;
                  continue;
              } else {
                  right--;
                  continue;
              }
          }
      }
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
