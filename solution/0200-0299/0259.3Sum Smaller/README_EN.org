* [[https://leetcode.com/problems/3sum-smaller][259. 3Sum Smaller]]
  :PROPERTIES:
  :CUSTOM_ID: sum-smaller
  :END:
[[./solution/0200-0299/0259.3Sum Smaller/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array of n integers nums and an integer target, find the number
of index triplets i, j, k with 0 <= i < j < k < n that satisfy the
condition nums[i] + nums[j] + nums[k] < target.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you solve it in O(n2) runtime?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [-2,0,1,3], target = 2
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> Because there are two triplets which sums are less than 2:
  [-2,0,1]
  [-2,0,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [], target = 0
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [0], target = 0
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= n <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= nums[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= target <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def threeSumSmaller(self, nums: List[int], target: int) -> int:
          def threeSumSmaller(nums, start, end, target):
              count = 0
              while start < end:
                  if nums[start] + nums[end] < target:
                      count += (end - start)
                      start += 1
                  else:
                      end -= 1
              return count

          nums.sort()
          n, count = len(nums), 0
          for i in range(n - 2):
              count += threeSumSmaller(nums, i + 1, n - 1, target - nums[i])
          return count
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int threeSumSmaller(int[] nums, int target) {
          Arrays.sort(nums);
          int n = nums.length;
          int count = 0;
          for (int i = 0; i < n - 2; ++i) {
              count += threeSumSmaller(nums, i + 1, n - 1, target - nums[i]);
          }
          return count;
      }

      private int threeSumSmaller(int[] nums, int start, int end, int target) {
          int count = 0;
          while (start < end) {
              if (nums[start] + nums[end] < target) {
                  count += (end - start);
                  ++start;
              } else {
                  --end;
              }
          }
          return count;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} target
   * @return {number}
   */
  var threeSumSmaller = function (nums, target) {
      let len = nums.length;
      if (len < 3) return 0;
      nums.sort((a, b) => a - b)
      let res = 0;
      for (let i = 0; i < len - 2; i++) {
          let left = i + 1, right = len - 1;
          if (nums[i] + nums[left] + nums[i + 2] >= target) break;
          while (left < right) {
              if (nums[i] + nums[left] + nums[right] < target) {
                  res += (right - left);
                  left++;
                  continue;
              } else {
                  right--;
                  continue;
              }
          }
      }
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
