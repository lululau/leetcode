* [[https://leetcode.com/problems/valid-anagram][242. Valid Anagram]]
  :PROPERTIES:
  :CUSTOM_ID: valid-anagram
  :END:
[[./solution/0200-0299/0242.Valid Anagram/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two strings s and t, return true if t is an anagram of s, and
false otherwise.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> s = "anagram", t = "nagaram"
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> s = "rat", t = "car"
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length, t.length <= 5 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s and t consist of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: What if the inputs contain Unicode characters? How would you
adapt your solution to such a case?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def isAnagram(self, s: str, t: str) -> bool:
          if len(s) != len(t):
              return False
          n = len(s)
          chars = [0] * 26
          for i in range(n):
              chars[ord(s[i]) - ord('a')] += 1
              chars[ord(t[i]) - ord('a')] -= 1
          for i in range(26):
              if chars[i] != 0:
                  return False
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean isAnagram(String s, String t) {
          int n;
          if ((n = s.length()) != t.length()) {
              return false;
          }
          int[] chars = new int[26];
          for (int i = 0; i < n; ++i) {
              ++chars[s.charAt(i) - 'a'];
              --chars[t.charAt(i) - 'a'];
          }
          for (int i = 0; i < 26; ++i) {
              if (chars[i] != 0) {
                  return false;
              }
          }
          return true;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
