* [[https://leetcode.com/problems/move-zeroes][283. Move Zeroes]]
  :PROPERTIES:
  :CUSTOM_ID: move-zeroes
  :END:
[[./solution/0200-0299/0283.Move Zeroes/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums, move all 0's to the end of it while
maintaining the relative order of the non-zero elements.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that you must do this in-place without making a copy of the array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [0,1,0,3,12]
  <strong>Output:</strong> [1,3,12,0,0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [0]
  <strong>Output:</strong> [0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= nums[i] <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you minimize the total number of operations done?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def moveZeroes(self, nums: List[int]) -> None:
          """
          Do not return anything, modify nums in-place instead.
          """
          if not nums:
              return
          n = len(nums)
          zero_count = 0
          for i in range(n):
              if nums[i] == 0:
                  zero_count += 1
              else:
                  nums[i - zero_count] = nums[i]
          while zero_count > 0:
              nums[n - zero_count] = 0
              zero_count -= 1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public void moveZeroes(int[] nums) {
          int n;
          if (nums == null || (n = nums.length) < 1) {
              return;
          }
          int zeroCount = 0;
          for (int i = 0; i < n; ++i) {
              if (nums[i] == 0) {
                  ++zeroCount;
              } else {
                  nums[i - zeroCount] = nums[i];
              }
          }
          while (zeroCount > 0) {
              nums[n - zeroCount--] = 0;
          }
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {void} Do not return anything, modify nums in-place instead.
   */
  var moveZeroes = function (nums) {
      if (!nums.length) return nums;
      let j = 0;
      for (i = 0; i < nums.length; i++) {
          if (nums[i]) {
              if (i > j) [nums[i], nums[j]] = [nums[j], nums[i]];
              j++;
          }
      }
      return nums;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
