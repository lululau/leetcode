* [[https://leetcode.com/problems/design-add-and-search-words-data-structure][211.
Design Add and Search Words Data Structure]]
  :PROPERTIES:
  :CUSTOM_ID: design-add-and-search-words-data-structure
  :END:
[[./solution/0200-0299/0211.Design Add and Search Words Data Structure/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a data structure that supports adding new words and finding if a
string matches any previously added string.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the WordDictionary class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

WordDictionary() Initializes the object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void addWord(word) Adds word to the data structure, it can be matched
later.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool search(word) Returns true if there is any string in the data
structure that matches word or false otherwise. word may contain dots
'.' where dots can be matched with any letter.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;WordDictionary&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;]
  [[],[&quot;bad&quot;],[&quot;dad&quot;],[&quot;mad&quot;],[&quot;pad&quot;],[&quot;bad&quot;],[&quot;.ad&quot;],[&quot;b..&quot;]]
  <strong>Output</strong>
  [null,null,null,null,false,true,true,true]

  <strong>Explanation</strong>
  WordDictionary wordDictionary = new WordDictionary();
  wordDictionary.addWord(&quot;bad&quot;);
  wordDictionary.addWord(&quot;dad&quot;);
  wordDictionary.addWord(&quot;mad&quot;);
  wordDictionary.search(&quot;pad&quot;); // return False
  wordDictionary.search(&quot;bad&quot;); // return True
  wordDictionary.search(&quot;.ad&quot;); // return True
  wordDictionary.search(&quot;b..&quot;); // return True
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= word.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word in addWord consists lower-case English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word in search consist of  '.' or lower-case English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 50000 calls will be made to addWord and search.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Trie:

      def __init__(self):
          self.children = [None] * 26
          self.is_end = False


  class WordDictionary:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.trie = Trie()

      def addWord(self, word: str) -> None:
          node = self.trie
          for c in word:
              index = ord(c) - ord('a')
              if node.children[index] is None:
                  node.children[index] = Trie()
              node = node.children[index]
          node.is_end = True

      def search(self, word: str) -> bool:
          return self._search(word, self.trie)

      def _search(self, word: str, node: Trie) -> bool:
          for i in range(len(word)):
              c = word[i]
              index = ord(c) - ord('a')
              if c != '.' and node.children[index] is None:
                  return False
              if c == '.':
                  for j in range(26):
                      if node.children[j] is not None and self._search(word[i + 1:], node.children[j]):
                          return True
                  return False
              node = node.children[index]
          return node.is_end

  # Your WordDictionary object will be instantiated and called as such:
  # obj = WordDictionary()
  # obj.addWord(word)
  # param_2 = obj.search(word)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class WordDictionary {
      class Trie {
          Trie[] children;
          boolean isEnd;
          Trie() {
              children = new Trie[26];
              isEnd = false;
          }
      }

      private Trie trie;

      /** Initialize your data structure here. */
      public WordDictionary() {
          trie = new Trie();
      }

      public void addWord(String word) {
          Trie node = trie;
          for (int i = 0; i < word.length(); ++i) {
              char c = word.charAt(i);
              int index = c - 'a';
              if (node.children[index] == null) {
                  node.children[index] = new Trie();
              }
              node = node.children[index];
          }
          node.isEnd = true;
      }

      public boolean search(String word) {
          return search(word, trie);
      }

      private boolean search(String word, Trie node) {
          for (int i = 0; i < word.length(); ++i) {
              char c = word.charAt(i);
              int index = c - 'a';
              if (c != '.' && node.children[index] == null) {
                  return false;
              }
              if (c == '.') {
                  for (int j = 0; j < 26; ++j) {
                      if (node.children[j] != null && search(word.substring(i + 1), node.children[j])) {
                          return true;
                      }
                  }
                  return false;
              }
              node = node.children[index];
          }
          return node.isEnd;
      }
  }

  /**
   * Your WordDictionary object will be instantiated and called as such:
   * WordDictionary obj = new WordDictionary();
   * obj.addWord(word);
   * boolean param_2 = obj.search(word);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
