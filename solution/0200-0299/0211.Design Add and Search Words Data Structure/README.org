* [[https://leetcode-cn.com/problems/design-add-and-search-words-data-structure][211.
添加与搜索单词 - 数据结构设计]]
  :PROPERTIES:
  :CUSTOM_ID: 添加与搜索单词---数据结构设计
  :END:
[[./solution/0200-0299/0211.Design Add and Search Words Data Structure/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

请你设计一个数据结构，支持 添加新单词 和
查找字符串是否与任何先前添加的字符串匹配 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现词典类 WordDictionary ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

WordDictionary() 初始化词典对象

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void addWord(word) 将 word 添加到数据结构中，之后可以对它进行匹配

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool search(word) 如果数据结构中存在字符串与 word 匹配，则返回 true
；否则，返回  false 。word 中可能包含一些 '.' ，每个 .
都可以表示任何一个字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
  [[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
  <strong>输出：</strong>
  [null,null,null,null,false,true,true,true]

  <strong>解释：</strong>
  WordDictionary wordDictionary = new WordDictionary();
  wordDictionary.addWord("bad");
  wordDictionary.addWord("dad");
  wordDictionary.addWord("mad");
  wordDictionary.search("pad"); // return False
  wordDictionary.search("bad"); // return True
  wordDictionary.search(".ad"); // return True
  wordDictionary.search("b.."); // return True
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= word.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

addWord 中的 word 由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

search 中的 word 由 '.' 或小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 50000 次 addWord 和 search

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"前缀树"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Trie:

      def __init__(self):
          self.children = [None] * 26
          self.is_end = False


  class WordDictionary:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.trie = Trie()

      def addWord(self, word: str) -> None:
          node = self.trie
          for c in word:
              index = ord(c) - ord('a')
              if node.children[index] is None:
                  node.children[index] = Trie()
              node = node.children[index]
          node.is_end = True

      def search(self, word: str) -> bool:
          return self._search(word, self.trie)

      def _search(self, word: str, node: Trie) -> bool:
          for i in range(len(word)):
              c = word[i]
              index = ord(c) - ord('a')
              if c != '.' and node.children[index] is None:
                  return False
              if c == '.':
                  for j in range(26):
                      if node.children[j] is not None and self._search(word[i + 1:], node.children[j]):
                          return True
                  return False
              node = node.children[index]
          return node.is_end

  # Your WordDictionary object will be instantiated and called as such:
  # obj = WordDictionary()
  # obj.addWord(word)
  # param_2 = obj.search(word)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class WordDictionary {
      class Trie {
          Trie[] children;
          boolean isEnd;
          Trie() {
              children = new Trie[26];
              isEnd = false;
          }
      }

      private Trie trie;

      /** Initialize your data structure here. */
      public WordDictionary() {
          trie = new Trie();
      }

      public void addWord(String word) {
          Trie node = trie;
          for (int i = 0; i < word.length(); ++i) {
              char c = word.charAt(i);
              int index = c - 'a';
              if (node.children[index] == null) {
                  node.children[index] = new Trie();
              }
              node = node.children[index];
          }
          node.isEnd = true;
      }

      public boolean search(String word) {
          return search(word, trie);
      }

      private boolean search(String word, Trie node) {
          for (int i = 0; i < word.length(); ++i) {
              char c = word.charAt(i);
              int index = c - 'a';
              if (c != '.' && node.children[index] == null) {
                  return false;
              }
              if (c == '.') {
                  for (int j = 0; j < 26; ++j) {
                      if (node.children[j] != null && search(word.substring(i + 1), node.children[j])) {
                          return true;
                      }
                  }
                  return false;
              }
              node = node.children[index];
          }
          return node.isEnd;
      }
  }

  /**
   * Your WordDictionary object will be instantiated and called as such:
   * WordDictionary obj = new WordDictionary();
   * obj.addWord(word);
   * boolean param_2 = obj.search(word);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
