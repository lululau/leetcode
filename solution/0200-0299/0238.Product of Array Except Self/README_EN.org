* [[https://leetcode.com/problems/product-of-array-except-self][238.
Product of Array Except Self]]
  :PROPERTIES:
  :CUSTOM_ID: product-of-array-except-self
  :END:
[[./solution/0200-0299/0238.Product of Array Except Self/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums, return an array answer such that answer[i]
is equal to the product of all the elements of nums except nums[i].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The product of any prefix or suffix of nums is guaranteed to fit in a
32-bit integer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,2,3,4]
  <strong>Output:</strong> [24,12,8,6]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [-1,1,0,-3,3]
  <strong>Output:</strong> [0,0,9,0,0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= nums.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-30 <= nums[i] <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The product of any prefix or suffix of nums is guaranteed to fit in a
32-bit integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Could you solve it in O(n) time complexity and without using division?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Could you solve it with O(1) constant space complexity? (The output
array does not count as extra space for space complexity analysis.)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def productExceptSelf(self, nums: List[int]) -> List[int]:
          n = len(nums)
          output = [1 for _ in nums]
          left = right = 1
          for i in range(n):
              output[i] = left
              left *= nums[i]
          for i in range(n - 1, -1, -1):
              output[i] *= right
              right *= nums[i]
          return output
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[] productExceptSelf(int[] nums) {
          int n = nums.length;
          int[] output = new int[n];
          for (int i = 0, left = 1; i < n; ++i) {
              output[i] = left;
              left *= nums[i];
          }
          for (int i = n - 1, right = 1; i >= 0; --i) {
              output[i] *= right;
              right *= nums[i];
          }
          return output;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number[]}
   */
  var productExceptSelf = function (nums) {
    const n = nums.length;
    let output = new Array(n);
    for (let i = 0, left = 1; i < n; ++i) {
      output[i] = left;
      left *= nums[i];
    }
    for (let i = n - 1, right = 1; i >= 0; --i) {
      output[i] *= right;
      right *= nums[i];
    }
    return output;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
