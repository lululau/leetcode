* [[https://leetcode-cn.com/problems/product-of-array-except-self][238.
除自身以外数组的乘积]]
  :PROPERTIES:
  :CUSTOM_ID: 除自身以外数组的乘积
  :END:
[[./solution/0200-0299/0238.Product of Array Except Self/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个长度为 n 的整数数组 nums，其中 n > 1，返回输出数组 output ，其中
output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> <code>[1,2,3,4]</code>
  <strong>输出:</strong> <code>[24,12,8,6]</code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在
32 位整数范围内。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶： 你可以在常数空间复杂度内完成这个题目吗？（
出于对空间复杂度分析的目的，输出数组不被视为额外空间。）

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def productExceptSelf(self, nums: List[int]) -> List[int]:
          n = len(nums)
          output = [1 for _ in nums]
          left = right = 1
          for i in range(n):
              output[i] = left
              left *= nums[i]
          for i in range(n - 1, -1, -1):
              output[i] *= right
              right *= nums[i]
          return output
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[] productExceptSelf(int[] nums) {
          int n = nums.length;
          int[] output = new int[n];
          for (int i = 0, left = 1; i < n; ++i) {
              output[i] = left;
              left *= nums[i];
          }
          for (int i = n - 1, right = 1; i >= 0; --i) {
              output[i] *= right;
              right *= nums[i];
          }
          return output;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number[]}
   */
  var productExceptSelf = function (nums) {
    const n = nums.length;
    let output = new Array(n);
    for (let i = 0, left = 1; i < n; ++i) {
      output[i] = left;
      left *= nums[i];
    }
    for (let i = n - 1, right = 1; i >= 0; --i) {
      output[i] *= right;
      right *= nums[i];
    }
    return output;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
