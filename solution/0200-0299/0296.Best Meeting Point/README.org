* [[https://leetcode-cn.com/problems/best-meeting-point][296.
最佳的碰头地点]]
  :PROPERTIES:
  :CUSTOM_ID: 最佳的碰头地点
  :END:
[[./solution/0200-0299/0296.Best Meeting Point/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有一队人（两人或以上）想要在一个地方碰面，他们希望能够最小化他们的总行走距离。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 2D 网格，其中各个格子内的值要么是 0，要么是 1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

1
表示某个人的家所处的位置。这里，我们将使用 曼哈顿距离 来计算，其中 distance(p1,
p2) = |p2.x - p1.x| + |p2.y - p1.y|。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> 

  1 - 0 - 0 - 0 - 1
  |   |   |   |   |
  0 - 0 - 0 - 0 - 0
  |   |   |   |   |
  0 - 0 - 1 - 0 - 0

  <strong>输出: 6 

  解析: </strong>给定的三个人分别住在<code>(0,0)<span style="">，</span></code><code>(0,4) </code>和 <code>(2,2)</code>:
  &nbsp;    <code>(0,2)</code> 是一个最佳的碰面点，其总行走距离为 2 + 2 + 2 = 6，最小，因此返回 6。</pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
