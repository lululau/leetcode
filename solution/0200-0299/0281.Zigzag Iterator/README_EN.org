* [[https://leetcode.com/problems/zigzag-iterator][281. Zigzag
Iterator]]
  :PROPERTIES:
  :CUSTOM_ID: zigzag-iterator
  :END:
[[./solution/0200-0299/0281.Zigzag Iterator/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two vectors of integers v1 and v2, implement an iterator to return
their elements alternately.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the ZigzagIterator class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

ZigzagIterator(List<int> v1, List<int> v2) initializes the object with
the two vectors v1 and v2.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean hasNext() returns true if the iterator still has elements, and
false otherwise.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int next() returns the current element of the iterator and moves the
iterator to the next element.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> v1 = [1,2], v2 = [3,4,5,6]
  <strong>Output:</strong> [1,3,2,4,5,6]
  <strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> v1 = [1], v2 = []
  <strong>Output:</strong> [1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> v1 = [], v2 = [1]
  <strong>Output:</strong> [1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= v1.length, v2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= v1.length + v2.length <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= v1[i], v2[i] <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: What if you are given k vectors? How well can your code be
extended to such cases?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Clarification for the follow-up question:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The "Zigzag" order is not clearly defined and is ambiguous for k > 2
cases. If "Zigzag" does not look right to you, replace "Zigzag" with
"Cyclic".

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9]
  <strong>Output:</strong> [1,4,8,2,5,9,3,6,7]
  </pre>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class ZigzagIterator:
      def __init__(self, v1: List[int], v2: List[int]):
          self.cur = 0
          self.size = 2
          self.indexes = [0] * self.size
          self.vectors = [v1, v2]

      def next(self) -> int:
          vector = self.vectors[self.cur]
          index = self.indexes[self.cur]
          res = vector[index]
          self.indexes[self.cur] = index + 1
          self.cur = (self.cur + 1) % self.size
          return res

      def hasNext(self) -> bool:
          start = self.cur
          while self.indexes[self.cur] == len(self.vectors[self.cur]):
              self.cur = (self.cur + 1) % self.size
              if self.cur == start:
                  return False
          return True
          

  # Your ZigzagIterator object will be instantiated and called as such:
  # i, v = ZigzagIterator(v1, v2), []
  # while i.hasNext(): v.append(i.next())
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  public class ZigzagIterator {
      private int cur;
      private int size;
      private List<Integer> indexes = new ArrayList<>();
      private List<List<Integer>> vectors = new ArrayList<>();
      
      public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
          cur = 0;
          size = 2;
          indexes.add(0);
          indexes.add(0);
          vectors.add(v1);
          vectors.add(v2);
      }

      public int next() {
          List<Integer> vector = vectors.get(cur);
          int index = indexes.get(cur);
          int res = vector.get(index);
          indexes.set(cur, index + 1);
          cur = (cur + 1) % size;
          return res;
      }

      public boolean hasNext() {
          int start = cur;
          while (indexes.get(cur) == vectors.get(cur).size()) {
              cur = (cur + 1) % size;
              if (start == cur) {
                  return false;
              }
          }
          return true;
      }
  }

  /**
   * Your ZigzagIterator object will be instantiated and called as such:
   * ZigzagIterator i = new ZigzagIterator(v1, v2);
   * while (i.hasNext()) v[f()] = i.next();
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
