* [[https://leetcode-cn.com/problems/correct-a-binary-tree][1660.
纠正二叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 纠正二叉树
  :END:
[[./solution/1600-1699/1660.Correct a Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你有一棵二叉树，这棵二叉树有个小问题，其中有且只有一个无效节点，它的右子节点错误地指向了与其在同一层且在其右侧的一个其他节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定一棵这样的问题二叉树的根节点 root ，将该无效节点及其所有子节点移除（除被错误指向的节点外），然后返回新二叉树的根结点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

自定义测试用例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

测试用例的输入由三行组成：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

TreeNode root

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int fromNode （在 correctBinaryTree 中不可见）

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int toNode （在 correctBinaryTree 中不可见）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

当以 root 为根的二叉树被解析后，值为 fromNode 的节点 TreeNode 将其右子节点指向值为 toNode 的节点 TreeNode 。然后， root 传入 correctBinaryTree 的参数中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> root = [1,2,3], fromNode = 2, toNode = 3
  <strong>输出:</strong> [1,null,3]
  <strong>解释:</strong> 值为 2 的节点是无效的，所以移除之。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4
  <strong>输出:</strong> [8,3,1,null,null,9,4,null,null,5,6]
  <strong>解释:</strong> 值为 7 的节点是无效的，所以移除这个节点及其子节点 2。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点个数的范围是 [3, 104] 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= Node.val <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有的 Node.val 都是互不相同的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

fromNode != toNode

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

fromNode 和 toNode 将出现在树中的同一层。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

toNode 在 fromNode 的右侧。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

fromNode.right 在测试用例的树中建立后为 null 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
