* [[https://leetcode-cn.com/problems/kth-smallest-instructions][1643. 第
K 条最小指令]]
  :PROPERTIES:
  :CUSTOM_ID: 第-k-条最小指令
  :END:
[[./solution/1600-1699/1643.Kth Smallest Instructions/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

Bob 站在单元格 (0, 0) ，想要前往目的地 destination ：(row, column)
。他只能向 右 或向 下 走。你可以为 Bob 提供导航 指令 来帮助他到达目的地
destination 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

指令 用字符串表示，其中每个字符：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

'H' ，意味着水平向右移动

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

'V' ，意味着竖直向下移动

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

能够为 Bob 导航到目的地 destination 的指令可以有多种，例如，如果目的地
destination 是 (2, 3)，"HHHVV" 和 "HVHVH" 都是有效 指令 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

然而，Bob 很挑剔。因为他的幸运数字是 k，他想要遵循 按字典序排列后的第 k
条最小指令 的导航前往目的地 destination 。k  的编号 从 1 开始 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 destination 和一个整数 k ，请你返回可以为 Bob
提供前往目的地 destination 导航的 按字典序排列后的第 k 条最小指令 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>destination = [2,3], k = 1
  <strong>输出：</strong>"HHHVV"
  <strong>解释：</strong>能前往 (2, 3) 的所有导航指令 <strong>按字典序排列后</strong> 如下所示：
  ["HHHVV", "HHVHV", "HHVVH", "HVHHV", "HVHVH", "HVVHH", "VHHHV", "VHHVH", "VHVHH", "VVHHH"].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>destination = [2,3], k = 2
  <strong>输出：</strong>"HHVHV"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>destination = [2,3], k = 3
  <strong>输出：</strong>"HHVVH"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

destination.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= row, column <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= nCr(row + column, row)，其中 nCr(a, b) 表示组合数，即从 a
个物品中选 b 个物品的不同方案数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
