* [[https://leetcode.com/problems/design-an-expression-tree-with-evaluate-function][1628.
Design an Expression Tree With Evaluate Function]]
  :PROPERTIES:
  :CUSTOM_ID: design-an-expression-tree-with-evaluate-function
  :END:
[[./solution/1600-1699/1628.Design an Expression Tree With Evaluate Function/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the postfix tokens of an arithmetic expression, build and return
the binary expression tree that represents this expression.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Postfix notation is a notation for writing arithmetic expressions in
which the operands (numbers) appear before their operators. For example,
the postfix tokens of the expression 4*(5-(7+2)) are represented in the
array postfix = ["4","5","7","2","+","-","*"].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The class Node is an interface you should use to implement the binary
expression tree. The returned tree will be tested using the evaluate
function, which is supposed to evaluate the tree's value. You should not
remove the Node class; however, you can modify it as you wish, and you
can define other classes to implement it if needed.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A binary expression tree is a kind of binary tree used to represent
arithmetic expressions. Each node of a binary expression tree has either
zero or two children. Leaf nodes (nodes with 0 children) correspond to
operands (numbers), and internal nodes (nodes with two children)
correspond to the operators '+' (addition), '-' (subtraction), '*'
(multiplication), and '/' (division).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It's guaranteed that no subtree will yield a value that exceeds 109 in
absolute value, and all the operations are valid (i.e., no division by
zero).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you design the expression tree such that it is more
modular? For example, is your design able to support additional
operators without making changes to your existing evaluate
implementation?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = [&quot;3&quot;,&quot;4&quot;,&quot;+&quot;,&quot;2&quot;,&quot;*&quot;,&quot;7&quot;,&quot;/&quot;]

  <strong>Output:</strong> 2

  <strong>Explanation:</strong> this expression evaluates to the above binary tree with expression (<code>(3+4)*2)/7) = 14/7 = 2.</code>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = [&quot;4&quot;,&quot;5&quot;,&quot;7&quot;,&quot;2&quot;,&quot;+&quot;,&quot;-&quot;,&quot;*&quot;]

  <strong>Output:</strong> -16

  <strong>Explanation:</strong> this expression evaluates to the above binary tree with expression 4*(5-<code>(2+7)) = 4*(-4) = -16.</code>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = [&quot;4&quot;,&quot;2&quot;,&quot;+&quot;,&quot;3&quot;,&quot;5&quot;,&quot;1&quot;,&quot;-&quot;,&quot;*&quot;,&quot;+&quot;]

  <strong>Output:</strong> 18

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = [&quot;100&quot;,&quot;200&quot;,&quot;+&quot;,&quot;2&quot;,&quot;/&quot;,&quot;5&quot;,&quot;*&quot;,&quot;7&quot;,&quot;+&quot;]

  <strong>Output:</strong> 757

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length < 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s.length is odd.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consists of numbers and the characters '+', '-', '*', and '/'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If s[i] is a number, its integer representation is no more than 105.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that s is a valid expression.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The absolute value of the result and intermediate values will not exceed
109.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that no expression will include division by zero.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
