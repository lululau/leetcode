* [[https://leetcode-cn.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary][1639.
通过给定词典构造目标字符串的方案数]]
  :PROPERTIES:
  :CUSTOM_ID: 通过给定词典构造目标字符串的方案数
  :END:
[[./solution/1600-1699/1639.Number of Ways to Form a Target String Given a Dictionary/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串列表 words 和一个目标字符串 target 。words
中所有字符串都 长度相同  。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你的目标是使用给定的 words 字符串列表按照下述规则构造 target ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

从左到右依次构造 target 的每一个字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

为了得到 target 第 i 个字符（下标从 0 开始），当 target[i] =
words[j][k] 时，你可以使用 words 列表中第 j 个字符串的第 k 个字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

一旦你使用了 words 中第 j 个字符串的第 k 个字符，你不能再使用
words 字符串列表中任意单词的第 x 个字符（x <=
k）。也就是说，所有单词下标小于等于 k 的字符都不能再被使用。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

请你重复此过程直到得到目标字符串 target 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请注意， 在构造目标字符串的过程中，你可以按照上述规定使用 words 列表中
同一个字符串 的 多个字符 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回使用 words 构造 target 的方案数。由于答案可能会很大，请对 109 +
7 取余 后返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

（译者注：此题目求的是有多少个不同的 k 序列，详情请见示例。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>words = ["acca","bbbb","caca"], target = "aba"
  <b>输出：</b>6
  <b>解释：</b>总共有 6 种方法构造目标串。
  "aba" -> 下标为 0 ("<strong>a</strong>cca")，下标为 1 ("b<strong>b</strong>bb")，下标为 3 ("cac<strong>a</strong>")
  "aba" -> 下标为 0 ("<strong>a</strong>cca")，下标为 2 ("bb<strong>b</strong>b")，下标为 3 ("cac<strong>a</strong>")
  "aba" -> 下标为 0 ("<strong>a</strong>cca")，下标为 1 ("b<strong>b</strong>bb")，下标为 3 ("acc<strong>a</strong>")
  "aba" -> 下标为 0 ("<strong>a</strong>cca")，下标为 2 ("bb<strong>b</strong>b")，下标为 3 ("acc<strong>a</strong>")
  "aba" -> 下标为 1 ("c<strong>a</strong>ca")，下标为 2 ("bb<strong>b</strong>b")，下标为 3 ("acc<strong>a</strong>")
  "aba" -> 下标为 1 ("c<strong>a</strong>ca")，下标为 2 ("bb<strong>b</strong>b")，下标为 3 ("cac<strong>a</strong>")
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>words = ["abba","baab"], target = "bab"
  <b>输出：</b>4
  <b>解释：</b>总共有 4 种不同形成 target 的方法。
  "bab" -> 下标为 0 ("<strong>b</strong>aab")，下标为 1 ("b<strong>a</strong>ab")，下标为 2 ("ab<strong>b</strong>a")
  "bab" -> 下标为 0 ("<strong>b</strong>aab")，下标为 1 ("b<strong>a</strong>ab")，下标为 3 ("baa<strong>b</strong>")
  "bab" -> 下标为 0 ("<strong>b</strong>aab")，下标为 2 ("ba<strong>a</strong>b")，下标为 3 ("baa<strong>b</strong>")
  "bab" -> 下标为 1 ("a<strong>b</strong>ba")，下标为 2 ("ba<strong>a</strong>b")，下标为 3 ("baa<strong>b</strong>")
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>words = ["abcd"], target = "abcd"
  <b>输出：</b>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>words = ["abab","baba","abba","baab"], target = "abba"
  <b>输出：</b>16
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words[i].length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

words 中所有单词长度相同。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

words[i] 和 target 都仅包含小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
