* [[https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities][1617.
Count Subtrees With Max Distance Between Cities]]
  :PROPERTIES:
  :CUSTOM_ID: count-subtrees-with-max-distance-between-cities
  :END:
[[./solution/1600-1699/1617.Count Subtrees With Max Distance Between Cities/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There are n cities numbered from 1 to n. You are given an array edges of
size n-1, where edges[i] = [ui, vi] represents a bidirectional edge
between cities ui and vi. There exists a unique path between each pair
of cities. In other words, the cities form a tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A subtree is a subset of cities where every city is reachable from every
other city in the subset, where the path between each pair passes
through only the cities from the subset. Two subtrees are different if
there is a city in one subtree that is not present in the other.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For each d from 1 to n-1, find the number of subtrees in which the
maximum distance between any two cities in the subtree is equal to d.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an array of size n-1 where the dth element (1-indexed) is the
number of subtrees in which the maximum distance between any two cities
is equal to d.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that the distance between the two cities is the number of edges
in the path between them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 4, edges = [[1,2],[2,3],[2,4]]

  <strong>Output:</strong> [3,4,0]

  <strong>Explanation:

  </strong>The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.

  The subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.

  No subtree has two nodes where the max distance between them is 3.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 2, edges = [[1,2]]

  <strong>Output:</strong> [1]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 3, edges = [[1,2],[2,3]]

  <strong>Output:</strong> [2,1]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges.length == n-1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ui, vi <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All pairs (ui, vi) are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
