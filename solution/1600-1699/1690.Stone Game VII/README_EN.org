* [[https://leetcode.com/problems/stone-game-vii][1690. Stone Game VII]]
  :PROPERTIES:
  :CUSTOM_ID: stone-game-vii
  :END:
[[./solution/1600-1699/1690.Stone Game VII/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Alice and Bob take turns playing a game, with Alice starting first.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

There are n stones arranged in a row. On each player's turn, they can
remove either the leftmost stone or the rightmost stone from the row and
receive points equal to the sum of the remaining stones' values in the
row. The winner is the one with the higher score when there are no
stones left to remove.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Bob found that he will always lose this game (poor Bob, he always
loses), so he decided to minimize the score's difference. Alice's goal
is to maximize the difference in the score.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given an array of integers stones where stones[i] represents the value
of the ith stone from the left, return the difference in Alice and Bob's
score if they both play optimally.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> stones = [5,3,1,4,2]
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> 
  - Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].
  - Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].
  - Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].
  - Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].
  - Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].
  The score difference is 18 - 12 = 6.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> stones = [7,90,5,1,100,10,10,2]
  <strong>Output:</strong> 122</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == stones.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= stones[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
