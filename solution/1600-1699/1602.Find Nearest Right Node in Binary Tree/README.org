* [[https://leetcode-cn.com/problems/find-nearest-right-node-in-binary-tree][1602.
找到二叉树中最近的右侧节点]]
  :PROPERTIES:
  :CUSTOM_ID: 找到二叉树中最近的右侧节点
  :END:
[[./solution/1600-1699/1602.Find Nearest Right Node in Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一棵二叉树的根节点 root 和树中的一个节点 u ，返回与 u 所在层中距离最近的右侧节点，当 u 是所在层中最右侧的节点，返回 null 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [1,2,3,null,4,5,6], u = 4
  <strong>输出:</strong> 5
  <strong>解释: </strong>节点 4 所在层中，最近的右侧节点是节点 5。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [3,null,4,2], u = 2
  <strong>输出:</strong> null
  <strong>解释: </strong>2 的右侧没有节点。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [1], u = 1
  <strong>输出:</strong> null
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [3,4,2,null,null,null,1], u = 4
  <strong>输出:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点个数的范围是 [1, 105] 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

树中所有节点的值是唯一的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

u 是以 root 为根的二叉树的一个节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
