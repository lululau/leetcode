* [[https://leetcode-cn.com/problems/defuse-the-bomb][1652. 拆炸弹]]
  :PROPERTIES:
  :CUSTOM_ID: 拆炸弹
  :END:
[[./solution/1600-1699/1652.Defuse the Bomb/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

为了获得正确的密码，你需要替换掉每一个数字。所有数字会 同时 被替换。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果 k > 0 ，将第 i 个数字用 接下来 k 个数字之和替换。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 k < 0 ，将第 i 个数字用 之前 k 个数字之和替换。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 k == 0 ，将第 i 个数字用 0 替换。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

由于 code 是循环的， code[n-1] 下一个元素是 code[0] ，且 code[0] 前一个元素是 code[n-1] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你 循环 数组 code 和整数密钥 k ，请你返回解密后的结果来拆除炸弹！

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>code = [5,7,1,4], k = 3
  <b>输出：</b>[12,10,16,13]
  <b>解释：</b>每个数字都被接下来 3 个数字之和替换。解密后的密码为 [7+1+4, 1+4+5, 4+5+7, 5+7+1]。注意到数组是循环连接的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>code = [1,2,3,4], k = 0
  <b>输出：</b>[0,0,0,0]
  <b>解释：</b>当 k 为 0 时，所有数字都被 0 替换。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>code = [2,4,9,3], k = -2
  <b>输出：</b>[12,5,6,13]
  <b>解释：</b>解密后的密码为 [3+9, 2+3, 4+2, 9+4] 。注意到数组是循环连接的。如果 k 是负数，那么和为 <strong>之前</strong> 的数字。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == code.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= code[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-(n - 1) <= k <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

数组下标取模，累加求每一项即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def decrypt(self, code: List[int], k: int) -> List[int]:
          n = len(code)
          res = [0] * n
          if k == 0:
              return res
          for i in range(n):
              if k > 0:
                  for j in range(i + 1, i + k + 1):
                      res[i] += code[j % n]
              else:
                  for j in range(i + k, i):
                      res[i] += code[(j + n) % n]
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[] decrypt(int[] code, int k) {
          int n = code.length;
          int[] res = new int[n];
          if (k == 0) return res;
          for (int i = 0; i < n; ++i) {
              if (k > 0) {
                  for (int j = i + 1; j <= i + k; ++j) {
                      res[i] += code[j % n];
                  }
              } else {
                  for (int j = i + k; j <= i - 1; ++j) {
                      res[i] += code[(j + n) % n];
                  }
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
