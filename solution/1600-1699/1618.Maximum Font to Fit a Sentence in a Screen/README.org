* [[https://leetcode-cn.com/problems/maximum-font-to-fit-a-sentence-in-a-screen][1618.
找出适应屏幕的最大字号]]
  :PROPERTIES:
  :CUSTOM_ID: 找出适应屏幕的最大字号
  :END:
[[./solution/1600-1699/1618.Maximum Font to Fit a Sentence in a Screen/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个字符串 text。并能够在 宽为 w 高为 h 的屏幕上显示该文本。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

字体数组中包含按升序排列的可用字号，您可以从该数组中选择任何字体大小。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

您可以使用FontInfo接口来获取任何可用字体大小的任何字符的宽度和高度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

FontInfo接口定义如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>interface FontInfo {
    // 返回 fontSize 大小的字符 ch 在屏幕上的宽度。
    // 每调用该函数复杂度为 O(1)
    public int getWidth(int fontSize, char ch);

    // 返回 fontSize 大小的任意字符在屏幕上的高度。
    // 每调用该函数复杂度为 O(1)
    public int getHeight(int fontSize);
  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

一串字符的文本宽度应该是每一个字符在对应字号(fontSize)下返回的宽度getHeight(fontSize)的总和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请注意：文本最多只能排放一排

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果使用相同的参数调用 getHeight 或 getWidth ，则可以保证 FontInfo
将返回相同的值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

同时，对于任何字体大小的 fontSize 和任何字符 ch ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

getHeight(fontSize) <= getHeight(fontSize+1)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

返回可用于在屏幕上显示文本的最大字体大小。如果文本不能以任何字体大小显示，则返回-1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> text = "helloworld", w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]
  <strong>输出:</strong> 6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> text = "leetcode", w = 1000, h = 50, fonts = [1,2,4]
  <strong>输出:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> text = "easyquestion", w = 100, h = 100, fonts = [10,15,20,25]
  <strong>输出:</strong> -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= text.length <= 50000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

text 只包含小写字母

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= w <= 107

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= h <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= fonts.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= fonts[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

fonts 已经按升序排序，且不包含重复项。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
