* [[https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses][1614.
括号的最大嵌套深度]]
  :PROPERTIES:
  :CUSTOM_ID: 括号的最大嵌套深度
  :END:
[[./solution/1600-1699/1614.Maximum Nesting Depth of the Parentheses/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

如果字符串满足以下条件之一，则可以称之为 有效括号字符串（valid
parentheses string，可以简写为 VPS）：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

字符串是一个空字符串 “"，或者是一个不为 "(" 或 ")“ 的单字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

字符串可以写为 AB（A 与 B 字符串连接），其中 A 和 B 都是 有效括号字符串
。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

字符串可以写为 (A)，其中 A 是一个 有效括号字符串 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

类似地，可以定义任何有效括号字符串 S 的 嵌套深度 depth(S)：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

depth(““) = 0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

depth(C) = 0，其中 C 是单个字符的字符串，且该字符不是 "(" 或者 ")"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

depth(A + B) = max(depth(A), depth(B))，其中 A 和 B 都是 有效括号字符串

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

depth("(" + A + ")") = 1 + depth(A)，其中 A 是一个 有效括号字符串

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

例如：“"、"()()"、"()(()())" 都是 有效括号字符串（嵌套深度分别为
0、1、2），而 ")(" 、"(()“ 都不是 有效括号字符串 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 有效括号字符串 s，返回该字符串的 s 嵌套深度 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "(1+(2*3)+((<strong>8</strong>)/4))+1"
  <strong>输出：</strong>3
  <strong>解释：</strong>数字 8 在嵌套的 3 层括号中。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "(1)+((2))+(((<strong>3</strong>)))"
  <strong>输出：</strong>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "1+(<strong>2</strong>*3)/(2-1)"
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "<strong>1</strong>"
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 由数字 0-9 和字符 '+'、'-'、'*'、'/'、'('、')' 组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目数据保证括号表达式 s 是 有效的括号表达式

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
