* [[https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses][1614.
Maximum Nesting Depth of the Parentheses]]
  :PROPERTIES:
  :CUSTOM_ID: maximum-nesting-depth-of-the-parentheses
  :END:
[[./solution/1600-1699/1614.Maximum Nesting Depth of the Parentheses/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A string is a valid parentheses string (denoted VPS) if it meets one of
the following:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

It is an empty string "", or a single character not equal to "(" or ")",

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It can be written as AB (A concatenated with B), where A and B are
VPS's, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It can be written as (A), where A is a VPS.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

We can similarly define the nesting depth depth(S) of any VPS S as
follows:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

depth("") = 0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

depth(C) = 0, where C is a string with a single character not equal to
"(" or ")".

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

depth("(" + A + ")") = 1 + depth(A), where A is a VPS.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

For example, "", "()()", and "()(()())" are VPS's (with nesting depths
0, 1, and 2), and ")(" and "(()" are not VPS's.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a VPS represented as string s, return the nesting depth of s.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;(1+(2*3)+((<u>8</u>)/4))+1&quot;
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> Digit 8 is inside of 3 nested parentheses in the string.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;(1)+((2))+(((<u>3</u>)))&quot;
  <strong>Output:</strong> 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;1+(<u>2</u>*3)/(2-1)&quot;
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;<u>1</u>&quot;
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consists of digits 0-9 and characters '+', '-', '*', '/', '(', and
')'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that parentheses expression s is a VPS.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
