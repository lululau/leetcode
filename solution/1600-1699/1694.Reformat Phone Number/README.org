* [[https://leetcode-cn.com/problems/reformat-phone-number][1694.
重新格式化电话号码]]
  :PROPERTIES:
  :CUSTOM_ID: 重新格式化电话号码
  :END:
[[./solution/1600-1699/1694.Reformat Phone Number/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串形式的电话号码 number 。number 由数字、空格 ' '、和破折号
'-' 组成。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你按下述方式重新格式化电话号码。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

首先，删除 所有的空格和破折号。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

其次，将数组从左到右 每 3 个一组 分块，直到 剩下 4
个或更少数字。剩下的数字将按下述规定再分块：

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 个数字：单个含 2 个数字的块。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

3 个数字：单个含 3 个数字的块。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

4 个数字：两个分别含 2 个数字的块。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

最后用破折号将这些块连接起来。注意，重新格式化过程中 不应该 生成仅含 1
个数字的块，并且 最多 生成两个含 2 个数字的块。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回格式化后的电话号码。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>number = "1-23-45 6"
  <strong>输出：</strong>"123-456"
  <strong>解释：</strong>数字是 "123456"
  步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 "123" 。
  步骤 2：剩下 3 个数字，将它们放入单个含 3 个数字的块。第 2 个块是 "456" 。
  连接这些块后得到 "123-456" 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>number = "123 4-567"
  <strong>输出：</strong>"123-45-67"
  <strong>解释：</strong>数字是 "1234567".
  步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 "123" 。
  步骤 2：剩下 4 个数字，所以将它们分成两个含 2 个数字的块。这 2 块分别是 "45" 和 "67" 。
  连接这些块后得到 "123-45-67" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>number = "123 4-5678"
  <strong>输出：</strong>"123-456-78"
  <strong>解释：</strong>数字是 "12345678" 。
  步骤 1：第 1 个块 "123" 。
  步骤 2：第 2 个块 "456" 。
  步骤 3：剩下 2 个数字，将它们放入单个含 2 个数字的块。第 3 个块是 "78" 。
  连接这些块后得到 "123-456-78" 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>number = "12"
  <strong>输出：</strong>"12"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>number = "--17-5 229 35-39475 "
  <strong>输出：</strong>"175-229-353-94-75"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= number.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

number 由数字和字符 '-' 及 ' ' 组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

number 中至少含 2 个数字。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
