* [[https://leetcode.com/problems/check-array-formation-through-concatenation][1640.
Check Array Formation Through Concatenation]]
  :PROPERTIES:
  :CUSTOM_ID: check-array-formation-through-concatenation
  :END:
[[./solution/1600-1699/1640.Check Array Formation Through Concatenation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an array of distinct integers arr and an array of integer
arrays pieces, where the integers in pieces are distinct. Your goal is
to form arr by concatenating the arrays in pieces in any order. However,
you are not allowed to reorder the integers in each array pieces[i].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return true if it is possible to form the array arr from pieces.
Otherwise, return false.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> arr = [85], pieces = [[85]]
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> arr = [15,88], pieces = [[88],[15]]
  <strong>Output:</strong> true
  <strong>Explanation:</strong> Concatenate <code>[15]</code> then <code>[88]</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> arr = [49,18,16], pieces = [[16,18,49]]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> Even though the numbers match, we cannot reorder pieces[0].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> arr = [91,4,64,78], pieces = [[78],[4,64],[91]]
  <strong>Output:</strong> true
  <strong>Explanation:</strong> Concatenate <code>[91]</code> then <code>[4,64]</code> then <code>[78]</code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> arr = [1,3,5,7], pieces = [[2,4,6,8]]
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pieces.length <= arr.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sum(pieces[i].length) == arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pieces[i].length <= arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i], pieces[i][j] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The integers in arr are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The integers in pieces are distinct (i.e., If we flatten pieces in a 1D
array, all the integers in this array are distinct).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def canFormArray(self, arr: List[int], pieces: List[List[int]]) -> bool:
          mapper = {piece[0]: piece for piece in pieces}
          i, n = 0, len(arr)
          while i < n:
              if arr[i] not in mapper:
                  return False
              vals = mapper[arr[i]]
              for val in vals:
                  if arr[i] != val:
                      return False
                  i += 1
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean canFormArray(int[] arr, int[][] pieces) {
          Map<Integer, int[]> map = new HashMap<>();
          for (int[] piece : pieces) {
              map.put(piece[0], piece);
          }
          for (int i = 0; i < arr.length;) {
              int[] vals = map.get(arr[i]);
              if (vals == null) {
                  return false;
              }
              for (int val : vals) {
                  if (arr[i] != val) {
                      return false;
                  }
                  ++i;
              }
          }
          return true;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} arr
   * @param {number[][]} pieces
   * @return {boolean}
   */
  var canFormArray = function(arr, pieces) {
      let mapper = new Map();
      for (let i = 0; i < pieces.length; i++) {
          mapper.set(pieces[i][0], pieces[i]);
      }
      let i = 0, n = arr.length;
      while (i < n) {
          let cur = arr[i];
          let nums = mapper.get(cur);
          if (nums == undefined) return false;
          for (let num of nums) {
              if (arr[i] != num) return false;
              i++;
          }
      }
      return true;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
