* [[https://leetcode-cn.com/problems/check-array-formation-through-concatenation][1640.
能否连接形成数组]]
  :PROPERTIES:
  :CUSTOM_ID: 能否连接形成数组
  :END:
[[./solution/1600-1699/1640.Check Array Formation Through Concatenation/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 arr ，数组中的每个整数 互不相同
。另有一个由整数数组构成的数组 pieces，其中的整数也 互不相同 。请你以
任意顺序 连接 pieces 中的数组以形成 arr 。但是，不允许 对每个数组
pieces[i] 中的整数重新排序。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果可以连接 pieces 中的数组形成 arr ，返回 true ；否则，返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>arr = [85], pieces = [[85]]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>arr = [15,88], pieces = [[88],[15]]
  <strong>输出：</strong>true
  <strong>解释：</strong>依次连接 <code>[15]</code> 和 <code>[88]</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>arr = [49,18,16], pieces = [[16,18,49]]
  <strong>输出：</strong>false
  <strong>解释：</strong>即便数字相符，也不能重新排列 pieces[0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>arr = [91,4,64,78], pieces = [[78],[4,64],[91]]
  <strong>输出：</strong>true
  <strong>解释：</strong>依次连接 <code>[91]</code>、<code>[4,64]</code> 和 <code>[78]</code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>arr = [1,3,5,7], pieces = [[2,4,6,8]]
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pieces.length <= arr.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sum(pieces[i].length) == arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pieces[i].length <= arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i], pieces[i][j] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arr 中的整数 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pieces 中的整数 互不相同（也就是说，如果将 pieces
扁平化成一维数组，数组中的所有整数互不相同）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"哈希表"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def canFormArray(self, arr: List[int], pieces: List[List[int]]) -> bool:
          mapper = {piece[0]: piece for piece in pieces}
          i, n = 0, len(arr)
          while i < n:
              if arr[i] not in mapper:
                  return False
              vals = mapper[arr[i]]
              for val in vals:
                  if arr[i] != val:
                      return False
                  i += 1
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean canFormArray(int[] arr, int[][] pieces) {
          Map<Integer, int[]> map = new HashMap<>();
          for (int[] piece : pieces) {
              map.put(piece[0], piece);
          }
          for (int i = 0; i < arr.length;) {
              int[] vals = map.get(arr[i]);
              if (vals == null) {
                  return false;
              }
              for (int val : vals) {
                  if (arr[i] != val) {
                      return false;
                  }
                  ++i;
              }
          }
          return true;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} arr
   * @param {number[][]} pieces
   * @return {boolean}
   */
  var canFormArray = function(arr, pieces) {
      let mapper = new Map();
      for (let i = 0; i < pieces.length; i++) {
          mapper.set(pieces[i][0], pieces[i]);
      }
      let i = 0, n = arr.length;
      while (i < n) {
          let cur = arr[i];
          let nums = mapper.get(cur);
          if (nums == undefined) return false;
          for (let num of nums) {
              if (arr[i] != num) return false;
              i++;
          }
      }
      return true;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
