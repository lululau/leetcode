* [[https://leetcode-cn.com/problems/graph-connectivity-with-threshold][1627.
带阈值的图连通性]]
  :PROPERTIES:
  :CUSTOM_ID: 带阈值的图连通性
  :END:
[[./solution/1600-1699/1627.Graph Connectivity With Threshold/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有 n 座城市，编号从 1 到 n 。编号为 x 和 y 的两座城市直接连通的前提是：
x 和 y 的公因数中，至少有一个 严格大于 某个阈值 threshold
。更正式地说，如果存在整数 z ，且满足以下所有条件，则编号 x 和 y
的城市之间有一条道路：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

x % z == 0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

y % z == 0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

z > threshold

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你两个整数 n 和 threshold ，以及一个待查询数组，请你判断每个查询
queries[i] = [ai, bi] 指向的城市 ai 和 bi
是否连通（即，它们之间是否存在一条路径）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回数组 answer ，其中answer.length == queries.length 。如果第 i
个查询中指向的城市 ai 和 bi 连通，则 answer[i] 为 true ；如果不连通，则
answer[i] 为 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]
  <strong>输出：</strong>[false,false,true]
  <strong>解释：</strong>每个数的因数如下：
  1:   1
  2:   1, 2
  3:   1, <strong>3</strong>
  4:   1, 2, <strong>4</strong>
  5:   1, <strong>5</strong>
  6:   1, 2, <strong>3</strong>, <strong>6</strong>
  所有大于阈值的的因数已经加粗标识，只有城市 3 和 6 共享公约数 3 ，因此结果是： 
  [1,4]   1 与 4 不连通
  [2,5]   2 与 5 不连通
  [3,6]   3 与 6 连通，存在路径 3--6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]
  <strong>输出：</strong>[true,true,true,true,true]
  <strong>解释：</strong>每个数的因数与上一个例子相同。但是，由于阈值为 0 ，所有的因数都大于阈值。因为所有的数字共享公因数 1 ，所以所有的城市都互相连通。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]
  <strong>输出：</strong>[false,false,false,false,false]
  <strong>解释：</strong>只有城市 2 和 4 共享的公约数 2 严格大于阈值 1 ，所以只有这两座城市是连通的。
  注意，同一对节点 [x, y] 可以有多个查询，并且查询 [x，y] 等同于查询 [y，x] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= threshold <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ai, bi <= cities

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ai != bi

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
