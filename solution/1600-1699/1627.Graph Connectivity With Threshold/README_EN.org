* [[https://leetcode.com/problems/graph-connectivity-with-threshold][1627.
Graph Connectivity With Threshold]]
  :PROPERTIES:
  :CUSTOM_ID: graph-connectivity-with-threshold
  :END:
[[./solution/1600-1699/1627.Graph Connectivity With Threshold/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

We have n cities labeled from 1 to n. Two different cities with labels x
and y are directly connected by a bidirectional road if and only if x
and y share a common divisor strictly greater than some threshold. More
formally, cities with labels x and y have a road between them if there
exists an integer z such that all of the following are true:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

x % z == 0,

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

y % z == 0, and

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

z > threshold.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Given the two integers, n and threshold, and an array of queries, you
must determine for each queries[i] = [ai, bi] if cities ai and bi are
connected directly or indirectly. (i.e. there is some path between
them).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an array answer, where answer.length == queries.length and
answer[i] is true if for the ith query, there is a path between ai and
bi, or answer[i] is false if there is no path.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]
  <strong>Output:</strong> [false,false,true]
  <strong>Explanation:</strong> The divisors for each number:
  1:   1
  2:   1, 2
  3:   1, <u>3</u>
  4:   1, 2, <u>4</u>
  5:   1, <u>5</u>
  6:   1, 2, <u>3</u>, <u>6</u>
  Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the
  only ones directly connected. The result of each query:
  [1,4]   1 is not connected to 4
  [2,5]   2 is not connected to 5
  [3,6]   3 is connected to 6 through path 3--6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]
  <strong>Output:</strong> [true,true,true,true,true]
  <strong>Explanation:</strong> The divisors for each number are the same as the previous example. However, since the threshold is 0,
  all divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]
  <strong>Output:</strong> [false,false,false,false,false]
  <strong>Explanation:</strong> Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.
  Please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= threshold <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ai, bi <= cities

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ai != bi

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
