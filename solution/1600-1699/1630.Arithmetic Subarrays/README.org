* [[https://leetcode-cn.com/problems/arithmetic-subarrays][1630.
等差子数组]]
  :PROPERTIES:
  :CUSTOM_ID: 等差子数组
  :END:
[[./solution/1600-1699/1630.Arithmetic Subarrays/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

如果一个数列由至少两个元素组成，且每两个连续元素之间的差值都相同，那么这个序列就是
等差数列 。更正式地，数列 s 是等差数列，只需要满足：对于每个有效的 i ，
s[i+1] - s[i] == s[1] - s[0] 都成立。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，下面这些都是 等差数列 ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>1, 3, 5, 7, 9
  7, 7, 7, 7
  3, -1, -5, -9</pre>
#+end_html

#+begin_html
  <p>
#+end_html

下面的数列 不是等差数列 ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>1, 1, 2, 5, 7</pre>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个由 n 个整数组成的数组 nums，和两个由 m 个整数组成的数组 l 和
r，后两个数组表示 m 组范围查询，其中第 i 个查询对应范围 [l[i], r[i]]
。所有数组的下标都是 从 0 开始 的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 boolean 元素构成的答案列表 answer 。如果子数组 nums[l[i]],
nums[l[i]+1], ... , nums[r[i]] 可以 重新排列 形成 等差数列 ，answer[i]
的值就是 true；否则answer[i] 的值就是 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = <code>[4,6,5,9,3,7]</code>, l = <code>[0,0,2]</code>, r = <code>[2,3,5]</code>
  <strong>输出：</strong><code>[true,false,true]</code>
  <strong>解释：</strong>
  第 0 个查询，对应子数组 [4,6,5] 。可以重新排列为等差数列 [6,5,4] 。
  第 1 个查询，对应子数组 [4,6,5,9] 。无法重新排列形成等差数列。
  第 2 个查询，对应子数组 <code>[5,9,3,7] 。</code>可以重新排列为等差数列 <code>[3,5,7,9] 。</code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]
  <strong>输出：</strong>[false,true,false,false,true,true]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

m == l.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

m == r.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= l[i] < r[i] < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= nums[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
