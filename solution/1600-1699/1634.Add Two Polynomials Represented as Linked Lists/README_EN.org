* [[https://leetcode.com/problems/add-two-polynomials-represented-as-linked-lists][1634.
Add Two Polynomials Represented as Linked Lists]]
  :PROPERTIES:
  :CUSTOM_ID: add-two-polynomials-represented-as-linked-lists
  :END:
[[./solution/1600-1699/1634.Add Two Polynomials Represented as Linked Lists/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A polynomial linked list is a special type of linked list where every
node represents a term in a polynomial expression.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each node has three attributes:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

coefficient: an integer representing the number multiplier of the term.
The coefficient of the term 9x4 is 9.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

power: an integer representing the exponent. The power of the term 9x4
is 4.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

next: a pointer to the next node in the list, or null if it is the last
node of the list.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

For example, the polynomial 5x3 + 4x - 7 is represented by the
polynomial linked list illustrated below:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The polynomial linked list must be in its standard form: the polynomial
must be in strictly descending order by its power value. Also, terms
with a coefficient of 0 are omitted.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given two polynomial linked list heads, poly1 and poly2, add the
polynomials together and return the head of the sum of the polynomials.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

PolyNode format:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The input/output format is as a list of n nodes, where each node is
represented as its [coefficient, power]. For example, the polynomial 5x3
+ 4x - 7 would be represented as: [[5,3],[4,1],[-7,0]].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> poly1 = [[1,1]], poly2 = [[1,0]]

  <strong>Output:</strong> [[1,1],[1,0]]

  <strong>Explanation:</strong> poly1 = x. poly2 = 1. The sum is x + 1.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]

  <strong>Output:</strong> [[5,2],[2,0]]

  <strong>Explanation:</strong> poly1 = 2x<sup>2</sup> + 4x + 3. poly2 = 3x<sup>2</sup> - 4x - 1. The sum is 5x<sup>2</sup> + 2. Notice that we omit the &quot;0x&quot; term.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> poly1 = [[1,2]], poly2 = [[-1,2]]

  <strong>Output:</strong> []

  <strong>Explanation:</strong> The sum is 0. We return an empty list.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= PolyNode.coefficient <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

PolyNode.coefficient != 0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= PolyNode.power <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

PolyNode.power > PolyNode.next.power

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for polynomial singly-linked list.
  # class PolyNode:
  #     def __init__(self, x=0, y=0, next=None):
  #         self.coefficient = x
  #         self.power = y
  #         self.next = next

  class Solution:
      def addPoly(self, poly1: 'PolyNode', poly2: 'PolyNode') -> 'PolyNode':
          dummy = PolyNode()
          cur = dummy
          while poly1 or poly2:
              if poly1 is None or (poly2 and poly2.power > poly1.power):
                  cur.next = poly2
                  cur = cur.next
                  poly2 = poly2.next
              elif poly2 is None or (poly1 and poly1.power > poly2.power):
                  cur.next = poly1
                  cur = cur.next
                  poly1 = poly1.next
              else:
                  val = poly1.coefficient + poly2.coefficient
                  if val != 0:
                      cur.next = PolyNode(x=val, y=poly1.power)
                      cur = cur.next
                  poly1 = poly1.next
                  poly2 = poly2.next
          cur.next = None
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for polynomial singly-linked list.
   * class PolyNode {
   *     int coefficient, power;
   *     PolyNode next = null;
   
   *     PolyNode() {}
   *     PolyNode(int x, int y) { this.coefficient = x; this.power = y; }
   *     PolyNode(int x, int y, PolyNode next) { this.coefficient = x; this.power = y; this.next = next; }
   * }
   */

  class Solution {
      public PolyNode addPoly(PolyNode poly1, PolyNode poly2) {
          PolyNode dummy = new PolyNode();
          PolyNode cur = dummy;
          while (poly1 != null || poly2 != null) {
              if (poly1 == null || (poly2 != null && poly2.power > poly1.power)) {
                  cur.next = poly2;
                  cur = cur.next;
                  poly2 = poly2.next;
              } else if (poly2 == null || (poly1 != null && poly1.power > poly2.power)) {
                  cur.next = poly1;
                  cur = cur.next;
                  poly1 = poly1.next;
              } else {
                  int val = poly1.coefficient + poly2.coefficient;
                  if (val != 0) {
                      cur.next = new PolyNode(val, poly1.power);
                      cur = cur.next;
                  }
                  poly1 = poly1.next;
                  poly2 = poly2.next;
              }
          }
          cur.next = null;
          return dummy.next;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
