* [[https://leetcode-cn.com/problems/add-two-polynomials-represented-as-linked-lists][1634.
求两个多项式链表的和]]
  :PROPERTIES:
  :CUSTOM_ID: 求两个多项式链表的和
  :END:
[[./solution/1600-1699/1634.Add Two Polynomials Represented as Linked Lists/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

多项式链表是一种特殊形式的链表，每个节点表示多项式的一项。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每个节点有三个属性：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

coefficient：该项的系数。项 9x4 的系数是 9 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

power：该项的指数。项 9x4 的指数是 4 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

next：指向下一个节点的指针（引用），如果当前节点为链表的最后一个节点则为 null
。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

例如，多项式 5x3 + 4x - 7 可以表示成如下图所示的多项式链表：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

多项式链表必须是标准形式的，即多项式必须 严格
按指数 power 的递减顺序排列（即降幂排列）。另外，系数 coefficient 为 0 的项需要省略。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定两个多项式链表的头节点 poly1 和 poly2，返回它们的和的头节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

PolyNode 格式：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输入/输出格式表示为 n 个节点的列表，其中每个节点表示为 [coefficient,
power] 。例如，多项式 5x3 + 4x - 7 表示为： [[5,3],[4,1],[-7,0]] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>poly1 = [[1,1]], poly2 = [[1,0]]
  <strong>输出：</strong>[[1,1],[1,0]]
  <strong>解释：</strong>poly1 = x. poly2 = 1. 和为 x + 1.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]
  <strong>输出：</strong>[[5,2],[2,0]]
  <strong>解释：</strong>poly1 = 2x<sup>2</sup> + 4x + 3. poly2 = 3x<sup>2</sup> - 4x - 1. 和为 5x<sup>2</sup> + 2. 注意，我们省略 "0x" 项。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>poly1 = [[1,2]], poly2 = [[-1,2]]
  <strong>输出：</strong>[]
  <strong>解释：</strong>和为 0。我们返回空链表。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= PolyNode.coefficient <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

PolyNode.coefficient != 0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= PolyNode.power <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

PolyNode.power > PolyNode.next.power

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

遍历两多项式链表，比较节点间的 power 值，进行节点串联。若两节点
coefficient 值相加和为 0，不串联此合并的节点。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for polynomial singly-linked list.
  # class PolyNode:
  #     def __init__(self, x=0, y=0, next=None):
  #         self.coefficient = x
  #         self.power = y
  #         self.next = next

  class Solution:
      def addPoly(self, poly1: 'PolyNode', poly2: 'PolyNode') -> 'PolyNode':
          dummy = PolyNode()
          cur = dummy
          while poly1 or poly2:
              if poly1 is None or (poly2 and poly2.power > poly1.power):
                  cur.next = poly2
                  cur = cur.next
                  poly2 = poly2.next
              elif poly2 is None or (poly1 and poly1.power > poly2.power):
                  cur.next = poly1
                  cur = cur.next
                  poly1 = poly1.next
              else:
                  val = poly1.coefficient + poly2.coefficient
                  if val != 0:
                      cur.next = PolyNode(x=val, y=poly1.power)
                      cur = cur.next
                  poly1 = poly1.next
                  poly2 = poly2.next
          cur.next = None
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for polynomial singly-linked list.
   * class PolyNode {
   *     int coefficient, power;
   *     PolyNode next = null;

   *     PolyNode() {}
   *     PolyNode(int x, int y) { this.coefficient = x; this.power = y; }
   *     PolyNode(int x, int y, PolyNode next) { this.coefficient = x; this.power = y; this.next = next; }
   * }
   */

  class Solution {
      public PolyNode addPoly(PolyNode poly1, PolyNode poly2) {
          PolyNode dummy = new PolyNode();
          PolyNode cur = dummy;
          while (poly1 != null || poly2 != null) {
              if (poly1 == null || (poly2 != null && poly2.power > poly1.power)) {
                  cur.next = poly2;
                  cur = cur.next;
                  poly2 = poly2.next;
              } else if (poly2 == null || (poly1 != null && poly1.power > poly2.power)) {
                  cur.next = poly1;
                  cur = cur.next;
                  poly1 = poly1.next;
              } else {
                  int val = poly1.coefficient + poly2.coefficient;
                  if (val != 0) {
                      cur.next = new PolyNode(val, poly1.power);
                      cur = cur.next;
                  }
                  poly1 = poly1.next;
                  poly2 = poly2.next;
              }
          }
          cur.next = null;
          return dummy.next;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
