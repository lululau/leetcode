* [[https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii][1650.
Lowest Common Ancestor of a Binary Tree III]]
  :PROPERTIES:
  :CUSTOM_ID: lowest-common-ancestor-of-a-binary-tree-iii
  :END:
[[./solution/1600-1699/1650.Lowest Common Ancestor of a Binary Tree III/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two nodes of a binary tree p and q, return their lowest common
ancestor (LCA).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each node will have a reference to its parent node. The definition for
Node is below:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  class Node {
      public int val;
      public Node left;
      public Node right;
      public Node parent;
  }
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

According to the definition of LCA on Wikipedia: "The lowest common
ancestor of two nodes p and q in a tree T is the lowest node that has
both p and q as descendants (where we allow a node to be a descendant of
itself)."

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> The LCA of nodes 5 and 1 is 3.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
  <strong>Output:</strong> 5
  <strong>Explanation:</strong> The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2], p = 1, q = 2
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [2, 105].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= Node.val <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All Node.val are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p != q

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p and q exist in the tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
