* [[https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree-iii][1650.
二叉树的最近公共祖先 III]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树的最近公共祖先-iii
  :END:
[[./solution/1600-1699/1650.Lowest Common Ancestor of a Binary Tree III/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一棵二叉树中的两个节点 p 和 q，返回它们的最近公共祖先节点（LCA）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每个节点都包含其父节点的引用（指针）。Node 的定义如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>class Node {
      public int val;
      public Node left;
      public Node right;
      public Node parent;
  }
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

根据维基百科中对最近公共祖先节点的定义："两个节点 p 和 q 在二叉树 T
中的最近公共祖先节点是后代节点中既包括
p 又包括 q 的最深节点（我们允许一个节点为自身的一个后代节点）"。一个节点
x 的后代节点是节点 x 到某一叶节点间的路径中的节点 y。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
  <strong>输出:</strong> 3
  <strong>解释:</strong> 节点 5 和 1 的最近公共祖先是 3。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
  <strong>输出:</strong> 5
  <strong>解释:</strong> 节点 5 和 4 的最近公共祖先是 5，根据定义，一个节点可以是自身的最近公共祖先。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [1,2], p = 1, q = 2
  <strong>输出:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点个数的范围是 [2, 105]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= Node.val <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有的 Node.val 都是互不相同的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p != q

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p 和 q 存在于树中。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
