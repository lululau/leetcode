* [[https://leetcode-cn.com/problems/count-ways-to-distribute-candies][1692.
计算分配糖果的不同方式]]
  :PROPERTIES:
  :CUSTOM_ID: 计算分配糖果的不同方式
  :END:
[[./solution/1600-1699/1692.Count Ways to Distribute Candies/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

现有 n 颗 不同 糖果（分别标记为 1 到 n ）和 k
个相同的手袋。请把糖果分配到各个手袋中并保证每个手袋里至少有一颗糖果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

不考虑手袋和糖果的摆放顺序，会有多种不同的分配方式。如果某种分配方式中其中一个手袋里的糖果与另一种分配方式中所有手袋里的糖果都不相同，则认为这两种分配方式不同。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，(1), (2,3) 与(2),
(1,3)的分配方式是不同的，因为第一种分配方式中手袋(2,3)里的糖果2和3，在第二种分配方式中被分配到了手袋(2)和(1,3) 中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

已知整数 n 和 k,
请返回分配糖果的不同方式。返回的答案如果数值太大，请取109 +
7的模，并返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 3, k = 2
  <strong>输出：</strong>3
  <strong>解释：</strong>把糖果 3 分配到 2 个手袋中的一个，共有 3 种方式:
  (1), (2,3)
  (1,2), (3)
  (1,3), (2)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 4, k = 2
  <strong>输出：</strong>6
  <strong>解释：</strong>把糖果 4 分配到 2 个手袋中的一个，共有 7 种方式:
  (1), (2,3,4)s
  (1,2), (3,4)
  (1,3), (2,4)
  (1,4), (2,3)
  (1,2,3), (4)
  (1,2,4), (3)
  (1,3,4), (2)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 20, k = 5
  <strong>输出：</strong>206085257
  <strong>解释：</strong>把 20 颗糖果分配到 5 个手袋种，共有 1881780996 种方式。1881780996 取 10<sup>9</sup> + 7的模，等于 206085257。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
