* [[https://leetcode-cn.com/problems/check-if-two-expression-trees-are-equivalent][1612.
检查两棵二叉表达式树是否等价]]
  :PROPERTIES:
  :CUSTOM_ID: 检查两棵二叉表达式树是否等价
  :END:
[[./solution/1600-1699/1612.Check If Two Expression Trees are Equivalent/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

二叉表达式树是一种表达算术表达式的二叉树。二叉表达式树中的每一个节点都有零个或两个子节点。 叶节点（有
0 个子节点的节点）表示操作数，非叶节点（有 2
个子节点的节点）表示运算符。在本题中，我们只考虑 '+' 运算符（即加法）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定两棵二叉表达式树的根节点 root1 和 root2 。如果两棵二叉表达式树等价，返回 true ，否则返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

当两棵二叉搜索树中的变量取任意值，分别求得的值都相等时，我们称这两棵二叉表达式树是等价的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：当你的答案需同时支持 '-' 运算符（减法）时，你该如何修改你的答案？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b> root1 = [x], root2 = [x]
  <b>输出：</b> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,c]
  <b>输出：</b>true
  <code><span style=""><b>解释：</b></span>a + (b + c) == (b + c) + a</code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b> root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,d]
  <b>输出：</b> false
  <b>解释：</b> <code>a + (b + c) != (b + d) + a</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

两棵树中的节点个数相等，且节点个数为范围 [1, 4999] 内的奇数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Node.val 是 '+' 或小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

给定的树保证是有效的二叉表达式树。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
