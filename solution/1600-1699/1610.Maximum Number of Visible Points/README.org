* [[https://leetcode-cn.com/problems/maximum-number-of-visible-points][1610.
可见点的最大数目]]
  :PROPERTIES:
  :CUSTOM_ID: 可见点的最大数目
  :END:
[[./solution/1600-1699/1610.Maximum Number of Visible Points/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个点数组 points 和一个表示角度的整数 angle ，你的位置是 location
，其中 location = [posx, posy] 且 points[i] = [xi, yi] 都表示 X-Y
平面上的整数坐标。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

最开始，你面向东方进行观测。你 不能 进行移动改变位置，但可以通过 自转
调整观测角度。换句话说，posx 和 posy 不能改变。你的视野范围的角度用
angle 表示， 这决定了你观测任意方向时可以多宽。设 d
为你逆时针自转旋转的度数，那么你的视野就是角度范围 [d - angle/2, d +
angle/2] 所指示的那片区域。

#+begin_html
  </p>
#+end_html

#+begin_html
  <video autoplay="" controls="" height="360" muted="" style="max-width:100%;height:auto;" width="750">
#+end_html

#+begin_html
  <source src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1610.Maximum Number of Visible Points/images/angle.mp4" type="video/mp4" />
#+end_html

Your browser does not support the video tag or this video format.

#+begin_html
  <p>
#+end_html

对于每个点，如果由该点、你的位置以及从你的位置直接向东的方向形成的角度
位于你的视野中 ，那么你就可以看到它。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

同一个坐标上可以有多个点。你所在的位置也可能存在一些点，但不管你的怎么旋转，总是可以看到这些点。同时，点不会阻碍你看到其他点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回你能看到的点的最大数目。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]
  <strong>输出：</strong>3
  <strong>解释：</strong>阴影区域代表你的视野。在你的视野中，所有的点都清晰可见，尽管 [2,2] 和 [3,3]在同一条直线上，你仍然可以看到 [3,3] 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]
  <strong>输出：</strong>4
  <strong>解释：</strong>在你的视野中，所有的点都清晰可见，包括你所在位置的那个点。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>points = [[1,0],[2,1]], angle = 13, location = [1,1]
  <strong>输出：</strong>1
  <strong>解释：</strong>如图所示，你只能看到两点之一。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= points.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

points[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

location.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= angle < 360

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= posx, posy, xi, yi <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
