* [[https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique][1647.
Minimum Deletions to Make Character Frequencies Unique]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-deletions-to-make-character-frequencies-unique
  :END:
[[./solution/1600-1699/1647.Minimum Deletions to Make Character Frequencies Unique/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A string s is called good if there are no two different characters in s
that have the same frequency.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a string s, return the minimum number of characters you need to
delete to make s good.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The frequency of a character in a string is the number of times it
appears in the string. For example, in the string "aab", the frequency
of 'a' is 2, while the frequency of 'b' is 1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;aab&quot;
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> <code>s</code> is already good.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;aaabbbcc&quot;
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> You can delete two &#39;b&#39;s resulting in the good string &quot;aaabcc&quot;.
  Another way it to delete one &#39;b&#39; and one &#39;c&#39; resulting in the good string &quot;aaabbc&quot;.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;ceabaacb&quot;
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> You can delete both &#39;c&#39;s resulting in the good string &quot;eabaab&quot;.
  Note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s contains only lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
