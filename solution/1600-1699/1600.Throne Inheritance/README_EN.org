* [[https://leetcode.com/problems/throne-inheritance][1600. Throne
Inheritance]]
  :PROPERTIES:
  :CUSTOM_ID: throne-inheritance
  :END:
[[./solution/1600-1699/1600.Throne Inheritance/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A kingdom consists of a king, his children, his grandchildren, and so
on. Every once in a while, someone in the family dies or a child is
born.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The kingdom has a well-defined order of inheritance that consists of the
king as the first member. Let's define the recursive function
Successor(x, curOrder), which given a person x and the inheritance order
so far, returns who should be the next person after x in the order of
inheritance.

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  Successor(x, curOrder):
      if x has no children or all of x&#39;s children are in curOrder:
          if x is the king return null
          else return Successor(x&#39;s parent, curOrder)
      else return x&#39;s oldest child who&#39;s not in curOrder
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

For example, assume we have a kingdom that consists of the king, his
children Alice and Bob (Alice is older than Bob), and finally Alice's
son Jack.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

In the beginning, curOrder will be ["king"].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Calling Successor(king, curOrder) will return Alice, so we append to
curOrder to get ["king", "Alice"].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Calling Successor(Alice, curOrder) will return Jack, so we append to
curOrder to get ["king", "Alice", "Jack"].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Calling Successor(Jack, curOrder) will return Bob, so we append to
curOrder to get ["king", "Alice", "Jack", "Bob"].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Calling Successor(Bob, curOrder) will return null. Thus the order of
inheritance will be ["king", "Alice", "Jack", "Bob"].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Using the above function, we can always obtain a unique order of
inheritance.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the ThroneInheritance class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

ThroneInheritance(string kingName) Initializes an object of the
ThroneInheritance class. The name of the king is given as part of the
constructor.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void birth(string parentName, string childName) Indicates that
parentName gave birth to childName.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void death(string name) Indicates the death of name. The death of the
person doesn't affect the Successor function nor the current inheritance
order. You can treat it as just marking the person as dead.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

string[] getInheritanceOrder() Returns a list representing the current
order of inheritance excluding dead people.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;ThroneInheritance&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;getInheritanceOrder&quot;, &quot;death&quot;, &quot;getInheritanceOrder&quot;]
  [[&quot;king&quot;], [&quot;king&quot;, &quot;andy&quot;], [&quot;king&quot;, &quot;bob&quot;], [&quot;king&quot;, &quot;catherine&quot;], [&quot;andy&quot;, &quot;matthew&quot;], [&quot;bob&quot;, &quot;alex&quot;], [&quot;bob&quot;, &quot;asha&quot;], [null], [&quot;bob&quot;], [null]]
  <strong>Output</strong>
  [null, null, null, null, null, null, null, [&quot;king&quot;, &quot;andy&quot;, &quot;matthew&quot;, &quot;bob&quot;, &quot;alex&quot;, &quot;asha&quot;, &quot;catherine&quot;], null, [&quot;king&quot;, &quot;andy&quot;, &quot;matthew&quot;, &quot;alex&quot;, &quot;asha&quot;, &quot;catherine&quot;]]

  <strong>Explanation</strong>
  ThroneInheritance t= new ThroneInheritance(&quot;king&quot;); // order: <strong>king</strong>
  t.birth(&quot;king&quot;, &quot;andy&quot;); // order: king &gt; <strong>andy</strong>
  t.birth(&quot;king&quot;, &quot;bob&quot;); // order: king &gt; andy &gt; <strong>bob</strong>
  t.birth(&quot;king&quot;, &quot;catherine&quot;); // order: king &gt; andy &gt; bob &gt; <strong>catherine</strong>
  t.birth(&quot;andy&quot;, &quot;matthew&quot;); // order: king &gt; andy &gt; <strong>matthew</strong> &gt; bob &gt; catherine
  t.birth(&quot;bob&quot;, &quot;alex&quot;); // order: king &gt; andy &gt; matthew &gt; bob &gt; <strong>alex</strong> &gt; catherine
  t.birth(&quot;bob&quot;, &quot;asha&quot;); // order: king &gt; andy &gt; matthew &gt; bob &gt; alex &gt; <strong>asha</strong> &gt; catherine
  t.getInheritanceOrder(); // return [&quot;king&quot;, &quot;andy&quot;, &quot;matthew&quot;, &quot;bob&quot;, &quot;alex&quot;, &quot;asha&quot;, &quot;catherine&quot;]
  t.death(&quot;bob&quot;); // order: king &gt; andy &gt; matthew &gt; <strong><s>bob</s></strong> &gt; alex &gt; asha &gt; catherine
  t.getInheritanceOrder(); // return [&quot;king&quot;, &quot;andy&quot;, &quot;matthew&quot;, &quot;alex&quot;, &quot;asha&quot;, &quot;catherine&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= kingName.length, parentName.length, childName.length, name.length
<= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

kingName, parentName, childName, and name consist of lowercase English
letters only.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All arguments childName and kingName are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All name arguments of death will be passed to either the constructor or
as childName to birth first.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

For each call to birth(parentName, childName), it is guaranteed
that parentName is alive.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 105 calls will be made to birth and death.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 10 calls will be made to getInheritanceOrder.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
