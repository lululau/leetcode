* [[https://leetcode-cn.com/problems/design-parking-system][1603.
设计停车系统]]
  :PROPERTIES:
  :CUSTOM_ID: 设计停车系统
  :END:
[[./solution/1600-1699/1603.Design Parking System/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你实现 ParkingSystem 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

ParkingSystem(int big, int medium, int
small) 初始化 ParkingSystem 类，三个参数分别对应每种停车位的数目。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool addCar(int
carType) 检查是否有 carType 对应的停车位。 carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。一辆车只能停在  carType 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]
  [[1, 1, 0], [1], [2], [3], [1]]
  <strong>输出：</strong>
  [null, true, true, false, false]

  <strong>解释：</strong>
  ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
  parkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位
  parkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位
  parkingSystem.addCar(3); // 返回 false ，因为没有空的小车位
  parkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= big, medium, small <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

carType 取值为 1， 2 或 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多会调用 addCar 函数 1000 次

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

为每种车维护一个计数器，初始值为车位的数目。此后，每来一辆车，就将对应类型的计数器减
1。当计数器为 0 时，说明车位已满。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class ParkingSystem:

      def __init__(self, big: int, medium: int, small: int):
          self.spaces = [big, medium, small]


      def addCar(self, carType: int) -> bool:
          if self.spaces[carType - 1] <= 0:
              return False
          self.spaces[carType - 1] -= 1
          return True


  # Your ParkingSystem object will be instantiated and called as such:
  # obj = ParkingSystem(big, medium, small)
  # param_1 = obj.addCar(carType)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class ParkingSystem {

      private int[] spaces = new int[3];

      public ParkingSystem(int big, int medium, int small) {
          spaces[0] = big;
          spaces[1] = medium;
          spaces[2] = small;
      }

      public boolean addCar(int carType) {
          if (spaces[carType - 1] <= 0) {
              return false;
          }
          --spaces[carType - 1];
          return true;
      }
  }

  /**
   * Your ParkingSystem object will be instantiated and called as such:
   * ParkingSystem obj = new ParkingSystem(big, medium, small);
   * boolean param_1 = obj.addCar(carType);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
