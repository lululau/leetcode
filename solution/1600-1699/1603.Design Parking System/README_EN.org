* [[https://leetcode.com/problems/design-parking-system][1603. Design
Parking System]]
  :PROPERTIES:
  :CUSTOM_ID: design-parking-system
  :END:
[[./solution/1600-1699/1603.Design Parking System/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a parking system for a parking lot. The parking lot has three
kinds of parking spaces: big, medium, and small, with a fixed number of
slots for each size.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the ParkingSystem class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

ParkingSystem(int big, int medium, int small) Initializes object of the
ParkingSystem class. The number of slots for each parking space are
given as part of the constructor.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool addCar(int carType) Checks whether there is a parking space of
carType for the car that wants to get into the parking lot. carType can
be of three kinds: big, medium, or small, which are represented by 1, 2,
and 3 respectively. A car can only park in a parking space of its
carType. If there is no space available, return false, else park the car
in that size space and return true.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;ParkingSystem&quot;, &quot;addCar&quot;, &quot;addCar&quot;, &quot;addCar&quot;, &quot;addCar&quot;]
  [[1, 1, 0], [1], [2], [3], [1]]
  <strong>Output</strong>
  [null, true, true, false, false]

  <strong>Explanation</strong>
  ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
  parkingSystem.addCar(1); // return true because there is 1 available slot for a big car
  parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car
  parkingSystem.addCar(3); // return false because there is no available slot for a small car
  parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= big, medium, small <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

carType is 1, 2, or 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 1000 calls will be made to addCar

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class ParkingSystem:

      def __init__(self, big: int, medium: int, small: int):
          self.spaces = [big, medium, small]


      def addCar(self, carType: int) -> bool:
          if self.spaces[carType - 1] <= 0:
              return False
          self.spaces[carType - 1] -= 1
          return True


  # Your ParkingSystem object will be instantiated and called as such:
  # obj = ParkingSystem(big, medium, small)
  # param_1 = obj.addCar(carType)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class ParkingSystem {

      private int[] spaces = new int[3];

      public ParkingSystem(int big, int medium, int small) {
          spaces[0] = big;
          spaces[1] = medium;
          spaces[2] = small;
      }

      public boolean addCar(int carType) {
          if (spaces[carType - 1] <= 0) {
              return false;
          }
          --spaces[carType - 1];
          return true;
      }
  }

  /**
   * Your ParkingSystem object will be instantiated and called as such:
   * ParkingSystem obj = new ParkingSystem(big, medium, small);
   * boolean param_1 = obj.addCar(carType);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
