* [[https://leetcode-cn.com/problems/find-valid-matrix-given-row-and-column-sums][1605.
给定行和列的和求可行矩阵]]
  :PROPERTIES:
  :CUSTOM_ID: 给定行和列的和求可行矩阵
  :END:
[[./solution/1600-1699/1605.Find Valid Matrix Given Row and Column Sums/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个非负整数数组 rowSum 和 colSum ，其中 rowSum[i] 是二维矩阵中第
i 行元素的和， colSum[j] 是第
j 列元素的和。换言之你不知道矩阵里的每个元素，但是你知道每一行和每一列的和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请找到大小为 rowSum.length x colSum.length 的任意
非负整数 矩阵，且该矩阵满足 rowSum 和 colSum 的要求。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回任意一个满足题目要求的二维矩阵，题目保证存在 至少一个 可行矩阵。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>rowSum = [3,8], colSum = [4,7]
  <strong>输出：</strong>[[3,0],
        [1,7]]
  <strong>解释：</strong>
  第 0 行：3 + 0 = 3 == rowSum[0]
  第 1 行：1 + 7 = 8 == rowSum[1]
  第 0 列：3 + 1 = 4 == colSum[0]
  第 1 列：0 + 7 = 7 == colSum[1]
  行和列的和都满足题目要求，且所有矩阵元素都是非负的。
  另一个可行的矩阵为：[[1,2],
                    [3,5]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>rowSum = [5,7,10], colSum = [8,6,8]
  <strong>输出：</strong>[[0,5,0],
        [6,1,0],
        [2,0,8]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>rowSum = [14,9], colSum = [6,9,8]
  <strong>输出：</strong>[[0,9,5],
        [6,0,3]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>rowSum = [1,0], colSum = [1]
  <strong>输出：</strong>[[1],
        [0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>rowSum = [0], colSum = [0]
  <strong>输出：</strong>[[0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rowSum.length, colSum.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= rowSum[i], colSum[i] <= 108

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sum(rows) == sum(columns)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
