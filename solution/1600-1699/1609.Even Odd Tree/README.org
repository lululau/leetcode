* [[https://leetcode-cn.com/problems/even-odd-tree][1609. 奇偶树]]
  :PROPERTIES:
  :CUSTOM_ID: 奇偶树
  :END:
[[./solution/1600-1699/1609.Even Odd Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

如果一棵二叉树满足下述几个条件，则可以称为 奇偶树 ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

二叉树根节点所在层下标为 0 ，根的子节点所在层下标为 1
，根的孙节点所在层下标为 2 ，依此类推。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

偶数下标 层上的所有节点的值都是 奇 整数，从左到右按顺序 严格递增

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

奇数下标 层上的所有节点的值都是 偶 整数，从左到右按顺序 严格递减

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你二叉树的根节点，如果二叉树为 奇偶树 ，则返回 true ，否则返回 false
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
  <strong>输出：</strong>true
  <strong>解释：</strong>每一层的节点值分别是：
  0 层：[1]
  1 层：[10,4]
  2 层：[3,7,9]
  3 层：[12,8,6,2]
  由于 0 层和 2 层上的节点值都是奇数且严格递增，而 1 层和 3 层上的节点值都是偶数且严格递减，因此这是一棵奇偶树。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [5,4,2,3,3,7]
  <strong>输出：</strong>false
  <strong>解释：</strong>每一层的节点值分别是：
  0 层：[5]
  1 层：[4,2]
  2 层：[3,3,7]
  2 层上的节点值不满足严格递增的条件，所以这不是一棵奇偶树。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [5,9,1,3,5,7]
  <strong>输出：</strong>false
  <strong>解释：</strong>1 层上的节点值应为偶数。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点数在范围 [1, 105] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
