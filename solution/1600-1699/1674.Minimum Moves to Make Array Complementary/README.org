* [[https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary][1674.
使数组互补的最少操作次数]]
  :PROPERTIES:
  :CUSTOM_ID: 使数组互补的最少操作次数
  :END:
[[./solution/1600-1699/1674.Minimum Moves to Make Array Complementary/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个长度为 偶数 n 的整数数组 nums 和一个整数 limit
。每一次操作，你可以将 nums 中的任何整数替换为 1 到 limit
之间的另一个整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果对于所有下标 i（下标从 0 开始），nums[i] + nums[n - 1 -
i] 都等于同一个数，则数组 nums 是 互补的 。例如，数组 [1,2,3,4]
是互补的，因为对于所有下标 i ，nums[i] + nums[n - 1 - i] = 5 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回使数组 互补 的 最少 操作次数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,2,4,3], limit = 4
  <strong>输出：</strong>1
  <strong>解释：</strong>经过 1 次操作，你可以将数组 nums 变成 [1,2,<strong>2</strong>,3]（加粗元素是变更的数字）：
  nums[0] + nums[3] = 1 + 3 = 4.
  nums[1] + nums[2] = 2 + 2 = 4.
  nums[2] + nums[1] = 2 + 2 = 4.
  nums[3] + nums[0] = 3 + 1 = 4.
  对于每个 i ，nums[i] + nums[n-1-i] = 4 ，所以 nums 是互补的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,2,2,1], limit = 2
  <strong>输出：</strong>2
  <strong>解释：</strong>经过 2 次操作，你可以将数组 nums 变成 [<strong>2</strong>,2,2,<strong>2</strong>] 。你不能将任何数字变更为 3 ，因为 3 > limit 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,2,1,2], limit = 2
  <strong>输出：</strong>0
  <strong>解释：</strong>nums 已经是互补的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= limit <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n 是偶数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
