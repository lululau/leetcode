* [[https://leetcode-cn.com/problems/jump-game-vi][1696. 跳跃游戏 VI]]
  :PROPERTIES:
  :CUSTOM_ID: 跳跃游戏-vi
  :END:
[[./solution/1600-1699/1696.Jump Game VI/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个下标从 0 开始的整数数组 nums 和一个整数 k 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一开始你在下标 0 处。每一步，你最多可以往前跳 k 步，但你不能跳出数组的边界。也就是说，你可以从下标 i 跳到 [i
+ 1， min(n - 1, i + k)] 包含 两个端点的任意位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你的目标是到达数组最后一个位置（下标为 n - 1 ），你的
得分 为经过的所有数字之和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回你能得到的 最大得分 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [<strong>1</strong>,<strong>-1</strong>,-2,<strong>4</strong>,-7,<strong>3</strong>], k = 2
  <b>输出：</b>7
  <b>解释：</b>你可以选择子序列 [1,-1,4,3] （上面加粗的数字），和为 7 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [<strong>10</strong>,-5,-2,<strong>4</strong>,0,<strong>3</strong>], k = 3
  <b>输出：</b>17
  <b>解释：</b>你可以选择子序列 [10,4,3] （上面加粗数字），和为 17 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
  <b>输出：</b>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

 1 <= nums.length, k <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
