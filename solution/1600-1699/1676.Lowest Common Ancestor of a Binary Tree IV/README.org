* [[https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree-iv][1676.
二叉树的最近公共祖先 IV]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树的最近公共祖先-iv
  :END:
[[./solution/1600-1699/1676.Lowest Common Ancestor of a Binary Tree IV/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一棵二叉树的根节点 root 和 TreeNode 类对象的数组（列表） nodes，返回 nodes 中所有节点的最近公共祖先（LCA）。数组（列表）中所有节点都存在于该二叉树中，且二叉树中所有节点的值都是互不相同的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们扩展二叉树的最近公共祖先节点在维基百科上的定义："对于任意合理的 i
值， n 个节点 p1 、 p2、...、 pn 在二叉树 T 中的最近公共祖先节点是后代中包含所有节点 pi 的最深节点（我们允许一个节点是其自身的后代）"。一个节点
x 的后代节点是节点 x 到某一叶节点间的路径中的节点 y。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]
  <strong>输出:</strong> 2
  <strong>解释:</strong> 节点 4 和 7 的最近公共祖先是 2。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1]
  <strong>输出:</strong> 1
  <strong>解释:</strong> 单个节点的最近公共祖先是该节点本身。

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4]
  <strong>输出:</strong> 5
  <strong>解释:</strong> 节点 7、6、2 和 4 的最近公共祖先节点是 5。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [0,1,2,3,4,5,6,7,8]
  <strong>输出:</strong> 3
  <strong>解释:</strong> 树中所有节点的最近公共祖先是根节点。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点个数的范围是 [1, 104] 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= Node.val <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有的 Node.val 都是互不相同的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有的 nodes[i] 都存在于该树中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有的 nodes[i] 都是互不相同的。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
