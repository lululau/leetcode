* [[https://leetcode-cn.com/problems/coordinate-with-maximum-network-quality][1620.
网络信号最好的坐标]]
  :PROPERTIES:
  :CUSTOM_ID: 网络信号最好的坐标
  :END:
[[./solution/1600-1699/1620.Coordinate With Maximum Network Quality/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个数组 towers 和一个整数
radius ，数组中包含一些网络信号塔，其中 towers[i] = [xi, yi,
qi] 表示第 i 个网络信号塔的坐标是 (xi,
yi) 且信号强度参数为 qi 。所有坐标都是在  X-Y
坐标系内的 整数 坐标。两个坐标之间的距离用 欧几里得距离 计算。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

整数 radius 表示一个塔 能到达 的 最远距离 。如果一个坐标跟塔的距离在
radius 以内，那么该塔的信号可以到达该坐标。在这个范围以外信号会很微弱，所以
radius 以外的距离该塔是 不能到达的 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果第 i 个塔能到达 (x, y) ，那么该塔在此处的信号为 ⌊qi / (1 +
d)⌋ ，其中 d 是塔跟此坐标的距离。一个坐标的 网络信号 是所有
能到达 该坐标的塔的信号强度之和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回
网络信号 最大的整数坐标点。如果有多个坐标网络信号一样大，请你返回字典序最小的一个坐标。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

坐标 (x1, y1) 字典序比另一个坐标 (x2, y2) 小：要么 x1 < x2 ，要么 x1 ==
x2 且 y1 < y2 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

⌊val⌋ 表示小于等于 val 的最大整数（向下取整函数）。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2
  <b>输出：</b>[2,1]
  <strong>解释：</strong>
  坐标 (2, 1) 信号强度之和为 13
  - 塔 (2, 1) 强度参数为 7 ，在该点强度为 ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7
  - 塔 (1, 2) 强度参数为 5 ，在该点强度为 ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2
  - 塔 (3, 1) 强度参数为 9 ，在该点强度为 ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4
  没有别的坐标有更大的信号强度。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>towers = [[23,11,21]], radius = 9
  <b>输出：</b>[23,11]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2
  <b>输出：</b>[1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>towers = [[2,1,9],[0,1,9]], radius = 2
  <b>输出：</b>[0,1]
  <strong>解释：</strong>坐标 (0, 1) 和坐标 (2, 1) 都是强度最大的位置，但是 (0, 1) 字典序更小。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= towers.length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

towers[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= xi, yi, qi <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= radius <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
