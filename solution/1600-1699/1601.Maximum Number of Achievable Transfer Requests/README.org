* [[https://leetcode-cn.com/problems/maximum-number-of-achievable-transfer-requests][1601.
最多可达成的换楼请求数目]]
  :PROPERTIES:
  :CUSTOM_ID: 最多可达成的换楼请求数目
  :END:
[[./solution/1600-1699/1601.Maximum Number of Achievable Transfer Requests/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们有 n 栋楼，编号从 0 到 n -
1 。每栋楼有若干员工。由于现在是换楼的季节，部分员工想要换一栋楼居住。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个数组 requests ，其中 requests[i] = [fromi,
toi] ，表示一个员工请求从编号为 fromi 的楼搬到编号为 toi 的楼。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一开始 所有楼都是满的，所以从请求列表中选出的若干个请求是可行的需要满足
每栋楼员工净变化为 0 。意思是每栋楼 离开 的员工数目 等于 该楼
搬入 的员工数数目。比方说 n =
3 且两个员工要离开楼 0 ，一个员工要离开楼 1 ，一个员工要离开楼
2 ，如果该请求列表可行，应该要有两个员工搬入楼 0 ，一个员工搬入楼 1 ，一个员工搬入楼 2 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你从原请求列表中选出若干个请求，使得它们是一个可行的请求列表，并返回所有可行列表中最大请求数目。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
  <strong>输出：</strong>5
  <strong>解释：</strong>请求列表如下：
  从楼 0 离开的员工为 x 和 y ，且他们都想要搬到楼 1 。
  从楼 1 离开的员工为 a 和 b ，且他们分别想要搬到楼 2 和 0 。
  从楼 2 离开的员工为 z ，且他想要搬到楼 0 。
  从楼 3 离开的员工为 c ，且他想要搬到楼 4 。
  没有员工从楼 4 离开。
  我们可以让 x 和 b 交换他们的楼，以满足他们的请求。
  我们可以让 y，a 和 z 三人在三栋楼间交换位置，满足他们的要求。
  所以最多可以满足 5 个请求。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, requests = [[0,0],[1,2],[2,1]]
  <strong>输出：</strong>3
  <strong>解释：</strong>请求列表如下：
  从楼 0 离开的员工为 x ，且他想要回到原来的楼 0 。
  从楼 1 离开的员工为 y ，且他想要搬到楼 2 。
  从楼 2 离开的员工为 z ，且他想要搬到楼 1 。
  我们可以满足所有的请求。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]
  <strong>输出：</strong>4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= requests.length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

requests[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= fromi, toi < n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
