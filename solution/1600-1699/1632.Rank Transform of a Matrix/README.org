* [[https://leetcode-cn.com/problems/rank-transform-of-a-matrix][1632.
矩阵转换后的秩]]
  :PROPERTIES:
  :CUSTOM_ID: 矩阵转换后的秩
  :END:
[[./solution/1600-1699/1632.Rank Transform of a Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 m x n 的矩阵
matrix ，请你返回一个新的矩阵 answer ，其中 answer[row][col] 是 matrix[row][col] 的秩。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每个元素的 秩 是一个整数，表示这个元素相对于其他元素的大小关系，它按照如下规则计算：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

秩是从 1 开始的一个整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果两个元素 p 和 q 在 同一行 或者 同一列 ，那么：

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果 p < q ，那么 rank(p) < rank(q)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 p == q ，那么 rank(p) == rank(q)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 p > q ，那么 rank(p) > rank(q)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
  <li><b>秩</b> 需要越 <strong>小</strong> 越好。</li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

题目保证按照上面规则 answer 数组是唯一的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>matrix = [[1,2],[3,4]]
  <b>输出：</b>[[1,2],[2,3]]
  <strong>解释：</strong>
  matrix[0][0] 的秩为 1 ，因为它是所在行和列的最小整数。
  matrix[0][1] 的秩为 2 ，因为 matrix[0][1] > matrix[0][0] 且 matrix[0][0] 的秩为 1 。
  matrix[1][0] 的秩为 2 ，因为 matrix[1][0] > matrix[0][0] 且 matrix[0][0] 的秩为 1 。
  matrix[1][1] 的秩为 3 ，因为 matrix[1][1] > matrix[0][1]， matrix[1][1] > matrix[1][0] 且 matrix[0][1] 和 matrix[1][0] 的秩都为 2 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>matrix = [[7,7],[7,7]]
  <b>输出：</b>[[1,1],[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
  <b>输出：</b>[[4,2,3],[1,3,4],[5,1,6],[1,3,4]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>matrix = [[7,3,6],[1,4,5],[9,8,2]]
  <b>输出：</b>[[5,1,4],[1,2,3],[6,3,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == matrix.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= matrix[row][col] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
