* [[https://leetcode-cn.com/problems/determine-if-two-strings-are-close][1657.
确定两个字符串是否接近]]
  :PROPERTIES:
  :CUSTOM_ID: 确定两个字符串是否接近
  :END:
[[./solution/1600-1699/1657.Determine if Two Strings Are Close/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

如果可以使用以下操作从一个字符串得到另一个字符串，则认为两个字符串 接近
：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

操作 1：交换任意两个 现有 字符。

#+begin_example
  <ul>
      <li>例如，<code>a<strong>b</strong>cd<strong>e</strong> -> a<strong>e</strong>cd<strong>b</strong></code></li>
  </ul>
  </li>
  <li>操作 2：将一个 <strong>现有</strong> 字符的每次出现转换为另一个 <strong>现有</strong> 字符，并对另一个字符执行相同的操作。
  <ul>
      <li>例如，<code><strong>aa</strong>c<strong>abb</strong> -> <strong>bb</strong>c<strong>baa</strong></code>（所有 <code>a</code> 转化为 <code>b</code> ，而所有的 <code>b</code> 转换为 <code>a</code> ）</li>
  </ul>
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

你可以根据需要对任意一个字符串多次使用这两种操作。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你两个字符串，word1 和 word2 。如果 word1 和 word2 接近 ，就返回 true
；否则，返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>word1 = "abc", word2 = "bca"
  <strong>输出：</strong>true
  <strong>解释：</strong>2 次操作从 word1 获得 word2 。
  执行操作 1："a<strong>bc</strong>" -> "a<strong>cb</strong>"
  执行操作 1："<strong>a</strong>c<strong>b</strong>" -> "<strong>b</strong>c<strong>a</strong>"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>word1 = "a", word2 = "aa"
  <strong>输出：</strong>false
  <strong>解释：</strong>不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>word1 = "cabbba", word2 = "abbccc"
  <strong>输出：</strong>true
  <strong>解释：</strong>3 次操作从 word1 获得 word2 。
  执行操作 1："ca<strong>b</strong>bb<strong>a</strong>" -> "ca<strong>a</strong>bb<strong>b</strong>"
  执行操作 2：<code>"</code><strong>c</strong>aa<strong>bbb</strong>" -> "<strong>b</strong>aa<strong>ccc</strong>"
  执行操作 2："<strong>baa</strong>ccc" -> "<strong>abb</strong>ccc"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>word1 = "cabbba", word2 = "aabbss"
  <strong>输出：</strong>false
  <strong>解释：</strong>不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= word1.length, word2.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word1 和 word2 仅包含小写英文字母

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
