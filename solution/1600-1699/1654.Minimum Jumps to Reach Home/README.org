* [[https://leetcode-cn.com/problems/minimum-jumps-to-reach-home][1654.
到家的最少跳跃次数]]
  :PROPERTIES:
  :CUSTOM_ID: 到家的最少跳跃次数
  :END:
[[./solution/1600-1699/1654.Minimum Jumps to Reach Home/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有一只跳蚤的家在数轴上的位置 x 处。请你帮助它从位置 0 出发，到达它的家。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

跳蚤跳跃的规则如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

它可以 往前 跳恰好 a 个位置（即往右跳）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

它可以 往后 跳恰好 b 个位置（即往左跳）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

它不能 连续 往后跳 2 次。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

它不能跳到任何 forbidden 数组中的位置。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

跳蚤可以往前跳 超过 它的家的位置，但是它 不能跳到负整数 的位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 forbidden ，其中 forbidden[i] 是跳蚤不能跳到的位置，同时给你整数 a， b 和 x ，请你返回跳蚤到家的最少跳跃次数。如果没有恰好到达
x 的可行方案，请你返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
  <b>输出：</b>3
  <b>解释：</b>往前跳 3 次（0 -> 3 -> 6 -> 9），跳蚤就到家了。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
  <b>输出：</b>-1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
  <b>输出：</b>2
  <b>解释：</b>往前跳一次（0 -> 16），然后往回跳一次（16 -> 7），跳蚤就到家了。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= forbidden.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= a, b, forbidden[i] <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= x <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

forbidden 中所有位置互不相同。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

位置 x 不在 forbidden 中。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
