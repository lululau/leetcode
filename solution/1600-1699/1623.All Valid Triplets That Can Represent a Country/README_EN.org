* [[https://leetcode.com/problems/all-valid-triplets-that-can-represent-a-country][1623.
All Valid Triplets That Can Represent a Country]]
  :PROPERTIES:
  :CUSTOM_ID: all-valid-triplets-that-can-represent-a-country
  :END:
[[./solution/1600-1699/1623.All Valid Triplets That Can Represent a Country/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Table: SchoolA

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  +---------------+---------+
  | Column Name   | Type    |
  +---------------+---------+
  | student_id    | int     |
  | student_name  | varchar |
  +---------------+---------+
  student_id is the primary key for this table.
  Each row of this table contains the name and the id of a student in school A.
  All student_name are distinct.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Table: SchoolB

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  +---------------+---------+
  | Column Name   | Type    |
  +---------------+---------+
  | student_id    | int     |
  | student_name  | varchar |
  +---------------+---------+
  student_id is the primary key for this table.
  Each row of this table contains the name and the id of a student in school B.
  All student_name are distinct.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Table: SchoolC

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  +---------------+---------+
  | Column Name   | Type    |
  +---------------+---------+
  | student_id    | int     |
  | student_name  | varchar |
  +---------------+---------+
  student_id is the primary key for this table.
  Each row of this table contains the name and the id of a student in school C.
  All student_name are distinct.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

There is a country with three schools, where each student is enrolled in
exactly one school. The country is joining a competition and wants to
select one student from each school to represent the country such that:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

member_A is selected from SchoolA,

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

member_B is selected from SchoolB,

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

member_C is selected from SchoolC, and

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The selected students' names and IDs are pairwise distinct (i.e. no two
students share the same name, and no two students share the same ID).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Write an SQL query to find all the possible triplets representing the
country under the given constraints.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the result table in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The query result format is in the following example.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <code>SchoolA</code> table:
  +------------+--------------+
  | student_id | student_name |
  +------------+--------------+
  | 1          | Alice        |
  | 2          | Bob          |
  +------------+--------------+

  <code>SchoolB</code> table:
  +------------+--------------+
  | student_id | student_name |
  +------------+--------------+
  | 3          | Tom          |
  +------------+--------------+

  <code>SchoolC</code> table:
  +------------+--------------+
  | student_id | student_name |
  +------------+--------------+
  | 3          | Tom          |
  | 2          | Jerry        |
  | 10         | Alice        |
  +------------+--------------+

  Result table:
  +----------+----------+----------+
  | member_A | member_B | member_C |
  +----------+----------+----------+
  | Alice    | Tom      | Jerry    |
  | Bob      | Tom      | Alice    |
  +----------+----------+----------+
  Let us see all the possible triplets.
  - (Alice, Tom, Tom) --&gt; Rejected because member_B and member_C have the same name and the same ID.
  - (Alice, Tom, Jerry) --&gt; Valid triplet.
  - (Alice, Tom, Alice) --&gt; Rejected because member_A and member_C have the same name.
  - (Bob, Tom, Tom) --&gt; Rejected because member_B and member_C have the same name and the same ID.
  - (Bob, Tom, Jerry) --&gt; Rejected because member_A and member_C have the same ID.
  - (Bob, Tom, Alice) --&gt; Valid triplet.
  </pre>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *SQL*
    :PROPERTIES:
    :CUSTOM_ID: sql
    :END:
#+begin_src sql
#+end_src

#+begin_html
  <!-- tabs:end -->
#+end_html
