* [[https://leetcode.com/problems/merge-in-between-linked-lists][1669.
Merge In Between Linked Lists]]
  :PROPERTIES:
  :CUSTOM_ID: merge-in-between-linked-lists
  :END:
[[./solution/1600-1699/1669.Merge In Between Linked Lists/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two linked lists: list1 and list2 of sizes n and m
respectively.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Remove list1's nodes from the ath node to the bth node, and put list2 in
their place.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The blue edges and nodes in the following figure incidate the result:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Build the result list and return its head.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
  <strong>Output:</strong> [0,1,2,1000000,1000001,1000002,5]
  <strong>Explanation:</strong> We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]
  <strong>Output:</strong> [0,1,1000000,1000001,1000002,1000003,1000004,6]
  <strong>Explanation:</strong> The blue edges and nodes in the above figure indicate the result.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= list1.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= a <= b < list1.length - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= list2.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def mergeInBetween(self, list1: ListNode, a: int, b: int, list2: ListNode) -> ListNode:
          p = q = list1
          for _ in range(a - 1):
              p = p.next
          for _ in range(b + 1):
              q = q.next
          p.next = list2
          while list2.next:
              list2 = list2.next
          list2.next = q
          return list1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
          ListNode p = list1;
          for (int i = 0; i < a - 1; ++i) {
              p = p.next;
          }
          ListNode q = list1;
          for (int i = 0; i < b + 1; ++i) {
              q = q.next;
          }
          p.next = list2;
          while (list2.next != null) {
              list2 = list2.next;
          }
          list2.next = q;
          return list1;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
