* [[https://leetcode-cn.com/problems/merge-in-between-linked-lists][1669.
合并两个链表]]
  :PROPERTIES:
  :CUSTOM_ID: 合并两个链表
  :END:
[[./solution/1600-1699/1669.Merge In Between Linked Lists/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个链表 list1 和 list2 ，它们包含的元素分别为 n 个和 m 个。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你将 list1 中第 a 个节点到第 b 个节点删除，并将list2 接在被删除节点的位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

下图中蓝色边和节点展示了操作后的结果：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回结果链表的头指针。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
  <b>输出：</b>[0,1,2,1000000,1000001,1000002,5]
  <b>解释：</b>我们删除 list1 中第三和第四个节点，并将 list2 接在该位置。上图中蓝色的边和节点为答案链表。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]
  <b>输出：</b>[0,1,1000000,1000001,1000002,1000003,1000004,6]
  <b>解释：</b>上图中蓝色的边和节点为答案链表。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= list1.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= a <= b < list1.length - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= list2.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def mergeInBetween(self, list1: ListNode, a: int, b: int, list2: ListNode) -> ListNode:
          p = q = list1
          for _ in range(a - 1):
              p = p.next
          for _ in range(b + 1):
              q = q.next
          p.next = list2
          while list2.next:
              list2 = list2.next
          list2.next = q
          return list1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
          ListNode p = list1;
          for (int i = 0; i < a - 1; ++i) {
              p = p.next;
          }
          ListNode q = list1;
          for (int i = 0; i < b + 1; ++i) {
              q = q.next;
          }
          p.next = list2;
          while (list2.next != null) {
              list2 = list2.next;
          }
          list2.next = q;
          return list1;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
