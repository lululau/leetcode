* [[https://leetcode-cn.com/problems/path-with-minimum-effort][1631.
最小体力消耗路径]]
  :PROPERTIES:
  :CUSTOM_ID: 最小体力消耗路径
  :END:
[[./solution/1600-1699/1631.Path With Minimum Effort/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你准备参加一场远足活动。给你一个二维 rows x
columns 的地图 heights ，其中 heights[row][col] 表示格子 (row,
col) 的高度。一开始你在最左上角的格子 (0, 0) ，且你希望去最右下角的格子 (rows-1,
columns-1) （注意下标从 0 开始编号）。你每次可以往
上，下，左，右 四个方向之一移动，你想要找到耗费 体力 最小的一条路径。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一条路径耗费的 体力值 是路径上相邻格子之间 高度差绝对值 的
最大值 决定的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回从左上角走到右下角的最小 体力消耗值 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>heights = [[1,2,2],[3,8,2],[5,3,5]]
  <b>输出：</b>2
  <b>解释：</b>路径 [1,3,5,3,5] 连续格子的差值绝对值最大为 2 。
  这条路径比路径 [1,2,2,2,5] 更优，因为另一条路径差值最大值为 3 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>heights = [[1,2,3],[3,8,4],[5,3,5]]
  <b>输出：</b>1
  <b>解释：</b>路径 [1,2,3,4,5] 的相邻格子差值绝对值最大为 1 ，比路径 [1,3,5,3,5] 更优。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
  <b>输出：</b>0
  <b>解释：</b>上图所示路径不需要消耗任何体力。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

rows == heights.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

columns == heights[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rows, columns <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= heights[i][j] <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
