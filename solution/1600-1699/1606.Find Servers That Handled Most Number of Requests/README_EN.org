* [[https://leetcode.com/problems/find-servers-that-handled-most-number-of-requests][1606.
Find Servers That Handled Most Number of Requests]]
  :PROPERTIES:
  :CUSTOM_ID: find-servers-that-handled-most-number-of-requests
  :END:
[[./solution/1600-1699/1606.Find Servers That Handled Most Number of Requests/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You have k servers numbered from 0 to k-1 that are being used to handle
multiple requests simultaneously. Each server has infinite computational
capacity but cannot handle more than one request at a time. The requests
are assigned to servers according to a specific algorithm:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The ith (0-indexed) request arrives.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If all servers are busy, the request is dropped (not handled at all).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If the (i % k)th server is available, assign the request to that server.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Otherwise, assign the request to the next available server (wrapping
around the list of servers and starting from 0 if necessary). For
example, if the ith server is busy, try to assign the request to the
(i+1)th server, then the (i+2)th server, and so on.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You are given a strictly increasing array arrival of positive integers,
where arrival[i] represents the arrival time of the ith request, and
another array load, where load[i] represents the load of the ith request
(the time it takes to complete). Your goal is to find the busiest
server(s). A server is considered busiest if it handled the most number
of requests successfully among all the servers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return a list containing the IDs (0-indexed) of the busiest server(s).
You may return the IDs in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] 
  <strong>Output:</strong> [1] 
  <strong>Explanation:</strong>
  All of the servers start out available.
  The first 3 requests are handled by the first 3 servers in order.
  Request 3 comes in. Server 0 is busy, so it&#39;s assigned to the next available server, which is 1.
  Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped.
  Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> k = 3, arrival = [1,2,3,4], load = [1,2,1,2]
  <strong>Output:</strong> [0]
  <strong>Explanation:</strong>
  The first 3 requests are handled by first 3 servers.
  Request 3 comes in. It is handled by server 0 since the server is available.
  Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> k = 3, arrival = [1,2,3], load = [10,12,11]
  <strong>Output:</strong> [0,1,2]
  <strong>Explanation: </strong>Each server handles a single request, so they are all considered the busiest.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]
  <strong>Output:</strong> [1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> k = 1, arrival = [1], load = [1]
  <strong>Output:</strong> [0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arrival.length, load.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arrival.length == load.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arrival[i], load[i] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arrival is strictly increasing.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
