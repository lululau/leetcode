* [[https://leetcode-cn.com/problems/distribute-repeating-integers][1655.
分配重复整数]]
  :PROPERTIES:
  :CUSTOM_ID: 分配重复整数
  :END:
[[./solution/1600-1699/1655.Distribute Repeating Integers/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个长度为 n 的整数数组 nums ，这个数组中至多有 50 个不同的值。同时你有
m 个顾客的订单
quantity ，其中，整数 quantity[i] 是第 i 位顾客订单的数目。请你判断是否能将
nums 中的整数分配给这些顾客，且满足：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

第 i 位顾客 恰好 有 quantity[i] 个整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第 i 位顾客拿到的整数都是 相同的 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每位顾客都满足上述两个要求。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

如果你可以分配 nums 中的整数满足上面的要求，那么请返回 true ，否则返回
false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,2,3,4], quantity = [2]
  <b>输出：</b>false
  <strong>解释：</strong>第 0 位顾客没办法得到两个相同的整数。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,2,3,3], quantity = [2]
  <b>输出：</b>true
  <b>解释：</b>第 0 位顾客得到 [3,3] 。整数 [1,2] 都没有被使用。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,1,2,2], quantity = [2,2]
  <b>输出：</b>true
  <b>解释：</b>第 0 位顾客得到 [1,1] ，第 1 位顾客得到 [2,2] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,1,2,3], quantity = [2,2]
  <b>输出：</b>false
  <b>解释：</b>尽管第 0 位顾客可以得到 [1,1] ，第 1 位顾客没法得到 2 个一样的整数。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,1,1,1,1], quantity = [2,3]
  <b>输出：</b>true
  <b>解释：</b>第 0 位顾客得到 [1,1] ，第 1 位顾客得到 [1,1,1] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

m == quantity.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= quantity[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums 中至多有 50 个不同的数字。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
