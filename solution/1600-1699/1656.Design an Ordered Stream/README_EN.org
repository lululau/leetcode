* [[https://leetcode.com/problems/design-an-ordered-stream][1656. Design
an Ordered Stream]]
  :PROPERTIES:
  :CUSTOM_ID: design-an-ordered-stream
  :END:
[[./solution/1600-1699/1656.Design an Ordered Stream/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is a stream of n (idKey, value) pairs arriving in an arbitrary
order, where idKey is an integer between 1 and n and value is a string.
No two pairs have the same id.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Design a stream that returns the values in increasing order of their IDs
by returning a chunk (list) of values after each insertion. The
concatenation of all the chunks should result in a list of the sorted
values.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the OrderedStream class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

OrderedStream(int n) Constructs the stream to take n values.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

String[] insert(int idKey, String value) Inserts the pair (idKey, value)
into the stream, then returns the largest possible chunk of currently
inserted values that appear next in the order.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;OrderedStream&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;]
  [[5], [3, &quot;ccccc&quot;], [1, &quot;aaaaa&quot;], [2, &quot;bbbbb&quot;], [5, &quot;eeeee&quot;], [4, &quot;ddddd&quot;]]
  <strong>Output</strong>
  [null, [], [&quot;aaaaa&quot;], [&quot;bbbbb&quot;, &quot;ccccc&quot;], [], [&quot;ddddd&quot;, &quot;eeeee&quot;]]

  <strong>Explanation</strong>
  // Note that the values ordered by ID is [&quot;aaaaa&quot;, &quot;bbbbb&quot;, &quot;ccccc&quot;, &quot;ddddd&quot;, &quot;eeeee&quot;].
  OrderedStream os = new OrderedStream(5);
  os.insert(3, &quot;ccccc&quot;); // Inserts (3, &quot;ccccc&quot;), returns [].
  os.insert(1, &quot;aaaaa&quot;); // Inserts (1, &quot;aaaaa&quot;), returns [&quot;aaaaa&quot;].
  os.insert(2, &quot;bbbbb&quot;); // Inserts (2, &quot;bbbbb&quot;), returns [&quot;bbbbb&quot;, &quot;ccccc&quot;].
  os.insert(5, &quot;eeeee&quot;); // Inserts (5, &quot;eeeee&quot;), returns [].
  os.insert(4, &quot;ddddd&quot;); // Inserts (4, &quot;ddddd&quot;), returns [&quot;ddddd&quot;, &quot;eeeee&quot;].
  // Concatentating all the chunks returned:
  // [] + [&quot;aaaaa&quot;] + [&quot;bbbbb&quot;, &quot;ccccc&quot;] + [] + [&quot;ddddd&quot;, &quot;eeeee&quot;] = [&quot;aaaaa&quot;, &quot;bbbbb&quot;, &quot;ccccc&quot;, &quot;ddddd&quot;, &quot;eeeee&quot;]
  // The resulting order is the same as the order above.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= id <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

value.length == 5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

value consists only of lowercase letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each call to insert will have a unique id.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Exactly n calls will be made to insert.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
