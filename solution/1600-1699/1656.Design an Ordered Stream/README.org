* [[https://leetcode-cn.com/problems/design-an-ordered-stream][1656.
设计有序流]]
  :PROPERTIES:
  :CUSTOM_ID: 设计有序流
  :END:
[[./solution/1600-1699/1656.Design an Ordered Stream/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有 n 个 (id, value) 对，其中 id 是 1 到 n 之间的一个整数，value
是一个字符串。不存在 id 相同的两个 (id, value) 对。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

设计一个流，以 任意 顺序获取 n 个 (id, value) 对，并在多次调用时 按 id
递增的顺序 返回一些值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 OrderedStream 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

OrderedStream(int n) 构造一个能接收 n 个值的流，并将当前指针 ptr 设为 1
。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

String[] insert(int id, String value) 向流中存储新的 (id, value)
对。存储后：

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果流存储有 id = ptr 的 (id, value) 对，则找出从 id = ptr 开始的 最长
id 连续递增序列 ，并 按顺序 返回与这些 id 关联的值的列表。然后，将 ptr
更新为最后那个  id + 1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

#+begin_html
  <p>
#+end_html

否则，返回一个空列表。

#+begin_html
  </p>
#+end_html

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入</strong>
  ["OrderedStream", "insert", "insert", "insert", "insert", "insert"]
  [[5], [3, "ccccc"], [1, "aaaaa"], [2, "bbbbb"], [5, "eeeee"], [4, "ddddd"]]
  <strong>输出</strong>
  [null, [], ["aaaaa"], ["bbbbb", "ccccc"], [], ["ddddd", "eeeee"]]

  <strong>解释</strong>
  OrderedStream os= new OrderedStream(5);
  os.insert(3, "ccccc"); // 插入 (3, "ccccc")，返回 []
  os.insert(1, "aaaaa"); // 插入 (1, "aaaaa")，返回 ["aaaaa"]
  os.insert(2, "bbbbb"); // 插入 (2, "bbbbb")，返回 ["bbbbb", "ccccc"]
  os.insert(5, "eeeee"); // 插入 (5, "eeeee")，返回 []
  os.insert(4, "ddddd"); // 插入 (4, "ddddd")，返回 ["ddddd", "eeeee"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= id <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

value.length == 5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

value 仅由小写字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每次调用 insert 都会使用一个唯一的 id

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

恰好调用 n 次 insert

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
