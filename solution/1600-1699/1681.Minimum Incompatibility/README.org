* [[https://leetcode-cn.com/problems/minimum-incompatibility][1681.
最小不兼容性]]
  :PROPERTIES:
  :CUSTOM_ID: 最小不兼容性
  :END:
[[./solution/1600-1699/1681.Minimum Incompatibility/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums​​​
和一个整数 k 。你需要将这个数组划分到 k 个相同大小的子集中，使得同一个子集里面没有两个相同的元素。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个子集的 不兼容性 是该子集里面最大值和最小值的差。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回将数组分成 k 个子集后，各子集 不兼容性 的 和 的
最小值 ，如果无法分成分成 k 个子集，返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

子集的定义是数组中一些数字的集合，对数字顺序没有要求。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [1,2,1,4], k = 2
  <b>输出：</b>4
  <b>解释：</b>最优的分配是 [1,2] 和 [1,4] 。
  不兼容性和为 (2-1) + (4-1) = 4 。
  注意到 [1,1] 和 [2,4] 可以得到更小的和，但是第一个集合有 2 个相同的元素，所以不可行。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [6,3,8,1,3,1,2,2], k = 4
  <b>输出：</b>6
  <b>解释：</b>最优的子集分配为 [1,2]，[2,3]，[6,8] 和 [1,3] 。
  不兼容性和为 (2-1) + (3-2) + (8-6) + (3-1) = 6 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [5,3,3,6,3,3], k = 3
  <b>输出：</b>-1
  <b>解释：</b>没办法将这些数字分配到 3 个子集且满足每个子集里没有相同数字。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= nums.length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums.length 能被 k 整除。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
