* [[https://leetcode-cn.com/problems/checking-existence-of-edge-length-limited-paths][1697.
检查边长度限制的路径是否存在]]
  :PROPERTIES:
  :CUSTOM_ID: 检查边长度限制的路径是否存在
  :END:
[[./solution/1600-1699/1697.Checking Existence of Edge Length Limited Paths/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 n 个点组成的无向图边集 edgeList ，其中 edgeList[i] = [ui, vi,
disi] 表示点 ui
和点 vi 之间有一条长度为 disi 的边。请注意，两个点之间可能有
超过一条边 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个查询数组queries ，其中 queries[j] = [pj, qj,
limitj] ，你的任务是对于每个查询 queries[j] ，判断是否存在从 pj 到 qj 的路径，且这条路径上的每一条边都
严格小于 limitj 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回一个 布尔数组 answer ，其中 answer.length ==
queries.length ，当 queries[j] 的查询结果为 true 时， answer
第 j 个值为 true ，否则为 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]
  <b>输出：</b>[false,true]
  <b>解释：</b>上图为给定的输入数据。注意到 0 和 1 之间有两条重边，分别为 2 和 16 。
  对于第一个查询，0 和 1 之间没有小于 2 的边，所以我们返回 false 。
  对于第二个查询，有一条路径（0 -> 1 -> 2）两条边都小于 5 ，所以这个查询我们返回 true 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]
  <b>输出：</b>[true,false]
  <b>解释：</b>上图为给定数据。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edgeList.length, queries.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edgeList[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[j].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ui, vi, pj, qj <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ui != vi

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pj != qj

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= disi, limitj <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

两个点之间可能有 多条 边。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
