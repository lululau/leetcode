* [[https://leetcode-cn.com/problems/furthest-building-you-can-reach][1642.
可以到达的最远建筑]]
  :PROPERTIES:
  :CUSTOM_ID: 可以到达的最远建筑
  :END:
[[./solution/1600-1699/1642.Furthest Building You Can Reach/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 heights ，表示建筑物的高度。另有一些砖块 bricks 和梯子
ladders 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你从建筑物 0
开始旅程，不断向后面的建筑物移动，期间可能会用到砖块或梯子。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

当从建筑物 i 移动到建筑物 i+1（下标 从 0 开始 ）时：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果当前建筑物的高度 大于或等于 下一建筑物的高度，则不需要梯子或砖块

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果当前建筑的高度 小于 下一个建筑的高度，您可以使用 一架梯子 或
(h[i+1] - h[i]) 个砖块

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

如果以最佳方式使用给定的梯子和砖块，返回你可以到达的最远建筑物的下标（下标
从 0 开始 ）。

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
  <strong>输出：</strong>4
  <strong>解释：</strong>从建筑物 0 出发，你可以按此方案完成旅程：
  - 不使用砖块或梯子到达建筑物 1 ，因为 4 >= 2
  - 使用 5 个砖块到达建筑物 2 。你必须使用砖块或梯子，因为 2 < 7
  - 不使用砖块或梯子到达建筑物 3 ，因为 7 >= 6
  - 使用唯一的梯子到达建筑物 4 。你必须使用砖块或梯子，因为 6 < 9
  无法越过建筑物 4 ，因为没有更多砖块或梯子。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
  <strong>输出：</strong>7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>heights = [14,3,19,3], bricks = 17, ladders = 0
  <strong>输出：</strong>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= heights.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= heights[i] <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= bricks <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ladders <= heights.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
