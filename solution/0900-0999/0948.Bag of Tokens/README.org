* [[https://leetcode-cn.com/problems/bag-of-tokens][948. 令牌放置]]
  :PROPERTIES:
  :CUSTOM_ID: 令牌放置
  :END:
[[./solution/0900-0999/0948.Bag of Tokens/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你的初始 能量 为 P，初始 分数 为 0，只有一包令牌 tokens 。其中 tokens[i]
是第 i 个令牌的值（下标从 0 开始）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

令牌可能的两种使用方法如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果你至少有 token[i] 点 能量 ，可以将令牌 i
置为正面朝上，失去 token[i] 点 能量 ，并得到 1 分 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果我们至少有 1 分 ，可以将令牌 i 置为反面朝上，获得 token[i] 点 能量
，并失去 1 分 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

每个令牌 最多 只能使用一次，使用 顺序不限 ，不需 使用所有令牌。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在使用任意数量的令牌后，返回我们可以得到的最大 分数 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tokens = [100], P = 50
  <strong>输出：</strong>0
  <strong>解释：</strong>无法使用唯一的令牌，因为能量和分数都太少了。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tokens = [100,200], P = 150
  <strong>输出：</strong>1
  <strong>解释：</strong>令牌 0 正面朝上，能量变为 50，分数变为 1 。不必使用令牌 1 ，因为你无法使用它来提高分数。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tokens = [100,200,300,400], P = 200
  <strong>输出：</strong>2
  <strong>解释：</strong>按下面顺序使用令牌可以得到 2 分：
  1. 令牌 0 正面朝上，能量变为 100 ，分数变为 1
  2. 令牌 3 正面朝下，能量变为 500 ，分数变为 0
  3. 令牌 1 正面朝上，能量变为 300 ，分数变为 1
  4. 令牌 2 正面朝上，能量变为 0 ，分数变为 2</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= tokens.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= tokens[i], P < 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
