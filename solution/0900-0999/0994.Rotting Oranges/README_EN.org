* [[https://leetcode.com/problems/rotting-oranges][994. Rotting
Oranges]]
  :PROPERTIES:
  :CUSTOM_ID: rotting-oranges
  :END:
[[./solution/0900-0999/0994.Rotting Oranges/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an m x n grid where each cell can have one of three
values:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 representing an empty cell,

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 representing a fresh orange, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 representing a rotten orange.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Every minute, any fresh orange that is 4-directionally adjacent to a
rotten orange becomes rotten.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum number of minutes that must elapse until no cell has
a fresh orange. If this is impossible, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[2,1,1],[1,1,0],[0,1,1]]
  <strong>Output:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[2,1,1],[0,1,1],[1,0,1]]
  <strong>Output:</strong> -1
  <strong>Explanation:</strong> The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[0,2]]
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> Since there are already no fresh oranges at minute 0, the answer is just 0.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] is 0, 1, or 2.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
