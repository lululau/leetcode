* [[https://leetcode.com/problems/minimize-malware-spread][924. Minimize
Malware Spread]]
  :PROPERTIES:
  :CUSTOM_ID: minimize-malware-spread
  :END:
[[./solution/0900-0999/0924.Minimize Malware Spread/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a network of n nodes represented as an n x n adjacency
matrix graph, where the ith node is directly connected to the jth node
if graph[i][j] == 1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Some nodes initial are initially infected by malware. Whenever two nodes
are directly connected, and at least one of those two nodes is infected
by malware, both nodes will be infected by malware. This spread of
malware will continue until no more nodes can be infected in this
manner.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Suppose M(initial) is the final number of nodes infected with malware in
the entire network after the spread of malware stops. We will remove
exactly one node from initial.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the node that, if removed, would minimize M(initial). If multiple
nodes could be removed to minimize M(initial), return such a node with
the smallest index.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that if a node was removed from the initial list of infected nodes,
it might still be infected later due to the malware spread.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == graph.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == graph[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

graph[i][j] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

graph[i][j] == graph[j][i]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

graph[i][i] == 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= initial.length <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= initial[i] <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the integers in initial are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
