* [[https://leetcode-cn.com/problems/pancake-sorting][969. 煎饼排序]]
  :PROPERTIES:
  :CUSTOM_ID: 煎饼排序
  :END:
[[./solution/0900-0999/0969.Pancake Sorting/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 arr ，请使用 煎饼翻转 完成对数组的排序。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一次煎饼翻转的执行过程如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

选择一个整数 k ，1 <= k <= arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

反转子数组 arr[0...k-1]（下标从 0 开始）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

例如，arr = [3,2,1,4] ，选择 k = 3 进行一次煎饼翻转，反转子数组 [3,2,1]
，得到 arr = [1,2,3,4] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

以数组形式返回能使 arr 有序的煎饼翻转操作所对应的 k
值序列。任何将数组排序且翻转次数在 10 * arr.length
范围内的有效答案都将被判断为正确。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[3,2,4,1]
  <strong>输出：</strong>[4,2,4,3]
  <strong>解释：</strong>
  我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。
  初始状态 arr = [3, 2, 4, 1]
  第一次翻转后（k = 4）：arr = [<strong>1</strong>, <strong>4</strong>, <strong>2</strong>, <strong>3</strong>]
  第二次翻转后（k = 2）：arr = [<strong>4</strong>, <strong>1</strong>, 2, 3]
  第三次翻转后（k = 4）：arr = [<strong>3</strong>, <strong>2</strong>, <strong>1</strong>, <strong>4</strong>]
  第四次翻转后（k = 3）：arr = [<strong>1</strong>, <strong>2</strong>, <strong>3</strong>, 4]，此时已完成排序。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[1,2,3]
  <strong>输出：</strong>[]
  <strong>解释：
  </strong>输入已经排序，因此不需要翻转任何内容。
  请注意，其他可能的答案，如 [3，3] ，也将被判断为正确。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i] <= arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arr 中的所有整数互不相同（即，arr 是从 1 到 arr.length 整数的一个排列）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
