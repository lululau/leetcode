* [[https://leetcode.com/problems/flip-equivalent-binary-trees][951.
Flip Equivalent Binary Trees]]
  :PROPERTIES:
  :CUSTOM_ID: flip-equivalent-binary-trees
  :END:
[[./solution/0900-0999/0951.Flip Equivalent Binary Trees/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

For a binary tree T, we can define a flip operation as follows: choose
any node, and swap the left and right child subtrees.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A binary tree X is flip equivalent to a binary tree Y if and only if we
can make X equal to Y after some number of flip operations.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given the roots of two binary trees root1 and root2, return true if the
two trees are flip equivelent or false otherwise.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
  <strong>Output:</strong> true
  <strong>Explanation: </strong>We flipped at nodes with values 1, 3, and 5.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root1 = [], root2 = []
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root1 = [], root2 = [1]
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root1 = [0,null,1], root2 = []
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root1 = [0,null,1], root2 = [0,1]
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in each tree is in the range [0, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each tree will have unique node values in the range [0, 99].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
