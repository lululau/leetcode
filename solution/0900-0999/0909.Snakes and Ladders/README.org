* [[https://leetcode-cn.com/problems/snakes-and-ladders][909. 蛇梯棋]]
  :PROPERTIES:
  :CUSTOM_ID: 蛇梯棋
  :END:
[[./solution/0900-0999/0909.Snakes and Ladders/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

N x N 的棋盘 board 上，按从 1 到 N*N 的数字给方格编号，编号
从左下角开始，每一行交替方向。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，一块 6 x 6 大小的棋盘，编号如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0909.Snakes and Ladders/images/snakes.png" style="height: 200px; width: 254px;">
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

r 行 c 列的棋盘，按前述方法编号，棋盘格中可能存在 “蛇” 或 “梯子”；如果
board[r][c] != -1，那个蛇或梯子的目的地将会是 board[r][c]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

玩家从棋盘上的方格 1 （总是在最后一行、第一列）开始出发。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每一回合，玩家需要从当前方格 x 开始出发，按下述要求前进：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

选定目标方格：选择从编号 x+1，x+2，x+3，x+4，x+5，或者 x+6
的方格中选出一个目标方格 s ，目标方格的编号 <= N*N。

#+begin_example
  <ul>
      <li>该选择模拟了掷骰子的情景，无论棋盘大小如何，你的目的地范围也只能处于区间 <code>[x+1, x+6]</code> 之间。</li>
  </ul>
  </li>
  <li>传送玩家：如果目标方格 <code>S</code> 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 <code>S</code>。&nbsp;</li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，你也不会继续移动。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回达到方格 N*N 所需的最少移动次数，如果不可能，则返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[
  [-1,-1,-1,-1,-1,-1],
  [-1,-1,-1,-1,-1,-1],
  [-1,-1,-1,-1,-1,-1],
  [-1,35,-1,-1,13,-1],
  [-1,-1,-1,-1,-1,-1],
  [-1,15,-1,-1,-1,-1]]
  <strong>输出：</strong>4
  <strong>解释：</strong>
  首先，从方格 1 [第 5 行，第 0 列] 开始。
  你决定移动到方格 2，并必须爬过梯子移动到到方格 15。
  然后你决定移动到方格 17 [第 3 行，第 5 列]，必须爬过蛇到方格 13。
  然后你决定移动到方格 14，且必须通过梯子移动到方格 35。
  然后你决定移动到方格 36, 游戏结束。
  可以证明你需要至少 4 次移动才能到达第 N*N 个方格，所以答案是 4。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= board.length = board[0].length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

board[i][j] 介于 1 和 N*N 之间或者等于 -1。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

编号为 1 的方格上没有蛇或梯子。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

编号为 N*N 的方格上没有蛇或梯子。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
