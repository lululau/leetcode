* [[https://leetcode-cn.com/problems/x-of-a-kind-in-a-deck-of-cards][914.
卡牌分组]]
  :PROPERTIES:
  :CUSTOM_ID: 卡牌分组
  :END:
[[./solution/0900-0999/0914.X of a Kind in a Deck of Cards/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一副牌，每张牌上都写着一个整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

此时，你需要选定一个数字 X，使我们可以将整副牌按下述规则分成 1
组或更多组：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每组都有 X 张牌。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

组内所有的牌上都写着相同的整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

仅当你可选的 X >= 2 时返回 true。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,2,3,4,4,3,2,1]
  <strong>输出：</strong>true
  <strong>解释：</strong>可行的分组是 [1,1]，[2,2]，[3,3]，[4,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,1,1,2,2,2,3,3]
  <strong>输出：</strong>false
  <strong>解释：</strong>没有满足要求的分组。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1]
  <strong>输出：</strong>false
  <strong>解释：</strong>没有满足要求的分组。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,1]
  <strong>输出：</strong>true
  <strong>解释：</strong>可行的分组是 [1,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,1,2,2,2,2]
  <strong>输出：</strong>true
  <strong>解释：</strong>可行的分组是 [1,1]，[2,2]，[2,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= deck.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= deck[i] < 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
