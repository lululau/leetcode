* [[https://leetcode-cn.com/problems/sum-of-even-numbers-after-queries][985.
查询后的偶数和]]
  :PROPERTIES:
  :CUSTOM_ID: 查询后的偶数和
  :END:
[[./solution/0900-0999/0985.Sum of Even Numbers After Queries/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给出一个整数数组 A 和一个查询数组 queries。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对于第 i 次查询，有 val = queries[i][0], index =
queries[i][1]，我们会把 val 加到 A[index] 上。然后，第 i 次查询的答案是
A 中偶数值的和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

（此处给定的 index = queries[i][1] 是从 0
开始的索引，每次查询都会永久修改数组 A。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回所有查询的答案。你的答案应当以数组 answer 给出，answer[i] 为第 i 次查询的答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
  <strong>输出：</strong>[8,6,2,4]
  <strong>解释：</strong>
  开始时，数组为 [1,2,3,4]。
  将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。
  将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。
  将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。
  将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10000 <= A[i] <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10000 <= queries[i][0] <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= queries[i][1] < A.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
