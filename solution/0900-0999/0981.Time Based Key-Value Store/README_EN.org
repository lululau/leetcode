* [[https://leetcode.com/problems/time-based-key-value-store][981. Time
Based Key-Value Store]]
  :PROPERTIES:
  :CUSTOM_ID: time-based-key-value-store
  :END:
[[./solution/0900-0999/0981.Time Based Key-Value Store/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Create a timebased key-value store class TimeMap, that supports two
operations.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

1. set(string key, string value, int timestamp)

   #+begin_html
     </p>
   #+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Stores the key and value, along with the given timestamp.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

2. get(string key, int timestamp)

   #+begin_html
     </p>
   #+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Returns a value such that set(key, value, timestamp_prev) was called
previously, with timestamp_prev <= timestamp.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If there are multiple such values, it returns the one with the largest
timestamp_prev.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If there are no values, it returns the empty string ("").

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong>inputs = <span id="example-input-1-1">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id="example-input-1-2">[[],[&quot;foo&quot;,&quot;bar&quot;,1],[&quot;foo&quot;,1],[&quot;foo&quot;,3],[&quot;foo&quot;,&quot;bar2&quot;,4],[&quot;foo&quot;,4],[&quot;foo&quot;,5]]</span>

  <strong>Output: </strong><span id="example-output-1">[null,null,&quot;bar&quot;,&quot;bar&quot;,null,&quot;bar2&quot;,&quot;bar2&quot;]</span>

  <strong>Explanation: </strong><span id="example-output-1">&nbsp; 

  TimeMap kv; &nbsp; 

  kv.set(&quot;foo&quot;, &quot;bar&quot;, 1); // store the key &quot;foo&quot; and value &quot;bar&quot; along with timestamp = 1 &nbsp; 

  kv.get(&quot;foo&quot;, 1);  // output &quot;bar&quot; &nbsp; 

  kv.get(&quot;foo&quot;, 3); // output &quot;bar&quot; since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie &quot;bar&quot; &nbsp; 

  kv.set(&quot;foo&quot;, &quot;bar2&quot;, 4); &nbsp; 

  kv.get(&quot;foo&quot;, 4); // output &quot;bar2&quot; &nbsp; 

  kv.get(&quot;foo&quot;, 5); //output &quot;bar2&quot; &nbsp; 

  </span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong>inputs = <span id="example-input-2-1">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id="example-input-2-2">[[],[&quot;love&quot;,&quot;high&quot;,10],[&quot;love&quot;,&quot;low&quot;,20],[&quot;love&quot;,5],[&quot;love&quot;,10],[&quot;love&quot;,15],[&quot;love&quot;,20],[&quot;love&quot;,25]]</span>

  <strong>Output: </strong><span id="example-output-2">[null,null,null,&quot;&quot;,&quot;high&quot;,&quot;high&quot;,&quot;low&quot;,&quot;low&quot;]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

All key/value strings are lowercase.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All key/value strings have length in the range [1, 100]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The timestamps for all TimeMap.set operations are strictly increasing.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= timestamp <= 10^7

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

TimeMap.set and TimeMap.get functions will be called a total of 120000
times (combined) per test case.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class TimeMap:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.ktv = collections.defaultdict(list)

      def set(self, key: str, value: str, timestamp: int) -> None:
          self.ktv[key].append((timestamp, value))

      def get(self, key: str, timestamp: int) -> str:
          if key not in self.ktv:
              return ''
          tv = self.ktv[key]
          i = bisect.bisect_right(tv, (timestamp, chr(127)))
          return tv[i - 1][1] if i else ''



  # Your TimeMap object will be instantiated and called as such:
  # obj = TimeMap()
  # obj.set(key,value,timestamp)
  # param_2 = obj.get(key,timestamp)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class TimeMap {
      private Map<String, TreeMap<Integer, String>> ktv;

      /** Initialize your data structure here. */
      public TimeMap() {
          ktv = new HashMap<>();
      }

      public void set(String key, String value, int timestamp) {
          TreeMap<Integer, String> tv = ktv.getOrDefault(key, new TreeMap<>());
          tv.put(timestamp, value);
          ktv.put(key, tv);
      }

      public String get(String key, int timestamp) {
          if (!ktv.containsKey(key)) {
              return "";
          }
          TreeMap<Integer, String> tv = ktv.get(key);
          Integer t = tv.floorKey(timestamp);
          return t == null ? "" : tv.get(t);
      }
  }

  /**
   * Your TimeMap object will be instantiated and called as such:
   * TimeMap obj = new TimeMap();
   * obj.set(key,value,timestamp);
   * String param_2 = obj.get(key,timestamp);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
