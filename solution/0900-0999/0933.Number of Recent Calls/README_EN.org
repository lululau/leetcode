* [[https://leetcode.com/problems/number-of-recent-calls][933. Number of
Recent Calls]]
  :PROPERTIES:
  :CUSTOM_ID: number-of-recent-calls
  :END:
[[./solution/0900-0999/0933.Number of Recent Calls/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You have a RecentCounter class which counts the number of recent
requests within a certain time frame.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the RecentCounter class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

RecentCounter() Initializes the counter with zero recent requests.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int ping(int t) Adds a new request at time t, where t represents some
time in milliseconds, and returns the number of requests that has
happened in the past 3000 milliseconds (including the new request).
Specifically, return the number of requests that have happened in the
inclusive range [t - 3000, t].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed that every call to ping uses a strictly larger value of
t than the previous call.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]
  [[], [1], [100], [3001], [3002]]
  <strong>Output</strong>
  [null, 1, 2, 3, 3]

  <strong>Explanation</strong>
  RecentCounter recentCounter = new RecentCounter();
  recentCounter.ping(1);     // requests = [<u>1</u>], range is [-2999,1], return 1
  recentCounter.ping(100);   // requests = [<u>1</u>, <u>100</u>], range is [-2900,100], return 2
  recentCounter.ping(3001);  // requests = [<u>1</u>, <u>100</u>, <u>3001</u>], range is [1,3001], return 3
  recentCounter.ping(3002);  // requests = [1, <u>100</u>, <u>3001</u>, <u>3002</u>], range is [2,3002], return 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= t <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each test case will call ping with strictly increasing values of t.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 104 calls will be made to ping.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class RecentCounter:

      def __init__(self):
          self.q = collections.deque()

      def ping(self, t: int) -> int:
          self.q.append(t)
          while self.q[0] < t - 3000:
              self.q.popleft()
          return len(self.q)


  # Your RecentCounter object will be instantiated and called as such:
  # obj = RecentCounter()
  # param_1 = obj.ping(t)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class RecentCounter {

      private Deque<Integer> q;

      public RecentCounter() {
          q = new ArrayDeque<>();
      }

      public int ping(int t) {
          q.offerLast(t);
          while (q.peekFirst() < t - 3000) {
              q.pollFirst();
          }
          return q.size();
      }
  }

  /**
   * Your RecentCounter object will be instantiated and called as such:
   * RecentCounter obj = new RecentCounter();
   * int param_1 = obj.ping(t);
   */
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  var RecentCounter = function () {
    this.q = [];
  };

  /**
   * @param {number} t
   * @return {number}
   */
  RecentCounter.prototype.ping = function (t) {
    this.q.push(t);
    while (this.q[0] < t - 3000) {
      this.q.shift();
    }
    return this.q.length;
  };

  /**
   * Your RecentCounter object will be instantiated and called as such:
   * var obj = new RecentCounter()
   * var param_1 = obj.ping(t)
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
