* [[https://leetcode-cn.com/problems/number-of-recent-calls][933.
最近的请求次数]]
  :PROPERTIES:
  :CUSTOM_ID: 最近的请求次数
  :END:
[[./solution/0900-0999/0933.Number of Recent Calls/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

写一个 RecentCounter 类来计算特定时间范围内最近的请求。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你实现 RecentCounter 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

RecentCounter() 初始化计数器，请求数为 0 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int ping(int t) 在时间 t 添加一个新请求，其中 t
表示以毫秒为单位的某个时间，并返回过去 3000
毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 [t-3000, t]
内发生的请求数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

保证 每次对 ping 的调用都使用比之前更大的 t 值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["RecentCounter", "ping", "ping", "ping", "ping"]
  [[], [1], [100], [3001], [3002]]
  <strong>输出：</strong>
  [null, 1, 2, 3, 3]

  <strong>解释：</strong>
  RecentCounter recentCounter = new RecentCounter();
  recentCounter.ping(1);     // requests = [<strong>1</strong>]，范围是 [-2999,1]，返回 1
  recentCounter.ping(100);   // requests = [<strong>1</strong>, <strong>100</strong>]，范围是 [-2900,100]，返回 2
  recentCounter.ping(3001);  // requests = [<strong>1</strong>, <strong>100</strong>, <strong>3001</strong>]，范围是 [1,3001]，返回 3
  recentCounter.ping(3002);  // requests = [1, <strong>100</strong>, <strong>3001</strong>, <strong>3002</strong>]，范围是 [2,3002]，返回 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= t <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

保证每次对 ping 调用所使用的 t 值都 严格递增

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

至多调用 ping 方法 104 次

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

在第 1、100、3001、3002 这四个时间点分别进行了 ping 请求， 在 3001
秒的时候， 它前面的 3000 秒指的是区间 =[1,3001]=， 所以一共是有
=1、100、3001= 三个请求， t = 3002 的前 3000 秒指的是区间 =[2,3002]=,
所以有 =100、3001、3002= 三次请求。

可以用队列实现。每次将 t 进入队尾，同时从队头开始依次移除小于 =t-3000=
的元素。然后返回队列的大小 =q.size()= 即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class RecentCounter:

      def __init__(self):
          self.q = collections.deque()

      def ping(self, t: int) -> int:
          self.q.append(t)
          while self.q[0] < t - 3000:
              self.q.popleft()
          return len(self.q)


  # Your RecentCounter object will be instantiated and called as such:
  # obj = RecentCounter()
  # param_1 = obj.ping(t)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class RecentCounter {

      private Deque<Integer> q;

      public RecentCounter() {
          q = new ArrayDeque<>();
      }

      public int ping(int t) {
          q.offerLast(t);
          while (q.peekFirst() < t - 3000) {
              q.pollFirst();
          }
          return q.size();
      }
  }

  /**
   * Your RecentCounter object will be instantiated and called as such:
   * RecentCounter obj = new RecentCounter();
   * int param_1 = obj.ping(t);
   */
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  var RecentCounter = function () {
    this.q = [];
  };

  /**
   * @param {number} t
   * @return {number}
   */
  RecentCounter.prototype.ping = function (t) {
    this.q.push(t);
    while (this.q[0] < t - 3000) {
      this.q.shift();
    }
    return this.q.length;
  };

  /**
   * Your RecentCounter object will be instantiated and called as such:
   * var obj = new RecentCounter()
   * var param_1 = obj.ping(t)
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
