* [[https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree][987.
二叉树的垂序遍历]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树的垂序遍历
  :END:
[[./solution/0900-0999/0987.Vertical Order Traversal of a Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你二叉树的根结点 root ，请你设计算法计算二叉树的 垂序遍历 序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对位于 (row, col) 的每个结点而言，其左右子结点分别位于 (row + 1,
col - 1) 和 (row + 1, col + 1) 。树的根结点位于 (0, 0) 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

二叉树的 垂序遍历
从最左边的列开始直到最右边的列结束，按列索引每一列上的所有结点，形成一个按出现位置从上到下排序的有序列表。如果同行同列上有多个结点，则按结点的值从小到大进行排序。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回二叉树的 垂序遍历 序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [3,9,20,null,null,15,7]
  <strong>输出：</strong>[[9],[3,15],[20],[7]]
  <strong>解释：</strong>
  列 -1 ：只有结点 9 在此列中。
  列  0 ：只有结点 3 和 15 在此列中，按从上到下顺序。
  列  1 ：只有结点 20 在此列中。
  列  2 ：只有结点 7 在此列中。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,2,3,4,5,6,7]
  <strong>输出：</strong>[[4],[2],[1,5,6],[3],[7]]
  <strong>解释：</strong>
  列 -2 ：只有结点 4 在此列中。
  列 -1 ：只有结点 2 在此列中。
  列  0 ：结点 1 、5 和 6 都在此列中。
            1 在上面，所以它出现在前面。
            5 和 6 位置都是 (2, 0) ，所以按值从小到大排序，5 在 6 的前面。
  列  1 ：只有结点 3 在此列中。
  列  2 ：只有结点 7 在此列中。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,2,3,4,6,5,7]
  <strong>输出：</strong>[[4],[2],[1,5,6],[3],[7]]
  <strong>解释：</strong>
  这个示例实际上与示例 2 完全相同，只是结点 5 和 6 在树中的位置发生了交换。
  因为 5 和 6 的位置仍然相同，所以答案保持不变，仍然按值从小到大排序。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中结点数目总数在范围 [1, 1000] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
