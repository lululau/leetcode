* [[https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree][987.
Vertical Order Traversal of a Binary Tree]]
  :PROPERTIES:
  :CUSTOM_ID: vertical-order-traversal-of-a-binary-tree
  :END:
[[./solution/0900-0999/0987.Vertical Order Traversal of a Binary Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary tree, calculate the vertical order traversal
of the binary tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For each node at position (row, col), its left and right children will
be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively.
The root of the tree is at (0, 0).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The vertical order traversal of a binary tree is a list of top-to-bottom
orderings for each column index starting from the leftmost column and
ending on the rightmost column. There may be multiple nodes in the same
row and same column. In such a case, sort these nodes by their values.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the vertical order traversal of the binary tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,9,20,null,null,15,7]
  <strong>Output:</strong> [[9],[3,15],[20],[7]]
  <strong>Explanation:</strong>
  Column -1: Only node 9 is in this column.
  Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.
  Column 1: Only node 20 is in this column.
  Column 2: Only node 7 is in this column.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2,3,4,5,6,7]
  <strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]]
  <strong>Explanation:</strong>
  Column -2: Only node 4 is in this column.
  Column -1: Only node 2 is in this column.
  Column 0: Nodes 1, 5, and 6 are in this column.
            1 is at the top, so it comes first.
            5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.
  Column 1: Only node 3 is in this column.
  Column 2: Only node 7 is in this column.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2,3,4,6,5,7]
  <strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]]
  <strong>Explanation:</strong>
  This case is the exact same as example 2, but with nodes 5 and 6 swapped.
  Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 1000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
