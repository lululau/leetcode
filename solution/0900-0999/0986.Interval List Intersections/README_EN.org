* [[https://leetcode.com/problems/interval-list-intersections][986.
Interval List Intersections]]
  :PROPERTIES:
  :CUSTOM_ID: interval-list-intersections
  :END:
[[./solution/0900-0999/0986.Interval List Intersections/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two lists of closed intervals, firstList and secondList,
where firstList[i] = [starti, endi] and secondList[j] = [startj, endj].
Each list of intervals is pairwise disjoint and in sorted order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the intersection of these two interval lists.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A closed interval [a, b] (with a < b) denotes the set of real numbers x
with a <= x <= b.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The intersection of two closed intervals is a set of real numbers that
are either empty or represented as a closed interval. For example, the
intersection of [1, 3] and [2, 4] is [2, 3].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
  <strong>Output:</strong> [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> firstList = [[1,3],[5,9]], secondList = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> firstList = [], secondList = [[4,8],[10,12]]
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> firstList = [[1,7]], secondList = [[3,10]]
  <strong>Output:</strong> [[3,7]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= firstList.length, secondList.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

firstList.length + secondList.length >= 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= starti < endi <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

endi < starti+1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= startj < endj <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

endj < startj+1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
