* [[https://leetcode-cn.com/problems/interval-list-intersections][986.
区间列表的交集]]
  :PROPERTIES:
  :CUSTOM_ID: 区间列表的交集
  :END:
[[./solution/0900-0999/0986.Interval List Intersections/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定两个由一些 闭区间 组成的列表，firstList 和 secondList ，其中
firstList[i] = [starti, endi] 而 secondList[j] = [startj, endj]
。每个区间列表都是成对 不相交 的，并且 已经排序 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回这 两个区间列表的交集 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

形式上，闭区间 [a, b]（其中 a <= b）表示实数 x 的集合，而 a <= x <= b 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

两个闭区间的 交集 是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和
[2, 4] 的交集为 [2, 3] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
  <strong>输出：</strong>[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>firstList = [[1,3],[5,9]], secondList = []
  <strong>输出：</strong>[]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>firstList = [], secondList = [[4,8],[10,12]]
  <strong>输出：</strong>[]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>firstList = [[1,7]], secondList = [[3,10]]
  <strong>输出：</strong>[[3,7]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= firstList.length, secondList.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

firstList.length + secondList.length >= 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= starti < endi <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

endi < starti+1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= startj < endj <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

endj < startj+1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
