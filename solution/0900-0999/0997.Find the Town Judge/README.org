* [[https://leetcode-cn.com/problems/find-the-town-judge][997.
找到小镇的法官]]
  :PROPERTIES:
  :CUSTOM_ID: 找到小镇的法官
  :END:
[[./solution/0900-0999/0997.Find the Town Judge/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在一个小镇里，按从 1 到 N 标记了 N
个人。传言称，这些人中有一个是小镇上的秘密法官。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果小镇的法官真的存在，那么：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

小镇的法官不相信任何人。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个人（除了小镇法官外）都信任小镇的法官。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

只有一个人同时满足属性 1 和属性 2 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

给定数组 trust，该数组由信任对 trust[i] = [a, b] 组成，表示标记为 a
的人信任标记为 b 的人。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的标记。否则，返回
-1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>N = 2, trust = [[1,2]]
  <strong>输出：</strong>2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>N = 3, trust = [[1,3],[2,3]]
  <strong>输出：</strong>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>N = 3, trust = [[1,3],[2,3],[3,1]]
  <strong>输出：</strong>-1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>N = 3, trust = [[1,2],[2,3]]
  <strong>输出：</strong>-1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
  <strong>输出：</strong>3</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

trust.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

trust[i] 是完全不同的

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

trust[i][0] != trust[i][1]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= trust[i][0], trust[i][1] <= N

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
