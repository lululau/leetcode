* [[https://leetcode.com/problems/three-equal-parts][927. Three Equal
Parts]]
  :PROPERTIES:
  :CUSTOM_ID: three-equal-parts
  :END:
[[./solution/0900-0999/0927.Three Equal Parts/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an array arr which consists of only zeros and ones, divide
the array into three non-empty parts such that all of these parts
represent the same binary value.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If it is possible, return any [i, j] with i + 1 < j, such that:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

arr[0], arr[1], ..., arr[i] is the first part,

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All three parts have equal binary values.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

If it is not possible, return [-1, -1].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that the entire part is used when considering what binary value it
represents. For example, [1,1,0] represents 6 in decimal, not 3. Also,
leading zeros are allowed, so [0,1,1] and [1,1] represent the same
value.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> arr = [1,0,1,0,1]
  <strong>Output:</strong> [0,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> arr = [1,1,0,1,1]
  <strong>Output:</strong> [-1,-1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> arr = [1,1,0,0,1]
  <strong>Output:</strong> [0,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= arr.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arr[i] is 0 or 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
