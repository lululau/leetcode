* [[https://leetcode-cn.com/problems/three-equal-parts][927. 三等分]]
  :PROPERTIES:
  :CUSTOM_ID: 三等分
  :END:
[[./solution/0900-0999/0927.Three Equal Parts/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个由 0 和 1 组成的数组 A，将数组分成
3 个非空的部分，使得所有这些部分表示相同的二进制值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果可以做到，请返回任何 [i, j]，其中 i+1 < j，这样一来：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

A[0], A[1], ..., A[i] 组成第一部分；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A[i+1], A[i+2], ..., A[j-1] 作为第二部分；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A[j], A[j+1], ..., A[A.length - 1] 是第三部分。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

这三个部分所表示的二进制值相等。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

如果无法做到，就返回 [-1, -1]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，[1,1,0] 表示十进制中的 6，而不会是 3。此外，前导零也是被允许的，所以 [0,1,1]
和 [1,1] 表示相同的值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,0,1,0,1]
  <strong>输出：</strong>[0,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输出：</strong>[1,1,0,1,1]
  <strong>输出：</strong>[-1,-1]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= A.length <= 30000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A[i] == 0 或 A[i] == 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
