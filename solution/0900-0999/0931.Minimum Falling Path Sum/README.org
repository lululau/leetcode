* [[https://leetcode-cn.com/problems/minimum-falling-path-sum][931.
下降路径最小和]]
  :PROPERTIES:
  :CUSTOM_ID: 下降路径最小和
  :END:
[[./solution/0900-0999/0931.Minimum Falling Path Sum/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 n x n 的 方形 整数数组 matrix ，请你找出并返回通过 matrix
的下降路径 的 最小和 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

下降路径
可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。具体来说，位置
(row, col) 的下一个元素应当是 (row + 1, col - 1)、(row + 1, col) 或者
(row + 1, col + 1) 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>matrix = [[2,1,3],[6,5,4],[7,8,9]]
  <strong>输出：</strong>13
  <strong>解释：</strong>下面是两条和最小的下降路径，用加粗标注：
  [[2,<strong>1</strong>,3],      [[2,<strong>1</strong>,3],
   [6,<strong>5</strong>,4],       [6,5,<strong>4</strong>],
   [<strong>7</strong>,8,9]]       [7,<strong>8</strong>,9]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>matrix = [[-19,57],[-40,-5]]
  <strong>输出：</strong>-59
  <strong>解释：</strong>下面是一条和最小的下降路径，用加粗标注：
  [[<strong>-19</strong>,57],
   [<strong>-40</strong>,-5]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>matrix = [[-48]]
  <strong>输出：</strong>-48
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= matrix[i][j] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
