* [[https://leetcode-cn.com/problems/maximum-sum-circular-subarray][918.
环形子数组的最大和]]
  :PROPERTIES:
  :CUSTOM_ID: 环形子数组的最大和
  :END:
[[./solution/0900-0999/0918.Maximum Sum Circular Subarray/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个由整数数组 A 表示的环形数组 C，求 C 的非空子数组的最大可能和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在此处，环形数组意味着数组的末端将会与开头相连呈环状。（形式上，当0 <= i
< A.length 时 C[i] = A[i]，且当 i >= 0 时 C[i+A.length] = C[i]）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

此外，子数组最多只能包含固定缓冲区
A 中的每个元素一次。（形式上，对于子数组 C[i], C[i+1], ...,
C[j]，不存在 i <= k1, k2 <= j 其中 k1 % A.length = k2 % A.length）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,-2,3,-2]
  <strong>输出：</strong>3
  <strong>解释：</strong>从子数组 [3] 得到最大和 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[5,-3,5]
  <strong>输出：</strong>10
  <strong>解释：</strong>从子数组 [5,5] 得到最大和 5 + 5 = 10
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[3,-1,2,-1]
  <strong>输出：</strong>4
  <strong>解释：</strong>从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[3,-2,2,-3]
  <strong>输出：</strong>3
  <strong>解释：</strong>从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[-2,-3,-1]
  <strong>输出：</strong>-1
  <strong>解释：</strong>从子数组 [-1] 得到最大和 -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

-30000 <= A[i] <= 30000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A.length <= 30000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
