* [[https://leetcode.com/problems/minimum-add-to-make-parentheses-valid][921.
Minimum Add to Make Parentheses Valid]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-add-to-make-parentheses-valid
  :END:
[[./solution/0900-0999/0921.Minimum Add to Make Parentheses Valid/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string S of '(' and ')' parentheses, we add the minimum number
of parentheses ( '(' or ')', and in any positions ) so that the
resulting parentheses string is valid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Formally, a parentheses string is valid if and only if:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

It is the empty string, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It can be written as AB (A concatenated with B), where A and B are valid
strings, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It can be written as (A), where A is a valid string.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Given a parentheses string, return the minimum number of parentheses we
must add to make the resulting string valid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-1-1">&quot;())&quot;</span>

  <strong>Output: </strong><span id="example-output-1">1</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-2-1">&quot;(((&quot;</span>

  <strong>Output: </strong><span id="example-output-2">3</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-3-1">&quot;()&quot;</span>

  <strong>Output: </strong><span id="example-output-3">0</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-4-1">&quot;()))((&quot;</span>

  <strong>Output: </strong><span id="example-output-4">4</span></pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

S.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S only consists of '(' and ')' characters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

 

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
