* [[https://leetcode-cn.com/problems/delete-columns-to-make-sorted-iii][960.
删列造序 III]]
  :PROPERTIES:
  :CUSTOM_ID: 删列造序-iii
  :END:
[[./solution/0900-0999/0960.Delete Columns to Make Sorted III/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定由 N 个小写字母字符串组成的数组 A，其中每个字符串长度相等。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

选取一个删除索引序列，对于 A 中的每个字符串，删除对应每个索引处的字符。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

比如，有 A = ["babca","bbazb"]，删除索引序列 {0, 1,
4}，删除后 A 为["bc","az"]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设，我们选择了一组删除索引 D，那么在执行删除操作之后，最终得到的数组的行中的每个元素都是按字典序排列的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

清楚起见，A[0] 是按字典序排列的（即，A[0][0] <= A[0][1] <= ... <=
A[0][A[0].length - 1]），A[1] 是按字典序排列的（即，A[1][0] <= A[1][1]
<= ... <= A[1][A[1].length - 1]），依此类推。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回 D.length 的最小可能值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;babca&quot;,&quot;bbazb&quot;]
  <strong>输出：</strong>3
  <strong>解释：
  </strong>删除 0、1 和 4 这三列后，最终得到的数组是 A = [&quot;bc&quot;, &quot;az&quot;]。
  这两行是分别按字典序排列的（即，A[0][0] &lt;= A[0][1] 且 A[1][0] &lt;= A[1][1]）。
  注意，A[0] &gt; A[1] &mdash;&mdash; 数组 A 不一定是按字典序排列的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;edcba&quot;]
  <strong>输出：</strong>4
  <strong>解释：</strong>如果删除的列少于 4 列，则剩下的行都不会按字典序排列。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;ghi&quot;,&quot;def&quot;,&quot;abc&quot;]
  <strong>输出：</strong>0
  <strong>解释：</strong>所有行都已按字典序排列。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A[i].length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
