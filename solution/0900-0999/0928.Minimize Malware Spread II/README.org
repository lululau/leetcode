* [[https://leetcode-cn.com/problems/minimize-malware-spread-ii][928.
尽量减少恶意软件的传播 II]]
  :PROPERTIES:
  :CUSTOM_ID: 尽量减少恶意软件的传播-ii
  :END:
[[./solution/0900-0999/0928.Minimize Malware Spread II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

(这个问题与 尽量减少恶意软件的传播 是一样的，不同之处用粗体表示。)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在节点网络中，只有当 graph[i][j] =
1 时，每个节点 i 能够直接连接到另一个节点 j。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们可以从初始列表中删除一个节点，并完全移除该节点以及从该节点到任何其他节点的任何连接。如果移除这一节点将最小化 M(initial)， 则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输出：</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
  <strong>输入：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 < graph.length = graph[0].length <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= graph[i][j] == graph[j][i] <= 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

graph[i][i] = 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= initial.length < graph.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= initial[i] < graph.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
