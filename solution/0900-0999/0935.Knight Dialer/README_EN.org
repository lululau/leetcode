* [[https://leetcode.com/problems/knight-dialer][935. Knight Dialer]]
  :PROPERTIES:
  :CUSTOM_ID: knight-dialer
  :END:
[[./solution/0900-0999/0935.Knight Dialer/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

The chess knight has a unique movement, it may move two squares
vertically and one square horizontally, or two squares horizontally and
one square vertically (with both forming the shape of an L). The
possible movements of chess knight are shown in this diagaram:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A chess knight can move as indicated in the chess diagram below:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We have a chess knight and a phone pad as shown below, the knight can
only stand on a numeric cell (i.e. blue cell).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given an integer n, return how many distinct phone numbers of length n
we can dial.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are allowed to place the knight on any numeric cell initially and
then you should perform n - 1 jumps to dial a number of length n. All
jumps should be valid knight jumps.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

As the answer may be very large, return the answer modulo 109 + 7.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 1
  <strong>Output:</strong> 10
  <strong>Explanation:</strong> We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2
  <strong>Output:</strong> 20
  <strong>Explanation:</strong> All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 3
  <strong>Output:</strong> 46
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4
  <strong>Output:</strong> 104
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 3131
  <strong>Output:</strong> 136006598
  <strong>Explanation:</strong> Please take care of the mod.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
