* [[https://leetcode-cn.com/problems/maximum-binary-tree-ii][998.
最大二叉树 II]]
  :PROPERTIES:
  :CUSTOM_ID: 最大二叉树-ii
  :END:
[[./solution/0900-0999/0998.Maximum Binary Tree II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

最大树定义：一个树，其中每个节点的值都大于其子树中的任何其他值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给出最大树的根节点 root。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

就像之前的问题那样，给定的树是从列表 A（root =
Construct(A)）递归地使用下述 Construct(A) 例程构造的：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果 A 为空，返回 null

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

否则，令 A[i] 作为 A 的最大元素。创建一个值为 A[i] 的根节点 root

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

root 的左子树将被构建为 Construct([A[0], A[1], ..., A[i-1]])

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

root 的右子树将被构建为 Construct([A[i+1], A[i+2], ..., A[A.length -
1]])

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

返回 root

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请注意，我们没有直接给定 A，只有一个根节点 root = Construct(A).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设 B 是 A 的副本，并在末尾附加值 val。题目数据保证 B 中的值是不同的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 Construct(B)。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [4,1,3,null,null,2], val = 5
  <strong>输出：</strong>[5,4,null,1,3,null,null,2]
  <strong>解释：</strong>A = [1,4,2,3], B = [1,4,2,3,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [5,2,4,null,1], val = 3
  <strong>输出：</strong>[5,2,4,null,1,null,3]
  <strong>解释：</strong>A = [2,1,5,4], B = [2,1,5,4,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [5,2,3,null,1], val = 4
  <strong>输出：</strong>[5,2,4,null,1,3]
  <strong>解释：</strong>A = [2,1,5,3], B = [2,1,5,3,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= B.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
