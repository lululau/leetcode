* [[https://leetcode-cn.com/problems/delete-columns-to-make-sorted-ii][955.
删列造序 II]]
  :PROPERTIES:
  :CUSTOM_ID: 删列造序-ii
  :END:
[[./solution/0900-0999/0955.Delete Columns to Make Sorted II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定由 n 个字符串组成的数组 strs，其中每个字符串长度相等。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

选取一个删除索引序列，对于 strs
中的每个字符串，删除对应每个索引处的字符。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

比如，有 strs = ["abcdef", "uvwxyz"]，删除索引序列 {0, 2, 3}，删除后
strs 为["bef", "vyz"]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设，我们选择了一组删除索引
answer，那么在执行删除操作之后，最终得到的数组的元素是按 字典序（strs[0]
<= strs[1] <= strs[2] ... <= strs[n - 1]）排列的，然后请你返回
answer.length 的最小可能值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>strs = ["ca","bb","ac"]
  <strong>输出：</strong>1
  <strong>解释： </strong>
  删除第一列后，strs = ["a", "b", "c"]。
  现在 strs 中元素是按字典排列的 (即，strs[0] <= strs[1] <= strs[2])。
  我们至少需要进行 1 次删除，因为最初 strs 不是按字典序排列的，所以答案是 1。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>strs = ["xc","yb","za"]
  <strong>输出：</strong>0
  <strong>解释：</strong>
  strs 的列已经是按字典序排列了，所以我们不需要删除任何东西。
  注意 strs 的行不需要按字典序排列。
  也就是说，strs[0][0] <= strs[0][1] <= ... 不一定成立。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>strs = ["zyx","wvu","tsr"]
  <strong>输出：</strong>3
  <strong>解释：</strong>
  我们必须删掉每一列。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == strs.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= strs[i].length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

strs[i] 由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
