* [[https://leetcode-cn.com/problems/add-to-array-form-of-integer][989.
数组形式的整数加法]]
  :PROPERTIES:
  :CUSTOM_ID: 数组形式的整数加法
  :END:
[[./solution/0900-0999/0989.Add to Array-Form of Integer/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X
= 1231，那么其数组形式为 [1,2,3,1]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [1,2,0,0], K = 34
  <strong>输出：</strong>[1,2,3,4]
  <strong>解释：</strong>1200 + 34 = 1234
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [2,7,4], K = 181
  <strong>输出：</strong>[4,5,5]
  <strong>解释：</strong>274 + 181 = 455
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [2,1,5], K = 806
  <strong>输出：</strong>[1,0,2,1]
  <strong>解释：</strong>215 + 806 = 1021
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [9,9,9,9,9,9,9,9,9,9], K = 1
  <strong>输出：</strong>[1,0,0,0,0,0,0,0,0,0,0]
  <strong>解释：</strong>9999999999 + 1 = 10000000000
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= A[i] <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= K <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 A.length > 1，那么 A[0] != 0

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

数组从尾到头遍历，分别与 =K= 中的每一位相加，进位保存在 =carry=
中，不进位和则添加到结果列表中。最后逆序结果列表即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def addToArrayForm(self, A: List[int], K: int) -> List[int]:
          n = len(A) - 1
          carry, res = 0, []
          while n >= 0 or K != 0 or carry != 0:
              carry += (0 if n < 0 else A[n]) + (K % 10)
              res.append(carry % 10)
              K //= 10
              carry //= 10
              n -= 1
          return res[::-1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public List<Integer> addToArrayForm(int[] A, int K) {
          int n = A.length - 1;
          List<Integer> res = new ArrayList<>();
          int carry = 0;
          while (n >= 0 || K != 0 || carry != 0) {
              carry += (n < 0 ? 0 : A[n]) + (K % 10);
              res.add(carry % 10);
              K /= 10;
              carry /= 10;
              --n;
          }
          Collections.reverse(res);
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
