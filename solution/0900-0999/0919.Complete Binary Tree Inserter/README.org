* [[https://leetcode-cn.com/problems/complete-binary-tree-inserter][919.
完全二叉树插入器]]
  :PROPERTIES:
  :CUSTOM_ID: 完全二叉树插入器
  :END:
[[./solution/0900-0999/0919.Complete Binary Tree Inserter/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

完全二叉树是每一层（除最后一层外）都是完全填充（即，节点数达到最大）的，并且所有的节点都尽可能地集中在左侧。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

设计一个用完全二叉树初始化的数据结构 CBTInserter，它支持以下几种操作：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

CBTInserter(TreeNode root) 使用头节点为 root 的给定树初始化该数据结构；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

CBTInserter.insert(int v)  向树中插入一个新节点，节点类型为
TreeNode，值为 v
。使树保持完全二叉树的状态，并返回插入的新节点的父节点的值；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

CBTInserter.get_root() 将返回树的头节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1]],[2],[]]
  <strong>输出：</strong>[null,1,[1,2]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]
  <strong>输出：</strong>[null,3,4,[1,2,3,4,5,6,7,8]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

最初给定的树是完全二叉树，且包含 1 到 1000 个节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个测试用例最多调用 CBTInserter.insert  操作 10000 次。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

给定节点或插入节点的每个值都在 0 到 5000 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
