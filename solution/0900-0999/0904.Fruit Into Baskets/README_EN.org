* [[https://leetcode.com/problems/fruit-into-baskets][904. Fruit Into
Baskets]]
  :PROPERTIES:
  :CUSTOM_ID: fruit-into-baskets
  :END:
[[./solution/0900-0999/0904.Fruit Into Baskets/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In a row of trees, the i-th tree produces fruit with type tree[i].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You start at any tree of your choice, then repeatedly perform the
following steps:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Add one piece of fruit from this tree to your baskets.  If you cannot,
stop.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Move to the next tree to the right of the current tree.  If there is no
tree to the right, stop.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Note that you do not have any choice after the initial choice of
starting tree: you must perform step 1, then step 2, then back to step
1, then step 2, and so on until you stop.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You have two baskets, and each basket can carry any quantity of fruit,
but you want each basket to only carry one type of fruit each.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

What is the total amount of fruit you can collect with this procedure?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-1-1">[1,2,1]</span>

  <strong>Output: </strong><span id="example-output-1">3</span>

  <strong><span>Explanation: </span></strong><span>We can collect [1,2,1].</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-2-1">[0,1,2,2]</span>

  <strong>Output: </strong><span id="example-output-2">3

  </span><strong><span>Explanation: </span></strong><span>We can collect [1,2,2].

  If we started at the first tree, we would only collect [0, 1].</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-3-1">[1,2,3,2,2]</span>

  <strong>Output: </strong><span id="example-output-3">4

  </span><strong><span>Explanation: </span></strong><span>We can collect [2,3,2,2].</span>

  <span>If we started at the first tree, we would only collect [1, 2].</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-4-1">[3,3,3,1,2,1,1,2,3,3,4]</span>

  <strong>Output: </strong>5<span id="example-output-4">

  </span><strong><span>Explanation: </span></strong><span>We can collect [1,2,1,1,2].</span>

  <span>If we started at the first tree or the eighth tree, we would only collect 4 fruits.</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= tree.length <= 40000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= tree[i] < tree.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def totalFruit(self, tree: List[int]) -> int:
          counter = collections.Counter()
          i = res = 0
          for j, type in enumerate(tree):
              counter[type] += 1
              while len(counter) > 2:
                  counter[tree[i]] -= 1
                  if counter[tree[i]] == 0:
                      counter.pop(tree[i])
                  i += 1
              res = max(res, j - i + 1)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int totalFruit(int[] tree) {
          Map<Integer, Integer> counter = new HashMap<>();
          int i = 0, res = 0;
          for (int j = 0; j < tree.length; ++j) {
              counter.put(tree[j], counter.getOrDefault(tree[j], 0) + 1);
              while (counter.size() > 2) {
                  counter.put(tree[i], counter.get(tree[i]) - 1);
                  if (counter.get(tree[i]) == 0) {
                      counter.remove(tree[i]);
                  }
                  ++i;
              }
              res = Math.max(res, j - i + 1);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
