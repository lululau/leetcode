* [[https://leetcode-cn.com/problems/sort-array-by-parity][905.
按奇偶排序数组]]
  :PROPERTIES:
  :CUSTOM_ID: 按奇偶排序数组
  :END:
[[./solution/0900-0999/0905.Sort Array By Parity/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个非负整数数组 A，返回一个数组，在该数组中， A
的所有偶数元素之后跟着所有奇数元素。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以返回满足此条件的任何数组作为答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[3,1,2,4]
  <strong>输出：</strong>[2,4,3,1]
  输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= A[i] <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

双指针原地交换数组元素。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def sortArrayByParity(self, A: List[int]) -> List[int]:
          i, j = 0, len(A) - 1
          while i < j:
              if (A[i] & 1) > (A[j] & 1):
                  A[i], A[j] = A[j], A[i]
              if A[i] & 1 == 0:
                  i += 1
              if A[j] & 1 == 1:
                  j -= 1
          return A
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[] sortArrayByParity(int[] A) {
          int i = 0, j = A.length - 1;
          while (i < j) {
              if ((A[i] & 1) > (A[j] & 1)) {
                  int t = A[i];
                  A[i] = A[j];
                  A[j] = t;
              }
              if ((A[i] & 1) == 0) {
                  ++i;
              }
              if ((A[j] & 1) == 1) {
                  --j;
              }
          }
          return A;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} A
   * @return {number[]}
   */
  var sortArrayByParity = function (A) {
    let i = 0;
    let j = A.length - 1;
    while (i < j) {
      if ((A[i] & 1) > (A[j] & 1)) {
        const t = A[i];
        A[i] = A[j];
        A[j] = t;
      }
      if ((A[i] & 1) == 0) {
        ++i;
      }
      if ((A[j] & 1) == 1) {
        --j;
      }
    }
    return A;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
