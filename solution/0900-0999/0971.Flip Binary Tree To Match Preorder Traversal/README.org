* [[https://leetcode-cn.com/problems/flip-binary-tree-to-match-preorder-traversal][971.
翻转二叉树以匹配先序遍历]]
  :PROPERTIES:
  :CUSTOM_ID: 翻转二叉树以匹配先序遍历
  :END:
[[./solution/0900-0999/0971.Flip Binary Tree To Match Preorder Traversal/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一棵二叉树的根节点 root ，树中有 n
个节点，每个节点都有一个不同于其他节点且处于 1 到 n 之间的值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

另给你一个由 n 个值组成的行程序列 voyage ，表示 预期 的二叉树 先序遍历
结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

通过交换节点的左右子树，可以 翻转 该二叉树中的任意节点。例，翻转节点 1
的效果如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请翻转 最少 的树中节点，使二叉树的 先序遍历
与预期的遍历行程 voyage 相匹配 。 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果可以，则返回 翻转的
所有节点的值的列表。你可以按任何顺序返回答案。如果不能，则返回列表
[-1]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,2], voyage = [2,1]
  <strong>输出：</strong>[-1]
  <strong>解释：</strong>翻转节点无法令先序遍历匹配预期行程。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,2,3], voyage = [1,3,2]
  <strong>输出：</strong>[1]
  <strong>解释：</strong>交换节点 2 和 3 来翻转节点 1 ，先序遍历可以匹配预期行程。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,2,3], voyage = [1,2,3]
  <strong>输出：</strong>[]
  <strong>解释：</strong>先序遍历已经匹配预期行程，所以不需要翻转节点。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中的节点数目为 n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == voyage.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val, voyage[i] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

树中的所有值 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

voyage 中的所有值 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
