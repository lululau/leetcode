* [[https://leetcode-cn.com/problems/least-operators-to-express-number][964.
表示数字的最少运算符]]
  :PROPERTIES:
  :CUSTOM_ID: 表示数字的最少运算符
  :END:
[[./solution/0900-0999/0964.Least Operators to Express Number/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个正整数 x，我们将会写出一个形如 x (op1) x (op2) x (op3) x
... 的表达式，其中每个运算符 op1，op2，...
可以是加、减、乘、除（+，-，/，或是 /）之一。例如，对于 x =
3，我们可以写出表达式 3 / 3 / 3 + 3 - 3，该式的值为 3 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在写这样的表达式时，我们需要遵守下面的惯例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

除运算符（/）返回有理数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

任何地方都没有括号。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

我们使用通常的操作顺序：乘法和除法发生在加法和减法之前。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

不允许使用一元否定运算符（-）。例如，“x - x”
是一个有效的表达式，因为它只使用减法，但是 “-x + x”
不是，因为它使用了否定运算符。 

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

我们希望编写一个能使表达式等于给定的目标值 target
且运算符最少的表达式。返回所用运算符的最少数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>x = 3, target = 19
  <strong>输出：</strong>5
  <strong>解释：</strong>3 * 3 + 3 * 3 + 3 / 3 。表达式包含 5 个运算符。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>x = 5, target = 501
  <strong>输出：</strong>8
  <strong>解释：</strong>5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5 。表达式包含 8 个运算符。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>x = 100, target = 100000000
  <strong>输出：</strong>3
  <strong>解释：</strong>100 * 100 * 100 * 100 。表达式包含 3 个运算符。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= x <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target <= 2 * 10^8

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
