* [[https://leetcode-cn.com/problems/satisfiability-of-equality-equations][990.
等式方程的可满足性]]
  :PROPERTIES:
  :CUSTOM_ID: 等式方程的可满足性
  :END:
[[./solution/0900-0999/0990.Satisfiability of Equality Equations/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程
equations[i] 的长度为 4，并采用两种不同的形式之一："a==b"
或 "a!=b"。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回
false。 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;a==b&quot;,&quot;b!=a&quot;]
  <strong>输出：</strong>false
  <strong>解释：</strong>如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;b==a&quot;,&quot;a==b&quot;]
  <strong>输出：</strong>true
  <strong>解释：</strong>我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= equations.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

equations[i].length == 4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

equations[i][0] 和 equations[i][3] 是小写字母

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

equations[i][1] 要么是 '='，要么是 '!'

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

equations[i][2] 是 '='

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
