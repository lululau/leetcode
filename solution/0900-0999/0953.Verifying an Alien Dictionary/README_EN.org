* [[https://leetcode.com/problems/verifying-an-alien-dictionary][953.
Verifying an Alien Dictionary]]
  :PROPERTIES:
  :CUSTOM_ID: verifying-an-alien-dictionary
  :END:
[[./solution/0900-0999/0953.Verifying an Alien Dictionary/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In an alien language, surprisingly they also use english lowercase
letters, but possibly in a different order. The order of the alphabet is
some permutation of lowercase letters.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a sequence of words written in the alien language, and the order
of the alphabet, return true if and only if the given words are sorted
lexicographicaly in this alien language.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;
  <strong>Output:</strong> true
  <strong>Explanation: </strong>As &#39;h&#39; comes before &#39;l&#39; in this language, then the sequence is sorted.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;
  <strong>Output:</strong> false
  <strong>Explanation: </strong>As &#39;d&#39; comes after &#39;l&#39; in this language, then words[0] &gt; words[1], hence the sequence is unsorted.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> words = [&quot;apple&quot;,&quot;app&quot;], order = &quot;abcdefghijklmnopqrstuvwxyz&quot;
  <strong>Output:</strong> false
  <strong>Explanation: </strong>The first three characters &quot;app&quot; match, and the second string is shorter (in size.) According to lexicographical rules &quot;apple&quot; &gt; &quot;app&quot;, because &#39;l&#39; &gt; &#39;&empty;&#39;, where &#39;&empty;&#39; is defined as the blank character which is less than any other character (<a href="https://en.wikipedia.org/wiki/Lexicographical_order" target="_blank">More info</a>).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words[i].length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

order.length == 26

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All characters in words[i] and order are English lowercase letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def isAlienSorted(self, words: List[str], order: str) -> bool:
          index = {v: k for k, v in enumerate(order)}
          for i in range(len(words) - 1):
              word1, word2 = words[i], words[i + 1]
              len1, len2 = len(word1), len(word2)
              flag = True
              for j in range(min(len1, len2)):
                  diff = index[word1[j]] - index[word2[j]]
                  if diff > 0:
                      return False
                  if diff < 0:
                      flag = False
                      break
              if flag and len1 > len2:
                  return False
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean isAlienSorted(String[] words, String order) {
          int[] index = new int[26];
          for (int i = 0; i < 26; ++i) {
              index[order.charAt(i) - 'a'] = i;
          }
          for (int i = 0, m = words.length; i < m - 1; ++i) {
              String word1 = words[i];
              String word2 = words[i + 1];
              int len1 = word1.length();
              int len2 = word2.length();
              boolean flag = true;
              for (int j = 0, n = Math.min(len1, len2); j < n && flag; ++j) {
                  int diff = index[word1.charAt(j) - 'a'] - index[word2.charAt(j) - 'a'];
                  if (diff > 0) return false;
                  if (diff < 0) flag = false;
              }
              if (flag && len1 > len2) return false;
          }
          return true;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
