* [[https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array][961.
重复 N 次的元素]]
  :PROPERTIES:
  :CUSTOM_ID: 重复-n-次的元素
  :END:
[[./solution/0900-0999/0961.N-Repeated Element in Size 2N Array/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回重复了 N 次的那个元素。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[1,2,3,3]
  <strong>输出：</strong>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[2,1,2,5,3,2]
  <strong>输出：</strong>2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[5,1,5,2,5,3,5,4]
  <strong>输出：</strong>5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

4 <= A.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= A[i] < 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A.length 为偶数

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

长度为 =2N=，共 =N+1= 个不同元素，其中一个元素出现 =N=
次，说明其它元素各不相同。

遍历数组，只要出现重复元素，它就是我们要找的重复 =N= 次的元素。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def repeatedNTimes(self, nums: List[int]) -> int:
          s = set()
          for num in nums:
              if num in s:
                  return num
              s.add(num)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int repeatedNTimes(int[] nums) {
          Set<Integer> s = new HashSet<>();
          for (int num : nums) {
              if (s.contains(num)) {
                  return num;
              }
              s.add(num);
          }
          return -1;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int repeatedNTimes(vector<int>& nums) {
          unordered_set<int> s;
          for (auto &num : nums) {
              if (s.find(num) != s.end()) {
                  return num;
              }
              s.insert(num);
          }
          return -1;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var repeatedNTimes = function(nums) {
      const s = new Set();
      for (const num of nums) {
          if (s.has(num)) {
              return num;
          }
          s.add(num);
      }
      return -1;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
