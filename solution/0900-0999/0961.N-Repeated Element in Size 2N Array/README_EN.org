* [[https://leetcode.com/problems/n-repeated-element-in-size-2n-array][961.
N-Repeated Element in Size 2N Array]]
  :PROPERTIES:
  :CUSTOM_ID: n-repeated-element-in-size-2n-array
  :END:
[[./solution/0900-0999/0961.N-Repeated Element in Size 2N Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In a array A of size 2N, there are N+1 unique elements, and exactly one
of these elements is repeated N times.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the element repeated N times.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong><span id="example-input-1-1">[1,2,3,3]</span>
  <strong>Output: </strong><span id="example-output-1">3</span>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong><span id="example-input-2-1">[2,1,2,5,3,2]</span>
  <strong>Output: </strong><span id="example-output-2">2</span>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong><span id="example-input-3-1">[5,1,5,2,5,3,5,4]</span>
  <strong>Output: </strong><span id="example-output-3">5</span>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

4 <= A.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= A[i] < 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A.length is even

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def repeatedNTimes(self, nums: List[int]) -> int:
          s = set()
          for num in nums:
              if num in s:
                  return num
              s.add(num)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int repeatedNTimes(int[] nums) {
          Set<Integer> s = new HashSet<>();
          for (int num : nums) {
              if (s.contains(num)) {
                  return num;
              }
              s.add(num);
          }
          return -1;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int repeatedNTimes(vector<int>& nums) {
          unordered_set<int> s;
          for (auto &num : nums) {
              if (s.find(num) != s.end()) {
                  return num;
              }
              s.insert(num);
          }
          return -1;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var repeatedNTimes = function(nums) {
      const s = new Set();
      for (const num of nums) {
          if (s.has(num)) {
              return num;
          }
          s.add(num);
      }
      return -1;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
