* [[https://leetcode.com/problems/rle-iterator][900. RLE Iterator]]
  :PROPERTIES:
  :CUSTOM_ID: rle-iterator
  :END:
[[./solution/0900-0999/0900.RLE Iterator/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Write an iterator that iterates through a run-length encoded sequence.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The iterator is initialized by RLEIterator(int[] A), where A is a
run-length encoding of some sequence.  More specifically, for all even
i, A[i] tells us the number of times that the non-negative integer value
A[i+1] is repeated in the sequence.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The iterator supports one function: next(int n), which exhausts the next
n elements (n >= 1) and returns the last element exhausted in this way. 
If there is no element left to exhaust, next returns -1 instead.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, we start with A = [3,8,0,9,2,5], which is a run-length
encoding of the sequence [8,8,8,5,5].  This is because the sequence can
be read as "three eights, zero nines, two fives".

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-1-1">[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;]</span>, <span id="example-input-1-2">[[[3,8,0,9,2,5]],[2],[1],[1],[2]]</span>

  <strong>Output: </strong><span id="example-output-1">[null,8,8,5,-1]</span>

  <strong>Explanation: </strong>

  RLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).

  This maps to the sequence [8,8,8,5,5].

  RLEIterator.next is then called 4 times:



  .next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].



  .next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].



  .next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].



  .next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,

  but the second term did not exist.  Since the last term exhausted does not exist, we return -1.



  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= A.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A.length is an even integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= A[i] <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are at most 1000 calls to RLEIterator.next(int n) per test case.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each call to RLEIterator.next(int n) will have 1 <= n <= 10^9.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
