* [[https://leetcode-cn.com/problems/unique-paths-iii][980. 不同路径
III]]
  :PROPERTIES:
  :CUSTOM_ID: 不同路径-iii
  :END:
[[./solution/0900-0999/0980.Unique Paths III/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在二维网格 grid 上，有 4 种类型的方格：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 表示起始方格。且只有一个起始方格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 表示结束方格，且只有一个结束方格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 表示我们可以走过的空方格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1 表示我们无法跨越的障碍。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
  <strong>输出：</strong>2
  <strong>解释：</strong>我们有以下两条路径：
  1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
  2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[[1,0,0,0],[0,0,0,0],[0,0,0,2]]
  <strong>输出：</strong>4
  <strong>解释：</strong>我们有以下四条路径： 
  1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
  2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
  3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
  4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[[0,1],[2,0]]
  <strong>输出：</strong>0
  <strong>解释：</strong>
  没有一条路能完全穿过每一个空的方格一次。
  请注意，起始和结束方格可以位于网格中的任意位置。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= grid.length * grid[0].length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
