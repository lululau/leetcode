* [[https://leetcode-cn.com/problems/smallest-string-starting-from-leaf][988.
从叶结点开始的最小字符串]]
  :PROPERTIES:
  :CUSTOM_ID: 从叶结点开始的最小字符串
  :END:
[[./solution/0900-0999/0988.Smallest String Starting From Leaf/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一颗根结点为 root 的二叉树，树中的每一个结点都有一个从 0
到 25 的值，分别代表字母 'a' 到 'z'：值 0
代表 'a'，值 1 代表 'b'，依此类推。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

找出按字典序最小的字符串，该字符串从这棵树的一个叶结点开始，到根结点结束。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

（小贴士：字符串中任何较短的前缀在字典序上都是较小的：例如，在字典序上 "ab"
比 "aba" 要小。叶结点是指没有子结点的结点。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[0,1,2,3,4,3,4]
  <strong>输出：</strong>&quot;dba&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[25,1,3,1,3,0,2]
  <strong>输出：</strong>&quot;adz&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[2,2,1,null,1,0,null,0]
  <strong>输出：</strong>&quot;abc&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

给定树的结点数介于 1 和 8500 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

树中的每个结点都有一个介于 0 和 25 之间的值。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
