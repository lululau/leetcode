* [[https://leetcode-cn.com/problems/reorder-data-in-log-files][937.
重新排列日志文件]]
  :PROPERTIES:
  :CUSTOM_ID: 重新排列日志文件
  :END:
[[./solution/0900-0999/0937.Reorder Data in Log Files/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个日志数组
logs。每条日志都是以空格分隔的字串，其第一个字为字母与数字混合的 标识符
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

有两种不同类型的日志：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

字母日志：除标识符之外，所有字均由小写字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

数字日志：除标识符之外，所有字均由数字组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请按下述规则将日志重新排序：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

所有 字母日志 都排在 数字日志 之前。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

字母日志
在内容不同时，忽略标识符后，按内容字母顺序排序；在内容相同时，按标识符排序。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

数字日志 应该保留原来的相对顺序。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

返回日志的最终顺序。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
  <strong>输出：</strong>["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
  <strong>解释：</strong>
  字母日志的内容都不同，所以顺序为 "art can", "art zero", "own kit dig" 。
  数字日志保留原来的相对顺序 "dig1 8 1 5 1", "dig2 3 6" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>logs = ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
  <strong>输出：</strong>["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= logs.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= logs[i].length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

logs[i] 中，字与字之间都用 单个 空格分隔

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目数据保证 logs[i] 都有一个标识符，并且在标识符之后至少存在一个字

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
