* [[https://leetcode-cn.com/problems/k-closest-points-to-origin][973.
最接近原点的 K 个点]]
  :PROPERTIES:
  :CUSTOM_ID: 最接近原点的-k-个点
  :END:
[[./solution/0900-0999/0973.K Closest Points to Origin/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点
(0, 0) 最近的点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

（这里，平面上两点之间的距离是欧几里德距离。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>points = [[1,3],[-2,2]], K = 1
  <strong>输出：</strong>[[-2,2]]
  <strong>解释： </strong>
  (1, 3) 和原点之间的距离为 sqrt(10)，
  (-2, 2) 和原点之间的距离为 sqrt(8)，
  由于 sqrt(8) &lt; sqrt(10)，(-2, 2) 离原点更近。
  我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>points = [[3,3],[5,-1],[-2,4]], K = 2
  <strong>输出：</strong>[[3,3],[-2,4]]
  （答案 [[-2,4],[3,3]] 也会被接受。）
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= K <= points.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10000 < points[i][0] < 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10000 < points[i][1] < 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
