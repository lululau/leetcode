* [[https://leetcode-cn.com/problems/bank-account-summary-ii][1587.
银行账户概要 II]]
  :PROPERTIES:
  :CUSTOM_ID: 银行账户概要-ii
  :END:
[[./solution/1500-1599/1587.Bank Account Summary II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

表: Users

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>+--------------+---------+
  | Column Name  | Type    |
  +--------------+---------+
  | account      | int     |
  | name         | varchar |
  +--------------+---------+
  account 是该表的主键.
  表中的每一行包含银行里中每一个用户的账号.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

表: Transactions

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>+---------------+---------+
  | Column Name   | Type    |
  +---------------+---------+
  | trans_id      | int     |
  | account       | int     |
  | amount        | int     |
  | transacted_on | date    |
  +---------------+---------+
  trans_id 是该表主键.
  该表的每一行包含了所有账户的交易改变情况.
  如果用户收到了钱, 那么金额是正的; 如果用户转了钱, 那么金额是负的.
  所有账户的起始余额为 0.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

写一个 SQL,  报告余额高于 10000
的所有用户的名字和余额. 账户的余额等于包含该账户的所有交易的总和.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回结果表单没有顺序要求.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

查询结果格式如下例所示.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><code>Users</code> table:
  +------------+--------------+
  | account    | name         |
  +------------+--------------+
  | 900001     | Alice        |
  | 900002     | Bob          |
  | 900003     | Charlie      |
  +------------+--------------+

  <code>Transactions</code> table:
  +------------+------------+------------+---------------+
  | trans_id   | account    | amount     | transacted_on |
  +------------+------------+------------+---------------+
  | 1          | 900001     | 7000       |  2020-08-01   |
  | 2          | 900001     | 7000       |  2020-09-01   |
  | 3          | 900001     | -3000      |  2020-09-02   |
  | 4          | 900002     | 1000       |  2020-09-12   |
  | 5          | 900003     | 6000       |  2020-08-07   |
  | 6          | 900003     | 6000       |  2020-09-07   |
  | 7          | 900003     | -4000      |  2020-09-11   |
  +------------+------------+------------+---------------+

  Result table:
  +------------+------------+
  | <code>name    </code>   | <code>balance  </code>  |
  +------------+------------+
  | Alice      | 11000      |
  +------------+------------+
  Alice 的余额为(7000 + 7000 - 3000) = 11000.
  Bob 的余额为1000.
  Charlie 的余额为(6000 + 6000 - 4000) = 8000.
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
