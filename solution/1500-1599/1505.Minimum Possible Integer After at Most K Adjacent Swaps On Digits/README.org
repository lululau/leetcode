* [[https://leetcode-cn.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits][1505.
最多 K 次交换相邻数位后得到的最小整数]]
  :PROPERTIES:
  :CUSTOM_ID: 最多-k-次交换相邻数位后得到的最小整数
  :END:
[[./solution/1500-1599/1505.Minimum Possible Integer After at Most K Adjacent Swaps On Digits/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 num 和一个整数 k 。其中，num
表示一个很大的整数，字符串中的每个字符依次对应整数上的各个 数位 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以交换这个整数相邻数位的数字 最多 k 次。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回你能得到的最小整数，并以字符串形式返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>num = &quot;4321&quot;, k = 4
  <strong>输出：</strong>&quot;1342&quot;
  <strong>解释：</strong>4321 通过 4 次交换相邻数位得到最小整数的步骤如上图所示。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>num = &quot;100&quot;, k = 1
  <strong>输出：</strong>&quot;010&quot;
  <strong>解释：</strong>输出可以包含前导 0 ，但输入保证不会有前导 0 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>num = &quot;36789&quot;, k = 1000
  <strong>输出：</strong>&quot;36789&quot;
  <strong>解释：</strong>不需要做任何交换。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>num = &quot;22&quot;, k = 22
  <strong>输出：</strong>&quot;22&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>num = &quot;9438957234785635408&quot;, k = 23
  <strong>输出：</strong>&quot;0345989723478563548&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= num.length <= 30000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

num 只包含 数字 且不含有 前导 0 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
