* [[https://leetcode-cn.com/problems/maximum-sum-obtained-of-any-permutation][1589.
所有排列中的最大和]]
  :PROPERTIES:
  :CUSTOM_ID: 所有排列中的最大和
  :END:
[[./solution/1500-1599/1589.Maximum Sum Obtained of Any Permutation/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有一个整数数组 nums ，和一个查询数组 requests ，其中 requests[i] =
[starti, endi] 。第 i 个查询求 nums[starti] + nums[starti + 1] + ... +
nums[endi - 1] + nums[endi] 的结果 ，starti 和 endi 数组索引都是 从 0
开始 的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以任意排列 nums 中的数字，请你返回所有查询结果之和的最大值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

由于答案可能会很大，请你将它对 109 + 7 取余 后返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [1,2,3,4,5], requests = [[1,3],[0,1]]
  <strong>输出：</strong>19
  <strong>解释：</strong>一个可行的 nums 排列为 [2,1,3,4,5]，并有如下结果：
  requests[0] -&gt; nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
  requests[1] -&gt; nums[0] + nums[1] = 2 + 1 = 3
  总和为：8 + 3 = 11。
  一个总和更大的排列为 [3,5,4,2,1]，并有如下结果：
  requests[0] -&gt; nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
  requests[1] -&gt; nums[0] + nums[1] = 3 + 5  = 8
  总和为： 11 + 8 = 19，这个方案是所有排列中查询之和最大的结果。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [1,2,3,4,5,6], requests = [[0,1]]
  <strong>输出：</strong>11
  <strong>解释：</strong>一个总和最大的排列为 [6,5,4,3,2,1] ，查询和为 [11]。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]
  <strong>输出：</strong>47
  <strong>解释：</strong>一个和最大的排列为 [4,10,5,3,2,1] ，查询结果分别为 [19,18,10]。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= requests.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

requests[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= starti <= endi < n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
