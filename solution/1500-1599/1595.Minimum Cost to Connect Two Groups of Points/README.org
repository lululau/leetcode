* [[https://leetcode-cn.com/problems/minimum-cost-to-connect-two-groups-of-points][1595.
连通两组点的最小成本]]
  :PROPERTIES:
  :CUSTOM_ID: 连通两组点的最小成本
  :END:
[[./solution/1500-1599/1595.Minimum Cost to Connect Two Groups of Points/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两组点，其中第一组中有 size1 个点，第二组中有 size2 个点，且 size1
>= size2 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

任意两点间的连接成本 cost 由大小为 size1 x size2 矩阵给出，其中
cost[i][j] 是第一组中的点 i 和第二组中的点 j
的连接成本。如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的。换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回连通两组点所需的最小成本。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>cost = [[15, 96], [36, 2]]
  <strong>输出：</strong>17
  <strong>解释：</strong>连通两组点的最佳方法是：
  1--A
  2--B
  总成本为 17 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]
  <strong>输出：</strong>4
  <strong>解释：</strong>连通两组点的最佳方法是：
  1--A
  2--B
  2--C
  3--A
  最小成本为 4 。
  请注意，虽然有多个点连接到第一组中的点 2 和第二组中的点 A ，但由于题目并不限制连接点的数目，所以只需要关心最低总成本。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]
  <strong>输出：</strong>10
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

size1 == cost.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

size2 == cost[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= size1, size2 <= 12

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

size1 >= size2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= cost[i][j] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
