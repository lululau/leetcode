* [[https://leetcode.com/problems/most-visited-sector-in-a-circular-track][1560.
Most Visited Sector in a Circular Track]]
  :PROPERTIES:
  :CUSTOM_ID: most-visited-sector-in-a-circular-track
  :END:
[[./solution/1500-1599/1560.Most Visited Sector in  a Circular Track/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer n and an integer array rounds. We have a circular track
which consists of n sectors labeled from 1 to n. A marathon will be held
on this track, the marathon consists of m rounds. The ith round starts
at sector rounds[i - 1] and ends at sector rounds[i]. For example, round
1 starts at sector rounds[0] and ends at sector rounds[1]

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an array of the most visited sectors sorted in ascending order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that you circulate the track in ascending order of sector numbers
in the counter-clockwise direction (See the first example).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4, rounds = [1,3,1,2]
  <strong>Output:</strong> [1,2]
  <strong>Explanation:</strong> The marathon starts at sector 1. The order of the visited sectors is as follows:
  1 --&gt; 2 --&gt; 3 (end of round 1) --&gt; 4 --&gt; 1 (end of round 2) --&gt; 2 (end of round 3 and the marathon)
  We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2, rounds = [2,1,2,1,2,1,2,1,2]
  <strong>Output:</strong> [2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 7, rounds = [1,3,5,7]
  <strong>Output:</strong> [1,2,3,4,5,6,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

rounds.length == m + 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rounds[i] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

rounds[i] != rounds[i + 1] for 0 <= i < m

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
