* [[https://leetcode-cn.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable][1579.
保证图可完全遍历]]
  :PROPERTIES:
  :CUSTOM_ID: 保证图可完全遍历
  :END:
[[./solution/1500-1599/1579.Remove Max Number of Edges to Keep Graph Fully Traversable/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

Alice 和 Bob 共有一个无向图，其中包含 n 个节点和 3  种类型的边：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

类型 1：只能由 Alice 遍历。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

类型 2：只能由 Bob 遍历。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

类型 3：Alice 和 Bob 都可以遍历。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个数组 edges ，其中 edges[i] = [typei, ui, vi] 表示节点 ui 和 vi
之间存在类型为 typei 的双向边。请你在保证图仍能够被 Alice和 Bob
完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和
Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
  <strong>输出：</strong>2
  <strong>解释：</strong>如果删除<strong> </strong>[1,1,2] 和 [1,1,3] 这两条边，Alice 和 Bob 仍然可以完全遍历这个图。再删除任何其他的边都无法保证图可以完全遍历。所以可以删除的最大边数是 2 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
  <strong>输出：</strong>0
  <strong>解释：</strong>注意，删除任何一条边都会使 Alice 和 Bob 无法完全遍历这个图。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]
  <strong>输出：</strong>-1
  <strong>解释：</strong>在当前图中，Alice 无法从其他节点到达节点 4 。类似地，Bob 也不能达到节点 1 。因此，图无法完全遍历。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edges[i][0] <= 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edges[i][1] < edges[i][2] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有元组 (typei, ui, vi) 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
