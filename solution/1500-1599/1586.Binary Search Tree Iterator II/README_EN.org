* [[https://leetcode.com/problems/binary-search-tree-iterator-ii][1586.
Binary Search Tree Iterator II]]
  :PROPERTIES:
  :CUSTOM_ID: binary-search-tree-iterator-ii
  :END:
[[./solution/1500-1599/1586.Binary Search Tree Iterator II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement the BSTIterator class that represents an iterator over the
in-order traversal of a binary search tree (BST):

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

BSTIterator(TreeNode root) Initializes an object of the BSTIterator
class. The root of the BST is given as part of the constructor. The
pointer should be initialized to a non-existent number smaller than any
element in the BST.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean hasNext() Returns true if there exists a number in the traversal
to the right of the pointer, otherwise returns false.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int next() Moves the pointer to the right, then returns the number at
the pointer.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean hasPrev() Returns true if there exists a number in the traversal
to the left of the pointer, otherwise returns false.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int prev() Moves the pointer to the left, then returns the number at the
pointer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that by initializing the pointer to a non-existent smallest
number, the first call to next() will return the smallest element in the
BST.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You may assume that next() and prev() calls will always be valid. That
is, there will be at least a next/previous number in the in-order
traversal when next()/prev() is called.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;BSTIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;prev&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;hasPrev&quot;, &quot;prev&quot;, &quot;prev&quot;]
  [[[7, 3, 15, null, null, 9, 20]], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null]]
  <strong>Output</strong>
  [null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9]

  <strong>Explanation</strong>
  // The underlined element is where the pointer currently is.
  BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); // state is <u> </u> [3, 7, 9, 15, 20]
  bSTIterator.next(); // state becomes [<u>3</u>, 7, 9, 15, 20], return 3
  bSTIterator.next(); // state becomes [3, <u>7</u>, 9, 15, 20], return 7
  bSTIterator.prev(); // state becomes [<u>3</u>, 7, 9, 15, 20], return 3
  bSTIterator.next(); // state becomes [3, <u>7</u>, 9, 15, 20], return 7
  bSTIterator.hasNext(); // return true
  bSTIterator.next(); // state becomes [3, 7, <u>9</u>, 15, 20], return 9
  bSTIterator.next(); // state becomes [3, 7, 9, <u>15</u>, 20], return 15
  bSTIterator.next(); // state becomes [3, 7, 9, 15, <u>20</u>], return 20
  bSTIterator.hasNext(); // return false
  bSTIterator.hasPrev(); // return true
  bSTIterator.prev(); // state becomes [3, 7, 9, <u>15</u>, 20], return 15
  bSTIterator.prev(); // state becomes [3, 7, <u>9</u>, 15, 20], return 9
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 105].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 105 calls will be made to hasNext, next, hasPrev, and prev.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you solve the problem without precalculating the values
of the tree?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
