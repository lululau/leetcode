* [[https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string][1541.
Minimum Insertions to Balance a Parentheses String]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-insertions-to-balance-a-parentheses-string
  :END:
[[./solution/1500-1599/1541.Minimum Insertions to Balance a Parentheses String/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a parentheses string s containing only the characters '(' and ')'.
A parentheses string is balanced if:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Any left parenthesis '(' must have a corresponding two consecutive right
parenthesis '))'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Left parenthesis '(' must go before the corresponding two consecutive
right parenthesis '))'.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

In other words, we treat '(' as openning parenthesis and '))' as closing
parenthesis.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, "())", "())(())))" and "(())())))" are balanced, ")()",
"()))" and "(()))" are not balanced.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You can insert the characters '(' and ')' at any position of the string
to balance it if needed.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum number of insertions needed to make s balanced.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;(()))&quot;
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> The second &#39;(&#39; has two matching &#39;))&#39;, but the first &#39;(&#39; has only &#39;)&#39; matching. We need to to add one more &#39;)&#39; at the end of the string to be &quot;(())))&quot; which is balanced.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;())&quot;
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> The string is already balanced.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;))())(&quot;
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> Add &#39;(&#39; to match the first &#39;))&#39;, Add &#39;))&#39; to match the last &#39;(&#39;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;((((((&quot;
  <strong>Output:</strong> 12
  <strong>Explanation:</strong> Add 12 &#39;)&#39; to balance the string.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;)))))))&quot;
  <strong>Output:</strong> 5
  <strong>Explanation:</strong> Add 4 &#39;(&#39; at the beginning of the string and one &#39;)&#39; at the end. The string becomes &quot;(((())))))))&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consists of '(' and ')' only.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
