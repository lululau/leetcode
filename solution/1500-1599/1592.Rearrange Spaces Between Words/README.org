* [[https://leetcode-cn.com/problems/rearrange-spaces-between-words][1592.
重新排列单词间的空格]]
  :PROPERTIES:
  :CUSTOM_ID: 重新排列单词间的空格
  :END:
[[./solution/1500-1599/1592.Rearrange Spaces Between Words/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 text
，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证
text 至少包含一个单词 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你重新排列空格，使每对相邻单词之间的空格数目都 相等 ，并尽可能 最大化
该数目。如果不能重新平均分配所有空格，请 将多余的空格放置在字符串末尾
，这也意味着返回的字符串应当与原 text 字符串的长度相等。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 重新排列空格后的字符串 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;  this   is  a sentence &quot;
  <strong>输出：</strong>&quot;this   is   a   sentence&quot;
  <strong>解释：</strong>总共有 9 个空格和 4 个单词。可以将 9 个空格平均分配到相邻单词之间，相邻单词间空格数为：9 / (4-1) = 3 个。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot; practice   makes   perfect&quot;
  <strong>输出：</strong>&quot;practice   makes   perfect &quot;
  <strong>解释：</strong>总共有 7 个空格和 3 个单词。7 / (3-1) = 3 个空格加上 1 个多余的空格。多余的空格需要放在字符串的末尾。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;hello   world&quot;
  <strong>输出：</strong>&quot;hello   world&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;  walks  udp package   into  bar a&quot;
  <strong>输出：</strong>&quot;walks  udp  package  into  bar  a &quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;a&quot;
  <strong>输出：</strong>&quot;a&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= text.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

text 由小写英文字母和 ' ' 组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

text 中至少包含一个单词

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
