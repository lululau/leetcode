* [[https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings][1520.
Maximum Number of Non-Overlapping Substrings]]
  :PROPERTIES:
  :CUSTOM_ID: maximum-number-of-non-overlapping-substrings
  :END:
[[./solution/1500-1599/1520.Maximum Number of Non-Overlapping Substrings/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s of lowercase letters, you need to find the maximum
number of non-empty substrings of s that meet the following conditions:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The substrings do not overlap, that is for any two substrings s[i..j]
and s[k..l], either j < k or i > l is true.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A substring that contains a certain character c must also contain all
occurrences of c.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Find the maximum number of substrings that meet the above conditions. If
there are multiple solutions with the same number of substrings, return
the one with minimum total length. It can be shown that there exists a
unique solution of minimum total length.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that you can return the substrings in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;adefaddaccc&quot;
  <strong>Output:</strong> [&quot;e&quot;,&quot;f&quot;,&quot;ccc&quot;]
  <b>Explanation:</b>&nbsp;The following are all the possible substrings that meet the conditions:
  [
  &nbsp; &quot;adefaddaccc&quot;
  &nbsp; &quot;adefadda&quot;,
  &nbsp; &quot;ef&quot;,
  &nbsp; &quot;e&quot;,
    &quot;f&quot;,
  &nbsp; &quot;ccc&quot;,
  ]
  If we choose the first string, we cannot choose anything else and we&#39;d get only 1. If we choose &quot;adefadda&quot;, we are left with &quot;ccc&quot; which is the only one that doesn&#39;t overlap, thus obtaining 2 substrings. Notice also, that it&#39;s not optimal to choose &quot;ef&quot; since it can be split into two. Therefore, the optimal way is to choose [&quot;e&quot;,&quot;f&quot;,&quot;ccc&quot;] which gives us 3 substrings. No other solution of the same number of substrings exist.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;abbaccd&quot;
  <strong>Output:</strong> [&quot;d&quot;,&quot;bb&quot;,&quot;cc&quot;]
  <b>Explanation: </b>Notice that while the set of substrings [&quot;d&quot;,&quot;abba&quot;,&quot;cc&quot;] also has length 3, it&#39;s considered incorrect since it has larger total length.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s contains only lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
