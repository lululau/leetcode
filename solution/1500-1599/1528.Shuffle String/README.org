* [[https://leetcode-cn.com/problems/shuffle-string][1528.
重新排列字符串]]
  :PROPERTIES:
  :CUSTOM_ID: 重新排列字符串
  :END:
[[./solution/1500-1599/1528.Shuffle String/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 s 和一个 长度相同 的整数数组 indices 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你重新排列字符串 s ，其中第 i 个字符需要移动到 indices[i] 指示的位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回重新排列后的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;codeleet&quot;, <code>indices</code> = [4,5,6,7,0,2,1,3]
  <strong>输出：</strong>&quot;leetcode&quot;
  <strong>解释：</strong>如图所示，&quot;codeleet&quot; 重新排列后变为 &quot;leetcode&quot; 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;abc&quot;, <code>indices</code> = [0,1,2]
  <strong>输出：</strong>&quot;abc&quot;
  <strong>解释：</strong>重新排列后，每个字符都还留在原来的位置上。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;aiohn&quot;, <code>indices</code> = [3,1,4,2,0]
  <strong>输出：</strong>&quot;nihao&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;aaiougrt&quot;, <code>indices</code> = [4,0,2,6,7,3,1,5]
  <strong>输出：</strong>&quot;arigatou&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;art&quot;, <code>indices</code> = [1,0,2]
  <strong>输出：</strong>&quot;rat&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

s.length == indices.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 仅包含小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= indices[i] < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

indices 的所有的值都是唯一的（也就是说，indices 是整数 0 到 n - 1
形成的一组排列）。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
