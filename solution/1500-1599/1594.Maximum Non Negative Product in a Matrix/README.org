* [[https://leetcode-cn.com/problems/maximum-non-negative-product-in-a-matrix][1594.
矩阵的最大非负积]]
  :PROPERTIES:
  :CUSTOM_ID: 矩阵的最大非负积
  :END:
[[./solution/1500-1599/1594.Maximum Non Negative Product in a Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个大小为 rows x cols 的矩阵 grid 。最初，你位于左上角 (0, 0)
，每一步，你可以在矩阵中 向右 或 向下 移动。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在从左上角 (0, 0) 开始到右下角 (rows - 1, cols - 1)
结束的所有路径中，找出具有 最大非负积
的路径。路径的积是沿路径访问的单元格中所有整数的乘积。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 最大非负积 对 109 + 7 取余 的结果。如果最大积为负数，则返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意，取余是在得到最大积之后执行的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[-1,-2,-3],
  &nbsp;            [-2,-3,-3],
  &nbsp;            [-3,-3,-2]]
  <strong>输出：</strong>-1
  <strong>解释：</strong>从 (0, 0) 到 (2, 2) 的路径中无法得到非负积，所以返回 -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[<strong>1</strong>,-2,1],
  &nbsp;            [<strong>1</strong>,<strong>-2</strong>,1],
  &nbsp;            [3,<strong>-4</strong>,<strong>1</strong>]]
  <strong>输出：</strong>8
  <strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * 1 * -2 * -4 * 1 = 8)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[<strong>1</strong>, 3],
  &nbsp;            [<strong>0</strong>,<strong>-4</strong>]]
  <strong>输出：</strong>0
  <strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * 0 * -4 = 0)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[ <strong>1</strong>, 4,4,0],
  &nbsp;            [<strong>-2</strong>, 0,0,1],
  &nbsp;            [ <strong>1</strong>,<strong>-1</strong>,<strong>1</strong>,<strong>1</strong>]]
  <strong>输出：</strong>2
  <strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * -2 * 1 * -1 * 1 * 1 = 2)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rows, cols <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-4 <= grid[i][j] <= 4

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
