* [[https://leetcode-cn.com/problems/stone-game-v][1563. 石子游戏 V]]
  :PROPERTIES:
  :CUSTOM_ID: 石子游戏-v
  :END:
[[./solution/1500-1599/1563.Stone Game V/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

几块石子 排成一行 ，每块石子都有一个关联值，关联值为整数，由数组
stoneValue 给出。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

游戏中的每一轮：Alice 会将这行石子分成两个
非空行（即，左侧行和右侧行）；Bob
负责计算每一行的值，即此行中所有石子的值的总和。Bob
会丢弃值最大的行，Alice
的得分为剩下那行的值（每轮累加）。如果两行的值相等，Bob 让 Alice
决定丢弃哪一行。下一轮从剩下的那一行开始。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

只 剩下一块石子 时，游戏结束。Alice 的分数最初为 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 Alice 能够获得的最大分数 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>stoneValue = [6,2,3,4,5,5]
  <strong>输出：</strong>18
  <strong>解释：</strong>在第一轮中，Alice 将行划分为 [6，2，3]，[4，5，5] 。左行的值是 11 ，右行的值是 14 。Bob 丢弃了右行，Alice 的分数现在是 11 。
  在第二轮中，Alice 将行分成 [6]，[2，3] 。这一次 Bob 扔掉了左行，Alice 的分数变成了 16（11 + 5）。
  最后一轮 Alice 只能将行分成 [2]，[3] 。Bob 扔掉右行，Alice 的分数现在是 18（16 + 2）。游戏结束，因为这行只剩下一块石头了。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>stoneValue = [7,7,7,7,7,7,7]
  <strong>输出：</strong>28
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>stoneValue = [4]
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= stoneValue.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= stoneValue[i] <= 10^6

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
