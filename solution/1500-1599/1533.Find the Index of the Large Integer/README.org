* [[https://leetcode-cn.com/problems/find-the-index-of-the-large-integer][1533.
找到最大整数的索引]]
  :PROPERTIES:
  :CUSTOM_ID: 找到最大整数的索引
  :END:
[[./solution/1500-1599/1533.Find the Index of the Large Integer/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们有这样一个整数数组 arr ，除了一个最大的整数外，其他所有整数都相等。你不能直接访问该数组，你需要通过 API
ArrayReader 来间接访问，这个 API 有以下成员函数：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

int compareSub(int l, int r, int x, int y)：其中 0 <= l, r, x, y
< ArrayReader.length()， l <= r 且 x <=
y。这个函数比较子数组 arr[l..r] 与子数组 arr[x..y] 的和。该函数返回：

#+begin_example
  <ul>
      <li><strong>1</strong>&nbsp;若&nbsp;<code>arr[l]+arr[l+1]+...+arr[r] &gt; arr[x]+arr[x+1]+...+arr[y]</code>&nbsp;。</li>
      <li><strong>0</strong>&nbsp;若&nbsp;<code>arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]</code>&nbsp;。</li>
      <li><strong>-1</strong>&nbsp;若&nbsp;<code>arr[l]+arr[l+1]+...+arr[r] &lt; arr[x]+arr[x+1]+...+arr[y]</code>&nbsp;。</li>
  </ul>
  </li>
  <li><code>int length()</code>：返回数组的长度。</li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

你最多可以调用函数 compareSub() 20
次。你可以认为这两个函数的时间复杂度都为 O(1) 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 arr 中最大整数的索引。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果 arr 中有两个整数比其他数大呢？

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果有一个数比其他数大，另一个数比其他数小呢？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> arr = [7,7,7,7,10,7,7,7]
  <strong>输出:</strong> 4
  <strong>解释:</strong> API 的调用如下：
  reader.compareSub(0, 0, 1, 1) // 返回 0。比较子数组 (0, 0) 与子数组 (1, 1) （即比较 arr[0] 和 arr[1]）。
  因此我们知道 arr[0] 和 arr[1] 不包含最大元素。
  reader.compareSub(2, 2, 3, 3) // 返回 0。我们可以排除 arr[2] 和 arr[3]。
  reader.compareSub(4, 4, 5, 5) // 返回 1。因此，可以确定 arr[4] 是数组中最大的元素。
  注意，我们只调用了 3 次 compareSub，所以这个答案是有效的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> nums = [6,6,12]
  <strong>输出:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= arr.length <= 5 * 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arr 中除一个最大元素外，其余所有元素都相等。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
