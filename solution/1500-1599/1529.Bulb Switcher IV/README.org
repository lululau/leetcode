* [[https://leetcode-cn.com/problems/bulb-switcher-iv][1529. 灯泡开关
IV]]
  :PROPERTIES:
  :CUSTOM_ID: 灯泡开关-iv
  :END:
[[./solution/1500-1599/1529.Bulb Switcher IV/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

房间中有 n 个灯泡，编号从 0 到 n-1
，自左向右排成一行。最开始的时候，所有的灯泡都是 关 着的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你设法使得灯泡的开关状态和 target 描述的状态一致，其中 target[i] 等于
1 第 i 个灯泡是开着的，等于 0 意味着第 i 个灯是关着的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

有一个开关可以用于翻转灯泡的状态，翻转操作定义如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

选择当前配置下的任意一个灯泡（下标为 i ）

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

翻转下标从 i 到 n-1 的每个灯泡

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

翻转时，如果灯泡的状态为 0 就变为 1，为 1 就变为 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回达成 target 描述的状态所需的 最少 翻转次数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = &quot;10111&quot;
  <strong>输出：</strong>3
  <strong>解释：</strong>初始配置 &quot;00000&quot;.
  从第 3 个灯泡（下标为 2）开始翻转 &quot;00000&quot; -&gt; &quot;00111&quot;
  从第 1 个灯泡（下标为 0）开始翻转 &quot;00111&quot; -&gt; &quot;11000&quot;
  从第 2 个灯泡（下标为 1）开始翻转 &quot;11000&quot; -&gt; &quot;10111&quot;
  至少需要翻转 3 次才能达成 target 描述的状态</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = &quot;101&quot;
  <strong>输出：</strong>3
  <strong>解释：</strong>&quot;000&quot; -&gt; &quot;111&quot; -&gt; &quot;100&quot; -&gt; &quot;101&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = &quot;00000&quot;
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = &quot;001011101&quot;
  <strong>输出：</strong>5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target[i] == '0' 或者 target[i] == '1'

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
