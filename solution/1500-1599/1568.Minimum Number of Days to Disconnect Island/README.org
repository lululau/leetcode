* [[https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island][1568.
使陆地分离的最少天数]]
  :PROPERTIES:
  :CUSTOM_ID: 使陆地分离的最少天数
  :END:
[[./solution/1500-1599/1568.Minimum Number of Days to Disconnect Island/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个由若干 0 和 1 组成的二维网格 grid ，其中 0 表示水，而 1
表示陆地。岛屿由水平方向或竖直方向上相邻的 1 （陆地）连接形成。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果 恰好只有一座岛屿 ，则认为陆地是 连通的 ；否则，陆地就是 分离的 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一天内，可以将任何单个陆地单元（1）更改为水单元（0）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回使陆地分离的最少天数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]
  <strong>输出：</strong>2
  <strong>解释：</strong>至少需要 2 天才能得到分离的陆地。
  将陆地 grid[1][1] 和 grid[0][2] 更改为水，得到两个分离的岛屿。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,1]]
  <strong>输出：</strong>2
  <strong>解释：</strong>如果网格中都是水，也认为是分离的 ([[1,1]] -&gt; [[0,0]])，0 岛屿。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,0,1,0]]
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,1,0,1,1],
  &nbsp;            [1,1,1,1,1],
  &nbsp;            [1,1,0,1,1],
  &nbsp;            [1,1,0,1,1]]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,1,0,1,1],
  &nbsp;            [1,1,1,1,1],
  &nbsp;            [1,1,0,1,1],
  &nbsp;            [1,1,1,1,1]]
  <strong>输出：</strong>2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= grid.length, grid[i].length <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] 为 0 或 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
