* [[https://leetcode-cn.com/problems/find-latest-group-of-size-m][1562.
查找大小为 M 的最新分组]]
  :PROPERTIES:
  :CUSTOM_ID: 查找大小为-m-的最新分组
  :END:
[[./solution/1500-1599/1562.Find Latest Group of Size M/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个数组 arr ，该数组表示一个从 1 到 n 的数字排列。有一个长度为 n
的二进制字符串，该字符串上的所有位最初都设置为 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在从 1 到 n 的每个步骤 i 中（假设二进制字符串和 arr 都是从 1
开始索引的情况下），二进制字符串上位于位置 arr[i] 的位将会设为 1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数 m ，请你找出二进制字符串上存在长度为 m 的一组 1
的最后步骤。一组 1 是一个连续的、由 1
组成的子串，且左右两边不再有可以延伸的 1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回存在长度 恰好 为 m 的 一组 1 
的最后步骤。如果不存在这样的步骤，请返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>arr = [3,5,1,2,4], m = 1
  <strong>输出：</strong>4
  <strong>解释：
  </strong>步骤 1：&quot;00<strong>1</strong>00&quot;，由 1 构成的组：[&quot;1&quot;]
  步骤 2：&quot;0010<strong>1</strong>&quot;，由 1 构成的组：[&quot;1&quot;, &quot;1&quot;]
  步骤 3：&quot;<strong>1</strong>0101&quot;，由 1 构成的组：[&quot;1&quot;, &quot;1&quot;, &quot;1&quot;]
  步骤 4：&quot;1<strong>1</strong>101&quot;，由 1 构成的组：[&quot;111&quot;, &quot;1&quot;]
  步骤 5：&quot;111<strong>1</strong>1&quot;，由 1 构成的组：[&quot;11111&quot;]
  存在长度为 1 的一组 1 的最后步骤是步骤 4 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>arr = [3,1,5,4,2], m = 2
  <strong>输出：</strong>-1
  <strong>解释：
  </strong>步骤 1：&quot;00<strong>1</strong>00&quot;，由 1 构成的组：[&quot;1&quot;]
  步骤 2：&quot;<strong>1</strong>0100&quot;，由 1 构成的组：[&quot;1&quot;, &quot;1&quot;]
  步骤 3：&quot;1010<strong>1</strong>&quot;，由 1 构成的组：[&quot;1&quot;, &quot;1&quot;, &quot;1&quot;]
  步骤 4：&quot;101<strong>1</strong>1&quot;，由 1 构成的组：[&quot;1&quot;, &quot;111&quot;]
  步骤 5：&quot;1<strong>1</strong>111&quot;，由 1 构成的组：[&quot;11111&quot;]
  不管是哪一步骤都无法形成长度为 2 的一组 1 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>arr = [1], m = 1
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>arr = [2,1], m = 2
  <strong>输出：</strong>2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arr 中的所有整数 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
