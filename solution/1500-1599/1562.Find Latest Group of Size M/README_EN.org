* [[https://leetcode.com/problems/find-latest-group-of-size-m][1562.
Find Latest Group of Size M]]
  :PROPERTIES:
  :CUSTOM_ID: find-latest-group-of-size-m
  :END:
[[./solution/1500-1599/1562.Find Latest Group of Size M/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array arr that represents a permutation of numbers from 1 to n.
You have a binary string of size n that initially has all its bits set
to zero.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

At each step i (assuming both the binary string and arr are 1-indexed)
from 1 to n, the bit at position arr[i] is set to 1. You are given an
integer m and you need to find the latest step at which there exists a
group of ones of length m. A group of ones is a contiguous substring of
1s such that it cannot be extended in either direction.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the latest step at which there exists a group of ones of length
exactly m. If no such group exists, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> arr = [3,5,1,2,4], m = 1
  <strong>Output:</strong> 4
  <strong>Explanation:
  </strong>Step 1: &quot;00<u>1</u>00&quot;, groups: [&quot;1&quot;]
  Step 2: &quot;0010<u>1</u>&quot;, groups: [&quot;1&quot;, &quot;1&quot;]
  Step 3: &quot;<u>1</u>0101&quot;, groups: [&quot;1&quot;, &quot;1&quot;, &quot;1&quot;]
  Step 4: &quot;1<u>1</u>101&quot;, groups: [&quot;111&quot;, &quot;1&quot;]
  Step 5: &quot;111<u>1</u>1&quot;, groups: [&quot;11111&quot;]
  The latest step at which there exists a group of size 1 is step 4.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> arr = [3,1,5,4,2], m = 2
  <strong>Output:</strong> -1
  <strong>Explanation:
  </strong>Step 1: &quot;00<u>1</u>00&quot;, groups: [&quot;1&quot;]
  Step 2: &quot;<u>1</u>0100&quot;, groups: [&quot;1&quot;, &quot;1&quot;]
  Step 3: &quot;1010<u>1</u>&quot;, groups: [&quot;1&quot;, &quot;1&quot;, &quot;1&quot;]
  Step 4: &quot;101<u>1</u>1&quot;, groups: [&quot;1&quot;, &quot;111&quot;]
  Step 5: &quot;1<u>1</u>111&quot;, groups: [&quot;11111&quot;]
  No group of size 2 exists during any step.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> arr = [1], m = 1
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> arr = [2,1], m = 2
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All integers in arr are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
