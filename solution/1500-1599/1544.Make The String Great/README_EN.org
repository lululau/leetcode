* [[https://leetcode.com/problems/make-the-string-great][1544. Make The
String Great]]
  :PROPERTIES:
  :CUSTOM_ID: make-the-string-great
  :END:
[[./solution/1500-1599/1544.Make The String Great/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s of lower and upper case English letters.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A good string is a string which doesn't have two adjacent characters
s[i] and s[i + 1] where:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= i <= s.length - 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[i] is a lower-case letter and s[i + 1] is the same letter but in
upper-case or vice-versa.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

To make the string good, you can choose two adjacent characters that
make the string bad and remove them. You can keep doing this until the
string becomes good.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the string after making it good. The answer is guaranteed to be
unique under the given constraints.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that an empty string is also good.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;leEeetcode&quot;

  <strong>Output:</strong> &quot;leetcode&quot;

  <strong>Explanation:</strong> In the first step, either you choose i = 1 or i = 2, both will result &quot;leEeetcode&quot; to be reduced to &quot;leetcode&quot;.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;abBAcC&quot;

  <strong>Output:</strong> &quot;&quot;

  <strong>Explanation:</strong> We have many possible scenarios, and all lead to the same answer. For example:

  &quot;abBAcC&quot; --&gt; &quot;aAcC&quot; --&gt; &quot;cC&quot; --&gt; &quot;&quot;

  &quot;abBAcC&quot; --&gt; &quot;abBA&quot; --&gt; &quot;aA&quot; --&gt; &quot;&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;s&quot;

  <strong>Output:</strong> &quot;s&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s contains only lower and upper case English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
