* [[https://leetcode.com/problems/best-position-for-a-service-centre][1515.
Best Position for a Service Centre]]
  :PROPERTIES:
  :CUSTOM_ID: best-position-for-a-service-centre
  :END:
[[./solution/1500-1599/1515.Best Position for a Service Centre/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A delivery company wants to build a new service centre in a new city.
The company knows the positions of all the customers in this city on a
2D-Map and wants to build the new centre in a position such that the sum
of the euclidean distances to all customers is minimum.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given an array positions where positions[i] = [xi, yi] is the position
of the ith customer on the map, return the minimum sum of the euclidean
distances to all customers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In other words, you need to choose the position of the service centre
[xcentre, ycentre] such that the following formula is minimized:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Answers within 10^-5 of the actual value will be accepted.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> positions = [[0,1],[1,0],[1,2],[2,1]]
  <strong>Output:</strong> 4.00000
  <strong>Explanation:</strong> As shown, you can see that choosing [x<sub>centre</sub>, y<sub>centre</sub>] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> positions = [[1,1],[3,3]]
  <strong>Output:</strong> 2.82843
  <strong>Explanation:</strong> The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> positions = [[1,1]]
  <strong>Output:</strong> 0.00000
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> positions = [[1,1],[0,0],[2,0]]
  <strong>Output:</strong> 2.73205
  <strong>Explanation:</strong> At the first glance, you may think that locating the centre at [1, 0] will achieve the minimum sum, but locating it at [1, 0] will make the sum of distances = 3.
  Try to locate the centre at [1.0, 0.5773502711] you will see that the sum of distances is 2.73205.
  Be careful with the precision!
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]
  <strong>Output:</strong> 32.94036
  <strong>Explanation:</strong> You can use [4.3460852395, 4.9813795505] as the position of the centre.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= positions.length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

positions[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= positions[i][0], positions[i][1] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
