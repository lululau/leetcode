* [[https://leetcode-cn.com/problems/find-kth-bit-in-nth-binary-string][1545.
找出第 N 个二进制字符串中的第 K 位]]
  :PROPERTIES:
  :CUSTOM_ID: 找出第-n-个二进制字符串中的第-k-位
  :END:
[[./solution/1500-1599/1545.Find Kth Bit in Nth Binary String/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个正整数 n 和 k，二进制字符串  Sn 的形成规则如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

S1 = "0"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

当 i > 1 时，Si = Si-1 + "1" + reverse(invert(Si-1))

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

其中 + 表示串联操作，reverse(x) 返回反转 x 后得到的字符串，而 invert(x)
则会翻转 x 中的每一位（0 变为 1，而 1 变为 0）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，符合上述描述的序列的前 4 个字符串依次是：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

S1 = "0"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S2 = "011"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S3 = "0111001"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S4 = "011100110110001"

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回  Sn 的 第 k 位字符 ，题目数据保证 k 一定在 Sn 长度范围以内。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 3, k = 1
  <strong>输出：</strong>"0"
  <strong>解释：</strong>S<sub>3</sub> 为 "<strong>0</strong>111001"，其第 1 位为 "0" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 4, k = 11
  <strong>输出：</strong>"1"
  <strong>解释：</strong>S<sub>4</sub> 为 "0111001101<strong>1</strong>0001"，其第 11 位为 "1" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 1, k = 1
  <strong>输出：</strong>"0"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 2, k = 3
  <strong>输出：</strong>"1"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 2n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
