* [[https://leetcode.com/problems/find-kth-bit-in-nth-binary-string][1545.
Find Kth Bit in Nth Binary String]]
  :PROPERTIES:
  :CUSTOM_ID: find-kth-bit-in-nth-binary-string
  :END:
[[./solution/1500-1599/1545.Find Kth Bit in Nth Binary String/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two positive integers n and k, the binary string  Sn is formed as
follows:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

S1 = "0"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Si = Si-1 + "1" + reverse(invert(Si-1)) for i > 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Where + denotes the concatenation operation, reverse(x) returns the
reversed string x, and invert(x) inverts all the bits in x (0 changes to
1 and 1 changes to 0).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, the first 4 strings in the above sequence are:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

S1 = "0"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S2 = "011"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S3 = "0111001"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S4 = "011100110110001"

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the kth bit in Sn. It is guaranteed that k is valid for the
given n.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 3, k = 1

  <strong>Output:</strong> &quot;0&quot;

  <strong>Explanation: </strong>S<sub>3</sub>&nbsp;is &quot;<strong><u>0</u></strong>111001&quot;. The first bit is &quot;0&quot;.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 4, k = 11

  <strong>Output:</strong> &quot;1&quot;

  <strong>Explanation: </strong>S<sub>4</sub>&nbsp;is &quot;0111001101<strong><u>1</u></strong>0001&quot;. The 11th bit is &quot;1&quot;.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 1, k = 1

  <strong>Output:</strong> &quot;0&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 2, k = 3

  <strong>Output:</strong> &quot;1&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 2n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
