* [[https://leetcode-cn.com/problems/path-with-maximum-probability][1514.
概率最大的路径]]
  :PROPERTIES:
  :CUSTOM_ID: 概率最大的路径
  :END:
[[./solution/1500-1599/1514.Path with Maximum Probability/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个由 n 个节点（下标从 0
开始）组成的无向加权图，该图由一个描述边的列表组成，其中 edges[i] = [a,
b] 表示连接节点 a 和 b 的一条无向边，且该边遍历成功的概率为 succProb[i]
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

指定两个节点分别作为起点 start 和终点 end
，请你找出从起点到终点成功概率最大的路径，并返回其成功概率。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果不存在从 start 到 end 的路径，请 返回 0
。只要答案与标准答案的误差不超过 1e-5 ，就会被视作正确答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
  <strong>输出：</strong>0.25000
  <strong>解释：</strong>从起点到终点有两条路径，其中一条的成功概率为 0.2 ，而另一条为 0.5 * 0.5 = 0.25
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
  <strong>输出：</strong>0.30000
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
  <strong>输出：</strong>0.00000
  <strong>解释：</strong>节点 0 和 节点 2 之间不存在路径
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= start, end < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

start != end

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= a, b < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

a != b

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= succProb.length == edges.length <= 2*10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= succProb[i] <= 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每两个节点之间最多有一条边

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
