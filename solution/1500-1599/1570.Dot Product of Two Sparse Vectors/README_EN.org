* [[https://leetcode.com/problems/dot-product-of-two-sparse-vectors][1570.
Dot Product of Two Sparse Vectors]]
  :PROPERTIES:
  :CUSTOM_ID: dot-product-of-two-sparse-vectors
  :END:
[[./solution/1500-1599/1570.Dot Product of Two Sparse Vectors/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two sparse vectors, compute their dot product.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement class SparseVector:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul data-indent="0" data-stringify-type="unordered-list">
#+end_html

#+begin_html
  <li>
#+end_html

SparseVector(nums) Initializes the object with the vector nums

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

dotProduct(vec) Compute the dot product between the instance of
SparseVector and vec

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

A sparse vector is a vector that has mostly zero values, you should
store the sparse vector efficiently and compute the dot product between
two SparseVector.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: What if only one of the vectors is sparse?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]
  <strong>Output:</strong> 8
  <strong>Explanation:</strong> v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
  v1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
  v1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]
  <strong>Output:</strong> 6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums1.length == nums2.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums1[i], nums2[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
