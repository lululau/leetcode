* [[https://leetcode-cn.com/problems/dot-product-of-two-sparse-vectors][1570.
两个稀疏向量的点积]]
  :PROPERTIES:
  :CUSTOM_ID: 两个稀疏向量的点积
  :END:
[[./solution/1500-1599/1570.Dot Product of Two Sparse Vectors/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定两个稀疏向量，计算它们的点积（数量积）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现类 SparseVector：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

SparseVector(nums) 以向量 nums 初始化对象。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

dotProduct(vec) 计算此向量与 vec 的点积。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

稀疏向量 是指绝大多数分量为 0 的向量。你需要 高效
地存储这个向量，并计算两个稀疏向量的点积。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：当其中只有一个向量是稀疏向量时，你该如何解决此问题？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]
  <strong>输出：</strong>8
  <strong>解释：</strong>v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
  v1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]
  <strong>输出：</strong>0
  <strong>解释：</strong>v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
  v1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]
  <strong>输出：</strong>6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums1.length == nums2.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums1[i], nums2[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
