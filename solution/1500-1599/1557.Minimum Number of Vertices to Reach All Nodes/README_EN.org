* [[https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes][1557.
Minimum Number of Vertices to Reach All Nodes]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-number-of-vertices-to-reach-all-nodes
  :END:
[[./solution/1500-1599/1557.Minimum Number of Vertices to Reach All Nodes/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a directed acyclic graph, with n vertices numbered
from 0 to n-1, and an array edges where edges[i] = [fromi,
toi] represents a directed edge from node fromi to node toi.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Find the smallest set of vertices from which all nodes in the graph are
reachable. It's guaranteed that a unique solution exists.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that you can return the vertices in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]

  <strong>Output:</strong> [0,3]

  <b>Explanation: </b>It&#39;s not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]

  <strong>Output:</strong> [0,2,3]

  <strong>Explanation: </strong>Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edges.length <= min(10^5, n * (n - 1) / 2)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= fromi, toi < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All pairs (fromi, toi) are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
