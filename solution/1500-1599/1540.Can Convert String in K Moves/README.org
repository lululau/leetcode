* [[https://leetcode-cn.com/problems/can-convert-string-in-k-moves][1540.
K 次操作转变字符串]]
  :PROPERTIES:
  :CUSTOM_ID: k-次操作转变字符串
  :END:
[[./solution/1500-1599/1540.Can Convert String in K Moves/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个字符串 s 和 t ，你的目标是在 k 次操作以内把字符串 s 转变成 t 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在第 i 次操作时（1 <= i <= k），你可以选择进行如下操作：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

选择字符串 s 中满足 1 <= j <= s.length 且之前未被选过的任意下标
j （下标从 1 开始），并将此位置的字符切换 i 次。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

不进行任何操作。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

切换 1
次字符的意思是用字母表中该字母的下一个字母替换它（字母表环状接起来，所以
'z' 切换后会变成 'a'）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请记住任意一个下标 j 最多只能被操作 1 次。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果在不超过 k 次操作内可以把字符串 s 转变成
t ，那么请你返回 true ，否则请你返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;input&quot;, t = &quot;ouput&quot;, k = 9
  <strong>输出：</strong>true
  <strong>解释：</strong>第 6 次操作时，我们将 &#39;i&#39; 切换 6 次得到 &#39;o&#39; 。第 7 次操作时，我们将 &#39;n&#39; 切换 7 次得到 &#39;u&#39; 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;abc&quot;, t = &quot;bcd&quot;, k = 10
  <strong>输出：</strong>false
  <strong>解释：</strong>我们需要将每个字符切换 1 次才能得到 t 。我们可以在第 1 次操作时将 &#39;a&#39; 切换成 &#39;b&#39; ，但另外 2 个字母在剩余操作中无法再转变为 t 中对应字母。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;aab&quot;, t = &quot;bbb&quot;, k = 27
  <strong>输出：</strong>true
  <strong>解释：</strong>第 1 次操作时，我们将第一个 &#39;a&#39; 切换 1 次得到 &#39;b&#39; 。在第 27 次操作时，我们将第二个字母 &#39;a&#39; 切换 27 次得到 &#39;b&#39; 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length, t.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= k <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 和 t 只包含小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
