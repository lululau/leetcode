* [[https://leetcode-cn.com/problems/find-root-of-n-ary-tree][1506. 找到
N 叉树的根节点]]
  :PROPERTIES:
  :CUSTOM_ID: 找到-n-叉树的根节点
  :END:
[[./solution/1500-1599/1506.Find Root of N-Ary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一棵 N 叉树 的所有节点在一个数组  Node[] tree 中，树中每个节点都有
唯一的值 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

找到并返回 N 叉树的 根节点 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

自定义测试：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

N 叉树的输入序列为其层序遍历序列，每组子节点用 null 分隔（见示例）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

上图中的 N 叉树的序列化描述为
[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

测试将以下列方式进行：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

输入数据的形式为树的序列化描述。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

驱动程序代码将根据序列化的输入数据构造树，并以任意顺序将每个 Node
对象放入一个数组中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

驱动程序代码将把数组传递给 findRoot
，你所编写的函数应该在数组中查找并返回根 Node 对象。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

驱动程序代码将接受返回的 Node
对象并对其进行序列化。如果序列化的结果和输入数据 相同 ，则测试 通过 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tree = [1,null,3,2,4,null,5,6]
  <strong>输出：</strong>[1,null,3,2,4,null,5,6]
  <strong>解释：</strong>来自输入数据的树如上所示。
  驱动程序代码创建树，并以任意顺序向 findRoot 提供 Node 对象。
  例如，传递的数组可以是 [Node(5),Node(4),Node(3),Node(6),Node(2),Node(1)] 或 [Node(2),Node(6),Node(1),Node(3),Node(5),Node(4)] 。
  findRoot 函数应该返回根 Node(1) ，驱动程序代码将序列化它并与输入数据进行比较。
  输入数据和序列化的 Node(1) 相同，因此测试通过。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tree = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
  <strong>输出：</strong>[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

节点的总个数在 [1, 5*10^4] 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点都有唯一的值。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你可以使用 O(1) 额外内存空间且 O(n)
时间复杂度的算法来找到该树的根节点吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
