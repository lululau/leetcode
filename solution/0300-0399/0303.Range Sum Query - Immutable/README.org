* [[https://leetcode-cn.com/problems/range-sum-query-immutable][303.
区域和检索 - 数组不可变]]
  :PROPERTIES:
  :CUSTOM_ID: 区域和检索---数组不可变
  :END:
[[./solution/0300-0399/0303.Range Sum Query - Immutable/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个整数数组
 nums，求出数组从索引 i 到 j（i ≤ j）范围内元素的总和，包含 i、j 两点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 NumArray 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

NumArray(int[] nums) 使用数组 nums 初始化对象

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int sumRange(int i, int j) 返回数组 nums
从索引 i 到 j（i ≤ j）范围内元素的总和，包含 i、j 两点（也就是
sum(nums[i], nums[i + 1], ... , nums[j])）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["NumArray", "sumRange", "sumRange", "sumRange"]
  [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
  <strong>输出：
  </strong>[null, 1, -1, -3]

  <strong>解释：</strong>
  NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
  numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)
  numArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) 
  numArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= nums[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= i <= j < nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 104 次 sumRange 方法

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class NumArray:

      def __init__(self, nums: List[int]):
          n = len(nums)
          self.sums = [0] * (n + 1)
          for i in range(n):
              self.sums[i + 1] = nums[i] + self.sums[i]


      def sumRange(self, i: int, j: int) -> int:
          return self.sums[j + 1] - self.sums[i]


  # Your NumArray object will be instantiated and called as such:
  # obj = NumArray(nums)
  # param_1 = obj.sumRange(i,j)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class NumArray {

      private int[] sums;

      public NumArray(int[] nums) {
          int n = nums.length;
          sums = new int[n + 1];
          for (int i = 0; i < n; ++i) {
              sums[i + 1] = nums[i] + sums[i];
          }
      }

      public int sumRange(int i, int j) {
          return sums[j + 1] - sums[i];
      }
  }

  /**
   * Your NumArray object will be instantiated and called as such:
   * NumArray obj = new NumArray(nums);
   * int param_1 = obj.sumRange(i,j);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
