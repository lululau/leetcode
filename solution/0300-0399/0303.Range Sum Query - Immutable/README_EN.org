* [[https://leetcode.com/problems/range-sum-query-immutable][303. Range
Sum Query - Immutable]]
  :PROPERTIES:
  :CUSTOM_ID: range-sum-query---immutable
  :END:
[[./solution/0300-0399/0303.Range Sum Query - Immutable/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums, find the sum of the elements between
indices left and right inclusive, where (left <= right).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the NumArray class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

NumArray(int[] nums) initializes the object with the integer array nums.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int sumRange(int left, int right) returns the sum of the elements of the
nums array in the range [left, right] inclusive (i.e., sum(nums[left],
nums[left + 1], ... , nums[right])).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;sumRange&quot;, &quot;sumRange&quot;]
  [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
  <strong>Output</strong>
  [null, 1, -1, -3]

  <strong>Explanation</strong>
  NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
  numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)
  numArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) 
  numArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= nums[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= left <= right < nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 104 calls will be made to sumRange.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class NumArray:

      def __init__(self, nums: List[int]):
          n = len(nums)
          self.sums = [0] * (n + 1)
          for i in range(n):
              self.sums[i + 1] = nums[i] + self.sums[i]


      def sumRange(self, i: int, j: int) -> int:
          return self.sums[j + 1] - self.sums[i]


  # Your NumArray object will be instantiated and called as such:
  # obj = NumArray(nums)
  # param_1 = obj.sumRange(i,j)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class NumArray {

      private int[] sums;

      public NumArray(int[] nums) {
          int n = nums.length;
          sums = new int[n + 1];
          for (int i = 0; i < n; ++i) {
              sums[i + 1] = nums[i] + sums[i];
          }
      }

      public int sumRange(int i, int j) {
          return sums[j + 1] - sums[i];
      }
  }

  /**
   * Your NumArray object will be instantiated and called as such:
   * NumArray obj = new NumArray(nums);
   * int param_1 = obj.sumRange(i,j);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
