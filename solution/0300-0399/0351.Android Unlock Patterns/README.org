* [[https://leetcode-cn.com/problems/android-unlock-patterns][351.
安卓系统手势解锁]]
  :PROPERTIES:
  :CUSTOM_ID: 安卓系统手势解锁
  :END:
[[./solution/0300-0399/0351.Android Unlock Patterns/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们都知道安卓有个手势解锁的界面，是一个 3 x 3
的点所绘制出来的网格。用户可以设置一个 "解锁模式"
，通过连接特定序列中的点，形成一系列彼此连接的线段，每个线段的端点都是序列中两个连续的点。如果满足以下两个条件，则
k 点序列是有效的解锁模式：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

解锁模式中的所有点 互不相同 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

假如模式中两个连续点的线段需要经过其他点，那么要经过的点必须事先出现在序列中（已经经过），不能跨过任何还未被经过的点。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

以下是一些有效和无效解锁模式的示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

无效手势：[4,1,3,6] ，连接点 1 和点 3 时经过了未被连接过的 2 号点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

无效手势：[4,1,9,2] ，连接点 1 和点 9 时经过了未被连接过的 5 号点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

有效手势：[2,4,1,3,6] ，连接点 1 和点 3 是有效的，因为虽然它经过了点 2
，但是点 2 在该手势中之前已经被连过了。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

有效手势：[6,5,4,1,9,2] ，连接点 1 和点 9 是有效的，因为虽然它经过了按键
5 ，但是点 5 在该手势中之前已经被连过了。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你两个整数，分别为 ​​m 和 n ，那么请你统计一下有多少种
不同且有效的解锁模式 ，是 至少 需要经过 m 个点，但是 不超过 n 个点的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

两个解锁模式 不同 需满足：经过的点不同或者经过点的顺序不同。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>m = 1, n = 1
  <strong>输出：</strong>9
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>m = 1, n = 2
  <strong>输出：</strong>65
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
