* [[https://leetcode.com/problems/wiggle-subsequence][376. Wiggle
Subsequence]]
  :PROPERTIES:
  :CUSTOM_ID: wiggle-subsequence
  :END:
[[./solution/0300-0399/0376.Wiggle Subsequence/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A wiggle sequence is a sequence where the differences between successive
numbers strictly alternate between positive and negative. The first
difference (if one exists) may be either positive or negative. A
sequence with two or fewer elements is trivially a wiggle sequence.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the
differences (6, -3, 5, -7, 3) alternate between positive and negative.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle
sequences. The first is not because its first two differences are
positive, and the second is not because its last difference is zero.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

A subsequence is obtained by deleting some elements (possibly zero) from
the original sequence, leaving the remaining elements in their original
order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given an integer array nums, return the length of the longest wiggle
subsequence of nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,7,4,9,2,5]
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,17,5,10,13,15,10,5,16,8]
  <strong>Output:</strong> 7
  <strong>Explanation:</strong> There are several subsequences that achieve this length.
  One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,2,3,4,5,6,7,8,9]
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you solve this in O(n) time?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
