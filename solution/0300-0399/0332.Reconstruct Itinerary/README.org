* [[https://leetcode-cn.com/problems/reconstruct-itinerary][332.
重新安排行程]]
  :PROPERTIES:
  :CUSTOM_ID: 重新安排行程
  :END:
[[./solution/0300-0399/0332.Reconstruct Itinerary/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个机票的字符串二维数组 [from,
to]，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。所有这些机票都属于一个从
JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

如果存在多种有效的行程，请你按字符自然排序返回最小的行程组合。例如，行程
["JFK", "LGA"] 与 ["JFK", "LGB"] 相比就更小，排序更靠前

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有的机场都用三个大写字母表示（机场代码）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

假定所有机票至少存在一种合理的行程。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有的机票必须都用一次 且 只能用一次。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <code><strong>输入：</strong></code><code>[["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]</code>
  <strong>输出：</strong><code>["JFK", "MUC", "LHR", "SFO", "SJC"]</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <code><strong>输入：</strong></code><code>[["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]</code>
  <strong>输出：</strong><code>["JFK","ATL","JFK","SFO","ATL","SFO"]</code>
  <strong>解释：</strong>另一种有效的行程是 <code>["JFK","SFO","ATL","JFK","ATL","SFO"]</code>。但是它自然排序更大更靠后。</pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
