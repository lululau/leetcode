* [[https://leetcode.com/problems/binary-tree-vertical-order-traversal][314.
Binary Tree Vertical Order Traversal]]
  :PROPERTIES:
  :CUSTOM_ID: binary-tree-vertical-order-traversal
  :END:
[[./solution/0300-0399/0314.Binary Tree Vertical Order Traversal/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary tree, return the vertical order traversal of
its nodes' values. (i.e., from top to bottom, column by column).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If two nodes are in the same row and column, the order should be from
left to right.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,9,20,null,null,15,7]
  <strong>Output:</strong> [[9],[3,15],[20],[7]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,9,8,4,0,1,7]
  <strong>Output:</strong> [[4],[9],[3,0,1],[8],[7]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,9,8,4,0,1,7,null,null,null,2,5]
  <strong>Output:</strong> [[4],[9,5],[3,0,1],[8,2],[7]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [0, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def verticalOrder(self, root: TreeNode) -> List[List[int]]:
          if root is None:
              return []
          q = collections.deque([(root, 0)])
          offset_vals = collections.defaultdict(list)
          while q:
              node, offset = q.popleft()
              offset_vals[offset].append(node.val)
              if node.left:
                  q.append((node.left, offset - 1))
              if node.right:
                  q.append((node.right, offset + 1))
          res = []
          for _, vals in sorted(offset_vals.items(), key=lambda x: x[0]):
              res.append(vals)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public List<List<Integer>> verticalOrder(TreeNode root) {
          if (root == null) {
              return Collections.emptyList();
          }
          Map<Integer, List<Integer>> offsetVals = new TreeMap<>();
          Map<TreeNode, Integer> nodeOffsets = new HashMap<>();
          Deque<TreeNode> q = new ArrayDeque<>();
          q.offer(root);
          nodeOffsets.put(root, 0);

          while (!q.isEmpty()) {
              TreeNode node = q.poll();
              int offset = nodeOffsets.get(node);
              if (!offsetVals.containsKey(offset)) {
                  offsetVals.put(offset, new ArrayList<>());
              }
              offsetVals.get(offset).add(node.val);
              if (node.left != null) {
                  q.offer(node.left);
                  nodeOffsets.put(node.left, offset - 1);
              }
              if (node.right != null) {
                  q.offer(node.right);
                  nodeOffsets.put(node.right, offset + 1);
              }
          }
          return new ArrayList<>(offsetVals.values());
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
