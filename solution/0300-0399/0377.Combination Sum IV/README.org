* [[https://leetcode-cn.com/problems/combination-sum-iv][377. 组合总和
Ⅳ]]
  :PROPERTIES:
  :CUSTOM_ID: 组合总和-ⅳ
  :END:
[[./solution/0300-0399/0377.Combination Sum IV/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个由 不同 整数组成的数组 nums ，和一个目标整数 target 。请你从
nums 中找出并返回总和为 target 的元素组合的个数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

题目数据保证答案符合 32 位整数范围。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,2,3], target = 4
  <strong>输出：</strong>7
  <strong>解释：</strong>
  所有可能的组合为：
  (1, 1, 1, 1)
  (1, 1, 2)
  (1, 2, 1)
  (1, 3)
  (2, 1, 1)
  (2, 2)
  (3, 1)
  请注意，顺序不同的序列被视作不同的组合。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [9], target = 3
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums 中的所有元素 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：如果给定的数组中含有负数会发生什么？问题会产生何种变化？如果允许负数出现，需要向题目中添加哪些限制条件？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

简单动态规划，=dp[i]= 表示总和为 =i= 的元素组合的个数。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def combinationSum4(self, nums: List[int], target: int) -> int:
          dp = [0 for i in range(target + 1)]
          dp[0] = 1
          for i in range(1, target + 1):
              for num in nums:
                  if i - num >= 0:
                      dp[i] += dp[i - num]
          return dp[target]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int combinationSum4(int[] nums, int target) {
          int[] dp = new int[target + 1];
          dp[0] = 1;
          for (int i = 1; i <= target; i++) {
              for (int num : nums) {
                  if (i - num >= 0) {
                      dp[i] += dp[i - num];
                  }
              }
          }
          return dp[target];
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
