* [[https://leetcode.com/problems/range-sum-query-2d-immutable][304.
Range Sum Query 2D - Immutable]]
  :PROPERTIES:
  :CUSTOM_ID: range-sum-query-2d---immutable
  :END:
[[./solution/0300-0399/0304.Range Sum Query 2D - Immutable/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a 2D matrix matrix, find the sum of the elements inside the
rectangle defined by its upper left corner (row1, col1) and lower right
corner (row2, col2).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the NumMatrix class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

NumMatrix(int[][] matrix) initializes the object with the integer matrix
matrix.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int sumRegion(int row1, int col1, int row2, int col2) returns the sum of
the elements of the matrix array inside the rectangle defined by its
upper left corner (row1, col1) and lower right corner (row2, col2).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;NumMatrix&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;]
  [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
  <strong>Output</strong>
  [null, 8, 11, 12]

  <strong>Explanation</strong>
  NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
  numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangele).
  numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangele).
  numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangele).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == matrix.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= matrix[i][j] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= row1 <= row2 < m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= col1 <= col2 < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 104 calls will be made to sumRegion.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class NumMatrix:

      def __init__(self, matrix: List[List[int]]):
          m = len(matrix)
          if m > 0:
              n = len(matrix[0])
              self.sums = [[0] * (n + 1) for _ in range(m + 1)]
              for i in range(m):
                  for j in range(n):
                      self.sums[i + 1][j + 1] = self.sums[i][j + 1] + \
                          self.sums[i + 1][j] - self.sums[i][j] + matrix[i][j]

      def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
          return self.sums[row2 + 1][col2 + 1] - self.sums[row2 + 1][col1] - self.sums[row1][col2 + 1] + self.sums[row1][col1]


  # Your NumMatrix object will be instantiated and called as such:
  # obj = NumMatrix(matrix)
  # param_1 = obj.sumRegion(row1,col1,row2,col2)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class NumMatrix {
      private int[][] sums;

      public NumMatrix(int[][] matrix) {
          int m = matrix.length;
          if (m > 0) {
              int n = matrix[0].length;
              sums = new int[m + 1][n + 1];
              for (int i = 0; i < m; ++i) {
                  for (int j = 0; j < n; ++j) {
                      sums[i + 1][j + 1] = sums[i][j + 1] + sums[i + 1][j] - sums[i][j] + matrix[i][j];
                  }
              }
          }
      }

      public int sumRegion(int row1, int col1, int row2, int col2) {
          return sums[row2 + 1][col2 + 1] - sums[row2 + 1][col1] - sums[row1][col2 + 1] + sums[row1][col1];
      }
  }

  /**
   * Your NumMatrix object will be instantiated and called as such:
   * NumMatrix obj = new NumMatrix(matrix);
   * int param_1 = obj.sumRegion(row1,col1,row2,col2);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
