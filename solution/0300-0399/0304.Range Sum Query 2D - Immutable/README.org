* [[https://leetcode-cn.com/problems/range-sum-query-2d-immutable][304.
二维区域和检索 - 矩阵不可变]]
  :PROPERTIES:
  :CUSTOM_ID: 二维区域和检索---矩阵不可变
  :END:
[[./solution/0300-0399/0304.Range Sum Query 2D - Immutable/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为
(row1, col1) ，右下角为 (row2, col2) 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

上图子矩阵左上角 (row1, col1) = (2, 1) ，右下角(row2, col2) = (4,
3)，该子矩形内元素的总和为 8。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  给定 matrix = [
    [3, 0, 1, 4, 2],
    [5, 6, 3, 2, 1],
    [1, 2, 0, 1, 5],
    [4, 1, 0, 1, 7],
    [1, 0, 3, 0, 5]
  ]

  sumRegion(2, 1, 4, 3) -> 8
  sumRegion(1, 1, 2, 2) -> 11
  sumRegion(1, 2, 2, 4) -> 12
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你可以假设矩阵不可变。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

会多次调用 sumRegion 方法。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你可以假设 row1 ≤ row2 且 col1 ≤ col2 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class NumMatrix:

      def __init__(self, matrix: List[List[int]]):
          m = len(matrix)
          if m > 0:
              n = len(matrix[0])
              self.sums = [[0] * (n + 1) for _ in range(m + 1)]
              for i in range(m):
                  for j in range(n):
                      self.sums[i + 1][j + 1] = self.sums[i][j + 1] + \
                          self.sums[i + 1][j] - self.sums[i][j] + matrix[i][j]

      def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
          return self.sums[row2 + 1][col2 + 1] - self.sums[row2 + 1][col1] - self.sums[row1][col2 + 1] + self.sums[row1][col1]


  # Your NumMatrix object will be instantiated and called as such:
  # obj = NumMatrix(matrix)
  # param_1 = obj.sumRegion(row1,col1,row2,col2)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class NumMatrix {
      private int[][] sums;

      public NumMatrix(int[][] matrix) {
          int m = matrix.length;
          if (m > 0) {
              int n = matrix[0].length;
              sums = new int[m + 1][n + 1];
              for (int i = 0; i < m; ++i) {
                  for (int j = 0; j < n; ++j) {
                      sums[i + 1][j + 1] = sums[i][j + 1] + sums[i + 1][j] - sums[i][j] + matrix[i][j];
                  }
              }
          }
      }

      public int sumRegion(int row1, int col1, int row2, int col2) {
          return sums[row2 + 1][col2 + 1] - sums[row2 + 1][col1] - sums[row1][col2 + 1] + sums[row1][col1];
      }
  }

  /**
   * Your NumMatrix object will be instantiated and called as such:
   * NumMatrix obj = new NumMatrix(matrix);
   * int param_1 = obj.sumRegion(row1,col1,row2,col2);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
