* [[https://leetcode-cn.com/problems/design-snake-game][353. 贪吃蛇]]
  :PROPERTIES:
  :CUSTOM_ID: 贪吃蛇
  :END:
[[./solution/0300-0399/0353.Design Snake Game/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

请你设计一个 贪吃蛇游戏，该游戏将会在一个 屏幕尺寸 = 宽度 x
高度 的屏幕上运行。如果你不熟悉这个游戏，可以 点击这里 在线试玩。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

起初时，蛇在左上角的 (0, 0) 位置，身体长度为 1 个单位。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你将会被给出一个数组形式的食物位置序列 food ，其中 food[i] = (ri, ci)
。当蛇吃到食物时，身子的长度会增加 1 个单位，得分也会 +1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

食物不会同时出现，会按列表的顺序逐一显示在屏幕上。比方讲，第一个食物被蛇吃掉后，第二个食物才会出现。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

当一个食物在屏幕上出现时，保证 不会 出现在被蛇身体占据的格子里。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p class="MachineTrans-lang-zh-CN">
#+end_html

如果蛇越界（与边界相撞）或者头与 移动后 的身体相撞（即，身长为 4
的蛇无法与自己相撞），游戏结束。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 SnakeGame 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

SnakeGame(int width, int height, int[][] food) 初始化对象，屏幕大小为
height x width ，食物位置序列为 food

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int move(String direction) 返回蛇在方向 direction
上移动后的得分。如果游戏结束，返回 -1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

 

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["SnakeGame", "move", "move", "move", "move", "move", "move"]
  [[3, 2, [[1, 2], [0, 1]]], ["R"], ["D"], ["R"], ["U"], ["L"], ["U"]]
  <strong>输出：</strong>
  [null, 0, 0, 1, 1, 2, -1]

  <strong>解释：</strong>
  SnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);
  snakeGame.move("R"); // 返回 0
  snakeGame.move("D"); // 返回 0
  snakeGame.move("R"); // 返回 1 ，蛇吃掉了第一个食物，同时第二个食物出现在 (0, 1)
  snakeGame.move("U"); // 返回 1
  snakeGame.move("L"); // 返回 2 ，蛇吃掉了第二个食物，没有出现更多食物
  snakeGame.move("U"); // 返回 -1 ，蛇与边界相撞，游戏结束
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= width, height <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= food.length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

food[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ri < height

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ci < width

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

direction.length == 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

direction is 'U', 'D', 'L', or 'R'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 104 次 move 方法

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
