* [[https://leetcode.com/problems/shortest-distance-from-all-buildings][317.
Shortest Distance from All Buildings]]
  :PROPERTIES:
  :CUSTOM_ID: shortest-distance-from-all-buildings
  :END:
[[./solution/0300-0399/0317.Shortest Distance from All Buildings/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an m x n grid grid of values 0, 1, or 2, where:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

each 0 marks an empty land that you can pass by freely,

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

each 1 marks a building that you cannot pass through, and

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

each 2 marks an obstacle that you cannot pass through.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You want to build a house on an empty land that reaches all buildings in
the shortest total travel distance. You can only move up, down, left,
and right.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the shortest travel distance for such a house. If it is not
possible to build such a house according to the above rules, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The total travel distance is the sum of the distances between the houses
of the friends and the meeting point.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The distance is calculated using Manhattan Distance, where distance(p1,
p2) = |p2.x - p1.x| + |p2.y - p1.y|.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]
  <strong>Output:</strong> 7
  <strong>Explanation:</strong> Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2).
  The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.
  So return 7.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,0]]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1]]
  <strong>Output:</strong> -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] is either 0, 1, or 2.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There will be at least one building in the grid.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
