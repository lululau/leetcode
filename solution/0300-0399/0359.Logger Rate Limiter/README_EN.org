* [[https://leetcode.com/problems/logger-rate-limiter][359. Logger Rate
Limiter]]
  :PROPERTIES:
  :CUSTOM_ID: logger-rate-limiter
  :END:
[[./solution/0300-0399/0359.Logger Rate Limiter/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a logger system that receives a stream of messages along with
their timestamps. Each unique message should only be printed at most
every 10 seconds (i.e. a message printed at timestamp t will prevent
other identical messages from being printed until timestamp t + 10).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

All messages will come in chronological order. Several messages may
arrive at the same timestamp.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the Logger class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Logger() Initializes the logger object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool shouldPrintMessage(int timestamp, string message) Returns true if
the message should be printed in the given timestamp, otherwise returns
false.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;Logger&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;]
  [[], [1, &quot;foo&quot;], [2, &quot;bar&quot;], [3, &quot;foo&quot;], [8, &quot;bar&quot;], [10, &quot;foo&quot;], [11, &quot;foo&quot;]]
  <strong>Output</strong>
  [null, true, true, false, false, false, true]

  <strong>Explanation</strong>
  Logger logger = new Logger();
  logger.shouldPrintMessage(1, &quot;foo&quot;);  // return true, next allowed timestamp for &quot;foo&quot; is 1 + 10 = 11
  logger.shouldPrintMessage(2, &quot;bar&quot;);  // return true, next allowed timestamp for &quot;bar&quot; is 2 + 10 = 12
  logger.shouldPrintMessage(3, &quot;foo&quot;);  // 3 &lt; 11, return false
  logger.shouldPrintMessage(8, &quot;bar&quot;);  // 8 &lt; 12, return false
  logger.shouldPrintMessage(10, &quot;foo&quot;); // 10 &lt; 11, return false
  logger.shouldPrintMessage(11, &quot;foo&quot;); // 11 &gt;= 11, return true, next allowed timestamp for &quot;foo&quot; is
                                        // 11 + 10 = 21
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= timestamp <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Every timestamp will be passed in non-decreasing order (chronological
order).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= message.length <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 104 calls will be made to shouldPrintMessage.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Logger:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.limiter = {}

      def shouldPrintMessage(self, timestamp: int, message: str) -> bool:
          """
          Returns true if the message should be printed in the given timestamp, otherwise returns false.
          If this method returns false, the message will not be printed.
          The timestamp is in seconds granularity.
          """
          t = self.limiter.get(message, 0)
          if t > timestamp:
              return False
          self.limiter[message] = timestamp + 10
          return True


  # Your Logger object will be instantiated and called as such:
  # obj = Logger()
  # param_1 = obj.shouldPrintMessage(timestamp,message)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Logger {

      private Map<String, Integer> limiter;

      /** Initialize your data structure here. */
      public Logger() {
          limiter = new HashMap<>();
      }

      /** Returns true if the message should be printed in the given timestamp, otherwise returns false.
          If this method returns false, the message will not be printed.
          The timestamp is in seconds granularity. */
      public boolean shouldPrintMessage(int timestamp, String message) {
          int t = limiter.getOrDefault(message, 0);
          if (t > timestamp) {
              return false;
          }
          limiter.put(message, timestamp + 10);
          return true;
      }
  }

  /**
   * Your Logger object will be instantiated and called as such:
   * Logger obj = new Logger();
   * boolean param_1 = obj.shouldPrintMessage(timestamp,message);
   */
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Initialize your data structure here.
   */
  var Logger = function () {
    this.limiter = {};
  };

  /**
   * Returns true if the message should be printed in the given timestamp, otherwise returns false.
          If this method returns false, the message will not be printed.
          The timestamp is in seconds granularity. 
   * @param {number} timestamp 
   * @param {string} message
   * @return {boolean}
   */
  Logger.prototype.shouldPrintMessage = function (timestamp, message) {
    const t = this.limiter[message] || 0;
    if (t > timestamp) {
      return false;
    }
    this.limiter[message] = timestamp + 10;
    return true;
  };

  /**
   * Your Logger object will be instantiated and called as such:
   * var obj = new Logger()
   * var param_1 = obj.shouldPrintMessage(timestamp,message)
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
