* [[https://leetcode.com/problems/design-phone-directory][379. Design
Phone Directory]]
  :PROPERTIES:
  :CUSTOM_ID: design-phone-directory
  :END:
[[./solution/0300-0399/0379.Design Phone Directory/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a phone directory that initially has maxNumbers empty slots that
can store numbers. The directory should store numbers, check if a
certain slot is empty or not, and empty a given slot.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the PhoneDirectory class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

PhoneDirectory(int maxNumbers) Initializes the phone directory with the
number of available slots maxNumbers.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int get() Provides a number that is not assigned to anyone. Returns -1
if no number is available.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool check(int number) Returns true if the slot number is available and
false otherwise.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void release(int number) Recycles or releases the slot number.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;PhoneDirectory&quot;, &quot;get&quot;, &quot;get&quot;, &quot;check&quot;, &quot;get&quot;, &quot;check&quot;, &quot;release&quot;, &quot;check&quot;]
  [[3], [], [], [2], [], [2], [2], [2]]
  <strong>Output</strong>
  [null, 0, 1, true, 2, false, null, true]

  <strong>Explanation</strong>
  PhoneDirectory phoneDirectory = new PhoneDirectory(3);
  phoneDirectory.get();      // It can return any available phone number. Here we assume it returns 0.
  phoneDirectory.get();      // Assume it returns 1.
  phoneDirectory.check(2);   // The number 2 is available, so return true.
  phoneDirectory.get();      // It returns 2, the only number that is left.
  phoneDirectory.check(2);   // The number 2 is no longer available, so return false.
  phoneDirectory.release(2); // Release number 2 back to the pool.
  phoneDirectory.check(2);   // Number 2 is available again, return true.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= maxNumbers <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= number < maxNumbers

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 2 * 104 calls will be made to get, check, and release.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class PhoneDirectory:

      def __init__(self, maxNumbers: int):
          """
          Initialize your data structure here
          @param maxNumbers - The maximum numbers that can be stored in the phone directory.
          """
          self.provided = [False] * maxNumbers

      def get(self) -> int:
          """
          Provide a number which is not assigned to anyone.
          @return - Return an available number. Return -1 if none is available.
          """
          for i in range(len(self.provided)):
              if not self.provided[i]:
                  self.provided[i] = True
                  return i
          return -1

      def check(self, number: int) -> bool:
          """
          Check if a number is available or not.
          """
          return not self.provided[number]

      def release(self, number: int) -> None:
          """
          Recycle or release a number.
          """
          self.provided[number] = False


  # Your PhoneDirectory object will be instantiated and called as such:
  # obj = PhoneDirectory(maxNumbers)
  # param_1 = obj.get()
  # param_2 = obj.check(number)
  # obj.release(number)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class PhoneDirectory {

      private boolean[] provided;

      /** Initialize your data structure here
          @param maxNumbers - The maximum numbers that can be stored in the phone directory. */
      public PhoneDirectory(int maxNumbers) {
          provided = new boolean[maxNumbers];
      }

      /** Provide a number which is not assigned to anyone.
          @return - Return an available number. Return -1 if none is available. */
      public int get() {
          for (int i = 0; i < provided.length; ++i) {
              if (!provided[i]) {
                  provided[i] = true;
                  return i;
              }
          }
          return -1;
      }

      /** Check if a number is available or not. */
      public boolean check(int number) {
          return !provided[number];
      }

      /** Recycle or release a number. */
      public void release(int number) {
          provided[number] = false;
      }
  }

  /**
   * Your PhoneDirectory object will be instantiated and called as such:
   * PhoneDirectory obj = new PhoneDirectory(maxNumbers);
   * int param_1 = obj.get();
   * boolean param_2 = obj.check(number);
   * obj.release(number);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
