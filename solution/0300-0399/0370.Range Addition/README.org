* [[https://leetcode-cn.com/problems/range-addition][370. 区间加法]]
  :PROPERTIES:
  :CUSTOM_ID: 区间加法
  :END:
[[./solution/0300-0399/0370.Range Addition/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

假设你有一个长度为 n 的数组，初始情况下所有的数字均为 0，你将会被给出 k​​​​​​​
个更新的操作。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

其中，每个操作会被表示为一个三元组：[startIndex, endIndex,
inc]，你需要将子数组 A[startIndex ... endIndex]（包括 startIndex 和
endIndex）增加 inc。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回 k 次操作后的数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]
  <strong>输出: </strong>[-2,0,3,5,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

解释:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>初始状态:
  [0,0,0,0,0]

  进行了操作 [1,3,2] 后的状态:
  [0,2,2,2,0]

  进行了操作 [2,4,3] 后的状态:
  [0,2,5,5,3]

  进行了操作 [0,2,-2] 后的状态:
  [-2,0,3,5,3]
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
