* [[https://leetcode.com/problems/shuffle-an-array][384. Shuffle an
Array]]
  :PROPERTIES:
  :CUSTOM_ID: shuffle-an-array
  :END:
[[./solution/0300-0399/0384.Shuffle an Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums, design an algorithm to randomly shuffle the
array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the Solution class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Solution(int[] nums) Initializes the object with the integer array nums.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int[] reset() Resets the array to its original configuration and returns
it.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int[] shuffle() Returns a random shuffling of the array.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;Solution&quot;, &quot;shuffle&quot;, &quot;reset&quot;, &quot;shuffle&quot;]
  [[[1, 2, 3]], [], [], []]
  <strong>Output</strong>
  [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]

  <strong>Explanation</strong>
  Solution solution = new Solution([1, 2, 3]);
  solution.shuffle();    // Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must be equally likely to be returned. Example: return [3, 1, 2]
  solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]
  solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-106 <= nums[i] <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the elements of nums are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 5 * 104 calls will be made to reset and shuffle.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
