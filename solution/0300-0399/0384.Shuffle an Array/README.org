* [[https://leetcode-cn.com/problems/shuffle-an-array][384. 打乱数组]]
  :PROPERTIES:
  :CUSTOM_ID: 打乱数组
  :END:
[[./solution/0300-0399/0384.Shuffle an Array/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 Solution class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Solution(int[] nums) 使用整数数组 nums 初始化对象

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int[] reset() 重设数组到它的初始状态并返回

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int[] shuffle() 返回数组随机打乱后的结果

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入</strong>
  ["Solution", "shuffle", "reset", "shuffle"]
  [[[1, 2, 3]], [], [], []]
  <strong>输出</strong>
  [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]

  <strong>解释</strong>
  Solution solution = new Solution([1, 2, 3]);
  solution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]
  solution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]
  solution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-106 <= nums[i] <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums 中的所有元素都是 唯一的

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多可以调用 5 * 104 次 reset 和 shuffle

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
