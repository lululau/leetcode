* [[https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed][381.
Insert Delete GetRandom O(1) - Duplicates allowed]]
  :PROPERTIES:
  :CUSTOM_ID: insert-delete-getrandom-o1---duplicates-allowed
  :END:
[[./solution/0300-0399/0381.Insert Delete GetRandom O%281%29 - Duplicates allowed/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement the RandomizedCollection class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

RandomizedCollection() Initializes the RandomizedCollection object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool insert(int val) Inserts an item val into the multiset if not
present. Returns true if the item was not present, false otherwise.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool remove(int val) Removes an item val from the multiset if present.
Returns true if the item was present, false otherwise. Note that if val
has multiple occurrences in the multiset, we only remove one of them.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int getRandom() Returns a random element from the current multiset of
elements (it's guaranteed that at least one element exists when this
method is called). The probability of each element being returned is
linearly related to the number of same values the multiset contains.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;]
  [[], [1], [1], [2], [], [1], []]
  <strong>Output</strong>
  [null, true, false, true, 2, true, 1]

  <strong>Explanation</strong>
  RandomizedCollection randomizedCollection = new RandomizedCollection();
  randomizedCollection.insert(1);   // return True. Inserts 1 to the collection. Returns true as the collection did not contain 1.
  randomizedCollection.insert(1);   // return False. Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].
  randomizedCollection.insert(2);   // return True. Inserts 2 to the collection, returns true. Collection now contains [1,1,2].
  randomizedCollection.getRandom(); // getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.
  randomizedCollection.remove(1);   // return True. Removes 1 from the collection, returns true. Collection now contains [1,2].
  randomizedCollection.getRandom(); // getRandom should return 1 and 2 both equally likely.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= val <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 105 calls will be made to insert, remove, and getRandom.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There will be at least one element in the data structure when getRandom
is called.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you implement the functions of the class with each
function works in average O(1) time?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class RandomizedCollection:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.m = {}
          self.l = []

      def insert(self, val: int) -> bool:
          """
          Inserts a value to the collection. Returns true if the collection did not already contain the specified element.
          """
          idx_set = self.m.get(val, set())
          idx_set.add(len(self.l))
          self.m[val] = idx_set
          self.l.append(val)
          return len(idx_set) == 1

      def remove(self, val: int) -> bool:
          """
          Removes a value from the collection. Returns true if the collection contained the specified element.
          """
          if val not in self.m:
              return False
          idx_set = self.m[val]
          idx = list(idx_set)[0]
          last_idx = len(self.l) - 1
          self.l[idx] = self.l[last_idx]
          idx_set.remove(idx)

          last_idx_set = self.m[self.l[last_idx]]
          if last_idx in last_idx_set:
              last_idx_set.remove(last_idx)
          if idx < last_idx:
              last_idx_set.add(idx)
          if not idx_set:
              self.m.pop(val)
          self.l.pop()
          return True

      def getRandom(self) -> int:
          """
          Get a random element from the collection.
          """
          return -1 if len(self.l) == 0 else random.choice(self.l)



  # Your RandomizedCollection object will be instantiated and called as such:
  # obj = RandomizedCollection()
  # param_1 = obj.insert(val)
  # param_2 = obj.remove(val)
  # param_3 = obj.getRandom()
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class RandomizedCollection {
      private Map<Integer, Set<Integer>> m;
      private List<Integer> l;
      private Random rnd;

      /** Initialize your data structure here. */
      public RandomizedCollection() {
          m = new HashMap<>();
          l = new ArrayList<>();
          rnd = new Random();
      }

      /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
      public boolean insert(int val) {
          Set<Integer> idxSet = m.getOrDefault(val, new HashSet<>());
          idxSet.add(l.size());
          m.put(val, idxSet);
          l.add(val);
          return idxSet.size() == 1;
      }

      /** Removes a value from the collection. Returns true if the collection contained the specified element. */
      public boolean remove(int val) {
          if (!m.containsKey(val)) {
              return false;
          }
          Set<Integer> idxSet = m.get(val);
          int idx = idxSet.iterator().next();
          int lastIdx = l.size() - 1;
          l.set(idx, l.get(lastIdx));
          idxSet.remove(idx);

          Set<Integer> lastIdxSet = m.get(l.get(lastIdx));
          lastIdxSet.remove(lastIdx);
          if (idx < lastIdx) {
              lastIdxSet.add(idx);
          }
          if (idxSet.isEmpty()) {
              m.remove(val);
          }
          l.remove(lastIdx);
          return true;
      }

      /** Get a random element from the collection. */
      public int getRandom() {
          int size = l.size();
          return size == 0 ? -1 : l.get(rnd.nextInt(size));
      }
  }

  /**
   * Your RandomizedCollection object will be instantiated and called as such:
   * RandomizedCollection obj = new RandomizedCollection();
   * boolean param_1 = obj.insert(val);
   * boolean param_2 = obj.remove(val);
   * int param_3 = obj.getRandom();
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
