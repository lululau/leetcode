* [[https://leetcode-cn.com/problems/additive-number][306. 累加数]]
  :PROPERTIES:
  :CUSTOM_ID: 累加数
  :END:
[[./solution/0300-0399/0306.Additive Number/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

累加数是一个字符串，组成它的数字可以形成累加序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个有效的累加序列必须至少包含 3
个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定一个只包含数字 '0'-'9' 的字符串，编写一个算法来判断给定输入是否是累加数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明: 累加序列里的数不会以 0 开头，所以不会出现 1, 2, 03 或者 1, 02,
3 的情况。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> <code>&quot;112358&quot;</code>
  <strong>输出:</strong> true 
  <strong>解释: </strong>累加序列为: <code>1, 1, 2, 3, 5, 8 </code>。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> <code>&quot;199100199&quot;</code>
  <strong>输出:</strong> true 
  <strong>解释: </strong>累加序列为: <code>1, 99, 100, 199。</code>1 + 99 = 100, 99 + 100 = 199</pre>
#+end_html

#+begin_html
  <p>
#+end_html

进阶: 你如何处理一个溢出的过大的整数输入?

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
