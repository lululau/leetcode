* [[https://leetcode.com/problems/additive-number][306. Additive
Number]]
  :PROPERTIES:
  :CUSTOM_ID: additive-number
  :END:
[[./solution/0300-0399/0306.Additive Number/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Additive number is a string whose digits can form additive sequence.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A valid additive sequence should contain at least three numbers. Except
for the first two numbers, each subsequent number in the sequence must
be the sum of the preceding two.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a string containing only digits '0'-'9', write a function to
determine if it's an additive number.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note: Numbers in the additive sequence cannot have leading zeros, so
sequence 1, 2, 03 or 1, 02, 3 is invalid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> &quot;112358&quot;
  <strong>Output:</strong> true
  <strong>Explanation:</strong> The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
  &nbsp;            1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> &quot;199100199&quot;
  <strong>Output:</strong> true
  <strong>Explanation:</strong> The additive sequence is: 1, 99, 100, 199.&nbsp;
  &nbsp;            1 + 99 = 100, 99 + 100 = 199
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

num consists only of digits '0'-'9'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= num.length <= 35

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: How would you handle overflow for very large input integers?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
