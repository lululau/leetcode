* [[https://leetcode.com/problems/design-tic-tac-toe][348. Design
Tic-Tac-Toe]]
  :PROPERTIES:
  :CUSTOM_ID: design-tic-tac-toe
  :END:
[[./solution/0300-0399/0348.Design Tic-Tac-Toe/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Assume the following rules are for the tic-tac-toe game on an n x n
board between two players:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

A move is guaranteed to be valid and is placed on an empty block.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Once a winning condition is reached, no more moves are allowed.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A player who succeeds in placing n of their marks in a horizontal,
vertical, or diagonal row wins the game.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the TicTacToe class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

TicTacToe(int n) Initializes the object the size of the board n.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int move(int row, int col, int player) Indicates that player with id
player plays at the cell (row, col) of the board. The move is guaranteed
to be a valid move.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you do better than O(n2) per move() operation?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;TicTacToe&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;]
  [[3], [0, 0, 1], [0, 2, 2], [2, 2, 1], [1, 1, 2], [2, 0, 1], [1, 0, 2], [2, 1, 1]]
  <strong>Output</strong>
  [null, 0, 0, 0, 0, 0, 0, 1]

  <strong>Explanation</strong>
  TicTacToe ticTacToe = new TicTacToe(3);
  Assume that player 1 is &quot;X&quot; and player 2 is &quot;O&quot; in the board.
  ticTacToe.move(0, 0, 1); // return 0 (no one wins)
  |X| | |
  | | | |    // Player 1 makes a move at (0, 0).
  | | | |

  ticTacToe.move(0, 2, 2); // return 0 (no one wins)
  |X| |O|
  | | | |    // Player 2 makes a move at (0, 2).
  | | | |

  ticTacToe.move(2, 2, 1); // return 0 (no one wins)
  |X| |O|
  | | | |    // Player 1 makes a move at (2, 2).
  | | |X|

  ticTacToe.move(1, 1, 2); // return 0 (no one wins)
  |X| |O|
  | |O| |    // Player 2 makes a move at (1, 1).
  | | |X|

  ticTacToe.move(2, 0, 1); // return 0 (no one wins)
  |X| |O|
  | |O| |    // Player 1 makes a move at (2, 0).
  |X| |X|

  ticTacToe.move(1, 0, 2); // return 0 (no one wins)
  |X| |O|
  |O|O| |    // Player 2 makes a move at (1, 0).
  |X| |X|

  ticTacToe.move(2, 1, 1); // return 1&nbsp;(player 1 wins)
  |X| |O|
  |O|O| |    // Player 1 makes a move at (2, 1).
  |X|X|X|
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

player is 1 or 2.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= row, col <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

(row, col) are unique for each different call to move.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most n2 calls will be made to move.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class TicTacToe:

      def __init__(self, n: int):
          """
          Initialize your data structure here.
          """
          self.n = n
          self.counter = [[0] * ((n << 1) + 2) for _ in range(2)]

      def move(self, row: int, col: int, player: int) -> int:
          """
          Player {player} makes a move at ({row}, {col}).
          @param row The row of the board.
          @param col The column of the board.
          @param player The player, can be either 1 or 2.
          @return The current winning condition, can be either:
                  0: No one wins.
                  1: Player 1 wins.
                  2: Player 2 wins.
          """
          n = self.n
          self.counter[player - 1][row] += 1
          self.counter[player - 1][col + n] += 1
          if row == col:
              self.counter[player - 1][n << 1] += 1
          if row + col == n - 1:
              self.counter[player - 1][(n << 1) + 1] += 1
          if self.counter[player - 1][row] == n or self.counter[player - 1][col + n] == n or self.counter[player - 1][n << 1] == n or self.counter[player - 1][(n << 1) + 1] == n:
              return player
          return 0


  # Your TicTacToe object will be instantiated and called as such:
  # obj = TicTacToe(n)
  # param_1 = obj.move(row,col,player)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class TicTacToe {
      private int n;
      private int[][] counter;

      /** Initialize your data structure here. */
      public TicTacToe(int n) {
          counter = new int[2][(n << 1) + 2];
          this.n = n;
      }

      /** Player {player} makes a move at ({row}, {col}).
          @param row The row of the board.
          @param col The column of the board.
          @param player The player, can be either 1 or 2.
          @return The current winning condition, can be either:
                  0: No one wins.
                  1: Player 1 wins.
                  2: Player 2 wins. */
      public int move(int row, int col, int player) {
          counter[player - 1][row] += 1;
          counter[player - 1][col + n] += 1;
          if (row == col) {
              counter[player - 1][n << 1] += 1;
          }
          if (row + col == n - 1) {
              counter[player - 1][(n << 1) + 1] += 1;
          }
          if (counter[player - 1][row] == n || counter[player - 1][col + n] == n || counter[player - 1][n << 1] == n || counter[player - 1][(n << 1) + 1] == n) {
              return player;
          }
          return 0;
      }
  }

  /**
   * Your TicTacToe object will be instantiated and called as such:
   * TicTacToe obj = new TicTacToe(n);
   * int param_1 = obj.move(row,col,player);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
