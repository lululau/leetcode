* [[https://leetcode.com/problems/insert-delete-getrandom-o1][380.
Insert Delete GetRandom O(1)]]
  :PROPERTIES:
  :CUSTOM_ID: insert-delete-getrandom-o1
  :END:
[[./solution/0300-0399/0380.Insert Delete GetRandom O%281%29/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement the RandomizedSet class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

RandomizedSet() Initializes the RandomizedSet object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool insert(int val) Inserts an item val into the set if not present.
Returns true if the item was not present, false otherwise.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool remove(int val) Removes an item val from the set if present.
Returns true if the item was present, false otherwise.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int getRandom() Returns a random element from the current set of
elements (it's guaranteed that at least one element exists when this
method is called). Each element must have the same probability of being
returned.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]
  [[], [1], [2], [2], [], [1], [2], []]
  <strong>Output</strong>
  [null, true, false, true, 2, true, false, 2]

  <strong>Explanation</strong>
  RandomizedSet randomizedSet = new RandomizedSet();
  randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.
  randomizedSet.remove(2); // Returns false as 2 does not exist in the set.
  randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].
  randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.
  randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].
  randomizedSet.insert(2); // 2 was already in the set, so return false.
  randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= val <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 105 calls will be made to insert, remove, and getRandom.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There will be at least one element in the data structure when getRandom
is called.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you implement the functions of the class with each
function works in average O(1) time?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class RandomizedSet:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.m = {}
          self.l = []

      def insert(self, val: int) -> bool:
          """
          Inserts a value to the set. Returns true if the set did not already contain the specified element.
          """
          if val in self.m:
              return False
          self.m[val] = len(self.l)
          self.l.append(val)
          return True

      def remove(self, val: int) -> bool:
          """
          Removes a value from the set. Returns true if the set contained the specified element.
          """
          if val not in self.m:
              return False
          idx = self.m[val]
          last_idx = len(self.l) - 1
          self.m[self.l[last_idx]] = idx
          self.m.pop(val)
          self.l[idx] = self.l[last_idx]
          self.l.pop()
          return True

      def getRandom(self) -> int:
          """
          Get a random element from the set.
          """
          return random.choice(self.l)


  # Your RandomizedSet object will be instantiated and called as such:
  # obj = RandomizedSet()
  # param_1 = obj.insert(val)
  # param_2 = obj.remove(val)
  # param_3 = obj.getRandom()
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class RandomizedSet {
      private Map<Integer, Integer> m;
      private List<Integer> l;
      private Random rnd;

      /** Initialize your data structure here. */
      public RandomizedSet() {
          m = new HashMap<>();
          l = new ArrayList<>();
          rnd = new Random();
      }

      /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
      public boolean insert(int val) {
          if (m.containsKey(val)) {
              return false;
          }
          m.put(val, l.size());
          l.add(val);
          return true;
      }

      /** Removes a value from the set. Returns true if the set contained the specified element. */
      public boolean remove(int val) {
          if (!m.containsKey(val)) {
              return false;
          }
          int idx = m.get(val);
          int lastIdx = l.size() - 1;
          m.put(l.get(lastIdx), idx);
          m.remove(val);
          l.set(idx, l.get(lastIdx));
          l.remove(lastIdx);
          return true;
      }

      /** Get a random element from the set. */
      public int getRandom() {
          int idx = rnd.nextInt(l.size());
          return l.get(idx);
      }
  }

  /**
   * Your RandomizedSet object will be instantiated and called as such:
   * RandomizedSet obj = new RandomizedSet();
   * boolean param_1 = obj.insert(val);
   * boolean param_2 = obj.remove(val);
   * int param_3 = obj.getRandom();
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
