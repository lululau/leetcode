* [[https://leetcode-cn.com/problems/minimum-height-trees][310.
最小高度树]]
  :PROPERTIES:
  :CUSTOM_ID: 最小高度树
  :END:
[[./solution/0300-0399/0310.Minimum Height Trees/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

树是一个无向图，其中任何两个顶点只通过一条路径连接。
换句话说，一个任何没有简单环路的连通图都是一棵树。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一棵包含 n 个节点的树，标记为 0 到 n - 1 。给定数字 n 和一个有 n - 1
条无向边的 edges 列表（每一个边都是一对标签），其中 edges[i] = [ai, bi]
表示树中节点 ai 和 bi 之间存在一条无向边。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

可选择树中任何一个节点作为根。当选择节点 x
作为根节点时，设结果树的高度为 h
。在所有可能的树中，具有最小高度的树（即，min(h)）被称为 最小高度树 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你找到所有的 最小高度树 并按 任意顺序 返回它们的根节点标签列表。

#+begin_html
  </p>
#+end_html

树的 高度 是指根节点和叶子节点之间最长向下路径上边的数量。

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 4, edges = [[1,0],[1,2],[1,3]]
  <strong>输出：</strong>[1]
  <strong>解释：</strong>如图所示，当根是标签为 1 的节点时，树的高度是 1 ，这是唯一的最小高度树。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
  <strong>输出：</strong>[3,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 1, edges = []
  <strong>输出：</strong>[0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 2, edges = [[0,1]]
  <strong>输出：</strong>[0,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 2 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges.length == n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ai, bi < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ai != bi

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有 (ai, bi) 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

给定的输入 保证 是一棵树，并且 不会有重复的边

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
