* [[https://leetcode.com/problems/russian-doll-envelopes][354. Russian
Doll Envelopes]]
  :PROPERTIES:
  :CUSTOM_ID: russian-doll-envelopes
  :END:
[[./solution/0300-0399/0354.Russian Doll Envelopes/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a 2D array of integers envelopes where envelopes[i] = [wi,
hi] represents the width and the height of an envelope.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

One envelope can fit into another if and only if both the width and
height of one envelope are greater than the other envelope's width and
height.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum number of envelopes you can Russian doll (i.e., put
one inside the other).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note: You cannot rotate an envelope.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> envelopes = [[5,4],[6,4],[6,7],[2,3]]
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> The maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> envelopes = [[1,1],[1,1],[1,1]]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= envelopes.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

envelopes[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= wi, hi <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def maxEnvelopes(self, envelopes: List[List[int]]) -> int:
          if not envelopes:
              return 0
          envelopes.sort(key=lambda x: (x[0], -x[1]))
          nums = [x[1] for x in envelopes]
          n = len(nums)
          dp = [1] * n
          res = 1
          for i in range(1, n):
              for j in range(i):
                  if nums[j] < nums[i]:
                      dp[i] = max(dp[i], dp[j] + 1)
              res = max(res, dp[i])
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int maxEnvelopes(int[][] envelopes) {
          int n;
          if (envelopes == null || (n = envelopes.length) == 0) return 0;
          Arrays.sort(envelopes, (a, b) -> {
              return a[0] == b[0] ? b[1] - a[1] : a[0] - b[0];
          });
          int[] dp = new int[n];
          Arrays.fill(dp, 1);
          int res = 1;
          for (int i = 1; i < n; ++i) {
              for (int j = 0; j < i; ++j) {
                  if (envelopes[j][1] < envelopes[i][1]) {
                      dp[i] = Math.max(dp[i], dp[j] + 1);
                  }
              }
              res = Math.max(res, dp[i]);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
