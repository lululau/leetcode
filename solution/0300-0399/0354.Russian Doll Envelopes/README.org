* [[https://leetcode-cn.com/problems/russian-doll-envelopes][354.
俄罗斯套娃信封问题]]
  :PROPERTIES:
  :CUSTOM_ID: 俄罗斯套娃信封问题
  :END:
[[./solution/0300-0399/0354.Russian Doll Envelopes/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个二维整数数组 envelopes ，其中 envelopes[i] = [wi, hi] ，表示第 i
个信封的宽度和高度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请计算 最多能有多少个
信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：不允许旋转信封。

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>envelopes = [[5,4],[6,4],[6,7],[2,3]]
  <strong>输出：</strong>3
  <strong>解释：</strong>最多信封的个数为 <code>3, 组合为: </code>[2,3] => [5,4] => [6,7]。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>envelopes = [[1,1],[1,1],[1,1]]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= envelopes.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

envelopes[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= wi, hi <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

排序 +
[[./solution/0300-0399/0300.Longest Increasing Subsequence/README.org][最长递增子序列]]。

按 w 进行升序排序，若 w 相同则按 h 降序排序。然后问题转换为求 h
数组的最长递增子序列长度。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def maxEnvelopes(self, envelopes: List[List[int]]) -> int:
          if not envelopes:
              return 0
          envelopes.sort(key=lambda x: (x[0], -x[1]))
          nums = [x[1] for x in envelopes]
          n = len(nums)
          dp = [1] * n
          res = 1
          for i in range(1, n):
              for j in range(i):
                  if nums[j] < nums[i]:
                      dp[i] = max(dp[i], dp[j] + 1)
              res = max(res, dp[i])
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int maxEnvelopes(int[][] envelopes) {
          int n;
          if (envelopes == null || (n = envelopes.length) == 0) return 0;
          Arrays.sort(envelopes, (a, b) -> {
              return a[0] == b[0] ? b[1] - a[1] : a[0] - b[0];
          });
          int[] dp = new int[n];
          Arrays.fill(dp, 1);
          int res = 1;
          for (int i = 1; i < n; ++i) {
              for (int j = 0; j < i; ++j) {
                  if (envelopes[j][1] < envelopes[i][1]) {
                      dp[i] = Math.max(dp[i], dp[j] + 1);
                  }
              }
              res = Math.max(res, dp[i]);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
