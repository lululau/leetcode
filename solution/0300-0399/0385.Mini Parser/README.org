* [[https://leetcode-cn.com/problems/mini-parser][385. 迷你语法分析器]]
  :PROPERTIES:
  :CUSTOM_ID: 迷你语法分析器
  :END:
[[./solution/0300-0399/0385.Mini Parser/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

列表中的每个元素只可能是整数或整数嵌套列表

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：你可以假定这些字符串都是格式良好的：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

字符串非空

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

字符串不包含空格

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

字符串只包含数字0-9、[、-、,、]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>给定 s = &quot;324&quot;,

  你应该返回一个 NestedInteger 对象，其中只包含整数值 324。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>给定 s = &quot;[123,[456,[789]]]&quot;,

  返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：

  1. 一个 integer 包含值 123
  2. 一个包含两个元素的嵌套列表：
      i.  一个 integer 包含值 456
      ii. 一个包含一个元素的嵌套列表
           a. 一个 integer 包含值 789
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
