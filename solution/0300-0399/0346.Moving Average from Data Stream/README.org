* [[https://leetcode-cn.com/problems/moving-average-from-data-stream][346.
数据流中的移动平均值]]
  :PROPERTIES:
  :CUSTOM_ID: 数据流中的移动平均值
  :END:
[[./solution/0300-0399/0346.Moving Average from Data Stream/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个整数数据流和一个窗口大小，根据该滑动窗口的大小，计算其所有整数的移动平均值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 MovingAverage 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MovingAverage(int size) 用窗口大小 size 初始化对象。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

double next(int val) 计算并返回数据流中最后 size 个值的移动平均值。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["MovingAverage", "next", "next", "next", "next"]
  [[3], [1], [10], [3], [5]]
  <strong>输出：</strong>
  [null, 1.0, 5.5, 4.66667, 6.0]

  <strong>解释：</strong>
  MovingAverage movingAverage = new MovingAverage(3);
  movingAverage.next(1); // 返回 1.0 = 1 / 1
  movingAverage.next(10); // 返回 5.5 = (1 + 10) / 2
  movingAverage.next(3); // 返回 4.66667 = (1 + 10 + 3) / 3
  movingAverage.next(5); // 返回 6.0 = (10 + 3 + 5) / 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= size <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 next 方法 104 次

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"循环数组"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class MovingAverage:

      def __init__(self, size: int):
          """
          Initialize your data structure here.
          """
          self.size = size
          self.data = [0] * size
          self.count = 0
          self.s = 0

      def next(self, val: int) -> float:
          idx = self.count % self.size
          old_val = self.data[idx]
          self.data[idx] = val
          self.s += (val - old_val)
          self.count += 1
          return self.s / min(self.size, self.count)


  # Your MovingAverage object will be instantiated and called as such:
  # obj = MovingAverage(size)
  # param_1 = obj.next(val)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class MovingAverage {
      private int size;
      private int[] data;
      private int count;
      private int s;

      /** Initialize your data structure here. */
      public MovingAverage(int size) {
          this.size = size;
          this.data = new int[size];
      }
      
      public double next(int val) {
          int idx = count % size;
          int oldVal = data[idx];
          data[idx] = val;
          s += (val - oldVal);
          ++count;
          return s * 1.0 / Math.min(size, count);
      }
  }

  /**
   * Your MovingAverage object will be instantiated and called as such:
   * MovingAverage obj = new MovingAverage(size);
   * double param_1 = obj.next(val);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
