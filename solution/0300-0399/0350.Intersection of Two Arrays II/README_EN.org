* [[https://leetcode.com/problems/intersection-of-two-arrays-ii][350.
Intersection of Two Arrays II]]
  :PROPERTIES:
  :CUSTOM_ID: intersection-of-two-arrays-ii
  :END:
[[./solution/0300-0399/0350.Intersection of Two Arrays II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two integer arrays nums1 and nums2, return an array of their
intersection. Each element in the result must appear as many times as it
shows in both arrays and you may return the result in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]
  <strong>Output:</strong> [2,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]
  <strong>Output:</strong> [4,9]
  <strong>Explanation:</strong> [9,4] is also accepted.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums1.length, nums2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums1[i], nums2[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

What if the given array is already sorted? How would you optimize your
algorithm?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

What if nums1's size is small compared to nums2's size? Which algorithm
is better?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

What if elements of nums2 are stored on disk, and the memory is limited
such that you cannot load all elements into the memory at once?

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
          counter = collections.Counter(nums1)
          res = []
          for num in nums2:
              if counter[num] > 0:
                  res.append(num)
                  counter[num] -= 1
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[] intersect(int[] nums1, int[] nums2) {
          Map<Integer, Integer> counter = new HashMap<>();
          for (int num : nums1) {
              counter.put(num, counter.getOrDefault(num, 0) + 1);
          }
          List<Integer> intersection = new ArrayList<>();
          for (int num : nums2) {
              int val = counter.getOrDefault(num, 0);
              if (val > 0) {
                  intersection.add(num);
                  counter.put(num, val - 1);
              }
          }
          int i = 0;
          int[] res = new int[intersection.size()];
          for (int num : intersection) {
              res[i++] = num;
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums1
   * @param {number[]} nums2
   * @return {number[]}
   */
  var intersect = function(nums1, nums2) {
      const counter = {};
      for (const num of nums1) {
          counter[num] = (counter[num] || 0) + 1;
      }
      let res = [];
      for (const num of nums2) {
          if (counter[num] > 0) {
              res.push(num);
              counter[num] -= 1;
          }
      }
      return res;
  };

  ### **...**
#+end_src

```

#+begin_html
  <!-- tabs:end -->
#+end_html
