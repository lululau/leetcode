* [[https://leetcode-cn.com/problems/evaluate-division][399. 除法求值]]
  :PROPERTIES:
  :CUSTOM_ID: 除法求值
  :END:
[[./solution/0300-0399/0399.Evaluate Division/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个变量对数组 equations 和一个实数值数组 values 作为已知条件，其中
equations[i] = [Ai, Bi] 和 values[i] 共同表示等式 Ai / Bi = values[i]
。每个 Ai 或 Bi 是一个表示单个变量的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

另有一些以数组 queries 表示的问题，其中 queries[j] = [Cj, Dj] 表示第 j
个问题，请你根据已知条件找出 Cj / Dj = ? 的结果作为答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 所有问题的答案 。如果存在某个无法确定的答案，则用 -1.0
替代这个答案。如果问题中出现了给定的已知条件中没有出现的字符串，也需要用
-1.0 替代这个答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：输入总是有效的。你可以假设除法运算中不会出现除数为 0
的情况，且不存在任何矛盾的结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
  <strong>输出：</strong>[6.00000,0.50000,-1.00000,1.00000,-1.00000]
  <strong>解释：</strong>
  条件：<em>a / b = 2.0</em>, <em>b / c = 3.0</em>
  问题：<em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>, <em>a / a = ?</em>, <em>x / x = ?</em>
  结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
  <strong>输出：</strong>[3.75000,0.40000,5.00000,0.20000]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
  <strong>输出：</strong>[0.50000,2.00000,-1.00000,-1.00000]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= equations.length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

equations[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Ai.length, Bi.length <= 5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

values.length == equations.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0.0 < values[i] <= 20.0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries.length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Cj.length, Dj.length <= 5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Ai, Bi, Cj, Dj 由小写英文字母与数字组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
