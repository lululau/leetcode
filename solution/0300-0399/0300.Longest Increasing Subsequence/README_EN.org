* [[https://leetcode.com/problems/longest-increasing-subsequence][300.
Longest Increasing Subsequence]]
  :PROPERTIES:
  :CUSTOM_ID: longest-increasing-subsequence
  :END:
[[./solution/0300-0399/0300.Longest Increasing Subsequence/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums, return the length of the longest strictly
increasing subsequence.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A subsequence is a sequence that can be derived from an array by
deleting some or no elements without changing the order of the remaining
elements. For example, [3,6,2,7] is a subsequence of the array
[0,3,1,6,2,2,7].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [10,9,2,5,3,7,101,18]
  <strong>Output:</strong> 4
  <strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [0,1,0,3,2,3]
  <strong>Output:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [7,7,7,7,7,7,7]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 2500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Could you come up with the O(n2) solution?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Could you improve it to O(n log(n)) time complexity?

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def lengthOfLIS(self, nums: List[int]) -> int:
          n = len(nums)
          if n < 2:
              return n
          dp = [1] * n
          res = 1
          for i in range(1, n):
              for j in range(i):
                  if nums[j] < nums[i]:
                      dp[i] = max(dp[i], dp[j] + 1)
              res = max(res, dp[i])
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int lengthOfLIS(int[] nums) {
          int n = nums.length;
          int[] dp = new int[n];
          Arrays.fill(dp, 1);
          int res = 1;
          for (int i = 1; i < n; ++i) {
              for (int j = 0; j < i; ++j) {
                  if (nums[j] < nums[i]) {
                      dp[i] = Math.max(dp[i], dp[j] + 1);
                  }
              }
              res = Math.max(res, dp[i]);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
