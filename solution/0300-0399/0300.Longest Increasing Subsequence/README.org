* [[https://leetcode-cn.com/problems/longest-increasing-subsequence][300.
最长递增子序列]]
  :PROPERTIES:
  :CUSTOM_ID: 最长递增子序列
  :END:
[[./solution/0300-0399/0300.Longest Increasing Subsequence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7]
是数组 [0,3,1,6,2,2,7] 的子序列。

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [10,9,2,5,3,7,101,18]
  <strong>输出：</strong>4
  <strong>解释：</strong>最长递增子序列是 [2,3,7,101]，因此长度为 4 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [0,1,0,3,2,3]
  <strong>输出：</strong>4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [7,7,7,7,7,7,7]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 2500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你可以设计时间复杂度为 O(n2) 的解决方案吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你能将算法的时间复杂度降低到 O(n log(n)) 吗?

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

动态规划求解。

定义 =dp[i]= 为以 =nums[i]= 结尾的最长子序列的长度。即题目求的是 =dp[i]=
（=i ∈[0, n-1]=）的最大值。

状态转移方程为：

=dp[i] = max(dp[j]) + 1=，其中 =0≤j<i= 且 =nums[j]<nums[i]=。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def lengthOfLIS(self, nums: List[int]) -> int:
          n = len(nums)
          if n < 2:
              return n
          dp = [1] * n
          res = 1
          for i in range(1, n):
              for j in range(i):
                  if nums[j] < nums[i]:
                      dp[i] = max(dp[i], dp[j] + 1)
              res = max(res, dp[i])
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int lengthOfLIS(int[] nums) {
          int n = nums.length;
          int[] dp = new int[n];
          Arrays.fill(dp, 1);
          int res = 1;
          for (int i = 1; i < n; ++i) {
              for (int j = 0; j < i; ++j) {
                  if (nums[j] < nums[i]) {
                      dp[i] = Math.max(dp[i], dp[j] + 1);
                  }
              }
              res = Math.max(res, dp[i]);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
