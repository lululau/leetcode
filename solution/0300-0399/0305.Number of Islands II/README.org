* [[https://leetcode-cn.com/problems/number-of-islands-ii][305. 岛屿数量
II]]
  :PROPERTIES:
  :CUSTOM_ID: 岛屿数量-ii
  :END:
[[./solution/0300-0399/0305.Number of Islands II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

假设你设计一个游戏，用一个 m 行 n 列的 2D 网格来存储你的游戏地图。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

起始的时候，每个格子的地形都被默认标记为「水」。我们可以通过使用 addLand 进行操作，将位置
(row, col) 的「水」变成「陆地」。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你将会被给定一个列表，来记录所有需要被操作的位置，然后你需要返回计算出来 每次 addLand
操作后岛屿的数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：一个岛的定义是被「水」包围的「陆地」，通过水平方向或者垂直方向上相邻的陆地连接而成。你可以假设地图网格的四边均被无边无际的「水」所包围。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请仔细阅读下方示例与解析，更加深入了解岛屿的判定。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]]
  <strong>输出:</strong> [1,1,2,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

解析:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

起初，二维网格 grid 被全部注入「水」。（0 代表「水」，1 代表「陆地」）

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>0 0 0
  0 0 0
  0 0 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

操作 #1：addLand(0, 0) 将 grid[0][0] 的水变为陆地。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>1 0 0
  0 0 0   Number of islands = 1
  0 0 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

操作 #2：addLand(0, 1) 将 grid[0][1] 的水变为陆地。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>1 1 0
  0 0 0   岛屿的数量为 1
  0 0 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

操作 #3：addLand(1, 2) 将 grid[1][2] 的水变为陆地。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>1 1 0
  0 0 1   岛屿的数量为 2
  0 0 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

操作 #4：addLand(2, 1) 将 grid[2][1] 的水变为陆地。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>1 1 0
  0 0 1   岛屿的数量为 3
  0 1 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

拓展：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你是否能在 O(k log mn) 的时间复杂度程度内完成每次的计算？（k
表示 positions 的长度）

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
