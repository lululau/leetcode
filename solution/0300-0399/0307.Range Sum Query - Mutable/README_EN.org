* [[https://leetcode.com/problems/range-sum-query-mutable][307. Range
Sum Query - Mutable]]
  :PROPERTIES:
  :CUSTOM_ID: range-sum-query---mutable
  :END:
[[./solution/0300-0399/0307.Range Sum Query - Mutable/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array nums and two types of queries where you should update the
value of an index in the array, and retrieve the sum of a range in the
array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the NumArray class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

NumArray(int[] nums) initializes the object with the integer array nums.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void update(int index, int val) updates the value of nums[index] to be
val.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int sumRange(int left, int right) returns the sum of the subarray
nums[left, right] (i.e., nums[left] + nums[left + 1], ..., nums[right]).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;update&quot;, &quot;sumRange&quot;]
  [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
  <strong>Output</strong>
  [null, 9, null, 8]

  <strong>Explanation</strong>
  NumArray numArray = new NumArray([1, 3, 5]);
  numArray.sumRange(0, 2); // return 9 = sum([1,3,5])
  numArray.update(1, 2);   // nums = [1,2,5]
  numArray.sumRange(0, 2); // return 8 = sum([1,2,5])
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= nums[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= index < nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= left <= right < nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 3 * 104 calls will be made to update and sumRange.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
