* [[https://leetcode-cn.com/problems/range-sum-query-mutable][307.
区域和检索 - 数组可修改]]
  :PROPERTIES:
  :CUSTOM_ID: 区域和检索---数组可修改
  :END:
[[./solution/0300-0399/0307.Range Sum Query - Mutable/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个数组 nums
，请你完成两类查询，其中一类查询要求更新数组下标对应的值，另一类查询要求返回数组中某个范围内元素的总和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 NumArray 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

NumArray(int[] nums) 用整数数组 nums 初始化对象

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void update(int index, int val) 将 nums[index] 的值更新为 val

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int sumRange(int left, int right) 返回子数组 nums[left, right]
的总和（即，nums[left] + nums[left + 1], ..., nums[right]）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入</strong>：
  ["NumArray", "sumRange", "update", "sumRange"]
  [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
  <strong>输出</strong>：
  [null, 9, null, 8]

  <strong>解释</strong>：
  NumArray numArray = new NumArray([1, 3, 5]);
  numArray.sumRange(0, 2); // 返回 9 ，sum([1,3,5]) = 9
  numArray.update(1, 2);   // nums = [1,2,5]
  numArray.sumRange(0, 2); // 返回 8 ，sum([1,2,5]) = 8
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= nums[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= index < nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= left <= right < nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 3 * 104 次 update 和 sumRange 方法

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
