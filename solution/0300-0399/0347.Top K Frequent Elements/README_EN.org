* [[https://leetcode.com/problems/top-k-frequent-elements][347. Top K
Frequent Elements]]
  :PROPERTIES:
  :CUSTOM_ID: top-k-frequent-elements
  :END:
[[./solution/0300-0399/0347.Top K Frequent Elements/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums and an integer k, return the k most frequent
elements. You may return the answer in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2
  <strong>Output:</strong> [1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1], k = 1
  <strong>Output:</strong> [1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

k is in the range [1, the number of unique elements in the array].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that the answer is unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Your algorithm's time complexity must be better than O(n log
n), where n is the array's size.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def topKFrequent(self, nums: List[int], k: int) -> List[int]:
          counter = collections.Counter(nums)
          buckets = [[] for _ in range(len(nums) + 1)]
          for num, freq in counter.items():
              buckets[freq].append(num)
          i, res = len(nums), []
          while k > 0 and i >= 0:
              if buckets[i]:
                  for num in buckets[i]:
                      if k <= 0:
                          break
                      res.append(num)
                      k -= 1
              i -= 1
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[] topKFrequent(int[] nums, int k) {
          Map<Integer, Integer> counter = new HashMap<>();
          for (int num : nums) {
              counter.put(num, counter.getOrDefault(num, 0) + 1);
          }
          List<Integer>[] buckets = new List[nums.length + 1];
          for (Map.Entry<Integer, Integer> entry : counter.entrySet()) {
              int num = entry.getKey();
              int freq = entry.getValue();
              if (buckets[freq] == null) {
                  buckets[freq] = new ArrayList<>();
              }
              buckets[freq].add(num);
          }
          int[] res = new int[k];
          for (int i = nums.length; i >= 0 && k > 0; --i) {
              if (buckets[i] != null) {
                  for (int num : buckets[i]) {
                      if (k <= 0) {
                          break;
                      }
                      res[--k] = num;
                  }
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
