* [[https://leetcode.com/problems/design-twitter][355. Design Twitter]]
  :PROPERTIES:
  :CUSTOM_ID: design-twitter
  :END:
[[./solution/0300-0399/0355.Design Twitter/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a simplified version of Twitter where users can post tweets,
follow/unfollow another user, and is able to see the 10 most recent
tweets in the user's news feed.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the Twitter class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Twitter() Initializes your twitter object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void postTweet(int userId, int tweetId) Composes a new tweet with ID
tweetId by the user userId. Each call to this function will be made with
a unique tweetId.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet
IDs in the user's news feed. Each item in the news feed must be posted
by users who the user followed or by the user themself. Tweets must be
ordered from most recent to least recent.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void follow(int followerId, int followeeId) The user with ID followerId
started following the user with ID followeeId.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void unfollow(int followerId, int followeeId) The user with ID
followerId started unfollowing the user with ID followeeId.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;Twitter&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;follow&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;unfollow&quot;, &quot;getNewsFeed&quot;]
  [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
  <strong>Output</strong>
  [null, null, [5], null, null, [6, 5], null, [5]]

  <strong>Explanation</strong>
  Twitter twitter = new Twitter();
  twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).
  twitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5]. return [5]
  twitter.follow(1, 2);    // User 1 follows user 2.
  twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).
  twitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
  twitter.unfollow(1, 2);  // User 1 unfollows user 2.
  twitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= userId, followerId, followeeId <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= tweetId <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the tweets have unique IDs.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow,
and unfollow.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Twitter:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.user_tweets = collections.defaultdict(list)
          self.user_following = collections.defaultdict(set)
          self.tweets = collections.defaultdict()
          self.time = 0

      def postTweet(self, userId: int, tweetId: int) -> None:
          """
          Compose a new tweet.
          """
          self.time += 1
          self.user_tweets[userId].append(tweetId)
          self.tweets[tweetId] = self.time

      def getNewsFeed(self, userId: int) -> List[int]:
          """
          Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.
          """
          following = self.user_following[userId]
          users = set(following)
          users.add(userId)
          tweets = [self.user_tweets[u][::-1][:10] for u in users]
          tweets = sum(tweets, [])
          return heapq.nlargest(10, tweets, key=lambda tweet: self.tweets[tweet])

      def follow(self, followerId: int, followeeId: int) -> None:
          """
          Follower follows a followee. If the operation is invalid, it should be a no-op.
          """
          self.user_following[followerId].add(followeeId)

      def unfollow(self, followerId: int, followeeId: int) -> None:
          """
          Follower unfollows a followee. If the operation is invalid, it should be a no-op.
          """
          following = self.user_following[followerId]
          if followeeId in following:
              following.remove(followeeId)



  # Your Twitter object will be instantiated and called as such:
  # obj = Twitter()
  # obj.postTweet(userId,tweetId)
  # param_2 = obj.getNewsFeed(userId)
  # obj.follow(followerId,followeeId)
  # obj.unfollow(followerId,followeeId)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Twitter {
      private Map<Integer, List<Integer>> userTweets;
      private Map<Integer, Set<Integer>> userFollowing;
      private Map<Integer, Integer> tweets;
      private int time;

      /** Initialize your data structure here. */
      public Twitter() {
          userTweets = new HashMap<>();
          userFollowing = new HashMap<>();
          tweets = new HashMap<>();
          time = 0;
      }
      
      /** Compose a new tweet. */
      public void postTweet(int userId, int tweetId) {
          List<Integer> userTweet = userTweets.getOrDefault(userId, new ArrayList<>());
          userTweet.add(tweetId);
          userTweets.put(userId, userTweet);
          tweets.put(tweetId, ++time);
      }
      
      /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
      public List<Integer> getNewsFeed(int userId) {
          Set<Integer> following = userFollowing.getOrDefault(userId, new HashSet<>());
          Set<Integer> users = new HashSet<>(following);
          users.add(userId);
          PriorityQueue<Integer> pq = new PriorityQueue<>(10, (a, b) -> (tweets.get(b) - tweets.get(a)));
          for (Integer u : users) {
              List<Integer> userTweet = userTweets.get(u);
              if (userTweet != null && !userTweet.isEmpty()) {
                  for (int i = userTweet.size() - 1, k = 10; i >= 0 && k > 0; --i, --k) {
                      pq.offer(userTweet.get(i));
                  }
              }
          }
          List<Integer> res = new ArrayList<>();
          while (!pq.isEmpty() && res.size() < 10) {
              res.add(pq.poll());
          }
          return res;
      }
      
      /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
      public void follow(int followerId, int followeeId) {
          Set<Integer> following = userFollowing.getOrDefault(followerId, new HashSet<>());
          following.add(followeeId);
          userFollowing.put(followerId, following);
      }
      
      /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
      public void unfollow(int followerId, int followeeId) {
          Set<Integer> following = userFollowing.getOrDefault(followerId, new HashSet<>());
          following.remove(followeeId);
          userFollowing.put(followerId, following);
      }
  }

  /**
   * Your Twitter object will be instantiated and called as such:
   * Twitter obj = new Twitter();
   * obj.postTweet(userId,tweetId);
   * List<Integer> param_2 = obj.getNewsFeed(userId);
   * obj.follow(followerId,followeeId);
   * obj.unfollow(followerId,followeeId);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
