* [[https://leetcode-cn.com/problems/counting-bits][338. 比特位计数]]
  :PROPERTIES:
  :CUSTOM_ID: 比特位计数
  :END:
[[./solution/0300-0399/0338.Counting Bits/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个非负整数 num。对于 0 ≤ i ≤ num
范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>2
  <strong>输出: </strong>[0,1,1]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>5
  <strong>输出: </strong><code>[0,1,1,2,1,2]</code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

进阶:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

要求算法的空间复杂度为O(n)。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如
C++ 中的 __builtin_popcount）来执行此操作。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
