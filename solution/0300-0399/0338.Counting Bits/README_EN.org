* [[https://leetcode.com/problems/counting-bits][338. Counting Bits]]
  :PROPERTIES:
  :CUSTOM_ID: counting-bits
  :END:
[[./solution/0300-0399/0338.Counting Bits/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer num, return an array of the number of 1's in the binary
representation of every number in the range [0, num].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num = 2
  <strong>Output:</strong> [0,1,1]
  <strong>Explanation:</strong>
  0 --&gt; 0
  1 --&gt; 1
  2 --&gt; 10
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num = 5
  <strong>Output:</strong> [0,1,1,2,1,2]
  <strong>Explanation:</strong>
  0 --&gt; 0
  1 --&gt; 1
  2 --&gt; 10
  3 --&gt; 11
  4 --&gt; 100
  5 --&gt; 101
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= num <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

It is very easy to come up with a solution with run time O(32n). Can you
do it in linear time O(n) and possibly in a single pass?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Could you solve it in O(n) space complexity?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Can you do it without using any built-in function (i.e., like
__builtin_popcount in C++)?

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
