* [[https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels][302.
Smallest Rectangle Enclosing Black Pixels]]
  :PROPERTIES:
  :CUSTOM_ID: smallest-rectangle-enclosing-black-pixels
  :END:
[[./solution/0300-0399/0302.Smallest Rectangle Enclosing Black Pixels/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an image that is represented by a binary matrix with 0 as
a white pixel and 1 as a black pixel.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The black pixels are connected (i.e., there is only one black region).
Pixels are connected horizontally and vertically.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given two integers x and y that represent the location of one of the
black pixels, return the area of the smallest (axis-aligned) rectangle
that encloses all black pixels.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> image = [[&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],[&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],[&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;]], x = 0, y = 2
  <strong>Output:</strong> 6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> image = [[&quot;1&quot;]], x = 0, y = 0
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == image.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == image[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

image[i][j] is either '0' or '1'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= x < m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= y < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

image[x][y] == '1'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The black pixels in the image only form one component.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
