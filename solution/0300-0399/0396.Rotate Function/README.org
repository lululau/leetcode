* [[https://leetcode-cn.com/problems/rotate-function][396. 旋转函数]]
  :PROPERTIES:
  :CUSTOM_ID: 旋转函数
  :END:
[[./solution/0300-0399/0396.Rotate Function/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个长度为 n 的整数数组 A 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设 Bk 是数组 A 顺时针旋转 k
个位置后的数组，我们定义 A 的“旋转函数” F 为：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

计算F(0), F(1), ..., F(n-1)中的最大值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意: 可以认为 n 的值小于 105。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  A = [4, 3, 2, 6]

  F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
  F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
  F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
  F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26

  所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26 。
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
