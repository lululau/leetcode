* [[https://leetcode.com/problems/odd-even-linked-list][328. Odd Even
Linked List]]
  :PROPERTIES:
  :CUSTOM_ID: odd-even-linked-list
  :END:
[[./solution/0300-0399/0328.Odd Even Linked List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the head of a singly linked list, group all the nodes with odd
indices together followed by the nodes with even indices, and return the
reordered list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The first node is considered odd, and the second node is even, and so
on.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that the relative order inside both the even and odd groups should
remain as it was in the input.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,3,4,5]
  <strong>Output:</strong> [1,3,5,2,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [2,1,3,5,6,4,7]
  <strong>Output:</strong> [2,3,6,7,1,5,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the linked list is in the range [0, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-106 <= Node.val <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you solve it in O(1) space complexity and O(nodes) time
complexity?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def oddEvenList(self, head: ListNode) -> ListNode:
          if head is None:
              return head
          evenHead = head.next
          odd, even = head, evenHead
          while even and even.next:
              odd.next = even.next
              odd = odd.next
              even.next = odd.next
              even = even.next
          odd.next = evenHead
          return head
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode oddEvenList(ListNode head) {
          if (head == null) {
              return head;
          }
          ListNode evenHead = head.next;
          ListNode odd = head, even = evenHead;
          while (even != null && even.next != null) {
              odd.next = even.next;
              odd = odd.next;
              even.next = odd.next;
              even = even.next;
          }
          odd.next = evenHead;
          return head;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
