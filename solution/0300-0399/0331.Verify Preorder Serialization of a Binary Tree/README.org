* [[https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree][331.
验证二叉树的前序序列化]]
  :PROPERTIES:
  :CUSTOM_ID: 验证二叉树的前序序列化
  :END:
[[./solution/0300-0399/0331.Verify Preorder Serialization of a Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如
#。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>     _9_
      /   \
     3     2
    / \   / \
   4   1  #  6
  / \ / \   / \
  # # # #   # #
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

例如，上面的二叉树可以被序列化为字符串 "9,3,4,#,#,1,#,#,2,#,6,#,#"，其中
# 代表一个空节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的 '#' 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如 "1,,3"
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong><code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>
  <strong>输出: </strong><code>true</code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong><code>&quot;1,#&quot;</code>
  <strong>输出: </strong><code>false</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong><code>&quot;9,#,#,1&quot;</code>
  <strong>输出: </strong><code>false</code></pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
