* [[https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree][331.
Verify Preorder Serialization of a Binary Tree]]
  :PROPERTIES:
  :CUSTOM_ID: verify-preorder-serialization-of-a-binary-tree
  :END:
[[./solution/0300-0399/0331.Verify Preorder Serialization of a Binary Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

One way to serialize a binary tree is to use preorder traversal. When we
encounter a non-null node, we record the node's value. If it is a null
node, we record using a sentinel value such as '#'.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, the above binary tree can be serialized to the string
"9,3,4,#,#,1,#,#,2,#,6,#,#", where '#' represents a null node.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a string of comma-separated values preorder, return true if it is
a correct preorder traversal serialization of a binary tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed that each comma-separated value in the string must be
either an integer or a character '#' representing null pointer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You may assume that the input format is always valid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, it could never contain two consecutive commas, such as
"1,,3".

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#"
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> preorder = "1,#"
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> preorder = "9,#,#,1"
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= preorder.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

preoder consist of integers in the range [0, 100] and '#' separated by
commas ','.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Find an algorithm without reconstructing the tree.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
