* [[https://leetcode.com/problems/intersection-of-two-arrays][349.
Intersection of Two Arrays]]
  :PROPERTIES:
  :CUSTOM_ID: intersection-of-two-arrays
  :END:
[[./solution/0300-0399/0349.Intersection of Two Arrays/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two integer arrays nums1 and nums2, return an array of their
intersection. Each element in the result must be unique and you may
return the result in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]
  <strong>Output:</strong> [2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]
  <strong>Output:</strong> [9,4]
  <strong>Explanation:</strong> [4,9] is also accepted.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums1.length, nums2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums1[i], nums2[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
          s = set(nums1)
          res = set()
          for num in nums2:
              if num in s:
                  res.add(num)
          return list(res)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[] intersection(int[] nums1, int[] nums2) {
          Set<Integer> s = new HashSet<>();
          for (int num : nums1) {
              s.add(num);
          }
          Set<Integer> res = new HashSet<>();
          for (int num : nums2) {
              if (s.contains(num)) {
                  res.add(num);
              }
          }
          int[] output = new int[res.size()];
          int i = 0;
          for (int num : res) {
              output[i++] = num;
          }
          return output;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums1
   * @param {number[]} nums2
   * @return {number[]}
   */
  var intersection = function(nums1, nums2) {
      const s = new Set();
      for (const num of nums1) {
          s.add(num);
      }
      let res = new Set();
      for (const num of nums2) {
          if (s.has(num)) {
              res.add(num);
          }
      }
      return [...res];
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
