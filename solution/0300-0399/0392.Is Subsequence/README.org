* [[https://leetcode-cn.com/problems/is-subsequence][392. 判断子序列]]
  :PROPERTIES:
  :CUSTOM_ID: 判断子序列
  :END:
[[./solution/0300-0399/0392.Is Subsequence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定字符串 s 和 t ，判断 s 是否为 t 的子序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k >=
10亿，你需要依次检查它们是否为 T
的子序列。在这种情况下，你会怎样改变代码？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

致谢：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

特别感谢 @pbrother 添加此问题并且创建所有测试用例。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "abc", t = "ahbgdc"
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "axc", t = "ahbgdc"
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= s.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= t.length <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

两个字符串都只由小写字符组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

双指针遍历即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def isSubsequence(self, s: str, t: str) -> bool:
          m, n = len(s), len(t)
          i = j = 0
          while i < m and j < n:
              if s[i] == t[j]:
                  i += 1
              j += 1
          return i == m
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean isSubsequence(String s, String t) {
          int m = s.length(), n = t.length();
          int i = 0, j = 0;
          while (i < m && j < n) {
              if (s.charAt(i) == t.charAt(j)) {
                  ++i;
              }
              ++j;
          }
          return i == m;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
