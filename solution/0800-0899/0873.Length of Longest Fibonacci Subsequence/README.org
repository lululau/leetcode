* [[https://leetcode-cn.com/problems/length-of-longest-fibonacci-subsequence][873.
最长的斐波那契子序列的长度]]
  :PROPERTIES:
  :CUSTOM_ID: 最长的斐波那契子序列的长度
  :END:
[[./solution/0800-0899/0873.Length of Longest Fibonacci Subsequence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

如果序列 X_1, X_2, ..., X_n 满足下列条件，就说它是 斐波那契式 的：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n >= 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于所有 i + 2 <= n，都有 X_i + X_{i+1} = X_{i+2}

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给定一个严格递增的正整数数组形成序列，找到 A
中最长的斐波那契式的子序列的长度。如果一个不存在，返回  0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

（回想一下，子序列是从原序列 A 中派生出来的，它从
A 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， [3,
5, 8] 是 [3, 4, 5, 6, 7, 8] 的一个子序列）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>[1,2,3,4,5,6,7,8]
  <strong>输出: </strong>5
  <strong>解释:
  </strong>最长的斐波那契式子序列为：[1,2,3,5,8] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>[1,3,7,11,12,14,18]
  <strong>输出: </strong>3
  <strong>解释</strong>:
  最长的斐波那契式子序列有：
  [1,11,12]，[3,11,14] 以及 [7,11,18] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= A.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A[0] < A[1] < ... < A[A.length - 1] <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

（对于以 Java，C，C++，以及 C# 的提交，时间限制被减少了 50%）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
