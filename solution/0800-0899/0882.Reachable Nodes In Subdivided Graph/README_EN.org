* [[https://leetcode.com/problems/reachable-nodes-in-subdivided-graph][882.
Reachable Nodes In Subdivided Graph]]
  :PROPERTIES:
  :CUSTOM_ID: reachable-nodes-in-subdivided-graph
  :END:
[[./solution/0800-0899/0882.Reachable Nodes In Subdivided Graph/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an undirected graph (the "original graph") with n nodes
labeled from 0 to n - 1. You decide to subdivide each edge in the graph
into a chain of nodes, with the number of new nodes varying between each
edge.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The graph is given as a 2D array of edges where edges[i] = [ui, vi,
cnti] indicates that there is an edge between nodes ui and vi in the
original graph, and cnti is the total number of new nodes that you will
subdivide the edge into. Note that cnti == 0 means you will not
subdivide the edge.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

To subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and
cnti new nodes. The new nodes are x1, x2, ..., xcnti, and the new edges
are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti+1, xcnti], [xcnti, vi].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In this new graph, you want to know how many nodes are reachable from
the node 0, where a node is reachable if the distance is maxMoves or
less.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given the original graph and maxMoves, return the number of nodes that
are reachable from node 0 in the new graph.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3
  <strong>Output:</strong> 13
  <strong>Explanation:</strong> The edge subdivisions are shown in the image above.
  The nodes that are reachable are highlighted in yellow.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4
  <strong>Output:</strong> 23
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= edges.length <= min(n * (n - 1) / 2, 104)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ui < vi < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are no multiple edges in the graph.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= cnti <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= maxMoves <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 3000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
