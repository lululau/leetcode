* [[https://leetcode-cn.com/problems/monotonic-array][896. 单调数列]]
  :PROPERTIES:
  :CUSTOM_ID: 单调数列
  :END:
[[./solution/0800-0899/0896.Monotonic Array/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

如果数组是单调递增或单调递减的，那么它是单调的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果对于所有 i <= j，A[i] <= A[j]，那么数组 A 是单调递增的。
如果对于所有 i <= j，A[i]> = A[j]，那么数组 A 是单调递减的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

当给定的数组 A 是单调数组时返回 true，否则返回 false。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,2,2,3]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[6,5,4,4]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,3,2]
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,2,4,5]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,1,1]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A.length <= 50000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100000 <= A[i] <= 100000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

遍历数组：

- 出现递减，将 =increase= 置为 =false=；
- 出现递增，将 =decrease= 置为 =false=；
- 既非递增也非递减，提前返回 =false=；
- 遍历结束，若出现递增或递减，返回 =true=。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def isMonotonic(self, A: List[int]) -> bool:
          increase = decrease = True
          for i in range(1, len(A)):
              if not increase and not decrease:
                  return False
              if A[i] < A[i - 1]:
                  increase = False
              elif A[i] > A[i - 1]:
                  decrease = False
          return increase or decrease
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean isMonotonic(int[] A) {
          boolean increase = true, decrease = true;
          for (int i = 1, n = A.length; i < n; ++i) {
              if (!increase && !decrease) return false;
              if (A[i] < A[i - 1]) decrease = false;
              else if (A[i] > A[i - 1]) increase = false;
          }
          return increase || decrease;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
