* [[https://leetcode-cn.com/problems/ambiguous-coordinates][816.
模糊坐标]]
  :PROPERTIES:
  :CUSTOM_ID: 模糊坐标
  :END:
[[./solution/0800-0899/0816.Ambiguous Coordinates/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们有一些二维坐标，如 "(1, 3)" 或 "(2,
0.5)"，然后我们移除所有逗号，小数点和空格，得到一个字符串S。返回所有可能的原始字符串到一个列表中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

原始的坐标表示法不会存在多余的零，所以不会出现类似于"00", "0.0", "0.00",
"1.0", "001",
"00.01"或一些其他更小的数来表示坐标。此外，一个小数点前至少存在一个数，所以也不会出现“.1”形式的数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

最后返回的列表可以是任意顺序的。而且注意返回的两个数字中间（逗号之后）都有一个空格。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>示例 1:</strong>
  <strong>输入:</strong> &quot;(123)&quot;
  <strong>输出:</strong> [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]
  </pre>
#+end_html

#+begin_html
  <pre>
  <strong>示例 2:</strong>
  <strong>输入:</strong> &quot;(00011)&quot;
  <strong>输出:</strong> &nbsp;[&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]
  <strong>解释:</strong> 
  0.0, 00, 0001 或 00.01 是不被允许的。
  </pre>
#+end_html

#+begin_html
  <pre>
  <strong>示例 3:</strong>
  <strong>输入:</strong> &quot;(0123)&quot;
  <strong>输出:</strong> [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]
  </pre>
#+end_html

#+begin_html
  <pre>
  <strong>示例 4:</strong>
  <strong>输入:</strong> &quot;(100)&quot;
  <strong>输出:</strong> [(10, 0)]
  <strong>解释:</strong> 
  1.0 是不被允许的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

4 <= S.length <= 12.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S[0] = "(", S[S.length - 1] = ")", 且字符串 S 中的其他元素都是数字。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
