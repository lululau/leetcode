* [[https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal][889.
根据前序和后序遍历构造二叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 根据前序和后序遍历构造二叉树
  :END:
[[./solution/0800-0899/0889.Construct Binary Tree from Preorder and Postorder Traversal/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

返回与给定的前序和后序遍历匹配的任何二叉树。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 pre 和 post 遍历中的值是不同的正整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
  <strong>输出：</strong>[1,2,3,4,5,6,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pre.length == post.length <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pre[] 和 post[] 都是 1, 2, ..., pre.length 的排列

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个输入保证至少有一个答案。如果有多个答案，可以返回其中一个。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
