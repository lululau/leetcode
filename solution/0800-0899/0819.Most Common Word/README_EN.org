* [[https://leetcode.com/problems/most-common-word][819. Most Common
Word]]
  :PROPERTIES:
  :CUSTOM_ID: most-common-word
  :END:
[[./solution/0800-0899/0819.Most Common Word/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string paragraph and a string array of the banned words banned,
return the most frequent word that is not banned. It is guaranteed there
is at least one word that is not banned, and that the answer is unique.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The words in paragraph are case-insensitive and the answer should be
returned in lowercase.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> paragraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;, banned = [&quot;hit&quot;]
  <strong>Output:</strong> &quot;ball&quot;
  <strong>Explanation:</strong> 
  &quot;hit&quot; occurs 3 times, but it is a banned word.
  &quot;ball&quot; occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
  Note that words in the paragraph are not case sensitive,
  that punctuation is ignored (even if adjacent to words, such as &quot;ball,&quot;), 
  and that &quot;hit&quot; isn&#39;t the answer even though it occurs more because it is banned.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> paragraph = &quot;a.&quot;, banned = []
  <strong>Output:</strong> &quot;a&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= paragraph.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

paragraph consists of English letters, space ' ', or one of the symbols:
"!?',;.".

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= banned.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= banned[i].length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

banned[i] consists of only lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:
          paragraph = collections.Counter(re.findall('[a-z]+', paragraph.lower()))
          banned_words = set(banned)
          for word, _ in paragraph.most_common():
              if word not in banned_words:
                  return word
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  import java.util.regex.Matcher;
  import java.util.regex.Pattern;

  class Solution {
      public String mostCommonWord(String paragraph, String[] banned) {
          Set<String> bannedWords = new HashSet<>();
          for (String word : banned) {
              bannedWords.add(word);
          }
          Map<String, Integer> counter = new HashMap<>();
          Matcher matcher = Pattern.compile("[a-z]+").matcher(paragraph.toLowerCase());
          while (matcher.find()) {
              String word = matcher.group();
              if (bannedWords.contains(word)) {
                  continue;
              }
              counter.put(word, counter.getOrDefault(word, 0) + 1);
          }
          int max = Integer.MIN_VALUE;
          String res = null;
          for (Map.Entry<String, Integer> entry : counter.entrySet()) {
              if (entry.getValue() > max) {
                  max = entry.getValue();
                  res = entry.getKey();
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
