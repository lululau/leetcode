* [[https://leetcode-cn.com/problems/most-common-word][819.
最常见的单词]]
  :PROPERTIES:
  :CUSTOM_ID: 最常见的单词
  :END:
[[./solution/0800-0899/0819.Most Common Word/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个段落 (paragraph) 和一个禁用单词列表
(banned)。返回出现次数最多，同时不在禁用列表中的单词。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

题目保证至少有一个词不在禁用列表中，而且答案唯一。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

禁用列表中的单词用小写字母表示，不含标点符号。段落中的单词不区分大小写。答案都是小写字母。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> 
  paragraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;
  banned = [&quot;hit&quot;]
  <strong>输出:</strong> &quot;ball&quot;
  <strong>解释:</strong> 
  &quot;hit&quot; 出现了3次，但它是一个禁用的单词。
  &quot;ball&quot; 出现了2次 (同时没有其他单词出现2次)，所以它是段落里出现次数最多的，且不在禁用列表中的单词。 
  注意，所有这些单词在段落里不区分大小写，标点符号需要忽略（即使是紧挨着单词也忽略， 比如 &quot;ball,&quot;）， 
  &quot;hit&quot;不是最终的答案，虽然它出现次数更多，但它在禁用单词列表中。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= 段落长度 <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= 禁用单词个数 <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= 禁用单词长度 <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

答案是唯一的, 且都是小写字母 (即使在 paragraph
里是大写的，即使是一些特定的名词，答案都是小写的。)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

paragraph 只包含字母、空格和下列标点符号!?',;.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

不存在没有连字符或者带有连字符的单词。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

单词里只包含字母，不会出现省略号或者其他标点符号。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"正则 + 计数器"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:
          paragraph = collections.Counter(re.findall('[a-z]+', paragraph.lower()))
          banned_words = set(banned)
          for word, _ in paragraph.most_common():
              if word not in banned_words:
                  return word
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  import java.util.regex.Matcher;
  import java.util.regex.Pattern;

  class Solution {
      public String mostCommonWord(String paragraph, String[] banned) {
          Set<String> bannedWords = new HashSet<>();
          for (String word : banned) {
              bannedWords.add(word);
          }
          Map<String, Integer> counter = new HashMap<>();
          Matcher matcher = Pattern.compile("[a-z]+").matcher(paragraph.toLowerCase());
          while (matcher.find()) {
              String word = matcher.group();
              if (bannedWords.contains(word)) {
                  continue;
              }
              counter.put(word, counter.getOrDefault(word, 0) + 1);
          }
          int max = Integer.MIN_VALUE;
          String res = null;
          for (Map.Entry<String, Integer> entry : counter.entrySet()) {
              if (entry.getValue() > max) {
                  max = entry.getValue();
                  res = entry.getKey();
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
