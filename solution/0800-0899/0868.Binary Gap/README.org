* [[https://leetcode-cn.com/problems/binary-gap][868. 二进制间距]]
  :PROPERTIES:
  :CUSTOM_ID: 二进制间距
  :END:
[[./solution/0800-0899/0868.Binary Gap/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个正整数 n，找到并返回 n 的二进制表示中两个 相邻 1 之间的 最长距离
。如果不存在两个相邻的 1，返回 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果只有 0 将两个 1 分隔开（可能不存在 0 ），则认为这两个 1 彼此 相邻
。两个 1 之间的距离是它们的二进制表示中位置的绝对差。例如，"1001"
中的两个 1 的距离为 3 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 22
  <strong>输出：</strong>2
  <strong>解释：</strong>
  22 的二进制是 "10110" 。
  在 22 的二进制表示中，有三个 1，组成两对相邻的 1 。
  第一对相邻的 1 中，两个 1 之间的距离为 2 。
  第二对相邻的 1 中，两个 1 之间的距离为 1 。
  答案取两个距离之中最大的，也就是 2 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 5
  <strong>输出：</strong>2
  <strong>解释：</strong>
  5 的二进制是 "101" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 6
  <strong>输出：</strong>1
  <strong>解释：</strong>
  6 的二进制是 "110" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 8
  <strong>输出：</strong>0
  <strong>解释：</strong>
  8 的二进制是 "1000" 。
  在 8 的二进制表示中没有相邻的两个 1，所以返回 0 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 1
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
