* [[https://leetcode-cn.com/problems/car-fleet][853. 车队]]
  :PROPERTIES:
  :CUSTOM_ID: 车队
  :END:
[[./solution/0800-0899/0853.Car Fleet/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

N  辆车沿着一条车道驶向位于 target 英里之外的共同目的地。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每辆车 i 以恒定的速度 speed[i] （英里/小时），从初始位置 position[i] （英里）
沿车道驶向目的地。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一辆车永远不会超过前面的另一辆车，但它可以追上去，并与前车以相同的速度紧接着行驶。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

此时，我们会忽略这两辆车之间的距离，也就是说，它们被假定处于相同的位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

车队 是一些由行驶在相同位置、具有相同速度的车组成的非空集合。注意，一辆车也可以是一个车队。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

即便一辆车在目的地才赶上了一个车队，它们仍然会被视作是同一个车队。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

会有多少车队到达目的地?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
  <strong>输出：</strong>3
  <strong>解释：</strong>
  从 10 和 8 开始的车会组成一个车队，它们在 12 处相遇。
  从 0 处开始的车无法追上其它车，所以它自己就是一个车队。
  从 5 和 3 开始的车会组成一个车队，它们在 6 处相遇。
  请注意，在到达目的地之前没有其它车会遇到这些车队，所以答案是 3。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= N <= 10 ^ 4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 < target <= 10 ^ 6

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 < speed[i] <= 10 ^ 6

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= position[i] < target

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有车的初始位置各不相同。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
