* [[https://leetcode.com/problems/bricks-falling-when-hit][803. Bricks
Falling When Hit]]
  :PROPERTIES:
  :CUSTOM_ID: bricks-falling-when-hit
  :END:
[[./solution/0800-0899/0803.Bricks Falling When Hit/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an m x n binary grid, where each 1 represents a brick and
0 represents an empty space. A brick is stable if:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

It is directly connected to the top of the grid, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At least one other brick in its four adjacent cells is stable.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You are also given an array hits, which is a sequence of erasures we
want to apply. Each time we want to erase the brick at the location
hits[i] = (rowi, coli). The brick on that location (if it exists) will
disappear. Some other bricks may no longer be stable because of that
erasure and will fall. Once a brick falls, it is immediately erased from
the grid (i.e., it does not land on other stable bricks).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an array result, where each result[i] is the number of bricks
that will fall after the ith erasure is applied.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that an erasure may refer to a location with no brick, and if it
does, no bricks drop.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]
  <strong>Output:</strong> [2]
  <strong>Explanation: </strong>Starting with the grid:
  [[1,0,0,0],
   [<u>1</u>,1,1,0]]
  We erase the underlined brick at (1,0), resulting in the grid:
  [[1,0,0,0],
   [0,<u>1</u>,<u>1</u>,0]]
  The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:
  [[1,0,0,0],
   [0,0,0,0]]
  Hence the result is [2].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]
  <strong>Output:</strong> [0,0]
  <strong>Explanation: </strong>Starting with the grid:
  [[1,0,0,0],
   [1,<u>1</u>,0,0]]
  We erase the underlined brick at (1,1), resulting in the grid:
  [[1,0,0,0],
   [1,0,0,0]]
  All remaining bricks are still stable, so no bricks fall. The grid remains the same:
  [[1,0,0,0],
   [<u>1</u>,0,0,0]]
  Next, we erase the underlined brick at (1,0), resulting in the grid:
  [[1,0,0,0],
   [0,0,0,0]]
  Once again, all remaining bricks are still stable, so no bricks fall.
  Hence the result is [0,0].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= hits.length <= 4 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

hits[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= xi <= m - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= yi <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All (xi, yi) are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
