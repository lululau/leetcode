* [[https://leetcode-cn.com/problems/transpose-matrix][867. 转置矩阵]]
  :PROPERTIES:
  :CUSTOM_ID: 转置矩阵
  :END:
[[./solution/0800-0899/0867.Transpose Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个二维整数数组 matrix， 返回 matrix 的 转置矩阵 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

矩阵的 转置 是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>matrix = [[1,2,3],[4,5,6],[7,8,9]]
  <strong>输出：</strong>[[1,4,7],[2,5,8],[3,6,9]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>matrix = [[1,2,3],[4,5,6]]
  <strong>输出：</strong>[[1,4],[2,5],[3,6]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == matrix.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m * n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= matrix[i][j] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def transpose(self, matrix: List[List[int]]) -> List[List[int]]:
          m, n = len(matrix), len(matrix[0])
          res = [[0] * m for _ in range(n)]
          for i in range(n):
              for j in range(m):
                  res[i][j] = matrix[j][i]
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[][] transpose(int[][] matrix) {
          int m = matrix.length, n = matrix[0].length;
          int[][] res = new int[n][m];
          for (int i = 0; i < n; ++i) {
              for (int j = 0; j < m; ++j) {
                  res[i][j] = matrix[j][i];
              }
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[][]} matrix
   * @return {number[][]}
   */
  var transpose = function (matrix) {
    const m = matrix.length,
      n = matrix[0].length;
    let res = [];
    for (let i = 0; i < n; ++i) {
      res[i] = [];
      for (let j = 0; j < m; ++j) {
        res[i][j] = matrix[j][i];
      }
    }
    return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
