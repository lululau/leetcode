* [[https://leetcode-cn.com/problems/masking-personal-information][831.
隐藏个人信息]]
  :PROPERTIES:
  :CUSTOM_ID: 隐藏个人信息
  :END:
[[./solution/0800-0899/0831.Masking Personal Information/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一条个人信息字符串 S，它可能是一个 邮箱地址 ，也可能是一串 电话号码
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们将隐藏它的隐私信息，通过如下规则:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

1. 电子邮箱

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

定义名称 name 是长度大于等于 2 （length ≥ 2），并且只包含小写字母 a-z
和大写字母 A-Z 的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

电子邮箱地址由名称 name 开头，紧接着是符号 '@'，后面接着一个名称
name，再接着一个点号 '.'，然后是一个名称 name。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

电子邮箱地址确定为有效的，并且格式是 "name1@name2.name3"。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

为了隐藏电子邮箱，所有的名称 name
必须被转换成小写的，并且第一个名称 name
的第一个字母和最后一个字母的中间的所有字母由 5 个 '*' 代替。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

2. 电话号码

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

电话号码是一串包括数字 0-9，以及 {'+', '-', '(', ')', ' '}
这几个字符的字符串。你可以假设电话号码包含 10 到 13 个数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

电话号码的最后 10
个数字组成本地号码，在这之前的数字组成国际号码。注意，国际号码是可选的。我们只暴露最后
4 个数字并隐藏所有其他数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

本地号码是有格式的，并且如 "*/-/*-1111" 这样显示，这里的 1
表示暴露的数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

为了隐藏有国际号码的电话号码，像 "+111 111 111 1111"，我们以
"+*/-/*-**-1111" 的格式来显示。在本地号码前面的 '+' 号和第一个 '-'
号仅当电话号码中包含国际号码时存在。例如，一个 12 位的电话号码应当以
"+*-" 开头进行显示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：像 "("，")"，" "
这样的不相干的字符以及不符合上述格式的额外的减号或者加号都应当被删除。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

最后，将提供的信息正确隐藏后返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>&quot;LeetCode@LeetCode.com&quot;
  <strong>输出: </strong>&quot;l*****e@leetcode.com&quot;
  <strong>解释： 
  </strong>所有的名称转换成小写, 第一个名称的第一个字符和最后一个字符中间由 5 个星号代替。
  因此，&quot;leetcode&quot; -&gt; &quot;l*****e&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>&quot;AB@qq.com&quot;
  <strong>输出: </strong>&quot;a*****b@qq.com&quot;
  <strong>解释:&nbsp;
  </strong>第一个名称&quot;ab&quot;的第一个字符和最后一个字符的中间必须有 5 个星号
  因此，&quot;ab&quot; -&gt; &quot;a*****b&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>&quot;1(234)567-890&quot;
  <strong>输出: </strong>&quot;***-***-7890&quot;
  <strong>解释:</strong>&nbsp;
  10 个数字的电话号码，那意味着所有的数字都是本地号码。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>&quot;86-(10)12345678&quot;
  <strong>输出: </strong>&quot;+**-***-***-5678&quot;
  <strong>解释:</strong>&nbsp;
  12 位数字，2 个数字是国际号码另外 10 个数字是本地号码 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

S.length <= 40。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

邮箱的长度至少是 8。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

电话号码的长度至少是 10。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
