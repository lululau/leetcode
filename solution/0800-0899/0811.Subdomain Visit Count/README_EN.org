* [[https://leetcode.com/problems/subdomain-visit-count][811. Subdomain
Visit Count]]
  :PROPERTIES:
  :CUSTOM_ID: subdomain-visit-count
  :END:
[[./solution/0800-0899/0811.Subdomain Visit Count/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A website domain like "discuss.leetcode.com" consists of various
subdomains. At the top level, we have "com", at the next level, we have
"leetcode.com", and at the lowest level, "discuss.leetcode.com". When we
visit a domain like "discuss.leetcode.com", we will also visit the
parent domains "leetcode.com" and "com" implicitly.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Now, call a "count-paired domain" to be a count (representing the number
of visits this domain received), followed by a space, followed by the
address. An example of a count-paired domain might be "9001
discuss.leetcode.com".

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We are given a list cpdomains of count-paired domains. We would like a
list of count-paired domains, (in the same format as the input, and in
any order), that explicitly counts the number of visits to each
subdomain.

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Example 1:</strong>

  <strong>Input:</strong> 

  [&quot;9001 discuss.leetcode.com&quot;]

  <strong>Output:</strong> 

  [&quot;9001 discuss.leetcode.com&quot;, &quot;9001 leetcode.com&quot;, &quot;9001 com&quot;]

  <strong>Explanation:</strong> 

  We only have one website domain: &quot;discuss.leetcode.com&quot;. As discussed above, the subdomain &quot;leetcode.com&quot; and &quot;com&quot; will also be visited. So they will all be visited 9001 times.



  </pre>
#+end_html

#+begin_html
  <pre>

  <strong>Example 2:</strong>

  <strong>Input:</strong> 

  [&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]

  <strong>Output:</strong> 

  [&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]

  <strong>Explanation:</strong> 

  We will visit &quot;google.mail.com&quot; 900 times, &quot;yahoo.com&quot; 50 times, &quot;intel.mail.com&quot; once and &quot;wiki.org&quot; 5 times. For the subdomains, we will visit &quot;mail.com&quot; 900 + 1 = 901 times, &quot;com&quot; 900 + 50 + 1 = 951 times, and &quot;org&quot; 5 times.



  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Notes:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The length of cpdomains will not exceed 100. 

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The length of each domain name will not exceed 100.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each address will have either 1 or 2 "." characters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The input count in any count-paired domain will not exceed 10000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The answer output can be returned in any order.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
          domains = collections.Counter()
          for item in cpdomains:
              count, domain = item.split()
              count = int(count)
              subs = domain.split('.')
              for i in range(len(subs)):
                  key = '.'.join(subs[i:])
                  domains[key] += count
          return [f'{cnt} {domain}' for domain, cnt in domains.items()]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<String> subdomainVisits(String[] cpdomains) {
          Map<String, Integer> domains = new HashMap<>();
          for (String domain : cpdomains) {
              String[] t = domain.split(" ");
              int count = Integer.parseInt(t[0]);
              String[] subs = t[1].split("\\.");
              String cur = "";
              for (int i = subs.length - 1; i >= 0; --i) {
                  cur = subs[i] + (i == subs.length - 1 ? "" : ".") + cur;
                  domains.put(cur, domains.getOrDefault(cur, 0) + count);
              }
          }
          List<String> res = new ArrayList<>();
          domains.forEach((domain, count) -> {
              res.add(count + " " + domain);
          });
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
