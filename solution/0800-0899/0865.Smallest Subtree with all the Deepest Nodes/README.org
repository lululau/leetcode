* [[https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes][865.
具有所有最深节点的最小子树]]
  :PROPERTIES:
  :CUSTOM_ID: 具有所有最深节点的最小子树
  :END:
[[./solution/0800-0899/0865.Smallest Subtree with all the Deepest Nodes/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个根为 root 的二叉树，每个节点的深度是 该节点到根的最短距离 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果一个节点在 整个树 的任意节点之间具有最大的深度，则该节点是 最深的 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个节点的 子树 是该节点加上它的所有后代的集合。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回能满足 以该节点为根的子树中包含所有最深的节点
这一条件的具有最大深度的节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：本题与力扣 1123
重复：https://leetcode-cn.com/problems/lowest-common-ancestor-of-deepest-leaves/

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4]
  <strong>输出：</strong>[2,7,4]
  <strong>解释：</strong>
  我们返回值为 2 的节点，在图中用黄色标记。
  在图中用蓝色标记的是树的最深的节点。
  注意，节点 5、3 和 2 包含树中最深的节点，但节点 2 的子树最小，因此我们返回它。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1]
  <strong>输出：</strong>[1]
  <strong>解释：</strong>根节点是树中最深的节点。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [0,1,3,null,2]
  <strong>输出：</strong>[2]
  <strong>解释：</strong>树中最深的节点为 2 ，有效子树为节点 2、1 和 0 的子树，但节点 2 的子树最小。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点的数量介于 1 和 500 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的值都是独一无二的。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
