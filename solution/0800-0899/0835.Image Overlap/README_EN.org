* [[https://leetcode.com/problems/image-overlap][835. Image Overlap]]
  :PROPERTIES:
  :CUSTOM_ID: image-overlap
  :END:
[[./solution/0800-0899/0835.Image Overlap/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two images img1 and img2 both of size n x n, represented
as binary, square matrices of the same size. (A binary matrix has only
0s and 1s as values.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We translate one image however we choose (sliding it left, right, up, or
down any number of units), and place it on top of the other image. 
After, the overlap of this translation is the number of positions that
have a 1 in both images.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

(Note also that a translation does not include any kind of rotation.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

What is the largest possible overlap?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> We slide img1 to right by 1 unit and down by 1 unit.
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0800-0899/0835.Image Overlap/images/overlap_step1.jpg" style="width: 450px; height: 105px;" />
  The number of positions that have a 1 in both images is 3. (Shown in red)
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0800-0899/0835.Image Overlap/images/overlap_step2.jpg" style="width: 450px; height: 231px;" />
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> img1 = [[1]], img2 = [[1]]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> img1 = [[0]], img2 = [[0]]
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == img1.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == img1[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == img2.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == img2[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

img1[i][j] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

img2[i][j] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
