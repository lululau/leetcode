* [[https://leetcode-cn.com/problems/boats-to-save-people][881. 救生艇]]
  :PROPERTIES:
  :CUSTOM_ID: 救生艇
  :END:
[[./solution/0800-0899/0881.Boats to Save People/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

第 i 个人的体重为 people[i]，每艘船可以承载的最大重量为 limit。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每艘船最多可同时载两人，但条件是这些人的重量之和最多为 limit。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回载到每一个人所需的最小船数。(保证每个人都能被船载)。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>people = [1,2], limit = 3
  <strong>输出：</strong>1
  <strong>解释：</strong>1 艘船载 (1, 2)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>people = [3,2,2,1], limit = 3
  <strong>输出：</strong>3
  <strong>解释：</strong>3 艘船分别载 (1, 2), (2) 和 (3)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>people = [3,5,3,4], limit = 5
  <strong>输出：</strong>4
  <strong>解释：</strong>4 艘船分别载 (3), (3), (4), (5)</pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= people.length <= 50000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= people[i] <= limit <= 30000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"排序 + 双指针"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def numRescueBoats(self, people: List[int], limit: int) -> int:
          people.sort()
          num, i, j = 0, 0, len(people) - 1
          while i <= j:
              if people[i] + people[j] <= limit:
                  i += 1
              j -= 1
              num += 1
          return num
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int numRescueBoats(int[] people, int limit) {
          Arrays.sort(people);
          int num = 0;
          int i = 0, j = people.length - 1;
          while (i <= j) {
              if (people[i] + people[j] <= limit) {
                  ++i;
              }
              --j;
              ++num;
          }
          return num;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
