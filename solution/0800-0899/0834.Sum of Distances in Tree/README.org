* [[https://leetcode-cn.com/problems/sum-of-distances-in-tree][834.
树中距离之和]]
  :PROPERTIES:
  :CUSTOM_ID: 树中距离之和
  :END:
[[./solution/0800-0899/0834.Sum of Distances in Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个无向、连通的树。树中有 N 个标记为 0...N-1 的节点以及 N-1 条边 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

第 i 条边连接节点 edges[i][0] 和 edges[i][1] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回一个表示节点 i 与其他所有节点距离之和的列表 ans。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
  <strong>输出: </strong>[8,12,6,10,10,10]
  <strong>解释: </strong>
  如下为给定的树的示意图：
    0
   / \
  1   2
     /|\
    3 4 5

  我们可以计算出 dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) 
  也就是 1 + 1 + 2 + 2 + 2 = 8。 因此，answer[0] = 8，以此类推。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

说明: 1 <= N <= 10000

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
