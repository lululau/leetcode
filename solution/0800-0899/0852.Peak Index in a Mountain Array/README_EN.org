* [[https://leetcode.com/problems/peak-index-in-a-mountain-array][852.
Peak Index in a Mountain Array]]
  :PROPERTIES:
  :CUSTOM_ID: peak-index-in-a-mountain-array
  :END:
[[./solution/0800-0899/0852.Peak Index in a Mountain Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Let's call an array arr a mountain if the following properties hold:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

arr.length >= 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There exists some i with 0 < i < arr.length - 1 such that:

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

arr[0] < arr[1] < ... arr[i-1] < arr[i]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arr[i] > arr[i+1] > ... > arr[arr.length - 1]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Given an integer array arr that is guaranteed to be a mountain, return
any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] >
... > arr[arr.length - 1].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> arr = [0,1,0]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> arr = [0,2,1,0]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> arr = [0,10,5,2]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> arr = [3,4,5,1]
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> arr = [24,69,100,99,79,78,67,36,26,19]
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= arr.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= arr[i] <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arr is guaranteed to be a mountain array.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Finding the O(n) is straightforward, could you find an
O(log(n)) solution?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
