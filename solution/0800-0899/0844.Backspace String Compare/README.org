* [[https://leetcode-cn.com/problems/backspace-string-compare][844.
比较含退格的字符串]]
  :PROPERTIES:
  :CUSTOM_ID: 比较含退格的字符串
  :END:
[[./solution/0800-0899/0844.Backspace String Compare/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定 S 和 T
两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。
# 代表退格字符。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：如果对空文本输入退格字符，文本继续为空。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>S = "ab#c", T = "ad#c"
  <strong>输出：</strong>true
  <strong>解释：</strong>S 和 T 都会变成 “ac”。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>S = "ab##", T = "c#d#"
  <strong>输出：</strong>true
  <strong>解释：</strong>S 和 T 都会变成 “”。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>S = "a##c", T = "#a#c"
  <strong>输出：</strong>true
  <strong>解释：</strong>S 和 T 都会变成 “c”。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>S = "a#c", T = "b"
  <strong>输出：</strong>false
  <strong>解释：</strong>S 会变成 “c”，但 T 仍然是 “b”。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= S.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= T.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S 和 T 只含有小写字母以及字符 '#'。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你可以用 O(N) 的时间复杂度和 O(1) 的空间复杂度解决该问题吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
