* [[https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence][842.
将数组拆分成斐波那契序列]]
  :PROPERTIES:
  :CUSTOM_ID: 将数组拆分成斐波那契序列
  :END:
[[./solution/0800-0899/0842.Split Array into Fibonacci Sequence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个数字字符串 S，比如 S =
"123456579"，我们可以将它分成斐波那契式的序列 [123, 456, 579]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

形式上，斐波那契式序列是一个非负整数列表 F，且满足：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= F[i] <= 2^31 - 1，（也就是说，每个整数都符合 32
位有符号整数类型）；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

F.length >= 3；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于所有的0 <= i < F.length - 2，都有 F[i] + F[i+1] = F[i+2] 成立。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

另外，请注意，将字符串拆分成小块时，每个块的数字一定不要以零开头，除非这个块是数字
0 本身。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回从 S 拆分出来的任意一组斐波那契式的序列块，如果不能拆分则返回 []。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;123456579&quot;
  <strong>输出：</strong>[123,456,579]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>&quot;11235813&quot;
  <strong>输出: </strong>[1,1,2,3,5,8,13]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>&quot;112358130&quot;
  <strong>输出: </strong>[]
  <strong>解释: </strong>这项任务无法完成。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;0123&quot;
  <strong>输出：</strong>[]
  <strong>解释：</strong>每个块的数字不能以零开头，因此 &quot;01&quot;，&quot;2&quot;，&quot;3&quot; 不是有效答案。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>&quot;1101111&quot;
  <strong>输出: </strong>[110, 1, 111]
  <strong>解释: </strong>输出 [11,0,11,11] 也同样被接受。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= S.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

字符串 S 中只含有数字。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
