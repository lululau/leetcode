* [[https://leetcode-cn.com/problems/friends-of-appropriate-ages][825.
适龄的朋友]]
  :PROPERTIES:
  :CUSTOM_ID: 适龄的朋友
  :END:
[[./solution/0800-0899/0825.Friends Of Appropriate Ages/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

人们会互相发送好友请求，现在给定一个包含有他们年龄的数组，ages[i] 表示第
i 个人的年龄。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

当满足以下任一条件时，A 不能给 B（A、B不为同一人）发送好友请求：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

age[B] <= 0.5 * age[A] + 7

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

age[B] > age[A]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

age[B] > 100 && age[A] < 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

否则，A 可以给 B 发送好友请求。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意如果 A 向 B 发出了请求，不等于 B 也一定会向 A
发出请求。而且，人们不会给自己发送好友请求。 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

求总共会发出多少份好友请求?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[16,16]
  <strong>输出：</strong>2
  <strong>解释：</strong>二人可以互发好友申请。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[16,17,18]
  <strong>输出：</strong>2
  <strong>解释：</strong>好友请求可产生于 17 -> 16, 18 -> 17.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[20,30,100,110,120]
  <strong>输出：</strong>3
  <strong>解释：</strong>好友请求可产生于 110 -> 100, 120 -> 110, 120 -> 100.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ages.length <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ages[i] <= 120

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
