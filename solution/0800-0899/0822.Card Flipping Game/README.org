* [[https://leetcode-cn.com/problems/card-flipping-game][822.
翻转卡片游戏]]
  :PROPERTIES:
  :CUSTOM_ID: 翻转卡片游戏
  :END:
[[./solution/0800-0899/0822.Card Flipping Game/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在桌子上有 N
张卡片，每张卡片的正面和背面都写着一个正数（正面与背面上的数有可能不一样）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们可以先翻转任意张卡片，然后选择其中一张卡片。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果选中的那张卡片背面的数字 X
与任意一张卡片的正面的数字都不同，那么这个数字是我们想要的数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

哪个数是这些想要的数字中最小的数（找到这些数中的最小值）呢？如果没有一个数字符合要求的，输出
0。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

其中, fronts[i] 和 backs[i] 分别代表第 i 张卡片的正面和背面的数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果我们通过翻转卡片来交换正面与背面上的数，那么当初在正面的数就变成背面的数，背面的数就变成正面的数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>fronts = [1,2,4,4,7], backs = [1,3,4,1,3]
  <strong>输出：</strong><code>2</code>
  <strong>解释：</strong>假设我们翻转第二张卡片，那么在正面的数变成了 <code>[1,3,4,4,7]</code> ， 背面的数变成了 <code>[1,2,4,1,3]。</code>
  接着我们选择第二张卡片，因为现在该卡片的背面的数是 2，2 与任意卡片上正面的数都不同，所以 2 就是我们想要的数字。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= fronts.length == backs.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= fronts[i] <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= backs[i] <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
