* [[https://leetcode-cn.com/problems/expressive-words][809.
情感丰富的文字]]
  :PROPERTIES:
  :CUSTOM_ID: 情感丰富的文字
  :END:
[[./solution/0800-0899/0809.Expressive Words/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有时候人们会用重复写一些字母来表示额外的感受，比如 "hello" ->
"heeellooo", "hi" ->
"hiii"。我们将相邻字母都相同的一串字符定义为相同字母组，例如："h",
"eee", "ll", "ooo"。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对于一个给定的字符串 S
，如果另一个单词能够通过将一些字母组扩张从而使其和 S
相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母 c ），然后往其中添加相同的字母 c 使其长度达到
3 或以上。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，以 "hello" 为例，我们可以对字母组 "o" 扩张得到
"hellooo"，但是无法以同样的方法得到 "helloo" 因为字母组 "oo"
长度小于 3。此外，我们可以进行另一种扩张 "ll" -> "lllll"
以获得 "helllllooo"。如果 S = "helllllooo"，那么查询词 "hello"
是可扩张的，因为可以对它执行这两种扩张操作使得 query = "hello" ->
"hellooo" -> "helllllooo" = S。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输入一组查询单词，输出其中可扩张的单词数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong> 
  S = "heeellooo"
  words = ["hello", "hi", "helo"]
  <strong>输出：</strong>1
  <strong>解释</strong>：
  我们能通过扩张 "hello" 的 "e" 和 "o" 来得到 "heeellooo"。
  我们不能通过扩张 "helo" 来得到 "heeellooo" 因为 "ll" 的长度小于 3 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= len(S) <= 100。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= len(words) <= 100。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= len(words[i]) <= 100。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S 和所有在 words 中的单词都只由小写字母组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
