* [[https://leetcode.com/problems/walking-robot-simulation][874. Walking
Robot Simulation]]
  :PROPERTIES:
  :CUSTOM_ID: walking-robot-simulation
  :END:
[[./solution/0800-0899/0874.Walking Robot Simulation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A robot on an infinite XY-plane starts at point (0, 0) and faces north.
The robot can receive one of three possible types of commands:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

-2: turn left 90 degrees,

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1: turn right 90 degrees, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 9: move forward k units.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Some of the grid squares are obstacles. The ith obstacle is at grid
point obstacles[i] = (xi, yi).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If the robot would try to move onto them, the robot stays on the
previous grid square instead (but still continues following the rest of
the route.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum Euclidean distance that the robot will be from the
origin squared (i.e. if the distance is 5, return 25).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

North means +Y direction.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

East means +X direction.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

South means -Y direction.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

West means -X direction.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> commands = [4,-1,3], obstacles = []
  <strong>Output:</strong> 25
  <strong>Explanation:</strong> The robot starts at (0, 0):
  1. Move north 4 units to (0, 4).
  2. Turn right.
  3. Move east 3 units to (3, 4).
  The furthest point away from the origin is (3, 4), which is 3<sup>2</sup> + 4<sup>2</sup> = 25 units away.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> commands = [4,-1,4,-2,4], obstacles = [[2,4]]
  <strong>Output:</strong> 65
  <strong>Explanation:</strong> The robot starts at (0, 0):
  1. Move north 4 units to (0, 4).
  2. Turn right.
  3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).
  4. Turn left.
  5. Move north 4 units to (1, 8).
  The furthest point away from the origin is (1, 8), which is 1<sup>2</sup> + 8<sup>2</sup> = 65 units away.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= commands.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

commands[i] is one of the values in the list [-2,-1,1,2,3,4,5,6,7,8,9].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= obstacles.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-3 * 104 <= xi, yi <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The answer is guaranteed to be less than 231.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
