* [[https://leetcode-cn.com/problems/walking-robot-simulation][874.
模拟行走机器人]]
  :PROPERTIES:
  :CUSTOM_ID: 模拟行走机器人
  :END:
[[./solution/0800-0899/0874.Walking Robot Simulation/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

机器人在一个无限大小的 XY 网格平面上行走，从点 (0, 0)
处开始出发，面向北方。该机器人可以接收以下三种类型的命令 commands ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

-2 ：向左转 90 度

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1 ：向右转 90 度

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= x <= 9 ：向前移动 x 个单位长度

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

在网格上有一些格子被视为障碍物 obstacles 。第 i 个障碍物位于网格点
 obstacles[i] = (xi, yi) 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

机器人无法走到障碍物上，它将会停留在障碍物的前一个网格方块上，但仍然可以继续尝试进行该路线的其余部分。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回从原点到机器人所有经过的路径点（坐标为整数）的最大欧式距离的平方。（即，如果距离为
5 ，则返回 25 ）

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <p class="MachineTrans-lang-zh-CN">
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li class="MachineTrans-lang-zh-CN">
#+end_html

北表示 +Y 方向。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li class="MachineTrans-lang-zh-CN">
#+end_html

东表示 +X 方向。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li class="MachineTrans-lang-zh-CN">
#+end_html

南表示 -Y 方向。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li class="MachineTrans-lang-zh-CN">
#+end_html

西表示 -X 方向。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>commands = [4,-1,3], obstacles = []
  <strong>输出：</strong>25
  <strong>解释：
  </strong>机器人开始位于 (0, 0)：
  1. 向北移动 4 个单位，到达 (0, 4)
  2. 右转
  3. 向东移动 3 个单位，到达 (3, 4)
  距离原点最远的是 (3, 4) ，距离为 3<sup>2</sup> + 4<sup>2</sup> = 25</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>commands = [4,-1,4,-2,4], obstacles = [[2,4]]
  <strong>输出：</strong>65
  <strong>解释</strong>：机器人开始位于 (0, 0)：
  1. 向北移动 4 个单位，到达 (0, 4)
  2. 右转
  3. 向东移动 1 个单位，然后被位于 (2, 4) 的障碍物阻挡，机器人停在 (1, 4)
  4. 左转
  5. 向北走 4 个单位，到达 (1, 8)
  距离原点最远的是 (1, 8) ，距离为 1<sup>2</sup> + 8<sup>2</sup> = 65</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= commands.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

commands[i] is one of the values in the list [-2,-1,1,2,3,4,5,6,7,8,9].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= obstacles.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-3 * 104 <= xi, yi <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

答案保证小于 231

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
