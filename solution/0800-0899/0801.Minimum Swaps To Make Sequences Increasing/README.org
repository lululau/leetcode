* [[https://leetcode-cn.com/problems/minimum-swaps-to-make-sequences-increasing][801.
使序列递增的最小交换次数]]
  :PROPERTIES:
  :CUSTOM_ID: 使序列递增的最小交换次数
  :END:
[[./solution/0800-0899/0801.Minimum Swaps To Make Sequences Increasing/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们有两个长度相等且不为空的整型数组 A 和 B 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们可以交换 A[i] 和 B[i] 的元素。注意这两个元素在各自的序列中应该处于相同的位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在交换过一些元素之后，数组 A 和 B 都应该是严格递增的（数组严格递增的条件仅为A[0]
< A[1] < A[2] < ... < A[A.length - 1]）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定数组 A 和 B ，请返回使得两个数组均保持严格递增状态的最小交换次数。假设给定的输入总是有效的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>示例:</strong>
  <strong>输入:</strong> A = [1,3,5,4], B = [1,2,3,7]
  <strong>输出:</strong> 1
  <strong>解释: </strong>
  交换 A[3] 和 B[3] 后，两个数组如下:
  A = [1, 3, 5, 7] ， B = [1, 2, 3, 4]
  两个数组均为严格递增的。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

A, B 两个数组的长度总是相等的，且长度的范围为 [1, 1000]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A[i], B[i] 均为 [0, 2000]区间内的整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
