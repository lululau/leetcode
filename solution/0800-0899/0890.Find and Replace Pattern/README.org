* [[https://leetcode-cn.com/problems/find-and-replace-pattern][890.
查找和替换模式]]
  :PROPERTIES:
  :CUSTOM_ID: 查找和替换模式
  :END:
[[./solution/0800-0899/0890.Find and Replace Pattern/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你有一个单词列表 words 和一个模式  pattern，你想知道 words
中的哪些单词与模式匹配。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果存在字母的排列 p ，使得将模式中的每个字母 x 替换为 p(x)
之后，我们就得到了所需的单词，那么单词与模式是匹配的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

（回想一下，字母的排列是从字母到字母的双射：每个字母映射到另一个字母，没有两个字母映射到同一个字母。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 words 中与给定模式匹配的单词列表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以按任何顺序返回答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern = &quot;abb&quot;
  <strong>输出：</strong>[&quot;mee&quot;,&quot;aqq&quot;]
  <strong>解释：
  </strong>&quot;mee&quot; 与模式匹配，因为存在排列 {a -&gt; m, b -&gt; e, ...}。
  &quot;ccc&quot; 与模式不匹配，因为 {a -&gt; c, b -&gt; c, ...} 不是排列。
  因为 a 和 b 映射到同一个字母。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words.length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pattern.length = words[i].length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
