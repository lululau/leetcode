* [[https://leetcode-cn.com/problems/find-and-replace-in-string][833.
字符串中的查找与替换]]
  :PROPERTIES:
  :CUSTOM_ID: 字符串中的查找与替换
  :END:
[[./solution/0800-0899/0833.Find And Replace in String/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

某个字符串 S
需要执行一些替换操作，用新的字母组替换原有的字母组（不一定大小相同）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每个替换操作具有 3 个参数：起始索引 i，源字 x 和目标字 y。规则是：如果 x
从原始字符串 S 中的位置 i 开始，那么就用 y 替换出现的
x。如果没有，则什么都不做。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

举个例子，如果 S = "abcd" 并且替换操作 i = 2，x = "cd"，y =
"ffff"，那么因为 "cd" 从原始字符串 S 中的位置 2 开始，所以用 "ffff"
替换它。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

再来看 S = "abcd" 上的另一个例子，如果一个替换操作 i = 0，x = "ab"，y =
"eee"，以及另一个替换操作 i = 2，x = "ec"，y =
"ffff"，那么第二个操作将不会执行，因为原始字符串中 S[2] = 'c'，与 x[0] =
'e' 不匹配。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

所有这些操作同时发生。保证在替换时不会有任何重叠： S = "abc", indexes =
[0, 1], sources = ["ab","bc"] 不是有效的测试用例。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>S = "abcd", indexes = [0,2], sources = ["a","cd"], targets = ["eee","ffff"]
  <strong>输出：</strong>"eeebffff"
  <strong>解释：
  </strong>"a" 从 S 中的索引 0 开始，所以它被替换为 "eee"。
  "cd" 从 S 中的索引 2 开始，所以它被替换为 "ffff"。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>S = "abcd", indexes = [0,2], sources = ["ab","ec"], targets = ["eee","ffff"]
  <strong>输出：</strong>"eeecd"
  <strong>解释：
  </strong>"ab" 从 S 中的索引 0 开始，所以它被替换为 "eee"。
  "ec" 没有从<strong>原始的</strong> S 中的索引 2 开始，所以它没有被替换。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= S.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S 仅由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= indexes.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= indexes[i] < S.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sources.length == indexes.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

targets.length == indexes.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= sources[i].length, targets[i].length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sources[i] 和 targets[i] 仅由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
