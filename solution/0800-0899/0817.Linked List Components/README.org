* [[https://leetcode-cn.com/problems/linked-list-components][817.
链表组件]]
  :PROPERTIES:
  :CUSTOM_ID: 链表组件
  :END:
[[./solution/0800-0899/0817.Linked List Components/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定链表头结点 head，该链表上的每个结点都有一个 唯一的整型值 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

同时给定列表 G，该列表是上述链表中整型值的一个子集。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回列表 G 中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表 G 中）构成的集合。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> 
  head: 0-&gt;1-&gt;2-&gt;3
  G = [0, 1, 3]
  <strong>输出:</strong> 2
  <strong>解释:</strong> 
  链表中,0 和 1 是相连接的，且 G 中不包含 2，所以 [0, 1] 是 G 的一个组件，同理 [3] 也是一个组件，故返回 2。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> 
  head: 0-&gt;1-&gt;2-&gt;3-&gt;4
  G = [0, 3, 1, 4]
  <strong>输出:</strong> 2
  <strong>解释:</strong> 
  链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果 N 是给定链表 head 的长度，1 <= N <= 10000。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

链表中每个结点的值所在范围为 [0, N - 1]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= G.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

G 是链表中所有结点的值的一个子集.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

定义 pre 表示是否可加 1，初始为 true。

遍历链表各个结点：

- 若当前结点值在 nums 中，并且当前为可加 1 的状态，则 =res++=，并且将
  pre 状态置为 false；
- 若当前结点值不在 nums 中，则将 pre 置为 true，表示可加 1。

最后返回 res 即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def numComponents(self, head: ListNode, nums: List[int]) -> int:
          s = set(nums)
          res, pre = 0, True
          while head:
              if head.val in s:
                  if pre:
                      res += 1
                      pre = False
              else:
                  pre = True
              head = head.next
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public int numComponents(ListNode head, int[] nums) {
          Set<Integer> s = new HashSet<>();
          for (int num : nums) {
              s.add(num);
          }
          int res = 0;
          boolean pre = true;
          while (head != null) {
              if (s.contains(head.val)) {
                  if (pre) {
                      ++res;
                      pre = false;
                  }
              } else {
                  pre = true;
              }
              head = head.next;
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
