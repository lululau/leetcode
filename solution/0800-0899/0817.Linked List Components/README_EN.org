* [[https://leetcode.com/problems/linked-list-components][817. Linked
List Components]]
  :PROPERTIES:
  :CUSTOM_ID: linked-list-components
  :END:
[[./solution/0800-0899/0817.Linked List Components/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

We are given head, the head node of a linked list containing unique
integer values.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We are also given the list G, a subset of the values in the linked list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the number of connected components in G, where two values are
connected if they appear consecutively in the linked list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> 

  head: 0-&gt;1-&gt;2-&gt;3

  G = [0, 1, 3]

  <strong>Output:</strong> 2

  <strong>Explanation:</strong> 

  0 and 1 are connected, so [0, 1] and [3] are the two connected components.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> 

  head: 0-&gt;1-&gt;2-&gt;3-&gt;4

  G = [0, 3, 1, 4]

  <strong>Output:</strong> 2

  <strong>Explanation:</strong> 

  0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If N is the length of the linked list given by head, 1 <= N <= 10000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The value of each node in the linked list will be in the range [0, N -
1].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= G.length <= 10000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

G is a subset of all values in the linked list.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def numComponents(self, head: ListNode, nums: List[int]) -> int:
          s = set(nums)
          res, pre = 0, True
          while head:
              if head.val in s:
                  if pre:
                      res += 1
                      pre = False
              else:
                  pre = True
              head = head.next
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public int numComponents(ListNode head, int[] nums) {
          Set<Integer> s = new HashSet<>();
          for (int num : nums) {
              s.add(num);
          }
          int res = 0;
          boolean pre = true;
          while (head != null) {
              if (s.contains(head.val)) {
                  if (pre) {
                      ++res;
                      pre = false;
                  }
              } else {
                  pre = true;
              }
              head = head.next;
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
