* [[https://leetcode.com/problems/shortest-path-to-get-all-keys][864.
Shortest Path to Get All Keys]]
  :PROPERTIES:
  :CUSTOM_ID: shortest-path-to-get-all-keys
  :END:
[[./solution/0800-0899/0864.Shortest Path to Get All Keys/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

We are given a 2-dimensional grid. "." is an empty cell, "#" is a wall,
"@" is the starting point, ("a", "b", ...) are keys, and ("A", "B", ...)
are locks.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We start at the starting point, and one move consists of walking one
space in one of the 4 cardinal directions.  We cannot walk outside the
grid, or walk into a wall.  If we walk over a key, we pick it up.  We
can't walk over a lock unless we have the corresponding key.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For some 1 <= K <= 6, there is exactly one lowercase and one uppercase
letter of the first K letters of the English alphabet in the grid.  This
means that there is exactly one key for each lock, and one lock for each
key; and also that the letters used to represent the keys and locks
were chosen in the same order as the English alphabet.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the lowest number of moves to acquire all keys.  If it's
impossible, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-1-1">[&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]</span>

  <strong>Output: </strong><span id="example-output-1">8</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-2-1">[&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]</span>

  <strong>Output: </strong><span id="example-output-2">6</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= grid.length <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= grid[0].length <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] contains only '.', '#', '@', 'a'-'f' and 'A'-'F'

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The number of keys is in [1, 6].  Each key has a different letter and
opens exactly one lock.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
