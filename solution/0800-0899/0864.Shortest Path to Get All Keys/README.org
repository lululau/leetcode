* [[https://leetcode-cn.com/problems/shortest-path-to-get-all-keys][864.
获取所有钥匙的最短路径]]
  :PROPERTIES:
  :CUSTOM_ID: 获取所有钥匙的最短路径
  :END:
[[./solution/0800-0899/0864.Shortest Path to Get All Keys/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二维网格 grid。 "." 代表一个空房间， "#" 代表一堵墙， "@" 是起点，（"a", "b",
...）代表钥匙，（"A", "B", ...）代表锁。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设 K 为钥匙/锁的个数，且满足 1 <= K <= 6，字母表中的前 K
个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]
  <strong>输出：</strong>8
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]
  <strong>输出：</strong>6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= grid.length <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= grid[0].length <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] 只含有 '.', '#', '@', 'a'-'f' 以及 'A'-'F'

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

钥匙的数目范围是 [1,
6]，每个钥匙都对应一个不同的字母，正好打开一个对应的锁。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
