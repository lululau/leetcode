* [[https://leetcode-cn.com/problems/surface-area-of-3d-shapes][892.
三维形体的表面积]]
  :PROPERTIES:
  :CUSTOM_ID: 三维形体的表面积
  :END:
[[./solution/0800-0899/0892.Surface Area of 3D Shapes/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 n * n 的网格 grid ，上面放置着一些 1 x 1 x 1 的正方体。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每个值 v = grid[i][j] 表示 v 个正方体叠放在对应单元格 (i, j) 上。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

放置好正方体后，任何直接相邻的正方体都会互相粘在一起，形成一些不规则的三维形体。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回最终这些形体的总表面积。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：每个形体的底面也需要计入表面积中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[2]]
  <strong>输出：</strong>10
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[1,2],[3,4]]
  <strong>输出：</strong>34
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[1,0],[0,2]]
  <strong>输出：</strong>16
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[1,1,1],[1,0,1],[1,1,1]]
  <strong>输出：</strong>32
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[2,2,2],[2,1,2],[2,2,2]]
  <strong>输出：</strong>46
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= grid[i][j] <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
