* [[https://leetcode.com/problems/surface-area-of-3d-shapes][892.
Surface Area of 3D Shapes]]
  :PROPERTIES:
  :CUSTOM_ID: surface-area-of-3d-shapes
  :END:
[[./solution/0800-0899/0892.Surface Area of 3D Shapes/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an n x n grid where you have placed some 1 x 1 x 1 cubes.
Each value v = grid[i][j] represents a tower of v cubes placed on top of
cell (i, j).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

After placing these cubes, you have decided to glue any directly
adjacent cubes to each other, forming several irregular 3D shapes.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the total surface area of the resulting shapes.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note: The bottom face of each shape counts toward its surface area.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[2]]
  <strong>Output:</strong> 10
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,2],[3,4]]
  <strong>Output:</strong> 34
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,0],[0,2]]
  <strong>Output:</strong> 16
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,1,1],[1,0,1],[1,1,1]]
  <strong>Output:</strong> 32
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[2,2,2],[2,1,2],[2,2,2]]
  <strong>Output:</strong> 46
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= grid[i][j] <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
