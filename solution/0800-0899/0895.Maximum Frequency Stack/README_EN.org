* [[https://leetcode.com/problems/maximum-frequency-stack][895. Maximum
Frequency Stack]]
  :PROPERTIES:
  :CUSTOM_ID: maximum-frequency-stack
  :END:
[[./solution/0800-0899/0895.Maximum Frequency Stack/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a stack-like data structure to push elements to the stack and pop
the most frequent element from the stack.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the FreqStack class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

FreqStack() constructs an empty frequency stack.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void push(int val) pushes an integer val onto the top of the stack.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int pop() removes and returns the most frequent element in the stack.

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If there is a tie for the most frequent element, the element closest to
the stack's top is removed and returned.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;FreqStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;]
  [[], [5], [7], [5], [7], [4], [5], [], [], [], []]
  <strong>Output</strong>
  [null, null, null, null, null, null, null, 5, 7, 5, 4]

  <strong>Explanation</strong>
  FreqStack freqStack = new FreqStack();
  freqStack.push(5); // The stack is [5]
  freqStack.push(7); // The stack is [5,7]
  freqStack.push(5); // The stack is [5,7,5]
  freqStack.push(7); // The stack is [5,7,5,7]
  freqStack.push(4); // The stack is [5,7,5,7,4]
  freqStack.push(5); // The stack is [5,7,5,7,4,5]
  freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].
  freqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].
  freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].
  freqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= val <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 2 * 104 calls will be made to push and pop.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that there will be at least one element in the stack
before calling pop.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
