* [[https://leetcode-cn.com/problems/count-unique-characters-of-all-substrings-of-a-given-string][828.
统计子串中的唯一字符]]
  :PROPERTIES:
  :CUSTOM_ID: 统计子串中的唯一字符
  :END:
[[./solution/0800-0899/0828.Count Unique Characters of All Substrings of a Given String/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们定义了一个函数 countUniqueChars(s) 来统计字符串 s
中的唯一字符，并返回唯一字符的个数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如：s = "LEETCODE" ，则其中 "L", "T","C","O","D"
都是唯一字符，因为它们只出现一次，所以 countUniqueChars(s) = 5 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

本题将会给你一个字符串 s ，我们需要返回 countUniqueChars(t) 的总和，其中
t 是 s
的子字符串。注意，某些子字符串可能是重复的，但你统计时也必须算上这些重复的子字符串（也就是说，你必须统计
s 的所有子字符串中的唯一字符）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

由于答案可能非常大，请将结果 mod 10 ^ 9 + 7 后再返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入: </strong>s = "ABC"
  <strong>输出: </strong>10
  <strong>解释:</strong> 所有可能的子串为："A","B","C","AB","BC" 和 "ABC"。
       其中，每一个子串都由独特字符构成。
       所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入: </strong>s = "ABA"
  <strong>输出: </strong>8
  <strong>解释: </strong>除<code>了 countUniqueChars</code>("ABA") = 1 之外，其余与示例 1 相同。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "LEETCODE"
  <strong>输出：</strong>92
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= s.length <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 只包含大写英文字符

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
