* [[https://leetcode-cn.com/problems/positions-of-large-groups][830.
较大分组的位置]]
  :PROPERTIES:
  :CUSTOM_ID: 较大分组的位置
  :END:
[[./solution/0800-0899/0830.Positions of Large Groups/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在一个由小写字母构成的字符串 s
中，包含由一些连续的相同字符所构成的分组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，在字符串 s = "abbxxxxzyy" 中，就含有 "a", "bb", "xxxx", "z" 和
"yy" 这样的一些分组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

分组可以用区间 [start, end] 表示，其中 start 和 end
分别表示该分组的起始和终止位置的下标。上例中的 "xxxx" 分组用区间表示为
[3,6] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们称所有包含大于或等于三个连续字符的分组为 较大分组 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

找到每一个 较大分组 的区间，按起始位置下标递增顺序排序后，返回结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "abbxxxxzzy"
  <strong>输出：</strong>[[3,6]]
  <strong>解释</strong><strong>：</strong><code>"xxxx" 是一个起始于 3 且终止于 6 的较大分组</code>。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "abc"
  <strong>输出：</strong>[]
  <strong>解释：</strong>"a","b" 和 "c" 均不是符合要求的较大分组。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "abcdddeeeeaabbbcd"
  <strong>输出：</strong>[[3,5],[6,9],[12,14]]
  <strong>解释：</strong>较大分组为 "ddd", "eeee" 和 "bbb"</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "aba"
  <strong>输出：</strong>[]
  </pre>
#+end_html

 

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 仅含小写英文字母

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
