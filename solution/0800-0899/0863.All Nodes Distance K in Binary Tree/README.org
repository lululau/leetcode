* [[https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree][863.
二叉树中所有距离为 K 的结点]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树中所有距离为-k-的结点
  :END:
[[./solution/0800-0899/0863.All Nodes Distance K in Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回到目标结点 target 距离为 K 的所有结点的值的列表。
答案可以以任何顺序返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
  <strong>输出：</strong>[7,4,1]
  <strong>解释：</strong>
  所求结点为与目标结点（值为 5）距离为 2 的结点，
  值分别为 7，4，以及 1

  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0800-0899/0863.All Nodes Distance K in Binary Tree/images/sketch0.png" style="height: 240px; width: 280px;">

  注意，输入的 &quot;root&quot; 和 &quot;target&quot; 实际上是树上的结点。
  上面的输入仅仅是对这些对象进行了序列化描述。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

给定的树是非空的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

树上的每个结点都具有唯一的值 0 <= node.val <= 500 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

目标结点 target 是树上的结点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= K <= 1000.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
