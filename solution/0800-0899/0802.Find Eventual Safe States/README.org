* [[https://leetcode-cn.com/problems/find-eventual-safe-states][802.
找到最终的安全状态]]
  :PROPERTIES:
  :CUSTOM_ID: 找到最终的安全状态
  :END:
[[./solution/0800-0899/0802.Find Eventual Safe States/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在有向图中，从某个节点和每个转向处开始出发，沿着图的有向边走。如果到达的节点是终点（即它没有连出的有向边），则停止。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果从起始节点出发，最后必然能走到终点，就认为起始节点是 最终安全
的。更具体地说，对于最终安全的起始节点而言，存在一个自然数 k
，无论选择沿哪条有向边行走 ，走了不到 k 步后必能停止在一个终点上。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回一个由图中所有最终安全的起始节点组成的数组作为答案。答案数组中的元素应当按
升序 排列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

该有向图有 n 个节点，按 0 到 n - 1 编号，其中 n
是 graph 的节点数。图以下述形式给出：graph[i] 是编号 j
节点的一个列表，满足 (i, j) 是图的一条有向边。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>graph = [[1,2],[2,3],[5],[0],[5],[],[]]
  <strong>输出：</strong>[2,4,5,6]
  <strong>解释：</strong>示意图如上。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
  <strong>输出：</strong>[4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == graph.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= graph[i].legnth <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

graph[i] 按严格递增顺序排列。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

图中可能包含自环。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

图中边的数目在范围 [1, 4 * 104] 内。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
