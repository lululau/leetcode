* [[https://leetcode-cn.com/problems/increasing-order-search-tree][897.
递增顺序搜索树]]
  :PROPERTIES:
  :CUSTOM_ID: 递增顺序搜索树
  :END:
[[./solution/0800-0899/0897.Increasing Order Search Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一棵二叉搜索树，请你 按中序遍历
将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
  <strong>输出：</strong>[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [5,1,7]
  <strong>输出：</strong>[1,null,5,null,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点数的取值范围是 [1, 100]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

递归将左子树、右子树转换为左、右链表 left 和 right。然后将左链表 left
的最后一个结点的 right 指针指向 root，root 的 right 指针指向右链表
right，并将 root 的 left 指针值为空。

同[[./lcci/17.12.BiNode/README.org][面试题 17.12. BiNode]]。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def increasingBST(self, root: TreeNode) -> TreeNode:
          if root is None:
              return None
          left = self.increasingBST(root.left)
          right = self.increasingBST(root.right)
          if left is None:
              root.right = right
              return root
          res = left
          while left and left.right:
              left = left.right
          left.right = root
          root.right = right
          root.left = None
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public TreeNode increasingBST(TreeNode root) {
          if (root == null) return null;
          TreeNode left = increasingBST(root.left);
          TreeNode right = increasingBST(root.right);
          if (left == null) {
              root.right = right;
              return root;
          }
          TreeNode res = left;
          while (left != null && left.right != null) left = left.right;
          left.right = root;
          root.right = right;
          root.left = null;
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
