* [[https://leetcode.com/problems/increasing-order-search-tree][897.
Increasing Order Search Tree]]
  :PROPERTIES:
  :CUSTOM_ID: increasing-order-search-tree
  :END:
[[./solution/0800-0899/0897.Increasing Order Search Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary search tree, rearrange the tree in in-order
so that the leftmost node in the tree is now the root of the tree, and
every node has no left child and only one right child.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> root = [5,3,6,2,4,null,8,1,null,null,null,7,9]

  <strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> root = [5,1,7]

  <strong>Output:</strong> [1,null,5,null,7]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the given tree will be in the range [1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:
See [[./lcci/17.12.BiNode/README_EN.org][17.12. BiNode]].

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def increasingBST(self, root: TreeNode) -> TreeNode:
          if root is None:
              return None
          left = self.increasingBST(root.left)
          right = self.increasingBST(root.right)
          if left is None:
              root.right = right
              return root
          res = left
          while left and left.right:
              left = left.right
          left.right = root
          root.right = right
          root.left = None
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public TreeNode increasingBST(TreeNode root) {
          if (root == null) return null;
          TreeNode left = increasingBST(root.left);
          TreeNode right = increasingBST(root.right);
          if (left == null) {
              root.right = right;
              return root;
          }
          TreeNode res = left;
          while (left != null && left.right != null) left = left.right;
          left.right = root;
          root.right = right;
          root.left = null;
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
