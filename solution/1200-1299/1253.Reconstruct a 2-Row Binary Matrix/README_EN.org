* [[https://leetcode.com/problems/reconstruct-a-2-row-binary-matrix][1253.
Reconstruct a 2-Row Binary Matrix]]
  :PROPERTIES:
  :CUSTOM_ID: reconstruct-a-2-row-binary-matrix
  :END:
[[./solution/1200-1299/1253.Reconstruct a 2-Row Binary Matrix/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the following details of a matrix with n columns and 2 rows :

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The matrix is a binary matrix, which means each element in the matrix
can be 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The sum of elements of the 0-th(upper) row is given as upper.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The sum of elements of the 1-st(lower) row is given as lower.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The sum of elements in the i-th column(0-indexed) is colsum[i], where
colsum is given as an integer array with length n.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Your task is to reconstruct the matrix with upper, lower and colsum.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return it as a 2-D integer array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If there are more than one valid solution, any of them will be accepted.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If no valid solution exists, return an empty 2-D array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> upper = 2, lower = 1, colsum = [1,1,1]
  <strong>Output:</strong> [[1,1,0],[0,0,1]]
  <strong>Explanation: </strong>[[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> upper = 2, lower = 3, colsum = [2,2,1,1]
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
  <strong>Output:</strong> [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= colsum.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= upper, lower <= colsum.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= colsum[i] <= 2

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
