* [[https://leetcode-cn.com/problems/reconstruct-a-2-row-binary-matrix][1253.
重构 2 行二进制矩阵]]
  :PROPERTIES:
  :CUSTOM_ID: 重构-2-行二进制矩阵
  :END:
[[./solution/1200-1299/1253.Reconstruct a 2-Row Binary Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 2 行 n 列的二进制数组：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

矩阵是一个二进制矩阵，这意味着矩阵中的每个元素不是 0 就是 1。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第 0 行的元素之和为 upper。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第 1 行的元素之和为 lower。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第 i 列（从 0
开始编号）的元素之和为 colsum[i]，colsum 是一个长度为 n 的整数数组。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

你需要利用 upper，lower 和 colsum 来重构这个矩阵，并以二维整数数组的形式返回它。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果有多个不同的答案，那么任意一个都可以通过本题。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果不存在符合要求的答案，就请返回一个空的二维数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>upper = 2, lower = 1, colsum = [1,1,1]
  <strong>输出：</strong>[[1,1,0],[0,0,1]]
  <strong>解释：</strong>[[1,0,1],[0,1,0]] 和 [[0,1,1],[1,0,0]] 也是正确答案。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>upper = 2, lower = 3, colsum = [2,2,1,1]
  <strong>输出：</strong>[]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
  <strong>输出：</strong>[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= colsum.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= upper, lower <= colsum.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= colsum[i] <= 2

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
