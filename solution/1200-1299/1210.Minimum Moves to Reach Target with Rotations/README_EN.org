* [[https://leetcode.com/problems/minimum-moves-to-reach-target-with-rotations][1210.
Minimum Moves to Reach Target with Rotations]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-moves-to-reach-target-with-rotations
  :END:
[[./solution/1200-1299/1210.Minimum Moves to Reach Target with Rotations/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In an n*n grid, there is a snake that spans 2 cells and starts moving
from the top left corner at (0, 0) and (0, 1). The grid has empty cells
represented by zeros and blocked cells represented by ones. The snake
wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In one move the snake can:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Move one cell to the right if there are no blocked cells there. This
move keeps the horizontal/vertical position of the snake as it is.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Move down one cell if there are no blocked cells there. This move keeps
the horizontal/vertical position of the snake as it is.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Rotate clockwise if it's in a horizontal position and the two cells
under it are both empty. In that case the snake moves from (r,
c) and (r, c+1) to (r, c) and (r+1, c).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Rotate counterclockwise if it's in a vertical position and the two cells
to its right are both empty. In that case the snake moves from (r,
c) and (r+1, c) to (r, c) and (r, c+1).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum number of moves to reach the target.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If there is no way to reach the target, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[0,0,0,0,0,1],
                 [1,1,0,0,1,0],
  &nbsp;              [0,0,0,0,1,1],
  &nbsp;              [0,0,1,0,1,0],
  &nbsp;              [0,1,1,0,0,0],
  &nbsp;              [0,1,1,0,0,0]]
  <strong>Output:</strong> 11
  <strong>Explanation:
  </strong>One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[0,0,1,1,1,1],
  &nbsp;              [0,0,0,0,1,1],
  &nbsp;              [1,1,0,0,0,1],
  &nbsp;              [1,1,1,0,0,1],
  &nbsp;              [1,1,1,0,0,1],
  &nbsp;              [1,1,1,0,0,0]]
  <strong>Output:</strong> 9
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= grid[i][j] <= 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that the snake starts at empty cells.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
