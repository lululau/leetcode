* [[https://leetcode-cn.com/problems/minimum-moves-to-reach-target-with-rotations][1210.
穿过迷宫的最少移动次数]]
  :PROPERTIES:
  :CUSTOM_ID: 穿过迷宫的最少移动次数
  :END:
[[./solution/1200-1299/1210.Minimum Moves to Reach Target with Rotations/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你还记得那条风靡全球的贪吃蛇吗？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们在一个 n*n 的网格上构建了新的迷宫地图，蛇的长度为
2，也就是说它会占去两个单元格。蛇会从左上角（(0, 0) 和 (0, 1)）开始移动。我们用
0 表示空单元格，用 1 表示障碍物。蛇需要移动到迷宫的右下角（(n-1,
n-2) 和 (n-1, n-1)）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每次移动，蛇可以这样走：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果没有障碍，则向右移动一个单元格。并仍然保持身体的水平／竖直状态。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果没有障碍，则向下移动一个单元格。并仍然保持身体的水平／竖直状态。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果它处于水平状态并且其下面的两个单元都是空的，就顺时针旋转 90
度。蛇从（(r, c)、(r, c+1)）移动到 （(r, c)、(r+1, c)）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果它处于竖直状态并且其右面的两个单元都是空的，就逆时针旋转 90
度。蛇从（(r, c)、(r+1, c)）移动到（(r, c)、(r, c+1)）。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

返回蛇抵达目的地所需的最少移动次数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果无法到达目的地，请返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[0,0,0,0,0,1],
                 [1,1,0,0,1,0],
  &nbsp;              [0,0,0,0,1,1],
  &nbsp;              [0,0,1,0,1,0],
  &nbsp;              [0,1,1,0,0,0],
  &nbsp;              [0,1,1,0,0,0]]
  <strong>输出：</strong>11
  <strong>解释：
  </strong>一种可能的解决方案是 [右, 右, 顺时针旋转, 右, 下, 下, 下, 下, 逆时针旋转, 右, 下]。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[0,0,1,1,1,1],
  &nbsp;              [0,0,0,0,1,1],
  &nbsp;              [1,1,0,0,0,1],
  &nbsp;              [1,1,1,0,0,1],
  &nbsp;              [1,1,1,0,0,1],
  &nbsp;              [1,1,1,0,0,0]]
  <strong>输出：</strong>9
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= grid[i][j] <= 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

蛇保证从空单元格开始出发。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
