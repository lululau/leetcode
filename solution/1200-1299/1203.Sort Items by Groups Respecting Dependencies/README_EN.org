* [[https://leetcode.com/problems/sort-items-by-groups-respecting-dependencies][1203.
Sort Items by Groups Respecting Dependencies]]
  :PROPERTIES:
  :CUSTOM_ID: sort-items-by-groups-respecting-dependencies
  :END:
[[./solution/1200-1299/1203.Sort Items by Groups Respecting Dependencies/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There are n items each belonging to zero or one of m groups where
group[i] is the group that the i-th item belongs to and it's equal to
-1 if the i-th item belongs to no group. The items and the groups are
zero indexed. A group can have no item belonging to it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return a sorted list of the items such that:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The items that belong to the same group are next to each other in the
sorted list.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are some relations between these items where beforeItems[i] is a
list containing all the items that should come before the i-th item in
the sorted array (to the left of the i-th item).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return any solution if there is more than one solution and return an
empty list if there is no solution.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]
  <strong>Output:</strong> [6,3,4,1,5,2,0,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]
  <strong>Output:</strong> []
  <strong>Explanation:</strong>&nbsp;This is the same as example 1 except that 4 needs to be before 6 in the sorted list.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= n <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

group.length == beforeItems.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1 <= group[i] <= m - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= beforeItems[i].length <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= beforeItems[i][j] <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

i != beforeItems[i][j]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

beforeItems[i] does not contain duplicates elements.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
