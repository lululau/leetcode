* [[https://leetcode-cn.com/problems/minimum-time-visiting-all-points][1266.
访问所有点的最小时间]]
  :PROPERTIES:
  :CUSTOM_ID: 访问所有点的最小时间
  :END:
[[./solution/1200-1299/1266.Minimum Time Visiting All Points/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

平面上有 n 个点，点的位置用整数坐标表示 points[i] = [xi, yi]
。请你计算访问所有这些点需要的 最小时间（以秒为单位）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你需要按照下面的规则在平面上移动：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每一秒内，你可以：

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

沿水平方向移动一个单位长度，或者

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

沿竖直方向移动一个单位长度，或者

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

跨过对角线移动 sqrt(2)
个单位长度（可以看作在一秒内向水平和竖直方向各移动一个单位长度）。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
  <li>必须按照数组中出现的顺序来访问这些点。</li>
  <li>在访问某个点时，可以经过该点后面出现的点，但经过的那些点不算作有效访问。</li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>points = [[1,1],[3,4],[-1,0]]
  <strong>输出：</strong>7
  <strong>解释：</strong>一条最佳的访问路径是： <strong>[1,1]</strong> -> [2,2] -> [3,3] -> <strong>[3,4] </strong>-> [2,3] -> [1,2] -> [0,1] -> <strong>[-1,0]</strong>   
  从 [1,1] 到 [3,4] 需要 3 秒 
  从 [3,4] 到 [-1,0] 需要 4 秒
  一共需要 7 秒</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>points = [[3,2],[-2,2]]
  <strong>输出：</strong>5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

points.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

points[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= points[i][0], points[i][1] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
