* [[https://leetcode.com/problems/minimum-time-visiting-all-points][1266.
Minimum Time Visiting All Points]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-time-visiting-all-points
  :END:
[[./solution/1200-1299/1266.Minimum Time Visiting All Points/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

On a 2D plane, there are n points with integer coordinates points[i] =
[xi, yi]. Return the minimum time in seconds to visit all the points in
the order given by points.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You can move according to these rules:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

In 1 second, you can either:

#+begin_example
  <ul>
      <li>move vertically by one&nbsp;unit,</li>
      <li>move horizontally by one unit, or</li>
      <li>move diagonally <code>sqrt(2)</code> units (in other words, move one unit vertically then one unit horizontally in <code>1</code> second).</li>
  </ul>
  </li>
  <li>You have to visit the points in the same order as they appear in the array.</li>
  <li>You are allowed to pass through points that appear later in the order, but these do not count as visits.</li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> points = [[1,1],[3,4],[-1,0]]
  <strong>Output:</strong> 7
  <strong>Explanation: </strong>One optimal path is <strong>[1,1]</strong> -&gt; [2,2] -&gt; [3,3] -&gt; <strong>[3,4] </strong>-&gt; [2,3] -&gt; [1,2] -&gt; [0,1] -&gt; <strong>[-1,0]</strong>   
  Time from [1,1] to [3,4] = 3 seconds 
  Time from [3,4] to [-1,0] = 4 seconds
  Total time = 7 seconds</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> points = [[3,2],[-2,2]]
  <strong>Output:</strong> 5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

points.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

points[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= points[i][0], points[i][1] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
