* [[https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses][1249.
Minimum Remove to Make Valid Parentheses]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-remove-to-make-valid-parentheses
  :END:
[[./solution/1200-1299/1249.Minimum Remove to Make Valid Parentheses/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s of '(' , ')' and lowercase English characters. 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Your task is to remove the minimum number of parentheses
( '(' or ')', in any positions ) so that the resulting parentheses
string is valid and return any valid string.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Formally, a parentheses string is valid if and only if:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

It is the empty string, contains only lowercase characters, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It can be written as AB (A concatenated with B), where A and B are valid
strings, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It can be written as (A), where A is a valid string.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;lee(t(c)o)de)&quot;

  <strong>Output:</strong> &quot;lee(t(c)o)de&quot;

  <strong>Explanation:</strong> &quot;lee(t(co)de)&quot; , &quot;lee(t(c)ode)&quot; would also be accepted.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;a)b(c)d&quot;

  <strong>Output:</strong> &quot;ab(c)d&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;))((&quot;

  <strong>Output:</strong> &quot;&quot;

  <strong>Explanation:</strong> An empty string is also valid.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;(a(b(c)d)&quot;

  <strong>Output:</strong> &quot;a(b(c)d)&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[i] is one of  '(' , ')' and lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
