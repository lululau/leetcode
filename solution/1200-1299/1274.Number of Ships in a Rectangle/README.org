* [[https://leetcode-cn.com/problems/number-of-ships-in-a-rectangle][1274.
矩形内船只的数目]]
  :PROPERTIES:
  :CUSTOM_ID: 矩形内船只的数目
  :END:
[[./solution/1200-1299/1274.Number of Ships in a Rectangle/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

(此题是 交互式问题 )

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在用笛卡尔坐标系表示的二维海平面上，有一些船。每一艘船都在一个整数点上，且每一个整数点最多只有
1 艘船。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

有一个函数 Sea.hasShips(topRight,
bottomLeft) ，输入参数为右上角和左下角两个点的坐标，当且仅当这两个点所表示的矩形区域（包含边界）内至少有一艘船时，这个函数才返回 true ，否则返回 false
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你矩形的右上角 topRight 和左下角 bottomLeft
的坐标，请你返回此矩形内船只的数目。题目保证矩形内 至多只有 10 艘船。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

调用函数 hasShips 超过400次 的提交将被判为 错误答案（Wrong
Answer） 。同时，任何尝试绕过评测系统的行为都将被取消比赛资格。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  ships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]
  <strong>输出：</strong>3
  <strong>解释：</strong>在 [0,0] 到 [4,4] 的范围内总共有 3 艘船。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

ships 数组只用于评测系统内部初始化。你无法得知 ships 的信息，所以只能通过调用 hasShips 接口来求解。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= bottomLeft[0] <= topRight[0] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= bottomLeft[1] <= topRight[1] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
