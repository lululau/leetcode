* [[https://leetcode.com/problems/number-of-ships-in-a-rectangle][1274.
Number of Ships in a Rectangle]]
  :PROPERTIES:
  :CUSTOM_ID: number-of-ships-in-a-rectangle
  :END:
[[./solution/1200-1299/1274.Number of Ships in a Rectangle/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

(This problem is an interactive problem.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each ship is located at an integer point on the sea represented by a
cartesian plane, and each integer point may contain at most 1 ship.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You have a function Sea.hasShips(topRight, bottomLeft) which takes two
points as arguments and returns true If there is at least one ship in
the rectangle represented by the two points, including on the boundary.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given two points: the top right and bottom left corners of a rectangle,
return the number of ships present in that rectangle. It is guaranteed
that there are at most 10 ships in that rectangle.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Submissions making more than 400 calls to hasShips will be judged Wrong
Answer. Also, any solutions that attempt to circumvent the judge will
result in disqualification.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example :

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> 
  ships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> From [0,0] to [4,4] we can count 3 ships within the range.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

On the input ships is only given to initialize the map internally. You
must solve this problem "blindfolded". In other words, you must find the
answer using the given hasShips API, without knowing the ships position.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= bottomLeft[0] <= topRight[0] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= bottomLeft[1] <= topRight[1] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

topRight != bottomLeft

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
