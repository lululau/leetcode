* [[https://leetcode-cn.com/problems/queens-that-can-attack-the-king][1222.
可以攻击国王的皇后]]
  :PROPERTIES:
  :CUSTOM_ID: 可以攻击国王的皇后
  :END:
[[./solution/1200-1299/1222.Queens That Can Attack the King/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在一个 8x8 的棋盘上，放置着若干「黑皇后」和一个「白国王」。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

「黑皇后」在棋盘上的位置分布用整数坐标数组 queens 表示，「白国王」的坐标用数组
king 表示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

「黑皇后」的行棋规定是：横、直、斜都可以走，步数不受限制，但是，不能越子行棋。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回可以直接攻击到「白国王」的所有「黑皇后」的坐标（任意顺序）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
  <strong>输出：</strong>[[0,1],[1,0],[3,3]]
  <strong>解释：</strong> 
  [0,1] 的皇后可以攻击到国王，因为他们在同一行上。 
  [1,0] 的皇后可以攻击到国王，因为他们在同一列上。 
  [3,3] 的皇后可以攻击到国王，因为他们在同一条对角线上。 
  [0,4] 的皇后无法攻击到国王，因为她被位于 [0,1] 的皇后挡住了。 
  [4,0] 的皇后无法攻击到国王，因为她被位于 [1,0] 的皇后挡住了。 
  [2,4] 的皇后无法攻击到国王，因为她和国王不在同一行/列/对角线上。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
  <strong>输出：</strong>[[2,2],[3,4],[4,4]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]
  <strong>输出：</strong>[[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queens.length <= 63

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queens[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= queens[i][j] < 8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

king.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= king[0], king[1] < 8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

一个棋盘格上最多只能放置一枚棋子。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
