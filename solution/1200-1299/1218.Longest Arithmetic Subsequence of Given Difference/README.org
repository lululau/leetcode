* [[https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference][1218.
最长定差子序列]]
  :PROPERTIES:
  :CUSTOM_ID: 最长定差子序列
  :END:
[[./solution/1200-1299/1218.Longest Arithmetic Subsequence of Given Difference/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 arr 和一个整数 difference，请你找出并返回
arr 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 difference 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

子序列
是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从
arr 派生出来的序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>arr = [1,2,3,4], difference = 1
  <strong>输出：</strong>4
  <strong>解释：</strong>最长的等差子序列是 [1,2,3,4]。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>arr = [1,3,5,7], difference = 1
  <strong>输出：</strong>1
  <strong>解释：</strong>最长的等差子序列是任意单个元素。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>arr = [1,5,7,8,5,3,4,2,1], difference = -2
  <strong>输出：</strong>4
  <strong>解释：</strong>最长的等差子序列是 [7,5,3,1]。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= arr[i], difference <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
