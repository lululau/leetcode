* [[https://leetcode-cn.com/problems/search-suggestions-system][1268.
搜索推荐系统]]
  :PROPERTIES:
  :CUSTOM_ID: 搜索推荐系统
  :END:
[[./solution/1200-1299/1268.Search Suggestions System/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个产品数组 products 和一个字符串 searchWord ，products 
数组中每个产品都是一个字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你设计一个推荐系统，在依次输入单词 searchWord
的每一个字母后，推荐 products 数组中前缀与 searchWord
相同的最多三个产品。如果前缀相同的可推荐产品超过三个，请按字典序返回最小的三个。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你以二维列表的形式，返回在输入 searchWord 每个字母后相应的推荐产品的列表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>products = [&quot;mobile&quot;,&quot;mouse&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mousepad&quot;], searchWord = &quot;mouse&quot;
  <strong>输出：</strong>[
  [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],
  [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],
  [&quot;mouse&quot;,&quot;mousepad&quot;],
  [&quot;mouse&quot;,&quot;mousepad&quot;],
  [&quot;mouse&quot;,&quot;mousepad&quot;]
  ]
  <strong>解释：</strong>按字典序排序后的产品列表是 [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mouse&quot;,&quot;mousepad&quot;]
  输入 m 和 mo，由于所有产品的前缀都相同，所以系统返回字典序最小的三个产品 [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;]
  输入 mou， mous 和 mouse 后系统都返回 [&quot;mouse&quot;,&quot;mousepad&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>products = [&quot;havana&quot;], searchWord = &quot;havana&quot;
  <strong>输出：</strong>[[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>products = [&quot;bags&quot;,&quot;baggage&quot;,&quot;banner&quot;,&quot;box&quot;,&quot;cloths&quot;], searchWord = &quot;bags&quot;
  <strong>输出：</strong>[[&quot;baggage&quot;,&quot;bags&quot;,&quot;banner&quot;],[&quot;baggage&quot;,&quot;bags&quot;,&quot;banner&quot;],[&quot;baggage&quot;,&quot;bags&quot;],[&quot;bags&quot;]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>products = [&quot;havana&quot;], searchWord = &quot;tatiana&quot;
  <strong>输出：</strong>[[],[],[],[],[],[],[]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= products.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Σ products[i].length <= 2 * 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

products[i] 中所有的字符都是小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= searchWord.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

searchWord 中所有字符都是小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
