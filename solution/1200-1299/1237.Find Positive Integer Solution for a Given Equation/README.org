* [[https://leetcode-cn.com/problems/find-positive-integer-solution-for-a-given-equation][1237.
找出给定方程的正整数解]]
  :PROPERTIES:
  :CUSTOM_ID: 找出给定方程的正整数解
  :END:
[[./solution/1200-1299/1237.Find Positive Integer Solution for a Given Equation/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个函数  f(x,
y) 和一个目标结果 z，函数公式未知，请你计算方程 f(x,y) ==
z 所有可能的正整数 数对 x 和 y。满足条件的结果数对可以按任意顺序返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

尽管函数的具体式子未知，但它是单调递增函数，也就是说：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

f(x, y) < f(x + 1, y)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

f(x, y) < f(x, y + 1)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

函数接口定义如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  interface CustomFunction {
  public:
    // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.
    int f(int x, int y);
  };</pre>
#+end_html

#+begin_html
  <p>
#+end_html

你的解决方案将按如下规则进行评判：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

判题程序有一个由 CustomFunction 的 9 种实现组成的列表，以及一种为特定的
z 生成所有有效数对的答案的方法。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

判题程序接受两个输入：function_id（决定使用哪种实现测试你的代码）以及目标结果
z 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

判题程序将会调用你实现的 findSolution 并将你的结果与答案进行比较。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果你的结果与答案相符，那么解决方案将被视作正确答案，即 Accepted 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>function_id = 1, z = 5
  <strong>输出：</strong>[[1,4],[2,3],[3,2],[4,1]]
  <strong>解释：</strong>function_id = 1 暗含的函数式子为 f(x, y) = x + y
  以下 x 和 y 满足 f(x, y) 等于 5：
  x=1, y=4 -> f(1, 4) = 1 + 4 = 5
  x=2, y=3 -> f(2, 3) = 2 + 3 = 5
  x=3, y=2 -> f(3, 2) = 3 + 2 = 5
  x=4, y=1 -> f(4, 1) = 4 + 1 = 5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>function_id = 2, z = 5
  <strong>输出：</strong>[[1,5],[5,1]]
  <strong>解释：</strong>function_id = 2 暗含的函数式子为 f(x, y) = x * y
  以下 x 和 y 满足 f(x, y) 等于 5：
  x=1, y=5 -> f(1, 5) = 1 * 5 = 5
  x=5, y=1 -> f(5, 1) = 5 * 1 = 5</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= function_id <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= z <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目保证 f(x, y) == z 的解处于 1 <= x, y <= 1000 的范围内。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

在 1 <= x, y <= 1000 的前提下，题目保证 f(x, y) 是一个 32 位有符号整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
