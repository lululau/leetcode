* [[https://leetcode.com/problems/find-positive-integer-solution-for-a-given-equation][1237.
Find Positive Integer Solution for a Given Equation]]
  :PROPERTIES:
  :CUSTOM_ID: find-positive-integer-solution-for-a-given-equation
  :END:
[[./solution/1200-1299/1237.Find Positive Integer Solution for a Given Equation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a callable function f(x, y) with a hidden formula and a value z,
reverse engineer the formula and return all positive integer pairs x and
y where f(x,y) == z. You may return the pairs in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

While the exact formula is hidden, the function is monotonically
increasing, i.e.:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

f(x, y) < f(x + 1, y)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

f(x, y) < f(x, y + 1)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

The function interface is defined like this:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  interface CustomFunction {
  public:
    // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.
    int f(int x, int y);
  };
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

We will judge your solution as follows:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The judge has a list of 9 hidden implementations of CustomFunction,
along with a way to generate an answer key of all valid pairs for a
specific z.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The judge will receive two inputs: a function_id (to determine which
implementation to test your code with), and the target z.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The judge will call your findSolution and compare your results with the
answer key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If your results match the answer key, your solution will be Accepted.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> function_id = 1, z = 5
  <strong>Output:</strong> [[1,4],[2,3],[3,2],[4,1]]
  <strong>Explanation:</strong> The hidden formula for function_id = 1 is f(x, y) = x + y.
  The following positive integer values of x and y make f(x, y) equal to 5:
  x=1, y=4 -&gt; f(1, 4) = 1 + 4 = 5.
  x=2, y=3 -&gt; f(2, 3) = 2 + 3 = 5.
  x=3, y=2 -&gt; f(3, 2) = 3 + 2 = 5.
  x=4, y=1 -&gt; f(4, 1) = 4 + 1 = 5.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> function_id = 2, z = 5
  <strong>Output:</strong> [[1,5],[5,1]]
  <strong>Explanation:</strong> The hidden formula for function_id = 2 is f(x, y) = x * y.
  The following positive integer values of x and y make f(x, y) equal to 5:
  x=1, y=5 -&gt; f(1, 5) = 1 * 5 = 5.
  x=5, y=1 -&gt; f(5, 1) = 5 * 1 = 5.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= function_id <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= z <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that the solutions of f(x, y) == z will be in the range
1 <= x, y <= 1000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is also guaranteed that f(x, y) will fit in 32 bit signed integer if
1 <= x, y <= 1000.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
