* [[https://leetcode-cn.com/problems/array-transformation][1243.
数组变换]]
  :PROPERTIES:
  :CUSTOM_ID: 数组变换
  :END:
[[./solution/1200-1299/1243.Array Transformation/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

首先，给你一个初始数组
arr。然后，每天你都要根据前一天的数组生成一个新的数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

第 i 天所生成的数组，是由你对第 i-1 天的数组进行如下操作所得的：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

假如一个元素小于它的左右邻居，那么该元素自增 1。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

假如一个元素大于它的左右邻居，那么该元素自减 1。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

首、尾元素 永不 改变。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

过些时日，你会发现数组将会不再发生变化，请返回最终所得到的数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[6,2,3,4]
  <strong>输出：</strong>[6,3,3,4]
  <strong>解释：</strong>
  第一天，数组从 [6,2,3,4] 变为 [6,3,3,4]。
  无法再对该数组进行更多操作。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1,6,3,4,3,5]
  <strong>输出：</strong>[1,4,4,4,4,5]
  <strong>解释：</strong>
  第一天，数组从 [1,6,3,4,3,5] 变为 [1,5,4,3,4,5]。
  第二天，数组从 [1,5,4,3,4,5] 变为 [1,4,4,4,4,5]。
  无法再对该数组进行更多操作。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def transformArray(self, arr: List[int]) -> List[int]:
          copy = [e for e in arr]
          has_change, n = True, len(arr)
          while has_change:
              has_change = False
              for i in range(1, n - 1):
                  if arr[i] < copy[i - 1] and arr[i] < copy[i + 1]:
                      arr[i] += 1
                      has_change = True
                  elif arr[i] > copy[i - 1] and arr[i] > copy[i + 1]:
                      arr[i] -= 1
                      has_change = True
              copy = [e for e in arr]
          return arr
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public List<Integer> transformArray(int[] arr) {
          int n = arr.length;
          int[] copy = Arrays.copyOf(arr, n);
          boolean hasChange = true;
          while (hasChange) {
              hasChange = false;
              for (int i = 1; i < n - 1; ++i) {
                  if (arr[i] < copy[i - 1] && arr[i] < copy[i + 1]) {
                      ++arr[i];
                      hasChange = true;
                  } else if (arr[i] > copy[i - 1] && arr[i] > copy[i + 1]) {
                      --arr[i];
                      hasChange = true;
                  }
              }
              System.arraycopy(arr, 0, copy, 0, n);
          }
          List<Integer> res = new ArrayList<>();
          for (int e : arr) {
              res.add(e);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
