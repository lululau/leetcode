* [[https://leetcode.com/problems/maximum-candies-you-can-get-from-boxes][1298.
Maximum Candies You Can Get from Boxes]]
  :PROPERTIES:
  :CUSTOM_ID: maximum-candies-you-can-get-from-boxes
  :END:
[[./solution/1200-1299/1298.Maximum Candies You Can Get from Boxes/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given n boxes, each box is given in the format [status, candies, keys,
containedBoxes] where:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

status[i]: an integer which is 1 if box[i] is open and 0 if box[i] is
closed.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

candies[i]: an integer representing the number of candies in box[i].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

keys[i]: an array contains the indices of the boxes you can open with
the key in box[i].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

containedBoxes[i]: an array contains the indices of the boxes found in
box[i].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You will start with some boxes given in initialBoxes array. You can take
all the candies in any open box and you can use the keys in it to open
new boxes and you also can use the boxes you find in it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum number of candies you can get following the rules
above.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]

  <strong>Output:</strong> 16

  <strong>Explanation:</strong> You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you don&#39;t have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.

  In box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.

  Total number of candies collected = 7 + 4 + 5 = 16 candy.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]

  <strong>Output:</strong> 6

  <strong>Explanation:</strong> You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]

  <strong>Output:</strong> 1

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []

  <strong>Output:</strong> 0

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]

  <strong>Output:</strong> 7

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= status.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

status.length == candies.length == keys.length == containedBoxes.length
== n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

status[i] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= candies[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= keys[i].length <= status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= keys[i][j] < status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All values in keys[i] are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= containedBoxes[i].length <= status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= containedBoxes[i][j] < status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All values in containedBoxes[i] are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each box is contained in one box at most.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= initialBoxes.length <= status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= initialBoxes[i] < status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
