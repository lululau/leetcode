* [[https://leetcode-cn.com/problems/maximum-candies-you-can-get-from-boxes][1298.
你能从盒子里获得的最大糖果数]]
  :PROPERTIES:
  :CUSTOM_ID: 你能从盒子里获得的最大糖果数
  :END:
[[./solution/1200-1299/1298.Maximum Candies You Can Get from Boxes/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你 n 个盒子，每个盒子的格式为 [status, candies, keys,
containedBoxes] ，其中：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

状态字 status[i]：整数，如果 box[i] 是开的，那么是 1 ，否则是 0 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

糖果数 candies[i]: 整数，表示 box[i] 中糖果的数目。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

钥匙 keys[i]：数组，表示你打开 box[i] 后，可以得到一些盒子的钥匙，每个元素分别为该钥匙对应盒子的下标。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

内含的盒子 containedBoxes[i]：整数，表示放在 box[i] 里的盒子所对应的下标。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 initialBoxes
数组，表示你现在得到的盒子，你可以获得里面的糖果，也可以用盒子里的钥匙打开新的盒子，还可以继续探索从这个盒子里找到的其他盒子。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你按照上述规则，返回可以获得糖果的 最大数目 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]
  <strong>输出：</strong>16
  <strong>解释：
  </strong>一开始你有盒子 0 。你将获得它里面的 7 个糖果和盒子 1 和 2。
  盒子 1 目前状态是关闭的，而且你还没有对应它的钥匙。所以你将会打开盒子 2 ，并得到里面的 4 个糖果和盒子 1 的钥匙。
  在盒子 1 中，你会获得 5 个糖果和盒子 3 ，但是你没法获得盒子 3 的钥匙所以盒子 3 会保持关闭状态。
  你总共可以获得的糖果数目 = 7 + 4 + 5 = 16 个。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]
  <strong>输出：</strong>6
  <strong>解释：
  </strong>你一开始拥有盒子 0 。打开它你可以找到盒子 1,2,3,4,5 和它们对应的钥匙。
  打开这些盒子，你将获得所有盒子的糖果，所以总糖果数为 6 个。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]
  <strong>输出：</strong>7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= status.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

status.length == candies.length == keys.length == containedBoxes.length
== n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

status[i] 要么是 0 要么是 1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= candies[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= keys[i].length <= status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= keys[i][j] < status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

keys[i] 中的值都是互不相同的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= containedBoxes[i].length <= status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= containedBoxes[i][j] < status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

containedBoxes[i] 中的值都是互不相同的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个盒子最多被一个盒子包含。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= initialBoxes.length <= status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= initialBoxes[i] < status.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
