* [[https://leetcode-cn.com/problems/the-dining-philosophers][1226.
哲学家进餐]]
  :PROPERTIES:
  :CUSTOM_ID: 哲学家进餐
  :END:
[[./solution/1200-1299/1226.The Dining Philosophers/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

5
个沉默寡言的哲学家围坐在圆桌前，每人面前一盘意面。叉子放在哲学家之间的桌面上。（5
个哲学家，5 根叉子）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

所有的哲学家都只会在思考和进餐两种行为间交替。哲学家只有同时拿到左边和右边的叉子才能吃到面，而同一根叉子在同一时间只能被一个哲学家使用。每个哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面。只要条件允许，哲学家可以拿起左边或者右边的叉子，但在没有同时拿到左右叉子时不能进食。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设面的数量没有限制，哲学家也能随便吃，不需要考虑吃不吃得下。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

设计一个进餐规则（并行算法）使得每个哲学家都不会挨饿；也就是说，在没有人知道别人什么时候想吃东西或思考的情况下，每个哲学家都可以在吃饭和思考之间一直交替下去。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

问题描述和图片来自维基百科 wikipedia.org

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

哲学家从 0 到 4 按 顺时针 编号。请实现函数 void wantsToEat(philosopher,
pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

philosopher 哲学家的编号。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pickLeftFork 和 pickRightFork 表示拿起左边或右边的叉子。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

eat 表示吃面。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

putLeftFork 和 putRightFork 表示放下左边或右边的叉子。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

由于哲学家不是在吃面就是在想着啥时候吃面，所以思考这个方法没有对应的回调。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你 5
个线程，每个都代表一个哲学家，请你使用类的同一个对象来模拟这个过程。在最后一次调用结束之前，可能会为同一个哲学家多次调用该函数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 1
  <strong>输出：</strong>[[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]
  <strong>解释:</strong>
  n 表示每个哲学家需要进餐的次数。
  输出数组描述了叉子的控制和进餐的调用，它的格式如下：
  output[i] = [a, b, c] (3个整数)
  - a 哲学家编号。
  - b 指定叉子：{1 : 左边, 2 : 右边}.
  - c 指定行为：{1 : 拿起, 2 : 放下, 3 : 吃面}。
  如 [4,2,1] 表示 4 号哲学家拿起了右边的叉子。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 60

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class DiningPhilosophers {
  public:
      using Act = function<void()>;

      void wantsToEat(int philosopher, Act pickLeftFork, Act pickRightFork, Act eat, Act putLeftFork, Act putRightFork) {
          /* 这一题实际上是用到了C++17中的scoped_lock知识。
             作用是传入scoped_lock(mtx1, mtx2)两个锁，然后在作用范围内，依次顺序上锁mtx1和mtx2；然后在作用范围结束时，再反续解锁mtx2和mtx1。
             从而保证了philosopher1有动作的时候，philosopher2无法操作；但是philosopher3和philosopher4不受影响 */
          std::scoped_lock lock(mutexes_[philosopher], mutexes_[philosopher >= 4 ? 0 : philosopher + 1]);
          pickLeftFork();
          pickRightFork();
          eat();
          putLeftFork();
          putRightFork();
      }

  private:
      vector<mutex> mutexes_ = vector<mutex>(5);
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
