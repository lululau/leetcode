* [[https://leetcode-cn.com/problems/cells-with-odd-values-in-a-matrix][1252.
奇数值单元格的数目]]
  :PROPERTIES:
  :CUSTOM_ID: 奇数值单元格的数目
  :END:
[[./solution/1200-1299/1252.Cells with Odd Values in a Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 m x n 的矩阵，最开始的时候，每个单元格中的值都是 0。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

另有一个二维索引数组 indices，indices[i] = [ri, ci]
指向矩阵中的某个位置，其中 ri 和 ci 分别表示指定的行和列（从 0
开始编号）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对 indices[i] 所指向的每个位置，应同时执行下述增量操作：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

ri 行上的所有单元格，加 1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ci 列上的所有单元格，加 1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

给你 m、n 和 indices
。请你在执行完所有 indices 指定的增量操作后，返回矩阵中 奇数值单元格
的数目。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>m = 2, n = 3, indices = [[0,1],[1,1]]
  <strong>输出：</strong>6
  <strong>解释：</strong>最开始的矩阵是 [[0,0,0],[0,0,0]]。
  第一次增量操作后得到 [[1,2,1],[0,1,0]]。
  最后的矩阵是 [[1,3,1],[1,3,1]]，里面有 6 个奇数。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>m = 2, n = 2, indices = [[1,1],[0,0]]
  <strong>输出：</strong>0
  <strong>解释：</strong>最后的矩阵是 [[2,2],[2,2]]，里面没有奇数。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= indices.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ri < m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ci < n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：你可以设计一个时间复杂度为 O(n + m + indices.length) 且仅用 O(n +
m) 额外空间的算法来解决此问题吗？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
