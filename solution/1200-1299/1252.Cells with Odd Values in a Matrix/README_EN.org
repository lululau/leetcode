* [[https://leetcode.com/problems/cells-with-odd-values-in-a-matrix][1252.
Cells with Odd Values in a Matrix]]
  :PROPERTIES:
  :CUSTOM_ID: cells-with-odd-values-in-a-matrix
  :END:
[[./solution/1200-1299/1252.Cells with Odd Values in a Matrix/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is an m x n matrix that is initialized to all 0's. There is also a
2D array indices where each indices[i] = [ri, ci] represents a 0-indexed
location to perform some increment operations on the matrix.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For each location indices[i], do both of the following:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Increment all the cells on row ri.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Increment all the cells on column ci.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Given m, n, and indices, return the number of odd-valued cells in the
matrix after applying the increment to all locations in indices.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> m = 2, n = 3, indices = [[0,1],[1,1]]
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> Initial matrix = [[0,0,0],[0,0,0]].
  After applying first increment it becomes [[1,2,1],[0,1,0]].
  The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> m = 2, n = 2, indices = [[1,1],[0,0]]
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= indices.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ri < m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ci < n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you solve this in O(n + m + indices.length) time with
only O(n + m) extra space?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
