* [[https://leetcode-cn.com/problems/print-immutable-linked-list-in-reverse][1265.
逆序打印不可变链表]]
  :PROPERTIES:
  :CUSTOM_ID: 逆序打印不可变链表
  :END:
[[./solution/1200-1299/1265.Print Immutable Linked List in Reverse/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给您一个不可变的链表，使用下列接口逆序打印每个节点的值：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

ImmutableListNode: 描述不可变链表的接口，链表的头节点已给出。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

您需要使用以下函数来访问此链表（您 不能 直接访问 ImmutableListNode）：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

ImmutableListNode.printValue()：打印当前节点的值。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ImmutableListNode.getNext()：返回下一个节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

输入只用来内部初始化链表。您不可以通过修改链表解决问题。也就是说，您只能通过上述
API 来操作链表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

您是否可以：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

使用常数级空间复杂度解决问题？

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

使用线性级时间复杂度和低于线性级空间复杂度解决问题？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,2,3,4]
  <strong>输出：</strong>[4,3,2,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [0,-4,-1,3,-5]
  <strong>输出：</strong>[-5,3,-1,-4,0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [-2,0,6,4,4,-6]
  <strong>输出：</strong>[-6,4,4,6,0,-2]
  </pre>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

链表的长度在 [1, 1000] 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的值在 [-1000, 1000] 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
