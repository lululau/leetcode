* [[https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer][1290.
Convert Binary Number in a Linked List to Integer]]
  :PROPERTIES:
  :CUSTOM_ID: convert-binary-number-in-a-linked-list-to-integer
  :END:
[[./solution/1200-1299/1290.Convert Binary Number in a Linked List to Integer/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given head which is a reference node to a singly-linked list. The value
of each node in the linked list is either 0 or 1. The linked list holds
the binary representation of a number.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the decimal value of the number in the linked list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> head = [1,0,1]

  <strong>Output:</strong> 5

  <strong>Explanation:</strong> (101) in base 2 = (5) in base 10

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> head = [0]

  <strong>Output:</strong> 0

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> head = [1]

  <strong>Output:</strong> 1

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]

  <strong>Output:</strong> 18880

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> head = [0,0]

  <strong>Output:</strong> 0

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The Linked List is not empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Number of nodes will not exceed 30.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each node's value is either 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def getDecimalValue(self, head: ListNode) -> int:
          res = 0
          while head:
              res = (res << 1) + head.val
              head = head.next
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  class Solution {
      public int getDecimalValue(ListNode head) {
          int res = 0;
          while (head != null) {
              res = (res << 1) + head.val;
              head = head.next;
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val) {
   *     this.val = val;
   *     this.next = null;
   * }
   */
  /**
   * @param {ListNode} head
   * @return {number}
   */
  var getDecimalValue = function(head) {
      let res = 0;
      while (head != null) {
          res = (res << 1) + head.val;
          head = head.next;
      }
      return res;
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      int getDecimalValue(ListNode* head) {
          int res = 0;
          while (head != NULL) {
              res = (res << 1) + head->val;
              head = head->next;
          }
          return res;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
