* [[https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer][1290.
二进制链表转整数]]
  :PROPERTIES:
  :CUSTOM_ID: 二进制链表转整数
  :END:
[[./solution/1200-1299/1290.Convert Binary Number in a Linked List to Integer/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是
1。已知此链表是一个整数数字的二进制表示形式。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回该链表所表示数字的 十进制值 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1,0,1]
  <strong>输出：</strong>5
  <strong>解释：</strong>二进制数 (101) 转化为十进制数 (5)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [0]
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]
  <strong>输出：</strong>18880
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [0,0]
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

链表不为空。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

链表的结点总数不超过 30。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个结点的值不是 0 就是 1。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

遍历链表。

当遍历到链表某个结点，先将已有结果 res 乘以 2（即左移 1
位：=<< 1=），再加上当前结点的值，得出已遍历过的结点的十进制值。最后返回
res 即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def getDecimalValue(self, head: ListNode) -> int:
          res = 0
          while head:
              res = (res << 1) + head.val
              head = head.next
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  class Solution {
      public int getDecimalValue(ListNode head) {
          int res = 0;
          while (head != null) {
              res = (res << 1) + head.val;
              head = head.next;
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val) {
   *     this.val = val;
   *     this.next = null;
   * }
   */
  /**
   * @param {ListNode} head
   * @return {number}
   */
  var getDecimalValue = function (head) {
    let res = 0;
    while (head != null) {
      res = (res << 1) + head.val;
      head = head.next;
    }
    return res;
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      int getDecimalValue(ListNode* head) {
          int res = 0;
          while (head != NULL) {
              res = (res << 1) + head->val;
              head = head->next;
          }
          return res;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
