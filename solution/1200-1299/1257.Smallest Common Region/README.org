* [[https://leetcode-cn.com/problems/smallest-common-region][1257.
最小公共区域]]
  :PROPERTIES:
  :CUSTOM_ID: 最小公共区域
  :END:
[[./solution/1200-1299/1257.Smallest Common Region/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一些区域列表 regions
，每个列表的第一个区域都包含这个列表内所有其他区域。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

很自然地，如果区域 X 包含区域 Y ，那么区域 X  比区域 Y 大。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定两个区域 region1 和 region2 ，找到同时包含这两个区域的 最小 区域。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果区域列表中 r1 包含 r2 和 r3 ，那么数据保证 r2 不会包含 r3 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

数据同样保证最小公共区域一定存在。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：
  </strong>regions = [[&quot;Earth&quot;,&quot;North America&quot;,&quot;South America&quot;],
  [&quot;North America&quot;,&quot;United States&quot;,&quot;Canada&quot;],
  [&quot;United States&quot;,&quot;New York&quot;,&quot;Boston&quot;],
  [&quot;Canada&quot;,&quot;Ontario&quot;,&quot;Quebec&quot;],
  [&quot;South America&quot;,&quot;Brazil&quot;]],
  region1 = &quot;Quebec&quot;,
  region2 = &quot;New York&quot;
  <strong>输出：</strong>&quot;North America&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= regions.length <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

region1 != region2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有字符串只包含英文字母和空格，且最多只有 20 个字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
