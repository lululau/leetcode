* [[https://leetcode-cn.com/problems/maximum-score-words-formed-by-letters][1255.
得分最高的单词集合]]
  :PROPERTIES:
  :CUSTOM_ID: 得分最高的单词集合
  :END:
[[./solution/1200-1299/1255.Maximum Score Words Formed by Letters/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你将会得到一份单词表 words，一个字母表 letters （可能会有重复字母），以及每个字母对应的得分情况表 score。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你帮忙计算玩家在单词拼写游戏中所能获得的「最高得分」：能够由 letters 里的字母拼写出的 任意 属于
words 单词子集中，分数最高的单词集合的得分。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

单词拼写游戏的规则概述如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

玩家需要用字母表 letters 里的字母来拼写单词表 words 中的单词。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

可以只使用字母表 letters 中的部分字母，但是每个字母最多被使用一次。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

单词表 words 中每个单词只能计分（使用）一次。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

根据字母得分情况表score，字母 'a', 'b', 'c', ... , 'z' 对应的得分分别为
score[0], score[1], ..., score[25]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

本场游戏的「得分」是指：玩家所拼写出的单词集合里包含的所有字母的得分之和。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>words = [&quot;dog&quot;,&quot;cat&quot;,&quot;dad&quot;,&quot;good&quot;], letters = [&quot;a&quot;,&quot;a&quot;,&quot;c&quot;,&quot;d&quot;,&quot;d&quot;,&quot;d&quot;,&quot;g&quot;,&quot;o&quot;,&quot;o&quot;], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
  <strong>输出：</strong>23
  <strong>解释：</strong>
  字母得分为  a=1, c=9, d=5, g=3, o=2
  使用给定的字母表 letters，我们可以拼写单词 &quot;dad&quot; (5+1+5)和 &quot;good&quot; (3+2+2+5)，得分为 23 。
  而单词 &quot;dad&quot; 和 &quot;dog&quot; 只能得到 21 分。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>words = [&quot;xxxz&quot;,&quot;ax&quot;,&quot;bx&quot;,&quot;cx&quot;], letters = [&quot;z&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;x&quot;,&quot;x&quot;,&quot;x&quot;], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
  <strong>输出：</strong>27
  <strong>解释：</strong>
  字母得分为  a=4, b=4, c=4, x=5, z=10
  使用给定的字母表 letters，我们可以组成单词 &quot;ax&quot; (4+5)， &quot;bx&quot; (4+5) 和 &quot;cx&quot; (4+5) ，总得分为 27 。
  单词 &quot;xxxz&quot; 的得分仅为 25 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>words = [&quot;leetcode&quot;], letters = [&quot;l&quot;,&quot;e&quot;,&quot;t&quot;,&quot;c&quot;,&quot;o&quot;,&quot;d&quot;], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
  <strong>输出：</strong>0
  <strong>解释：</strong>
  字母 &quot;e&quot; 在字母表 letters 中只出现了一次，所以无法组成单词表 words 中的单词。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words.length <= 14

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words[i].length <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= letters.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

letters[i].length == 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

score.length == 26

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= score[i] <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

words[i] 和 letters[i] 只包含小写的英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
