* [[https://leetcode-cn.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix][1284.
转化为全零矩阵的最少反转次数]]
  :PROPERTIES:
  :CUSTOM_ID: 转化为全零矩阵的最少反转次数
  :END:
[[./solution/1200-1299/1284.Minimum Number of Flips to Convert Binary Matrix to Zero Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 m x n 的二进制矩阵 mat。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每一步，你可以选择一个单元格并将它反转（反转表示 0 变 1 ，1 变 0
）。如果存在和它相邻的单元格，那么这些相邻的单元格也会被反转。（注：相邻的两个单元格共享同一条边。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回将矩阵 mat
转化为全零矩阵的最少反转次数，如果无法转化为全零矩阵，请返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

二进制矩阵的每一个格子要么是 0 要么是 1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

全零矩阵是所有格子都为 0 的矩阵。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>mat = [[0,0],[0,1]]
  <strong>输出：</strong>3
  <strong>解释：</strong>一个可能的解是反转 (1, 0)，然后 (0, 1) ，最后是 (1, 1) 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>mat = [[0]]
  <strong>输出：</strong>0
  <strong>解释：</strong>给出的矩阵是全零矩阵，所以你不需要改变它。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>mat = [[1,1,1],[1,0,1],[0,0,0]]
  <strong>输出：</strong>6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>mat = [[1,0,0],[1,0,0]]
  <strong>输出：</strong>-1
  <strong>解释：</strong>该矩阵无法转变成全零矩阵
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == mat.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == mat[0].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

mat[i][j] 是 0 或 1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
