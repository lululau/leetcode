* [[https://leetcode-cn.com/problems/design-skiplist][1206. 设计跳表]]
  :PROPERTIES:
  :CUSTOM_ID: 设计跳表
  :END:
[[./solution/1200-1299/1206.Design Skiplist/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

不使用任何库函数，设计一个跳表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

跳表是在 O(log(n))
时间内完成增加、删除、搜索操作的数据结构。跳表相比于树堆与红黑树，其功能与性能相当，并且跳表的代码长度相较下更短，其设计思想与链表相似。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，一个跳表包含 [30, 40, 50, 60, 70, 90]，然后增加 80、45
到跳表中，以下图的方式操作：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

跳表中有很多层，每一层是一个短的链表。在第一层的作用下，增加、删除和搜索操作的时间复杂度不超过
O(n)。跳表的每一个操作的平均时间复杂度是 O(log(n))，空间复杂度是 O(n)。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在本题中，你的设计应该要包含这些函数：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

bool search(int target) : 返回target是否存在于跳表中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void add(int num): 插入一个元素到跳表。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool erase(int num): 在跳表中删除一个值，如果 num 不存在，直接返回false.
如果存在多个 num ，删除其中任意一个即可。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

了解更多 : https://en.wikipedia.org/wiki/Skip_list

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意，跳表中可能存在多个相同的值，你的代码需要处理这种情况。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

样例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>Skiplist skiplist = new Skiplist();

  skiplist.add(1);
  skiplist.add(2);
  skiplist.add(3);
  skiplist.search(0);   // 返回 false
  skiplist.add(4);
  skiplist.search(1);   // 返回 true
  skiplist.erase(0);    // 返回 false，0 不在跳表中
  skiplist.erase(1);    // 返回 true
  skiplist.search(1);   // 返回 false，1 已被擦除
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

约束条件:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= num, target <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 50000 次 search, add, 以及 erase操作。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
