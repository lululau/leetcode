* [[https://leetcode.com/problems/design-skiplist][1206. Design
Skiplist]]
  :PROPERTIES:
  :CUSTOM_ID: design-skiplist
  :END:
[[./solution/1200-1299/1206.Design Skiplist/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a Skiplist without using any built-in libraries.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A Skiplist is a data structure that takes O(log(n)) time to add, erase
and search. Comparing with treap and red-black tree which has the same
function and performance, the code length of Skiplist can
be comparatively short and the idea behind Skiplists are just simple
linked lists.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example: we have a Skiplist containing [30,40,50,60,70,90] and we
want to add 80 and 45 into it. The Skiplist works this way:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You can see there are many layers in the Skiplist. Each layer is a
sorted linked list. With the help of the top layers, add , erase and
search can be faster than O(n). It can be proven that the average time
complexity for each operation is O(log(n)) and space complexity is O(n).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

To be specific, your design should include these functions:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

bool search(int target) : Return whether the target exists in the
Skiplist or not.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void add(int num): Insert a value into the SkipList. 

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool erase(int num): Remove a value in the Skiplist. If num does not
exist in the Skiplist, do nothing and return false. If there exists
multiple num values, removing any one of them is fine.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

See more about Skiplist : https://en.wikipedia.org/wiki/Skip_list

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that duplicates may exist in the Skiplist, your code needs to
handle this situation.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  Skiplist skiplist = new Skiplist();



  skiplist.add(1);

  skiplist.add(2);

  skiplist.add(3);

  skiplist.search(0);   // return false.

  skiplist.add(4);

  skiplist.search(1);   // return true.

  skiplist.erase(0);    // return false, 0 is not in skiplist.

  skiplist.erase(1);    // return true.

  skiplist.search(1);   // return false, 1 has already been erased.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= num, target <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 50000 calls will be made to search, add, and erase.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
