* [[https://leetcode-cn.com/problems/find-elements-in-a-contaminated-binary-tree][1261.
在受污染的二叉树中查找元素]]
  :PROPERTIES:
  :CUSTOM_ID: 在受污染的二叉树中查找元素
  :END:
[[./solution/1200-1299/1261.Find Elements in a Contaminated Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给出一个满足下述规则的二叉树：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

root.val == 0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 treeNode.val == x 且 treeNode.left != null，那么 treeNode.left.val
== 2 * x + 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 treeNode.val == x 且 treeNode.right !=
null，那么 treeNode.right.val == 2 * x + 2

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

现在这个二叉树受到「污染」，所有的 treeNode.val 都变成了 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你先还原二叉树，然后实现 FindElements 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

FindElements(TreeNode*
root) 用受污染的二叉树初始化对象，你需要先把它还原。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool find(int
target) 判断目标值 target 是否存在于还原后的二叉树中并返回结果。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  [&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;]
  [[[-1,null,-1]],[1],[2]]
  <strong>输出：</strong>
  [null,false,true]
  <strong>解释：</strong>
  FindElements findElements = new FindElements([-1,null,-1]); 
  findElements.find(1); // return False 
  findElements.find(2); // return True </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  [&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]
  [[[-1,-1,-1,-1,-1]],[1],[3],[5]]
  <strong>输出：</strong>
  [null,true,true,false]
  <strong>解释：</strong>
  FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);
  findElements.find(1); // return True
  findElements.find(3); // return True
  findElements.find(5); // return False</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  [&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]
  [[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
  <strong>输出：</strong>
  [null,true,false,false,true]
  <strong>解释：</strong>
  FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);
  findElements.find(2); // return True
  findElements.find(3); // return False
  findElements.find(4); // return False
  findElements.find(5); // return True
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

TreeNode.val == -1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

二叉树的高度不超过 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

节点的总数在 [1, 10^4] 之间

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

调用 find() 的总次数在 [1, 10^4] 之间

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= target <= 10^6

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
