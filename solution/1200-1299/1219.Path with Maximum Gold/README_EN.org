* [[https://leetcode.com/problems/path-with-maximum-gold][1219. Path
with Maximum Gold]]
  :PROPERTIES:
  :CUSTOM_ID: path-with-maximum-gold
  :END:
[[./solution/1200-1299/1219.Path with Maximum Gold/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In a gold mine grid of size m x n, each cell in this mine has an integer
representing the amount of gold in that cell, 0 if it is empty.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum amount of gold you can collect under the conditions:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Every time you are located in a cell you will collect all the gold in
that cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

From your position, you can walk one step to the left, right, up, or
down.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

You can't visit the same cell more than once.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Never visit a cell with 0 gold.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

You can start and stop collecting gold from any position in the grid
that has some gold.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[0,6,0],[5,8,7],[0,9,0]]
  <strong>Output:</strong> 24
  <strong>Explanation:</strong>
  [[0,6,0],
   [5,8,7],
   [0,9,0]]
  Path to get the maximum gold, 9 -&gt; 8 -&gt; 7.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
  <strong>Output:</strong> 28
  <strong>Explanation:</strong>
  [[1,0,7],
   [2,0,6],
   [3,4,5],
   [0,3,0],
   [9,0,20]]
  Path to get the maximum gold, 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= grid[i][j] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are at most 25 cells containing gold.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
