* [[https://leetcode-cn.com/problems/dice-roll-simulation][1223.
掷骰子模拟]]
  :PROPERTIES:
  :CUSTOM_ID: 掷骰子模拟
  :END:
[[./solution/1200-1299/1223.Dice Roll Simulation/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有一个骰子模拟器会每次投掷的时候生成一个 1 到 6 的随机数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

不过我们在使用它时有个约束，就是使得投掷骰子时，连续
掷出数字 i 的次数不能超过 rollMax[i]（i 从 1 开始编号）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

现在，给你一个整数数组 rollMax 和一个整数 n，请你来计算掷 n 次骰子可得到的不同点数序列的数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假如两个序列中至少存在一个元素不同，就认为这两个序列是不同的。由于答案可能很大，所以请返回
模 10^9 + 7 之后的结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 2, rollMax = [1,1,2,2,2,3]
  <strong>输出：</strong>34
  <strong>解释：</strong>我们掷 2 次骰子，如果没有约束的话，共有 6 * 6 = 36 种可能的组合。但是根据 rollMax 数组，数字 1 和 2 最多连续出现一次，所以不会出现序列 (1,1) 和 (2,2)。因此，最终答案是 36-2 = 34。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 2, rollMax = [1,1,1,1,1,1]
  <strong>输出：</strong>30
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, rollMax = [1,1,1,2,2,3]
  <strong>输出：</strong>181
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

rollMax.length == 6

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rollMax[i] <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
