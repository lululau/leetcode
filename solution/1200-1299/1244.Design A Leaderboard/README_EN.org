* [[https://leetcode.com/problems/design-a-leaderboard][1244. Design A
Leaderboard]]
  :PROPERTIES:
  :CUSTOM_ID: design-a-leaderboard
  :END:
[[./solution/1200-1299/1244.Design A Leaderboard/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a Leaderboard class, which has 3 functions:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

addScore(playerId, score): Update the leaderboard by adding score to the
given player's score. If there is no player with such id in the
leaderboard, add him to the leaderboard with the given score.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

top(K): Return the score sum of the top K players.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

reset(playerId): Reset the score of the player with the given id to 0
(in other words erase it from the leaderboard). It is guaranteed that
the player was added to the leaderboard before calling this function.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Initially, the leaderboard is empty.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>Input: </b>
  [&quot;Leaderboard&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;top&quot;,&quot;reset&quot;,&quot;reset&quot;,&quot;addScore&quot;,&quot;top&quot;]
  [[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]
  <b>Output: </b>
  [null,null,null,null,null,null,73,null,null,null,141]

  <b>Explanation: </b>
  Leaderboard leaderboard = new Leaderboard ();
  leaderboard.addScore(1,73);   // leaderboard = [[1,73]];
  leaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];
  leaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];
  leaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];
  leaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];
  leaderboard.top(1);           // returns 73;
  leaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];
  leaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];
  leaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];
  leaderboard.top(3);           // returns 141 = 51 + 51 + 39;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= playerId, K <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It's guaranteed that K is less than or equal to the current number of
players.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= score <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There will be at most 1000 function calls.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Leaderboard:

      def __init__(self):
          self.player_scores = {}

      def addScore(self, playerId: int, score: int) -> None:
          self.player_scores[playerId] = self.player_scores.get(playerId, 0) + score

      def top(self, K: int) -> int:
          scores = sorted(list(self.player_scores.values()), reverse=True)
          return sum(scores[:K])

      def reset(self, playerId: int) -> None:
          self.player_scores[playerId] = 0


  # Your Leaderboard object will be instantiated and called as such:
  # obj = Leaderboard()
  # obj.addScore(playerId,score)
  # param_2 = obj.top(K)
  # obj.reset(playerId)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Leaderboard {
      private Map<Integer, Integer> playerScores;

      public Leaderboard() {
          playerScores = new HashMap<>();
      }
      
      public void addScore(int playerId, int score) {
          playerScores.put(playerId, playerScores.getOrDefault(playerId, 0) + score);
      }
      
      public int top(int K) {
          List<Integer> scores = new ArrayList<>(playerScores.values());
          Collections.sort(scores, Collections.reverseOrder());
          int res = 0;
          for (int i = 0; i < K; ++i) {
              res += scores.get(i);
          }
          return res;
      }
      
      public void reset(int playerId) {
          playerScores.put(playerId, 0);
      }
  }

  /**
   * Your Leaderboard object will be instantiated and called as such:
   * Leaderboard obj = new Leaderboard();
   * obj.addScore(playerId,score);
   * int param_2 = obj.top(K);
   * obj.reset(playerId);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
