* [[https://leetcode-cn.com/problems/traffic-light-controlled-intersection][1279.
红绿灯路口]]
  :PROPERTIES:
  :CUSTOM_ID: 红绿灯路口
  :END:
[[./solution/1200-1299/1279.Traffic Light Controlled Intersection/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

这是两条路的交叉路口。第一条路是 A 路，车辆可沿 1
号方向由北向南行驶，也可沿 2 号方向由南向北行驶。第二条路是 B
路，车辆可沿 3 号方向由西向东行驶，也可沿 4 号方向由东向西行驶。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每条路在路口前都有一个红绿灯。红绿灯可以亮起红灯或绿灯。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

绿灯表示两个方向的车辆都可通过路口。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

红灯表示两个方向的车辆都不可以通过路口，必须等待绿灯亮起。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

两条路上的红绿灯不可以同时为绿灯。这意味着，当 A 路上的绿灯亮起时，B
路上的红灯会亮起；当 B 路上的绿灯亮起时，A 路上的红灯会亮起.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

开始时，A 路上的绿灯亮起，B
路上的红灯亮起。当一条路上的绿灯亮起时，所有车辆都可以从任意两个方向通过路口，直到另一条路上的绿灯亮起。不同路上的车辆不可以同时通过路口。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给这个路口设计一个没有死锁的红绿灯控制系统。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现函数 void carArrived(carId, roadId, direction, turnGreen,
crossCar) :

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

carId 为到达车辆的编号。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

roadId 为车辆所在道路的编号。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

direction 为车辆的行进方向。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

turnGreen 是一个函数，调用此函数会使当前道路上的绿灯亮起。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

crossCar 是一个函数，调用此函数会允许车辆通过路口。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

当你的答案避免了车辆在路口出现死锁，此答案会被认定为正确的。当路口已经亮起绿灯时仍打开绿灯，此答案会被认定为错误的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> cars = [1,3,5,2,4], directions = [2,1,2,4,3], arrivalTimes = [10,20,30,40,50]
  <strong>输出:</strong> [
  &quot;Car 1 Has Passed Road A In Direction 2&quot;,    // A 路上的红绿灯为绿色，1 号车可通过路口。
  &quot;Car 3 Has Passed Road A In Direction 1&quot;,    // 红绿灯仍为绿色，3 号车通过路口。
  &quot;Car 5 Has Passed Road A In Direction 2&quot;,    // 红绿灯仍为绿色，5 号车通过路口。
  &quot;Traffic Light On Road B Is Green&quot;,          // 2 号车在 B 路请求绿灯。
  &quot;Car 2 Has Passed Road B In Direction 4&quot;,    // B 路上的绿灯现已亮起，2 号车通过路口。
  &quot;Car 4 Has Passed Road B In Direction 3&quot;     // 红绿灯仍为绿色，4 号车通过路口。
  ]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> cars = [1,2,3,4,5], directions = [2,4,3,3,1], arrivalTimes = [10,20,30,40,40]
  <strong>输出:</strong> [
  &quot;Car 1 Has Passed Road A In Direction 2&quot;,    // A 路上的红绿灯为绿色，1 号车可通过路口。
  &quot;Traffic Light On Road B Is Green&quot;,          // 2 号车在 B 路请求绿灯。
  &quot;Car 2 Has Passed Road B In Direction 4&quot;,    // B 路上的绿灯现已亮起，2 号车通过路口。
  &quot;Car 3 Has Passed Road B In Direction 3&quot;,    // B 路上的绿灯现已亮起，3 号车通过路口。
  &quot;Traffic Light On Road A Is Green&quot;,          // 5 号车在 A 路请求绿灯。
  &quot;Car 5 Has Passed Road A In Direction 1&quot;,    // A 路上的绿灯现已亮起，5 号车通过路口。
  &quot;Traffic Light On Road B Is Green&quot;,          // 4 号车在 B 路请求绿灯。4 号车在路口等灯，直到 5 号车通过路口，B 路的绿灯亮起。
  &quot;Car 4 Has Passed Road B In Direction 3&quot;     // B 路上的绿灯现已亮起，4 号车通过路口。
  ]
  <strong>解释:</strong> 这是一个无死锁的方案。注意，在 A 路上的绿灯亮起、5 号车通过前让 4 号车通过，也是一个<strong>正确</strong>且<strong>可</strong><strong>被接受</strong>的方案。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= cars.length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

cars.length = directions.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

cars.length = arrivalTimes.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

cars 中的所有值都是唯一的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= directions[i] <= 4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arrivalTimes 是非递减的。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *SQL*
    :PROPERTIES:
    :CUSTOM_ID: sql
    :END:
#+begin_src sql
#+end_src

#+begin_html
  <!-- tabs:end -->
#+end_html
