* [[https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination][1293.
Shortest Path in a Grid with Obstacles Elimination]]
  :PROPERTIES:
  :CUSTOM_ID: shortest-path-in-a-grid-with-obstacles-elimination
  :END:
[[./solution/1200-1299/1293.Shortest Path in a Grid with Obstacles Elimination/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a m * n grid, where each cell is either 0 (empty) or 1
(obstacle). In one step, you can move up, down, left or right from and
to an empty cell.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum number of steps to walk from the upper left
corner (0, 0) to the lower right corner (m-1, n-1) given that you can
eliminate at most k obstacles. If it is not possible to find such walk
return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> 
  grid = 
  [[0,0,0],
  &nbsp;[1,1,0],
   [0,0,0],
  &nbsp;[0,1,1],
   [0,0,0]], 
  k = 1
  <strong>Output:</strong> 6
  <strong>Explanation: 
  </strong>The shortest path without eliminating any obstacle is 10.&nbsp;
  The shortest path with one obstacle elimination at position (3,2) is 6. Such path is <code>(0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2)</code>.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> 
  grid = 
  [[0,1,1],
  &nbsp;[1,1,1],
  &nbsp;[1,0,0]], 
  k = 1
  <strong>Output:</strong> -1
  <strong>Explanation: 
  </strong>We need to eliminate at least two obstacles to find such a walk.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

grid.length == m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[0].length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 40

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= m*n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] == 0 or 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[0][0] == grid[m-1][n-1] == 0

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
