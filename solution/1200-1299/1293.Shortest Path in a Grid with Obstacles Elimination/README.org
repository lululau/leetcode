* [[https://leetcode-cn.com/problems/shortest-path-in-a-grid-with-obstacles-elimination][1293.
网格中的最短路径]]
  :PROPERTIES:
  :CUSTOM_ID: 网格中的最短路径
  :END:
[[./solution/1200-1299/1293.Shortest Path in a Grid with Obstacles Elimination/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 m *
n 的网格，其中每个单元格不是 0（空）就是 1（障碍物）。每一步，您都可以在空白单元格中上、下、左、右移动。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果您 最多 可以消除 k 个障碍物，请找出从左上角 (0, 0) 到右下角 (m-1,
n-1)
的最短路径，并返回通过该路径所需的步数。如果找不到这样的路径，则返回
-1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong> 
  grid = 
  [[0,0,0],
  &nbsp;[1,1,0],
   [0,0,0],
  &nbsp;[0,1,1],
   [0,0,0]], 
  k = 1
  <strong>输出：</strong>6
  <strong>解释：
  </strong>不消除任何障碍的最短路径是 10。
  消除位置 (3,2) 处的障碍后，最短路径是 6 。该路径是 <code>(0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2)</code>.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  grid = 
  [[0,1,1],
  &nbsp;[1,1,1],
  &nbsp;[1,0,0]], 
  k = 1
  <strong>输出：</strong>-1
  <strong>解释：
  </strong>我们至少需要消除两个障碍才能找到这样的路径。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

grid.length == m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[0].length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 40

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= m*n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] == 0 or 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[0][0] == grid[m-1][n-1] == 0

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
