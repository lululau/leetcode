* [[https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game][1275.
Find Winner on a Tic Tac Toe Game]]
  :PROPERTIES:
  :CUSTOM_ID: find-winner-on-a-tic-tac-toe-game
  :END:
[[./solution/1200-1299/1275.Find Winner on a Tic Tac Toe Game/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Tic-tac-toe is played by two players A and B on a 3 x 3 grid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Here are the rules of Tic-Tac-Toe:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Players take turns placing characters into empty squares (" ").

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The first player A always places "X" characters, while the second player
B always places "O" characters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"X" and "O" characters are always placed into empty squares, never on
filled ones.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The game ends when there are 3 of the same (non-empty) character filling
any row, column, or diagonal.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The game also ends if all squares are non-empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

No more moves can be played if the game is over.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Given an array moves where each element is another array of size 2
corresponding to the row and column of the grid where they mark their
respective character in the order in which A and B play.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the winner of the game if it exists (A or B), in case the game
ends in a draw return "Draw", if there are still movements to play
return "Pending".

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You can assume that moves is valid (It follows the rules of
Tic-Tac-Toe), the grid is initially empty and A will play first.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]

  <strong>Output:</strong> &quot;A&quot;

  <strong>Explanation:</strong> &quot;A&quot; wins, he always plays first.

  &quot;X  &quot;    &quot;X  &quot;    &quot;X  &quot;    &quot;X  &quot;    &quot;<strong>X</strong>  &quot;

  &quot;   &quot; -&gt; &quot;   &quot; -&gt; &quot; X &quot; -&gt; &quot; X &quot; -&gt; &quot; <strong>X</strong> &quot;

  &quot;   &quot;    &quot;O  &quot;    &quot;O  &quot;    &quot;OO &quot;    &quot;OO<strong>X</strong>&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]

  <strong>Output:</strong> &quot;B&quot;

  <strong>Explanation:</strong> &quot;B&quot; wins.

  &quot;X  &quot;    &quot;X  &quot;    &quot;XX &quot;    &quot;XXO&quot;    &quot;XXO&quot;    &quot;XX<strong>O</strong>&quot;

  &quot;   &quot; -&gt; &quot; O &quot; -&gt; &quot; O &quot; -&gt; &quot; O &quot; -&gt; &quot;XO &quot; -&gt; &quot;X<strong>O</strong> &quot; 

  &quot;   &quot;    &quot;   &quot;    &quot;   &quot;    &quot;   &quot;    &quot;   &quot;    &quot;<strong>O</strong>  &quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]

  <strong>Output:</strong> &quot;Draw&quot;

  <strong>Explanation:</strong> The game ends in a draw since there are no moves to make.

  &quot;XXO&quot;

  &quot;OOX&quot;

  &quot;XOX&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> moves = [[0,0],[1,1]]

  <strong>Output:</strong> &quot;Pending&quot;

  <strong>Explanation:</strong> The game has not finished yet.

  &quot;X  &quot;

  &quot; O &quot;

  &quot;   &quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= moves.length <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

moves[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= moves[i][j] <= 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are no repeated elements on moves.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

moves follow the rules of tic tac toe.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def tictactoe(self, moves: List[List[int]]) -> str:
          n = len(moves)
          counter = [0] * 8
          for i in range(n - 1, -1, -2):
              row, col = moves[i][0], moves[i][1]
              counter[row] += 1
              counter[col + 3] += 1
              if row == col:
                  counter[6] += 1
              if row + col == 2:
                  counter[7] += 1
              if counter[row] == 3 or counter[col + 3] == 3 or counter[6] == 3 or counter[7] == 3:
                  return "A" if (i % 2) == 0 else "B"
          return "Draw" if n == 9 else "Pending"
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public String tictactoe(int[][] moves) {
          int n = moves.length;
          int[] counter = new int[8];
          for (int i = n - 1; i >= 0; i -= 2) {
              int row = moves[i][0], col = moves[i][1];
              ++counter[row];
              ++counter[col + 3];
              if (row == col) ++counter[6];
              if (row + col == 2) ++counter[7];
              if (counter[row] == 3 || counter[col + 3] == 3 || counter[6] == 3 || counter[7] == 3) {
                  return (i % 2) == 0 ? "A" : "B";
              }
          }
          return n == 9 ? "Draw" : "Pending";
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      string tictactoe(vector<vector<int>>& moves) {
          int n = moves.size();
          vector<int> counter(8, 0);
          for (int i = n - 1; i >= 0; i -= 2) {
              int row = moves[i][0], col = moves[i][1];
              ++counter[row];
              ++counter[col + 3];
              if (row == col) ++counter[6];
              if (row + col == 2) ++counter[7];
              if (counter[row] == 3 || counter[col + 3] == 3 || counter[6] == 3 || counter[7] == 3) {
                  return (i % 2 == 0) ? "A" : "B";
              }
          }
          return n == 9 ? "Draw" : "Pending";
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
