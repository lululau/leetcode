* [[https://leetcode-cn.com/problems/iterator-for-combination][1286.
字母组合迭代器]]
  :PROPERTIES:
  :CUSTOM_ID: 字母组合迭代器
  :END:
[[./solution/1200-1299/1286.Iterator for Combination/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

请你设计一个迭代器类，包括以下内容：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

一个构造函数，输入参数包括：一个 有序且字符唯一 的字符串 characters（该字符串只包含小写英文字母）和一个数字 combinationLength 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

函数 next() ，按 字典序 返回长度为 combinationLength 的下一个字母组合。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

函数 hasNext() ，只有存在长度为 combinationLength
的下一个字母组合时，才返回 True；否则，返回 False。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>CombinationIterator iterator = new CombinationIterator(&quot;abc&quot;, 2); // 创建迭代器 iterator

  iterator.next(); // 返回 &quot;ab&quot;
  iterator.hasNext(); // 返回 true
  iterator.next(); // 返回 &quot;ac&quot;
  iterator.hasNext(); // 返回 true
  iterator.next(); // 返回 &quot;bc&quot;
  iterator.hasNext(); // 返回 false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= combinationLength <= characters.length <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每组测试数据最多包含 10^4 次函数调用。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目保证每次调用函数 next 时都存在下一个字母组合。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
