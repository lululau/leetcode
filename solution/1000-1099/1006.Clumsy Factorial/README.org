* [[https://leetcode-cn.com/problems/clumsy-factorial][1006. 笨阶乘]]
  :PROPERTIES:
  :CUSTOM_ID: 笨阶乘
  :END:
[[./solution/1000-1099/1006.Clumsy Factorial/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

通常，正整数 n 的阶乘是所有小于或等于 n
的正整数的乘积。例如，factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2
* 1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

相反，我们设计了一个笨阶乘
clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 *
1。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

另外，我们使用的除法是地板除法（floor division），所以 10 * 9 /
8 等于 11。这保证结果是一个整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>4
  <strong>输出：</strong>7
  <strong>解释：</strong>7 = 4 * 3 / 2 + 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>10
  <strong>输出：</strong>12
  <strong>解释：</strong>12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-2^31 <= answer <= 2^31 - 1  （答案保证符合 32 位整数。）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

遇到 =*=、=/= 时计算后入栈，遇到 =+=、=-=
时直接入栈。最后累加栈中的元素即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def clumsy(self, N: int) -> int:
          op = 0
          s = [N]
          for i in range(N - 1, 0, -1):
              if op == 0:
                  s.append(s.pop() * i)
              elif op == 1:
                  s.append(int(s.pop() / i))
              elif op == 2:
                  s.append(i)
              else:
                  s.append(-i)
              op = (op + 1) % 4
          return sum(s)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int clumsy(int N) {
          Deque<Integer> s = new ArrayDeque<>();
          s.offerLast(N);
          int op = 0;
          for (int i = N - 1; i > 0; --i) {
              if (op == 0) {
                  s.offerLast(s.pollLast() * i);
              } else if (op == 1) {
                  s.offerLast(s.pollLast() / i);
              } else if (op == 2) {
                  s.offerLast(i);
              } else {
                  s.offerLast(-i);
              }
              op = (op + 1) % 4;
          }
          int res = 0;
          while (!s.isEmpty()) {
              res += s.pollLast();
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html

#+begin_html
  <!-- tabs:end -->
#+end_html
