* [[https://leetcode.com/problems/check-if-word-is-valid-after-substitutions][1003.
Check If Word Is Valid After Substitutions]]
  :PROPERTIES:
  :CUSTOM_ID: check-if-word-is-valid-after-substitutions
  :END:
[[./solution/1000-1099/1003.Check If Word Is Valid After Substitutions/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s, determine if it is valid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A string s is valid if, starting with an empty string t = "", you can
transform t into s after performing the following operation any number
of times:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Insert string "abc" into any position in t. More formally, t becomes
tleft + "abc" + tright, where t == tleft + tright. Note that tleft and
tright may be empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return true if s is a valid string, otherwise, return false.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;aabcbc&quot;
  <strong>Output:</strong> true
  <strong>Explanation:</strong>
  &quot;&quot; -&gt; &quot;<u>abc</u>&quot; -&gt; &quot;a<u>abc</u>bc&quot;
  Thus, &quot;aabcbc&quot; is valid.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;abcabcababcc&quot;
  <strong>Output:</strong> true
  <strong>Explanation:</strong>
  &quot;&quot; -&gt; &quot;<u>abc</u>&quot; -&gt; &quot;abc<u>abc</u>&quot; -&gt; &quot;abcabc<u>abc</u>&quot; -&gt; &quot;abcabcab<u>abc</u>c&quot;
  Thus, &quot;abcabcababcc&quot; is valid.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;abccba&quot;
  <strong>Output:</strong> false
  <strong>Explanation:</strong> It is impossible to get &quot;abccba&quot; using the operation.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;cababc&quot;
  <strong>Output:</strong> false
  <strong>Explanation:</strong> It is impossible to get &quot;cababc&quot; using the operation.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 2 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consists of letters 'a', 'b', and 'c'

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html

#+begin_html
  <!-- tabs:end -->
#+end_html
