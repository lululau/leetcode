* [[https://leetcode-cn.com/problems/matrix-cells-in-distance-order][1030.
距离顺序排列矩阵单元格]]
  :PROPERTIES:
  :CUSTOM_ID: 距离顺序排列矩阵单元格
  :END:
[[./solution/1000-1099/1030.Matrix Cells in Distance Order/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 <= r < R
且 0 <= c < C。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

另外，我们在该矩阵中给出了一个坐标为 (r0, c0) 的单元格。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回矩阵中的所有单元格的坐标，并按到 (r0, c0)
的距离从最小到最大的顺序排，其中，两单元格(r1, c1) 和 (r2, c2)
之间的距离是曼哈顿距离，|r1 - r2| + |c1 -
c2|。（你可以按任何满足此条件的顺序返回答案。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>R = 1, C = 2, r0 = 0, c0 = 0
  <strong>输出：</strong>[[0,0],[0,1]]
  <strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>R = 2, C = 2, r0 = 0, c0 = 1
  <strong>输出：</strong>[[0,1],[0,0],[1,1],[1,0]]
  <strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2]
  [[0,1],[1,1],[0,0],[1,0]] 也会被视作正确答案。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>R = 2, C = 3, r0 = 1, c0 = 2
  <strong>输出：</strong>[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
  <strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2,2,3]
  其他满足题目要求的答案也会被视为正确，例如 [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= R <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= C <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= r0 < R

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= c0 < C

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
