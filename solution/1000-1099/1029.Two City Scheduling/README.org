* [[https://leetcode-cn.com/problems/two-city-scheduling][1029.
两地调度]]
  :PROPERTIES:
  :CUSTOM_ID: 两地调度
  :END:
[[./solution/1000-1099/1029.Two City Scheduling/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs[i][0]，飞往 B
市的费用为 costs[i][1]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[[10,20],[30,200],[400,50],[30,20]]
  <strong>输出：</strong>110
  <strong>解释：</strong>
  第一个人去 A 市，费用为 10。
  第二个人去 A 市，费用为 30。
  第三个人去 B 市，费用为 50。
  第四个人去 B 市，费用为 20。

  最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= costs.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

costs.length 为偶数

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= costs[i][0], costs[i][1] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
