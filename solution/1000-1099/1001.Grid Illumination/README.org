* [[https://leetcode-cn.com/problems/grid-illumination][1001. 网格照明]]
  :PROPERTIES:
  :CUSTOM_ID: 网格照明
  :END:
[[./solution/1000-1099/1001.Grid Illumination/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在 N x N 的网格 grid 上，每个单元格都有一盏灯，最初灯都处于 关闭 状态。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

数组 lamps 表示打开的灯的位置。lamps[i] = [rowi, coli] 表示 打开 位于
grid[rowi][coli] 的第 i 盏灯
。每盏灯都照亮自身单元格以及同一行、同一列和两条对角线上的所有其他单元格。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

查询数组 queries 中，第 i 次查询 queries[i] = [rowi, coli]，如果单元格
[rowi, coli] 是被照亮的，则查询结果为 1 ，否则为 0 。在第 i 次查询之后
[按照查询的顺序] ，关闭 位于单元格 grid[rowi][coli] 上或其相邻 8
个方向上（与单元格 grid[rowi][coli] 共享角或边）的任何灯。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回答案数组 ans ， answer[i] 应等于第 i 次查询 queries[i] 的结果，1
表示照亮，0 表示未照亮。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]
  <strong>输出：</strong>[1,0]
  <strong>解释：</strong>最初所有灯都是关闭的。在执行查询之前，打开位于 [0, 0] 和 [4, 4] 的灯。第 0 次查询检查 grid[1][1] 是否被照亮（蓝色方框）。该单元格被照亮，所以 ans[0] = 1 。然后，关闭红色方框中的所有灯。
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1001.Grid Illumination/images/illu_step1.jpg" style="width: 500px; height: 218px;" />
  第 1 次查询检查 grid[1][0] 是否被照亮（蓝色方框）。该单元格没有被照亮，所以 ans[1] = 0 。然后，关闭红色矩形中的所有灯。
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1001.Grid Illumination/images/illu_step2.jpg" style="width: 500px; height: 219px;" />
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]
  <strong>输出：</strong>[1,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>N = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]
  <strong>输出：</strong>[1,1,0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= lamps.length <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

lamps[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= lamps[i][j] < N

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= queries.length <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= queries[i][j] < N

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html

#+begin_html
  <!-- tabs:end -->
#+end_html
