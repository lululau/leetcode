* [[https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree][1038.
Binary Search Tree to Greater Sum Tree]]
  :PROPERTIES:
  :CUSTOM_ID: binary-search-tree-to-greater-sum-tree
  :END:
[[./solution/1000-1099/1038.Binary Search Tree to Greater Sum Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a Binary Search Tree (BST), convert it to a Greater
Tree such that every key of the original BST is changed to the original
key plus sum of all keys greater than the original key in BST.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

As a reminder, a binary search tree is a tree that satisfies these
constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The left subtree of a node contains only nodes with keys less than the
node's key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The right subtree of a node contains only nodes with keys greater
than the node's key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Both the left and right subtrees must also be binary search trees.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Note: This question is the same as
538: https://leetcode.com/problems/convert-bst-to-greater-tree/

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]

  <strong>Output:</strong> [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> root = [0,null,1]

  <strong>Output:</strong> [1,null,1]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> root = [1,0,2]

  <strong>Output:</strong> [3,3,2]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> root = [3,2,4,1]

  <strong>Output:</strong> [7,9,4,10]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the values in the tree are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

root is guaranteed to be a valid binary search tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
