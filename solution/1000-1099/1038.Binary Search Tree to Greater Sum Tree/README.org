* [[https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree][1038.
把二叉搜索树转换为累加树]]
  :PROPERTIES:
  :CUSTOM_ID: 把二叉搜索树转换为累加树
  :END:
[[./solution/1000-1099/1038.Binary Search Tree to Greater Sum Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给出二叉 搜索
树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum
Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提醒一下，二叉搜索树满足下列约束条件：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

节点的左子树仅包含键 小于 节点键的节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

节点的右子树仅包含键 大于 节点键的节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

左右子树也必须是二叉搜索树。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

注意：该题目与
538: https://leetcode-cn.com/problems/convert-bst-to-greater-tree/  相同

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
  <strong>输出：</strong>[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [0,null,1]
  <strong>输出：</strong>[1,null,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [1,0,2]
  <strong>输出：</strong>[3,3,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [3,2,4,1]
  <strong>输出：</strong>[7,9,4,10]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中的节点数介于 1 和 100 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的值介于 0 和 100 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

树中的所有值 互不相同 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

给定的树为二叉搜索树。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
