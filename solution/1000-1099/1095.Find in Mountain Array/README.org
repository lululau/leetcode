* [[https://leetcode-cn.com/problems/find-in-mountain-array][1095.
山脉数组中查找目标值]]
  :PROPERTIES:
  :CUSTOM_ID: 山脉数组中查找目标值
  :END:
[[./solution/1000-1099/1095.Find in Mountain Array/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

（这是一个 交互式问题 ）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个
山脉数组 mountainArr，请你返回能够使得 mountainArr.get(index) 等于 target 最小 的下标
index 值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果不存在这样的下标 index，就请返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

何为山脉数组？如果数组 A 是一个山脉数组的话，那它满足如下条件：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

首先，A.length >= 3

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

其次，在 0 < i < A.length - 1 条件下，存在 i 使得：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

A[0] < A[1] < ... A[i-1] < A[i]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A[i] > A[i+1] > ... > A[A.length - 1]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你将 不能直接访问该山脉数组，必须通过 MountainArray 接口来获取数据：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MountainArray.get(k) - 会返回数组中索引为k 的元素（下标从 0 开始）

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

MountainArray.length() - 会返回该数组的长度

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对 MountainArray.get 发起超过 100
次调用的提交将被视为错误答案。此外，任何试图规避判题系统的解决方案都将会导致比赛资格被取消。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

为了帮助大家更好地理解交互式问题，我们准备了一个样例
“答案”：https://leetcode-cn.com/playground/RKhe3ave，请注意这
不是一个正确答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>array = [1,2,3,4,5,3,1], target = 3
  <strong>输出：</strong>2
  <strong>解释：</strong>3 在数组中出现了两次，下标分别为 2 和 5，我们返回最小的下标 2。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>array = [0,1,2,4,2,1], target = 3
  <strong>输出：</strong>-1
  <strong>解释：</strong>3 在数组中没有出现，返回 -1。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= mountain_arr.length() <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= target <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= mountain_arr.get(index) <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
