* [[https://leetcode.com/problems/find-in-mountain-array][1095. Find in
Mountain Array]]
  :PROPERTIES:
  :CUSTOM_ID: find-in-mountain-array
  :END:
[[./solution/1000-1099/1095.Find in Mountain Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

(This problem is an interactive problem.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You may recall that an array A is a mountain array if and only if:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

A.length >= 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There exists some i with 0 < i < A.length - 1 such that:

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

A[0] < A[1] < ... A[i-1] < A[i]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A[i] > A[i+1] > ... > A[A.length - 1]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Given a mountain array mountainArr, return the minimum index such that
mountainArr.get(index) == target.  If such an index doesn't exist,
return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You can't access the mountain array directly.  You may only access the
array using a MountainArray interface:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MountainArray.get(k) returns the element of the array at index
k (0-indexed).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

MountainArray.length() returns the length of the array.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Submissions making more than 100 calls to MountainArray.get will be
judged Wrong Answer.  Also, any solutions that attempt to circumvent the
judge will result in disqualification.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> array = [1,2,3,4,5,3,1], target = 3
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> array = [0,1,2,4,2,1], target = 3
  <strong>Output:</strong> -1
  <strong>Explanation:</strong> 3 does not exist in <code>the array,</code> so we return -1.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= mountain_arr.length() <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= target <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= mountain_arr.get(index) <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
