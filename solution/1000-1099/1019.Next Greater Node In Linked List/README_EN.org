* [[https://leetcode.com/problems/next-greater-node-in-linked-list][1019.
Next Greater Node In Linked List]]
  :PROPERTIES:
  :CUSTOM_ID: next-greater-node-in-linked-list
  :END:
[[./solution/1000-1099/1019.Next Greater Node In Linked List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

We are given a linked list with head as the first node.  Let's number
the nodes in the list: node_1, node_2, node_3, ... etc.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each node may have a next larger value: for
node_i, next_larger(node_i) is the node_j.val such that j > i,
node_j.val > node_i.val, and j is the smallest possible choice.  If such
a j does not exist, the next larger value is 0.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an array of integers answer, where answer[i] =
next_larger(node_{i+1}).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that in the example inputs (not outputs) below, arrays such as
[2,1,5] represent the serialization of a linked list with a head node
value of 2, second node value of 1, and third node value of 5.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-1-1">[2,1,5]</span>

  <strong>Output: </strong><span id="example-output-1">[5,5,0]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-2-1">[2,7,4,3,5]</span>

  <strong>Output: </strong><span id="example-output-2">[7,0,5,5,0]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong><span id="example-input-3-1">[1,7,5,1,9,2,5,1]</span>

  <strong>Output: </strong><span id="example-output-3">[7,9,9,9,0,5,0,0]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= node.val <= 10^9 for each node in the linked list.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The given list has length in the range [0, 10000].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def nextLargerNodes(self, head: ListNode) -> List[int]:
          nums = []
          while head:
              nums.append(head.val)
              head = head.next
          s = []
          larger = [0] * len(nums)
          for i, num in enumerate(nums):
              while s and nums[s[-1]] < num:
                  larger[s.pop()] = num
              s.append(i)
          return larger
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  class Solution {
      public int[] nextLargerNodes(ListNode head) {
          List<Integer> nums = new ArrayList<>();
          while (head != null) {
              nums.add(head.val);
              head = head.next;
          }
          Deque<Integer> s = new ArrayDeque<>();
          int[] larger = new int[nums.size()];
          for (int i = 0; i < nums.size(); ++i) {
              while (!s.isEmpty() && nums.get(s.peek()) < nums.get(i)) {
                  larger[s.pop()] = nums.get(i);
              }
              s.push(i);
          }
          return larger;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val) {
   *     this.val = val;
   *     this.next = null;
   * }
   */
  /**
   * @param {ListNode} head
   * @return {number[]}
   */
  var nextLargerNodes = function(head) {
      let nums = [];
      while (head != null) {
          nums.push(head.val);
          head = head.next;
      }
      const n = nums.length;
      let larger = new Array(n).fill(0);
      let stack = [];
      for (let i = 0; i < n; i++) {
          let num = nums[i];
          while (stack.length > 0 && nums[stack[stack.length - 1]] < num) {
              larger[stack.pop()] = num;
          }
          stack.push(i);
      }
      return larger;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
