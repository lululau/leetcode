* [[https://leetcode-cn.com/problems/insufficient-nodes-in-root-to-leaf-paths][1080.
根到叶路径上的不足节点]]
  :PROPERTIES:
  :CUSTOM_ID: 根到叶路径上的不足节点
  :END:
[[./solution/1000-1099/1080.Insufficient Nodes in Root to Leaf Paths/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一棵二叉树的根
root，请你考虑它所有 从根到叶的路径：从根到任何叶的路径。（所谓一个叶子节点，就是一个没有子节点的节点）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假如通过节点 node 的每种可能的 “根-叶” 路径上值的总和全都小于给定的
limit，则该节点被称之为「不足节点」，需要被删除。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你删除所有不足节点，并返回生成的二叉树的根。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong><img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1080.Insufficient Nodes in Root to Leaf Paths/images/insufficient-1.png" style="height: 200px; width: 482px;">
  输入：</strong>root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1
  <strong><img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1080.Insufficient Nodes in Root to Leaf Paths/images/insufficient-2.png" style="height: 200px; width: 258px;">
  输出：</strong>[1,2,3,4,null,null,7,8,9,null,14]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong><img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1080.Insufficient Nodes in Root to Leaf Paths/images/insufficient-3.png" style="height: 200px; width: 292px;">
  输入：</strong>root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22
  <strong><img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1080.Insufficient Nodes in Root to Leaf Paths/images/insufficient-4.png" style="height: 200px; width: 264px;">
  输出：</strong>[5,4,8,11,null,17,4,7,null,null,null,5]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong><img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1080.Insufficient Nodes in Root to Leaf Paths/images/insufficient-5.png" style="height: 100px; width: 140px;">
  输入：</strong>root = [5,-6,-6], limit = 0<strong>
  输出：</strong>[]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

给定的树有 1 到 5000 个节点

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10^5 <= node.val <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10^9 <= limit <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
