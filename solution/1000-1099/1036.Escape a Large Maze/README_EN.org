* [[https://leetcode.com/problems/escape-a-large-maze][1036. Escape a
Large Maze]]
  :PROPERTIES:
  :CUSTOM_ID: escape-a-large-maze
  :END:
[[./solution/1000-1099/1036.Escape a Large Maze/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is a 1 million by 1 million grid on an XY-plane, and the
coordinates of each grid square are (x, y).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We start at the source = [sx, sy] square and want to reach the target =
[tx, ty] square. There is also an array of blocked squares, where each
blocked[i] = [xi, yi] represents a blocked square with coordinates (xi,
yi).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each move, we can walk one square north, east, south, or west if the
square is not in the array of blocked squares. We are also not allowed
to walk outside of the grid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return true if and only if it is possible to reach the target square
from the source square through a sequence of valid moves.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> The target square is inaccessible starting from the source square because we cannot move.
  We cannot move north or east because those squares are blocked.
  We cannot move south or west because we cannot go outside of the grid.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> blocked = [], source = [0,0], target = [999999,999999]
  <strong>Output:</strong> true
  <strong>Explanation:</strong> Because there are no blocked cells, it is possible to reach the target square.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= blocked.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

blocked[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= xi, yi < 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

source.length == target.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= sx, sy, tx, ty < 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

source != target

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that source and target are not blocked.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
