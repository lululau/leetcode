* [[https://leetcode-cn.com/problems/shortest-way-to-form-string][1055.
形成字符串的最短路径]]
  :PROPERTIES:
  :CUSTOM_ID: 形成字符串的最短路径
  :END:
[[./solution/1000-1099/1055.Shortest Way to Form String/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

对于任何字符串，我们可以通过删除其中一些字符（也可能不删除）来构造该字符串的子序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定源字符串 source
和目标字符串 target，找出源字符串中能通过串联形成目标字符串的子序列的最小数量。如果无法通过串联源字符串中的子序列来构造目标字符串，则返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>source = &quot;abc&quot;, target = &quot;abcbc&quot;
  <strong>输出：</strong>2
  <strong>解释：</strong>目标字符串 &quot;abcbc&quot; 可以由 &quot;abc&quot; 和 &quot;bc&quot; 形成，它们都是源字符串 &quot;abc&quot; 的子序列。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>source = &quot;abc&quot;, target = &quot;acdbc&quot;
  <strong>输出：</strong>-1
  <strong>解释：</strong>由于目标字符串中包含字符 &quot;d&quot;，所以无法由源字符串的子序列构建目标字符串。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>source = &quot;xyz&quot;, target = &quot;xzyxz&quot;
  <strong>输出：</strong>3
  <strong>解释：</strong>目标字符串可以按如下方式构建： &quot;xz&quot; + &quot;y&quot; + &quot;xz&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

source 和 target 两个字符串都只包含 "a"-"z" 的英文小写字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

source 和 target 两个字符串的长度介于 1 和 1000 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
