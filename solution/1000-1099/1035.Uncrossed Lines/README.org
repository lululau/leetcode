* [[https://leetcode-cn.com/problems/uncrossed-lines][1035. 不相交的线]]
  :PROPERTIES:
  :CUSTOM_ID: 不相交的线
  :END:
[[./solution/1000-1099/1035.Uncrossed Lines/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们在两条独立的水平线上按给定的顺序写下 A 和 B 中的整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

现在，我们可以绘制一些连接两个数字 A[i] 和 B[j] 的直线，只要 A[i] ==
B[j]，且我们绘制的直线不与任何其他连线（非水平线）相交。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

以这种方法绘制线条，并返回我们可以绘制的最大连线数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [1,4,2], B = [1,2,4]
  <strong>输出：</strong>2
  <strong>解释：
  </strong>我们可以画出两条不交叉的线，如上图所示。
  我们无法画出第三条不相交的直线，因为从 A[1]=4 到 B[2]=4 的直线将与从 A[2]=2 到 B[1]=2 的直线相交。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [2,5,1,2,5], B = [10,5,2,1,5,2]
  <strong>输出：</strong>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [1,3,7,1,7,5], B = [1,9,2,5,1]
  <strong>输出：</strong>2</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= B.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A[i], B[i] <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

最长公共子序列问题

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
          m, n = len(nums1), len(nums2)
          dp = [[0] * (n + 1) for i in range(m + 1)]
          for i in range(1, m + 1):
              for j in range(1, n + 1):
                  if nums1[i - 1] == nums2[j - 1]:
                      dp[i][j] = dp[i - 1][j - 1] + 1
                  else:
                      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
          return dp[m][n]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int maxUncrossedLines(int[] nums1, int[] nums2) {
          int m = nums1.length;
          int n = nums2.length;
          int[][] dp = new int[m + 1][n + 1];
          for (int i = 1; i <= m; i++) {
              for (int j = 1; j <= n; j++) {
                  if (nums1[i - 1] == nums2[j - 1]) {
                      dp[i][j] = dp[i - 1][j - 1] + 1;
                  } else {
                      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                  }
              }
          }
          return dp[m][n];
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int maxUncrossedLines(vector<int>& nums1, vector<int>& nums2) {
          int m = nums1.size(), n = nums2.size();
          vector<vector<int>> dp(m + 1, vector<int>(n + 1));
          for (int i = 1; i <= m; ++i) {
              for (int j = 1; j <= n; ++j) {
                  if (nums1[i - 1] == nums2[j - 1]) {
                      dp[i][j] = dp[i - 1][j - 1] + 1;
                  } else {
                      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                  }
              }
          }
          return dp[m][n];
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
