* [[https://leetcode.com/problems/video-stitching][1024. Video
Stitching]]
  :PROPERTIES:
  :CUSTOM_ID: video-stitching
  :END:
[[./solution/1000-1099/1024.Video Stitching/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a series of video clips from a sporting event that lasted
T seconds.  These video clips can be overlapping with each other and
have varied lengths.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each video clip clips[i] is an interval: it starts at time clips[i][0]
and ends at time clips[i][1].  We can cut these clips into segments
freely: for example, a clip [0, 7] can be cut into segments [0, 1] + [1,
3] + [3, 7].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum number of clips needed so that we can cut the clips
into segments that cover the entire sporting event ([0, T]).  If the
task is impossible, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong>clips = <span id="example-input-1-1">[[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]]</span>, T = <span id="example-input-1-2">10</span>
  <strong>Output: </strong><span id="example-output-1">3</span>
  <strong>Explanation: </strong>
  We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.
  Then, we can reconstruct the sporting event as follows:
  We cut [1,9] into segments [1,2] + [2,8] + [8,9].
  Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong>clips = <span id="example-input-2-1">[[0,1],[1,2]]</span>, T = <span id="example-input-2-2">5</span>
  <strong>Output: </strong><span id="example-output-2">-1</span>
  <strong>Explanation: </strong>
  We can&#39;t cover [0,5] with only [0,1] and [1,2].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong>clips = <span id="example-input-3-1">[[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]]</span>, T = <span id="example-input-3-2">9</span>
  <strong>Output: </strong><span id="example-output-3">3</span>
  <strong>Explanation: </strong>
  We can take clips [0,4], [4,7], and [6,9].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong>clips = <span id="example-input-4-1">[[0,4],[2,8]]</span>, T = <span id="example-input-4-2">5</span>
  <strong>Output: </strong><span id="example-output-4">2</span>
  <strong>Explanation: </strong>
  Notice you can have extra video after the event ends.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= clips.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= clips[i][0] <= clips[i][1] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= T <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
