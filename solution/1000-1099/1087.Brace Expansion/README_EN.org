* [[https://leetcode.com/problems/brace-expansion][1087. Brace
Expansion]]
  :PROPERTIES:
  :CUSTOM_ID: brace-expansion
  :END:
[[./solution/1000-1099/1087.Brace Expansion/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a string s representing a list of words. Each letter in
the word has one or more options.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If there is one option, the letter is represented as is.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If there is more than one option, then curly braces delimit the options.
For example, "{a,b,c}" represents options ["a", "b", "c"].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

For example, if s = "a{b,c}", the first character is always 'a', but the
second character can be 'b' or 'c'. The original list is ["ab", "ac"].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return all words that can be formed in this manner, sorted in
lexicographical order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> s = "{a,b}c{d,e}f"
  <strong>Output:</strong> ["acdf","acef","bcdf","bcef"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> s = "abcd"
  <strong>Output:</strong> ["abcd"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consists of curly brackets '{}', commas ',', and lowercase English
letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s is guaranteed to be a valid input.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are no nested curly brackets.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All characters inside a pair of consecutive opening and ending curly
brackets are different.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
