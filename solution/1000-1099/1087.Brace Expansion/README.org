* [[https://leetcode-cn.com/problems/brace-expansion][1087. 花括号展开]]
  :PROPERTIES:
  :CUSTOM_ID: 花括号展开
  :END:
[[./solution/1000-1099/1087.Brace Expansion/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们用一个特殊的字符串 S 来表示一份单词列表，之所以能展开成为一个列表，是因为这个字符串 S 中存在一个叫做「选项」的概念：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

单词中的每个字母可能只有一个选项或存在多个备选项。如果只有一个选项，那么该字母按原样表示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果存在多个选项，就会以花括号包裹来表示这些选项（使它们与其他字母分隔开），例如
"{a,b,c}" 表示 ["a", "b", "c"]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例子："{a,b,c}d{e,f}" 可以表示单词列表 ["ade", "adf", "bde", "bdf",
"cde", "cdf"]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你按字典顺序，返回所有以这种方式形成的单词。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;{a,b}c{d,e}f&quot;
  <strong>输出：</strong>[&quot;acdf&quot;,&quot;acef&quot;,&quot;bcdf&quot;,&quot;bcef&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;abcd&quot;
  <strong>输出：</strong>[&quot;abcd&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= S.length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你可以假设题目中不存在嵌套的花括号

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

在一对连续的花括号（开花括号与闭花括号）之间的所有字母都不会相同

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
