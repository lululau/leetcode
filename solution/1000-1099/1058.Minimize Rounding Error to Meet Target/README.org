* [[https://leetcode-cn.com/problems/minimize-rounding-error-to-meet-target][1058.
最小化舍入误差以满足目标]]
  :PROPERTIES:
  :CUSTOM_ID: 最小化舍入误差以满足目标
  :END:
[[./solution/1000-1099/1058.Minimize Rounding Error to Meet Target/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一系列价格 [p1,p2...,pn] 和一个目标 target，将每个价格 pi 舍入为 Roundi(pi) 以使得舍入数组 [Round1(p1),Round2(p2)...,Roundn(pn)] 之和达到给定的目标值 target。每次舍入操作 Roundi(pi) 可以是向下舍 Floor(pi) 也可以是向上入 Ceil(pi)。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果舍入数组之和无论如何都无法达到目标值 target，就返回
-1。否则，以保留到小数点后三位的字符串格式返回最小的舍入误差，其定义为 Σ
|Roundi(pi) - (pi)|（ i 从 1 到 n ）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>prices = [&quot;0.700&quot;,&quot;2.800&quot;,&quot;4.900&quot;], target = 8
  <strong>输出：</strong>&quot;1.000&quot;
  <strong>解释： </strong>
  使用 Floor，Ceil 和 Ceil 操作得到 (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>prices = [&quot;1.500&quot;,&quot;2.500&quot;,&quot;3.500&quot;], target = 10
  <strong>输出：</strong>&quot;-1&quot;
  <strong>解释：</strong>
  达到目标是不可能的。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= prices.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

表示价格的每个字符串 prices[i] 都代表一个介于 0 和
1000 之间的实数，并且正好有 3 个小数位。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target 介于 0 和 1000000 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
