* [[https://leetcode-cn.com/problems/shortest-path-in-binary-matrix][1091.
二进制矩阵中的最短路径]]
  :PROPERTIES:
  :CUSTOM_ID: 二进制矩阵中的最短路径
  :END:
[[./solution/1000-1099/1091.Shortest Path in Binary Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 n x n 的二进制矩阵 grid 中，返回矩阵中最短 畅通路径
的长度。如果不存在这样的路径，返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

二进制矩阵中的 畅通路径 是一条从 左上角 单元格（即，(0, 0)）到 右下角
单元格（即，(n - 1, n - 1)）的路径，该路径同时满足下述要求：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

路径途经的所有单元格都的值都是 0 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

路径中所有相邻的单元格应当在 8 个方向之一
上连通（即，相邻两单元之间彼此不同且共享一条边或者一个角）。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

畅通路径的长度 是该路径途经的单元格总数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[0,1],[1,0]]
  <strong>输出：</strong>2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[0,0,0],[1,1,0],[1,1,0]]
  <strong>输出：</strong>4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[1,0,0],[1,1,0],[1,1,0]]
  <strong>输出：</strong>-1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] 为 0 或 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
