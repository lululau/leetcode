* [[https://leetcode-cn.com/problems/recover-a-tree-from-preorder-traversal][1028.
从先序遍历还原二叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 从先序遍历还原二叉树
  :END:
[[./solution/1000-1099/1028.Recover a Tree From Preorder Traversal/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们从二叉树的根节点 root 开始进行深度优先搜索。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在遍历中的每个节点处，我们输出 D 条短划线（其中 D 是该节点的深度），然后输出该节点的值。（如果节点的深度为
D，则其直接子节点的深度为 D + 1。根节点的深度为 0）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果节点只有一个子节点，那么保证该子节点为左子节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给出遍历输出 S，还原树并返回其根节点 root。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;1-2--3--4-5--6--7&quot;
  <strong>输出：</strong>[1,2,5,3,4,6,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;1-2--3---4-5--6---7&quot;
  <strong>输出：</strong>[1,2,5,3,null,6,null,4,null,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;1-401--349---90--88&quot;
  <strong>输出：</strong>[1,401,null,349,88,90]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

原始树中的节点数介于 1 和 1000 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的值介于 1 和 10 ^ 9 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
