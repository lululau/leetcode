* [[https://leetcode-cn.com/problems/grumpy-bookstore-owner][1052.
爱生气的书店老板]]
  :PROPERTIES:
  :CUSTOM_ID: 爱生气的书店老板
  :END:
[[./solution/1000-1099/1052.Grumpy Bookstore Owner/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

今天，书店老板有一家店打算试营业 customers.length 分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在某些时候，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i]
= 1，否则 grumpy[i] = 0。
当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 X
分钟不生气，但却只能使用一次。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回这一天营业下来，最多有多少客户能够感到满意的数量。  

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3
  <strong>输出：</strong>16
  <strong>解释：
  </strong>书店老板在最后 3 分钟保持冷静。
  感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= X <= customers.length == grumpy.length <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= customers[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= grumpy[i] <= 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

- 用 =s= 累计不使用秘密技巧时，满意的顾客数；
- 用 =t= 计算大小为 =X= 的滑动窗口最多增加的满意的顾客数；
- 结果即为 =s+t=。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:
          # 用s累计不使用秘密技巧时，满意的顾客数
          # 用t计算大小为X的滑动窗口最多增加的满意的顾客数
          # 结果即为s+t
          s = t = 0
          win, n = 0, len(customers)
          for i in range(n):
              if grumpy[i] == 0:
                  s += customers[i]
              else:
                  win += customers[i]
              if i >= X and grumpy[i - X] == 1:
                  win -= customers[i - X]
              # 求滑动窗口的最大值
              t = max(t, win)
          return s + t
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int maxSatisfied(int[] customers, int[] grumpy, int X) {
          // 用s累计不使用秘密技巧时，满意的顾客数
          // 用t计算大小为X的滑动窗口最多增加的满意的顾客数
          // 结果即为s+t
          int s = 0, t = 0;
          for (int i = 0, win = 0, n = customers.length; i < n; ++i) {
              if (grumpy[i] == 0) {
                  s += customers[i];
              } else {
                  win += customers[i];
              }
              if (i >= X && grumpy[i - X] == 1) {
                  win -= customers[i - X];
              }
              // 求滑动窗口的最大值
              t = Math.max(t, win);
          }
          return s + t;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
