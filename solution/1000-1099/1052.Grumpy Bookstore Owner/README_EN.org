* [[https://leetcode.com/problems/grumpy-bookstore-owner][1052. Grumpy
Bookstore Owner]]
  :PROPERTIES:
  :CUSTOM_ID: grumpy-bookstore-owner
  :END:
[[./solution/1000-1099/1052.Grumpy Bookstore Owner/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Today, the bookstore owner has a store open for customers.length
minutes.  Every minute, some number of customers (customers[i]) enter
the store, and all those customers leave after the end of that minute.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

On some minutes, the bookstore owner is grumpy.  If the bookstore owner
is grumpy on the i-th minute, grumpy[i] = 1, otherwise grumpy[i] = 0. 
When the bookstore owner is grumpy, the customers of that minute are not
satisfied, otherwise they are satisfied.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The bookstore owner knows a secret technique to keep themselves not
grumpy for X minutes straight, but can only use it once.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum number of customers that can be satisfied throughout
the day.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong>customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3

  <strong>Output: </strong>16

  <strong>Explanation:</strong>&nbsp;The bookstore owner keeps themselves&nbsp;not grumpy for the last 3 minutes. 

  The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= X <= customers.length == grumpy.length <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= customers[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= grumpy[i] <= 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:
          s = t = 0
          win, n = 0, len(customers)
          for i in range(n):
              if grumpy[i] == 0:
                  s += customers[i]
              else:
                  win += customers[i]
              if i >= X and grumpy[i - X] == 1:
                  win -= customers[i - X]
              t = max(t, win)
          return s + t
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int maxSatisfied(int[] customers, int[] grumpy, int X) {
          int s = 0, t = 0;
          for (int i = 0, win = 0, n = customers.length; i < n; ++i) {
              if (grumpy[i] == 0) {
                  s += customers[i];
              } else {
                  win += customers[i];
              }
              if (i >= X && grumpy[i - X] == 1) {
                  win -= customers[i - X];
              }
              t = Math.max(t, win);
          }
          return s + t;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
