* [[https://leetcode-cn.com/problems/car-pooling][1094. 拼车]]
  :PROPERTIES:
  :CUSTOM_ID: 拼车
  :END:
[[./solution/1000-1099/1094.Car Pooling/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

假设你是一位顺风车司机，车上最初有 capacity 个空座位可以用来载客。由于道路的限制，车 只能 向一个方向行驶（也就是说，不允许掉头或改变方向，你可以将其想象为一个向量）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

这儿有一份乘客行程计划表 trips[][]，其中 trips[i] = [num_passengers,
start_location, end_location] 包含了第 i 组乘客的行程信息：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

必须接送的乘客数量；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

乘客的上车地点；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

以及乘客的下车地点。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

这些给出的地点位置是从你的 初始 出发位置向前行驶到这些地点所需的距离（它们一定在你的行驶方向上）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你根据给出的行程计划表和车子的座位数，来判断你的车是否可以顺利完成接送所有乘客的任务（当且仅当你可以在所有给定的行程中接送所有乘客时，返回 true，否则请返回
false）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>trips = [[2,1,5],[3,3,7]], capacity = 4
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>trips = [[2,1,5],[3,3,7]], capacity = 5
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>trips = [[2,1,5],[3,5,7]], capacity = 3
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你可以假设乘客会自觉遵守 “先下后上” 的良好素质

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

trips.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

trips[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= trips[i][0] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= trips[i][1] < trips[i][2] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= capacity <= 100000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

差分数组

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
          delta = [0] * 1001
          for num, start, end in trips:
              delta[start] += num
              delta[end] -= num
          cur = 0
          for num in delta:
              cur += num
              if cur > capacity:
                  return False
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean carPooling(int[][] trips, int capacity) {
          int[] delta = new int[1001];
          for (int[] trip : trips) {
              int num = trip[0], start = trip[1], end = trip[2];
              delta[start] += num;
              delta[end] -= num;
          }
          int cur = 0;
          for (int num : delta) {
              cur += num;
              if (cur > capacity) {
                  return false;
              }
          }
          return true;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[][]} trips
   * @param {number} capacity
   * @return {boolean}
   */
   var carPooling = function(trips, capacity) {
      let delta = new Array();
      for (let trip of trips) {
          let [num, start, end] = trip;
          delta[start] = (delta[start] || 0) + num;
          delta[end] = (delta[end] || 0) - num;
      }
      let total = 0;
      for (let i = 0; i < delta.length; i++) {
          let cur = delta[i];
          if (cur == undefined) continue;
          total += cur;
          if (total > capacity) return false;
      }
      return true;
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool carPooling(vector<vector<int>>& trips, int capacity) {
          vector<int> delta(1001);
          for (auto &trip : trips) {
              int num = trip[0], start = trip[1], end = trip[2];
              delta[start] += num;
              delta[end] -= num;
          }
          int cur = 0;
          for (auto &num : delta) {
              cur += num;
              if (cur > capacity) {
                  return false;
              }
          }
          return true;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript-1
    :END:
#+begin_src js
  /**
   * @param {number[][]} trips
   * @param {number} capacity
   * @return {boolean}
   */
   var carPooling = function(trips, capacity) {
      let delta = new Array();
      for (let trip of trips) {
          let [num, start, end] = trip;
          delta[start] = (delta[start] || 0) + num;
          delta[end] = (delta[end] || 0) - num;
      }
      let total = 0;
      for (let i = 0; i < delta.length; i++) {
          let cur = delta[i];
          if (cur == undefined) continue;
          total += cur;
          if (total > capacity) return false;
      }
      return true;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
