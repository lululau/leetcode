* [[https://leetcode-cn.com/problems/remove-outermost-parentheses][1021.
删除最外层的括号]]
  :PROPERTIES:
  :CUSTOM_ID: 删除最外层的括号
  :END:
[[./solution/1000-1099/1021.Remove Outermost Parentheses/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A
和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果有效字符串 S 非空，且不存在将其拆分为 S =
A+B 的方法，我们称其为原语（primitive），其中 A
和 B 都是非空有效括号字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 +
... + P_k，其中 P_i 是有效括号字符串原语。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;(()())(())&quot;
  <strong>输出：</strong>&quot;()()()&quot;
  <strong>解释：
  </strong>输入字符串为 &quot;(()())(())&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot;，
  删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; = &quot;()()()&quot;。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;(()())(())(()(()))&quot;
  <strong>输出：</strong>&quot;()()()()(())&quot;
  <strong>解释：</strong>
  输入字符串为 &quot;(()())(())(()(()))&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot; + &quot;(()(()))&quot;，
  删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; + &quot;()(())&quot; = &quot;()()()()(())&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;()()&quot;
  <strong>输出：</strong>&quot;&quot;
  <strong>解释：</strong>
  输入字符串为 &quot;()()&quot;，原语化分解得到 &quot;()&quot; + &quot;()&quot;，
  删除每个部分中的最外层括号后得到 &quot;&quot; + &quot;&quot; = &quot;&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

S.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S[i] 为 "(" 或 ")"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

S 是一个有效括号字符串

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
