* [[https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal][1008.
Construct Binary Search Tree from Preorder Traversal]]
  :PROPERTIES:
  :CUSTOM_ID: construct-binary-search-tree-from-preorder-traversal
  :END:
[[./solution/1000-1099/1008.Construct Binary Search Tree from Preorder Traversal/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array of integers preorder, which represents the preorder
traversal of a BST (i.e., binary search tree), construct the tree and
return its root.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed that there is always possible to find a binary search
tree with the given requirements for the given test cases.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A binary search tree is a binary tree where for every node, any
descendant of Node.left has a value strictly less than Node.val, and any
descendant of Node.right has a value strictly greater than Node.val.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A preorder traversal of a binary tree displays the value of the node
first, then traverses Node.left, then traverses Node.right.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> preorder = [8,5,1,7,10,12]
  <strong>Output:</strong> [8,5,10,1,7,null,12]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> preorder = [1,3]
  <strong>Output:</strong> [1,null,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= preorder.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= preorder[i] <= 108

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the values of preorder are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html

#+begin_html
  <!-- tabs:end -->
#+end_html
