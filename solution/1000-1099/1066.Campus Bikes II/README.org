* [[https://leetcode-cn.com/problems/campus-bikes-ii][1066.
校园自行车分配 II]]
  :PROPERTIES:
  :CUSTOM_ID: 校园自行车分配-ii
  :END:
[[./solution/1000-1099/1066.Campus Bikes II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在由 2D 网格表示的校园里有 n 位工人（worker）和 m 辆自行车（bike），n <=
m。所有工人和自行车的位置都用网格上的 2D 坐标表示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们为每一位工人分配一辆专属自行车，使每个工人与其分配到的自行车之间的曼哈顿距离最小化。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

p1 和 p2 之间的曼哈顿距离为 Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y -
p2.y|。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回每个工人与分配到的自行车之间的曼哈顿距离的最小可能总和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
  <strong>输出：</strong>6
  <strong>解释：</strong>
  自行车 0 分配给工人 0，自行车 1 分配给工人 1 。分配得到的曼哈顿距离都是 3, 所以输出为 6 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
  <strong>输出：</strong>4
  <strong>解释：</strong>
  先将自行车 0 分配给工人 0，再将自行车 1 分配给工人 1（或工人 2），自行车 2 给工人 2（或工人 1）。如此分配使得曼哈顿距离的总和为 4。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有工人和自行车的位置都不相同。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= workers.length <= bikes.length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
