* [[https://leetcode.com/problems/campus-bikes-ii][1066. Campus Bikes
II]]
  :PROPERTIES:
  :CUSTOM_ID: campus-bikes-ii
  :END:
[[./solution/1000-1099/1066.Campus Bikes II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

On a campus represented as a 2D grid, there are N workers and M bikes,
with N <= M. Each worker and bike is a 2D coordinate on this grid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We assign one unique bike to each worker so that the sum of the
Manhattan distances between each worker and their assigned bike is
minimized.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The Manhattan distance between two points p1 and p2 is Manhattan(p1, p2)
= |p1.x - p2.x| + |p1.y - p2.y|.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum possible sum of Manhattan distances between each
worker and their assigned bike.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> 
  We assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
  <strong>Output:</strong> 4
  <strong>Explanation: </strong>
  We first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]
  <strong>Output:</strong> 4995
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

N == workers.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

M == bikes.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= M <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

workers[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bikes[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the workers and the bikes locations are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
