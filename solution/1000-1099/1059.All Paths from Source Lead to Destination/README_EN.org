* [[https://leetcode.com/problems/all-paths-from-source-lead-to-destination][1059.
All Paths from Source Lead to Destination]]
  :PROPERTIES:
  :CUSTOM_ID: all-paths-from-source-lead-to-destination
  :END:
[[./solution/1000-1099/1059.All Paths from Source Lead to Destination/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the edges of a directed graph where edges[i] = [ai, bi] indicates
there is an edge between nodes ai and bi, and two nodes source and
destination of this graph, determine whether or not all paths starting
from source eventually, end at destination, that is:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

At least one path exists from the source node to the destination node

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If a path exists from the source node to a node with no outgoing edges,
then that node is equal to destination.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The number of possible paths from source to destination is a finite
number.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return true if and only if all roads from source lead to destination.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2
  <strong>Output:</strong> false
  <strong>Explanation:</strong> It is possible to reach and get stuck on both node 1 and node 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3
  <strong>Output:</strong> false
  <strong>Explanation:</strong> We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 3, edges = [[0,1],[1,1],[1,2]], source = 0, destination = 2
  <strong>Output:</strong> false
  <strong>Explanation:</strong> All paths from the source node end at the destination node, but there are an infinite number of paths, such as 0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2, edges = [[0,1],[1,1]], source = 0, destination = 1
  <strong>Output:</strong> false
  <strong>Explanation:</strong> There is infinite self-loop at destination node.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= edges.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ai, bi <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= source <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= destination <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The given graph may have self-loops and parallel edges.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
