* [[https://leetcode-cn.com/problems/all-paths-from-source-lead-to-destination][1059.
从始点到终点的所有路径]]
  :PROPERTIES:
  :CUSTOM_ID: 从始点到终点的所有路径
  :END:
[[./solution/1000-1099/1059.All Paths from Source Lead to Destination/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定有向图的边 edges，以及该图的始点 source 和目标终点 destination，确定从始点 source 出发的所有路径是否最终结束于目标终点 destination，即：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

从始点 source 到目标终点 destination 存在至少一条路径

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果存在从始点 source 到没有出边的节点的路径，则该节点就是路径终点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

从始点source到目标终点 destination 可能路径数是有限数字

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

当从始点 source 出发的所有路径都可以到达目标终点 destination
时返回 true，否则返回 false。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2
  <strong>输出：</strong>false
  <strong>说明：</strong>节点 1 和节点 2 都可以到达，但也会卡在那里。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3
  <strong>输出：</strong>false
  <strong>说明：</strong>有两种可能：在节点 3 处结束，或是在节点 1 和节点 2 之间无限循环。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, edges = [[0,1],[1,1],[1,2]], source = 0, destination = 2
  <strong>输出：</strong>false
  <strong>说明：</strong>从始点出发的所有路径都在目标终点结束，但存在无限多的路径，如 0-1-2，0-1-1-2，0-1-1-1-2，0-1-1-1-1-2 等。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 2, edges = [[0,1],[1,1]], source = 0, destination = 1
  <strong>输出：</strong>false
  <strong>说明：</strong>在目标节点上存在无限的自环。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

给定的图中可能带有自环和平行边。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

图中的节点数 n 介于 1 和 10000 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

图中的边数在 0 到 10000 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= edges.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= source <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= destination <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
