* [[https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target][1074.
元素和为目标值的子矩阵数量]]
  :PROPERTIES:
  :CUSTOM_ID: 元素和为目标值的子矩阵数量
  :END:
[[./solution/1000-1099/1074.Number of Submatrices That Sum to Target/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给出矩阵 matrix 和目标值 target，返回元素总和等于目标值的非空子矩阵的数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

子矩阵 x1, y1, x2, y2 是满足 x1 <= x <= x2 且 y1 <= y <=
y2 的所有单元 matrix[x][y] 的集合。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果 (x1, y1, x2, y2) 和 (x1', y1', x2',
y2') 两个子矩阵中部分坐标不同（如：x1 != x1'），那么这两个子矩阵也不同。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
  <strong>输出：</strong>4
  <strong>解释：</strong>四个只含 0 的 1x1 子矩阵。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>matrix = [[1,-1],[-1,1]], target = 0
  <strong>输出：</strong>5
  <strong>解释：</strong>两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= matrix.length <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= matrix[0].length <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= matrix[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10^8 <= target <= 10^8

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
