* [[https://leetcode.com/problems/flower-planting-with-no-adjacent][1042.
Flower Planting With No Adjacent]]
  :PROPERTIES:
  :CUSTOM_ID: flower-planting-with-no-adjacent
  :END:
[[./solution/1000-1099/1042.Flower Planting With No Adjacent/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You have n gardens, labeled from 1 to n, and an array paths where
paths[i] = [xi, yi] describes a bidirectional path between garden xi to
garden yi. In each garden, you want to plant one of 4 types of flowers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

All gardens have at most 3 paths coming into or leaving it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Your task is to choose a flower type for each garden such that, for any
two gardens connected by a path, they have different types of flowers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return any such a choice as an array answer, where answer[i] is the type
of flower planted in the (i+1)th garden. The flower types are denoted 1,
2, 3, or 4. It is guaranteed an answer exists.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 3, paths = [[1,2],[2,3],[3,1]]
  <strong>Output:</strong> [1,2,3]
  <strong>Explanation:</strong>
  Gardens 1 and 2 have different types.
  Gardens 2 and 3 have different types.
  Gardens 3 and 1 have different types.
  Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4, paths = [[1,2],[3,4]]
  <strong>Output:</strong> [1,2,1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
  <strong>Output:</strong> [1,2,3,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= paths.length <= 2 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

paths[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= xi, yi <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

xi != yi

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Every garden has at most 3 paths coming into or leaving it.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
