* [[https://leetcode-cn.com/problems/brace-expansion-ii][1096.
花括号展开 II]]
  :PROPERTIES:
  :CUSTOM_ID: 花括号展开-ii
  :END:
[[./solution/1000-1099/1096.Brace Expansion II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

如果你熟悉 Shell
编程，那么一定了解过花括号展开，它可以用来生成任意字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

花括号展开的表达式可以看作一个由 花括号、逗号 和 小写英文字母
组成的字符串，定义下面几条语法规则：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果只给出单一的元素 x，那么表达式表示的字符串就只有 "x"。R(x) = {x}

#+begin_example
  <ul>
      <li>例如，表达式 <code>{"a"}</code> 表示字符串 <code>"a"</code>。</li>
      <li>而表达式 <code>{"w"}</code> 就表示字符串 <code>"w"</code>。</li>
  </ul>
  </li>
  <li>当两个或多个表达式并列，以逗号分隔时，我们取这些表达式中元素的并集。<code>R({e_1,e_2,...}) = R(e_1) ∪ R(e_2) ∪ ...</code>
  <ul>
      <li>例如，表达式 <code>"{a,b,c}"</code> 表示字符串 <code>"a","b","c"</code>。</li>
      <li>而表达式 <code>"{{a,b},{b,c}}"</code> 也可以表示字符串 <code>"a","b","c"</code>。</li>
  </ul>
  </li>
  <li>要是两个或多个表达式相接，中间没有隔开时，我们从这些表达式中各取一个元素依次连接形成字符串。<code>R(e_1 + e_2) = {a + b for (a, b) in R(e_1) × R(e_2)}</code>
  <ul>
      <li>例如，表达式 <code>"{a,b}{c,d}"</code> 表示字符串 <code>"ac","ad","bc","bd"</code>。</li>
  </ul>
  </li>
  <li>表达式之间允许嵌套，单一元素与表达式的连接也是允许的。
  <ul>
      <li>例如，表达式 <code>"a{b,c,d}"</code> 表示字符串 <code>"ab","ac","ad"​​​​​​</code>。</li>
      <li>例如，表达式 <code>"a{b,c}{d,e}f{g,h}"</code> 可以表示字符串 <code>"abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"</code>。</li>
  </ul>
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给出表示基于给定语法规则的表达式 expression，返回它所表示的所有字符串组成的有序列表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假如你希望以「集合」的概念了解此题，也可以通过点击 "显示英文描述"
获取详情。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>"{a,b}{c,{d,e}}"
  <strong>输出：</strong>["ac","ad","ae","bc","bd","be"]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>"{{a,z},a{b,c},{ab,z}}"
  <strong>输出：</strong>["a","ab","ac","z"]
  <strong>解释：</strong>输出中 <strong>不应 </strong>出现重复的组合结果。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= expression.length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

expression[i] 由 '{'，'}'，',' 或小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

给出的表达式 expression 用以表示一组基于题目描述中语法构造的字符串

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
