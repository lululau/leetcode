* [[https://leetcode-cn.com/problems/minimum-cost-to-merge-stones][1000.
合并石头的最低成本]]
  :PROPERTIES:
  :CUSTOM_ID: 合并石头的最低成本
  :END:
[[./solution/1000-1099/1000.Minimum Cost to Merge Stones/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有 N 堆石头排成一排，第 i 堆中有 stones[i] 块石头。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每次移动（move）需要将连续的 K 堆石头合并为一堆，而这个移动的成本为这 K 堆石头的总数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

找出把所有石头合并成一堆的最低成本。如果不可能，返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>stones = [3,2,4,1], K = 2
  <strong>输出：</strong>20
  <strong>解释：</strong>
  从 [3, 2, 4, 1] 开始。
  合并 [3, 2]，成本为 5，剩下 [5, 4, 1]。
  合并 [4, 1]，成本为 5，剩下 [5, 5]。
  合并 [5, 5]，成本为 10，剩下 [10]。
  总成本 20，这是可能的最小值。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>stones = [3,2,4,1], K = 3
  <strong>输出：</strong>-1
  <strong>解释：</strong>任何合并操作后，都会剩下 2 堆，我们无法再进行合并。所以这项任务是不可能完成的。.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>stones = [3,5,1,2,6], K = 3
  <strong>输出：</strong>25
  <strong>解释：</strong>
  从 [3, 5, 1, 2, 6] 开始。
  合并 [5, 1, 2]，成本为 8，剩下 [3, 8, 6]。
  合并 [3, 8, 6]，成本为 17，剩下 [17]。
  总成本 25，这是可能的最小值。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= stones.length <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= K <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= stones[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html

#+begin_html
  <!-- tabs:end -->
#+end_html
