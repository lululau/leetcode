* [[https://leetcode.com/problems/campus-bikes][1057. Campus Bikes]]
  :PROPERTIES:
  :CUSTOM_ID: campus-bikes
  :END:
[[./solution/1000-1099/1057.Campus Bikes/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

On a campus represented as a 2D grid, there are N workers and M bikes,
with N <= M. Each worker and bike is a 2D coordinate on this grid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Our goal is to assign a bike to each worker. Among the available bikes
and workers, we choose the (worker, bike) pair with the shortest
Manhattan distance between each other, and assign the bike to that
worker. (If there are multiple (worker, bike) pairs with the same
shortest Manhattan distance, we choose the pair with the smallest worker
index; if there are multiple ways to do that, we choose the pair with
the smallest bike index). We repeat this process until there are no
available workers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The Manhattan distance between two points p1 and p2 is Manhattan(p1, p2)
= |p1.x - p2.x| + |p1.y - p2.y|.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return a vector ans of length N, where ans[i] is the index (0-indexed)
of the bike that the i-th worker is assigned to.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong>workers = <span id="example-input-1-1">[[0,0],[2,1]]</span>, bikes = <span id="example-input-1-2">[[1,2],[3,3]]</span>

  <strong>Output: </strong><span id="example-output-1">[1,0]</span>

  <strong>Explanation: </strong>

  Worker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is [1, 0].

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: </strong>workers = <span id="example-input-2-1">[[0,0],[1,1],[2,0]]</span>, bikes = <span id="example-input-2-2">[[1,0],[2,2],[2,1]]</span>

  <strong>Output: </strong><span id="example-output-2">[0,2,1]</span>

  <strong>Explanation: </strong>

  Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is [0,2,1].

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= workers[i][j], bikes[i][j] < 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All worker and bike locations are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= workers.length <= bikes.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
