* [[https://leetcode-cn.com/problems/flip-columns-for-maximum-number-of-equal-rows][1072.
按列翻转得到最大值等行数]]
  :PROPERTIES:
  :CUSTOM_ID: 按列翻转得到最大值等行数
  :END:
[[./solution/1000-1099/1072.Flip Columns For Maximum Number of Equal Rows/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定由若干 0 和 1
组成的矩阵 matrix，从中选出任意数量的列并翻转其上的 每个 单元格。翻转后，单元格的值从
0 变成 1，或者从 1 变为 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

回经过一些翻转后，行与行之间所有值都相等的最大行数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[[0,1],[1,1]]
  <strong>输出：</strong>1
  <strong>解释：</strong>不进行翻转，有 1 行所有值都相等。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[[0,1],[1,0]]
  <strong>输出：</strong>2
  <strong>解释：</strong>翻转第一列的值之后，这两行都由相等的值组成。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[[0,0,0],[0,0,1],[1,1,0]]
  <strong>输出：</strong>2
  <strong>解释：</strong>翻转前两列的值之后，后两行由相等的值组成。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= matrix.length <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= matrix[i].length <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有 matrix[i].length 都相等

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

matrix[i][j] 为 0 或 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
