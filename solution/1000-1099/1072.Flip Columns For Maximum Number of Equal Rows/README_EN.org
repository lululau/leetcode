* [[https://leetcode.com/problems/flip-columns-for-maximum-number-of-equal-rows][1072.
Flip Columns For Maximum Number of Equal Rows]]
  :PROPERTIES:
  :CUSTOM_ID: flip-columns-for-maximum-number-of-equal-rows
  :END:
[[./solution/1000-1099/1072.Flip Columns For Maximum Number of Equal Rows/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an m x n binary matrix matrix.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You can choose any number of columns in the matrix and flip every cell
in that column (i.e., Change the value of the cell from 0 to 1 or vice
versa).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum number of rows that have all values equal after some
number of flips.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[0,1],[1,1]]
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> After flipping no values, 1 row has all values equal.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[0,1],[1,0]]
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> After flipping values in the first column, both rows have equal values.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[0,0,0],[0,0,1],[1,1,0]]
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> After flipping values in the first two columns, the last two rows have equal values.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == matrix.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

matrix[i][j] is either 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
