* [[https://leetcode-cn.com/problems/confusing-number][1056. 易混淆数]]
  :PROPERTIES:
  :CUSTOM_ID: 易混淆数
  :END:
[[./solution/1000-1099/1056.Confusing Number/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个数字 N，当它满足以下条件的时候返回 true：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

原数字旋转 180° 以后可以得到新的数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如 0, 1, 6, 8, 9 旋转 180° 以后，得到了新的数字 0, 1, 9, 8, 6 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

2, 3, 4, 5, 7 旋转 180° 后，得到的不是数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

易混淆数 (confusing number)
在旋转180°以后，可以得到和原来不同的数，且新数字的每一位都是有效的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>6
  <strong>输出：</strong>true
  <strong>解释： 
  </strong>把 6 旋转 180&deg; 以后得到 9，9 是有效数字且 9!=6 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>89
  <strong>输出：</strong>true
  <strong>解释: 
  </strong>把 89 旋转 180&deg; 以后得到 68，<code>86</code> 是有效数字且 86!=89 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>11
  <strong>输出：</strong>false
  <strong>解释：
  </strong>把 11 旋转 180&deg; 以后得到 11，11 是有效数字但是值保持不变，所以 11 不是易混淆数字。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>25
  <strong>输出：</strong>false
  <strong>解释：</strong>
  把 25 旋转 180&deg; 以后得到的不是数字。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= N <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

可以忽略掉旋转后得到的前导零，例如，如果我们旋转后得到 0008
那么该数字就是 8 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
