* [[https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations][1005.
K 次取反后最大化的数组和]]
  :PROPERTIES:
  :CUSTOM_ID: k-次取反后最大化的数组和
  :END:
[[./solution/1000-1099/1005.Maximize Sum Of Array After K Negations/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个整数数组 A，我们只能用以下方法修改该数组：我们选择某个索引
i 并将 A[i] 替换为 -A[i]，然后总共重复这个过程 K
次。（我们可以多次选择同一个索引 i。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

以这种方式修改数组后，返回数组可能的最大和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [4,2,3], K = 1
  <strong>输出：</strong>5
  <strong>解释：</strong>选择索引 (1,) ，然后 A 变为 [4,-2,3]。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [3,-1,0,2], K = 3
  <strong>输出：</strong>6
  <strong>解释：</strong>选择索引 (1, 2, 2) ，然后 A 变为 [3,1,0,2]。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>A = [2,-3,-1,5,-4], K = 2
  <strong>输出：</strong>13
  <strong>解释：</strong>选择索引 (1, 4) ，然后 A 变为 [2,3,-1,5,4]。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= K <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= A[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html

#+begin_html
  <!-- tabs:end -->
#+end_html
