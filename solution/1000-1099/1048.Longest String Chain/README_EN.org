* [[https://leetcode.com/problems/longest-string-chain][1048. Longest
String Chain]]
  :PROPERTIES:
  :CUSTOM_ID: longest-string-chain
  :END:
[[./solution/1000-1099/1048.Longest String Chain/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a list of words, each word consists of English lowercase letters.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Let's say word1 is a predecessor of word2 if and only if we can add
exactly one letter anywhere in word1 to make it equal to word2.  For
example, "abc" is a predecessor of "abac".

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A word chain is a sequence of words [word_1, word_2, ..., word_k] with k
>= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor
of word_3, and so on.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the longest possible length of a word chain with words chosen
from the given list of words.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> words = [&quot;a&quot;,&quot;b&quot;,&quot;ba&quot;,&quot;bca&quot;,&quot;bda&quot;,&quot;bdca&quot;]
  <strong>Output:</strong> 4
  <strong>Explanation</strong>: One of the longest word chain is &quot;a&quot;,&quot;ba&quot;,&quot;bda&quot;,&quot;bdca&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> words = [&quot;xbc&quot;,&quot;pcxbcf&quot;,&quot;xb&quot;,&quot;cxbc&quot;,&quot;pcxbc&quot;]
  <strong>Output:</strong> 5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words[i].length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

words[i] only consists of English lowercase letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
