* [[https://leetcode.com/problems/cheapest-flights-within-k-stops][787.
Cheapest Flights Within K Stops]]
  :PROPERTIES:
  :CUSTOM_ID: cheapest-flights-within-k-stops
  :END:
[[./solution/0700-0799/0787.Cheapest Flights Within K Stops/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There are n cities connected by m flights. Each flight starts from
city u and arrives at v with a price w.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Now given all the cities and flights, together with starting city src
and the destination dst, your task is to find the cheapest price from
src to dst with up to k stops. If there is no such route, output -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Example 1:</strong>
  <strong>Input:</strong> 
  n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
  src = 0, dst = 2, k = 1
  <strong>Output:</strong> 200
  <strong>Explanation:</strong> 
  The graph looks like this:
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0787.Cheapest Flights Within K Stops/images/995.png" style="height:180px; width:246px" />

  The cheapest price from city <code>0</code> to city <code>2</code> with at most 1 stop costs 200, as marked red in the picture.</pre>
#+end_html

#+begin_html
  <pre>
  <strong>Example 2:</strong>
  <strong>Input:</strong> 
  n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
  src = 0, dst = 2, k = 0
  <strong>Output:</strong> 500
  <strong>Explanation:</strong> 
  The graph looks like this:
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0787.Cheapest Flights Within K Stops/images/995.png" style="height:180px; width:246px" />

  The cheapest price from city <code>0</code> to city <code>2</code> with at most 0 stop costs 500, as marked blue in the picture.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes n will be in range [1, 100], with nodes labeled from
0 to n - 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The size of flights will be in range [0, n * (n - 1) / 2].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The format of each flight will be (src, dst, price).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The price of each flight will be in the range [1, 10000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

k is in the range of [0, n - 1].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There will not be any duplicated flights or self cycles.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
