* [[https://leetcode-cn.com/problems/cheapest-flights-within-k-stops][787.
K 站中转内最便宜的航班]]
  :PROPERTIES:
  :CUSTOM_ID: k-站中转内最便宜的航班
  :END:
[[./solution/0700-0799/0787.Cheapest Flights Within K Stops/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有 n 个城市通过 m 个航班连接。每个航班都从城市 u 开始，以价格 w 抵达 v。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

现在给定所有的城市和航班，以及出发城市 src 和目的地
dst，你的任务是找到从 src 到 dst 最多经过 k 站中转的最便宜的价格。
如果没有这样的路线，则输出 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 
  n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
  src = 0, dst = 2, k = 1
  <strong>输出:</strong> 200
  <strong>解释:</strong> 
  城市航班图如下
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0787.Cheapest Flights Within K Stops/images/995.png" style="height: 180px; width: 246px;" />

  从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 
  n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
  src = 0, dst = 2, k = 0
  <strong>输出:</strong> 500
  <strong>解释:</strong> 
  城市航班图如下
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0787.Cheapest Flights Within K Stops/images/995.png" style="height: 180px; width: 246px;" />

  从城市 0 到城市 2 在 0 站中转以内的最便宜价格是 500，如图中蓝色所示。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n 范围是 [1, 100]，城市标签从 0 到 n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

航班数量范围是 [0, n * (n - 1) / 2]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个航班的格式 (src, dst, price)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个航班的价格范围是 [1, 10000]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

k 范围是 [0, n - 1]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

航班没有重复，且不存在自环

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
