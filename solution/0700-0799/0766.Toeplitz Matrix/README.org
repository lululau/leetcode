* [[https://leetcode-cn.com/problems/toeplitz-matrix][766.
托普利茨矩阵]]
  :PROPERTIES:
  :CUSTOM_ID: 托普利茨矩阵
  :END:
[[./solution/0700-0799/0766.Toeplitz Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 m x n 的矩阵 matrix 。如果这个矩阵是托普利茨矩阵，返回 true
；否则，返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果矩阵上每一条由左上到右下的对角线上的元素都相同，那么这个矩阵是
托普利茨矩阵 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]
  <strong>输出：</strong>true
  <strong>解释：</strong>
  在上述矩阵中, 其对角线为: 
  "[9]", "[5, 5]", "[1, 1, 1]", "[2, 2, 2]", "[3, 3]", "[4]"。 
  各条对角线上的所有元素均相同, 因此答案是 True 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>matrix = [[1,2],[2,2]]
  <strong>输出：</strong>false
  <strong>解释：</strong>
  对角线 "[1, 2]" 上的元素不同。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == matrix.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= matrix[i][j] <= 99

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果矩阵存储在磁盘上，并且内存有限，以至于一次最多只能将矩阵的一行加载到内存中，该怎么办？

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果矩阵太大，以至于一次只能将不完整的一行加载到内存中，该怎么办？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

遍历矩阵，若出现元素与其左上角的元素不等的情况，返回 =false=。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:
          m, n = len(matrix), len(matrix[0])
          for i in range(1, m):
              for j in range(1, n):
                  if matrix[i][j] != matrix[i - 1][j - 1]:
                      return False
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean isToeplitzMatrix(int[][] matrix) {
          int m = matrix.length, n = matrix[0].length;
          for (int i = 1; i < m; ++i) {
              for (int j = 1; j < n; ++j) {
                  if (matrix[i][j] != matrix[i - 1][j - 1]) {
                      return false;
                  }
              }
          }
          return true;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
