* [[https://leetcode.com/problems/kth-largest-element-in-a-stream][703.
Kth Largest Element in a Stream]]
  :PROPERTIES:
  :CUSTOM_ID: kth-largest-element-in-a-stream
  :END:
[[./solution/0700-0799/0703.Kth Largest Element in a Stream/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a class to find the kth largest element in a stream. Note that it
is the kth largest element in the sorted order, not the kth distinct
element.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement KthLargest class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

KthLargest(int k, int[] nums) Initializes the object with the integer k
and the stream of integers nums.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int add(int val) Returns the element representing the kth largest
element in the stream.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;KthLargest&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;]
  [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
  <strong>Output</strong>
  [null, 4, 5, 5, 8, 8]

  <strong>Explanation</strong>
  KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
  kthLargest.add(3);   // return 4
  kthLargest.add(5);   // return 5
  kthLargest.add(10);  // return 5
  kthLargest.add(9);   // return 8
  kthLargest.add(4);   // return 8
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= val <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 104 calls will be made to add.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that there will be at least k elements in the array
when you search for the kth element.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class KthLargest:

      def __init__(self, k: int, nums: List[int]):
          self.q = []
          self.size = k
          for num in nums:
              self.add(num)

      def add(self, val: int) -> int:
          heapq.heappush(self.q, val)
          if len(self.q) > self.size:
              heapq.heappop(self.q)
          return self.q[0]


  # Your KthLargest object will be instantiated and called as such:
  # obj = KthLargest(k, nums)
  # param_1 = obj.add(val)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class KthLargest {
      private PriorityQueue<Integer> q;
      private int size;

      public KthLargest(int k, int[] nums) {
          q = new PriorityQueue<>(k);
          size = k;
          for (int num : nums) {
              add(num);
          }
      }

      public int add(int val) {
          q.offer(val);
          if (q.size() > size) {
              q.poll();
          }
          return q.peek();
      }
  }

  /**
   * Your KthLargest object will be instantiated and called as such:
   * KthLargest obj = new KthLargest(k, nums);
   * int param_1 = obj.add(val);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
