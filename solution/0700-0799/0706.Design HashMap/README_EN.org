* [[https://leetcode.com/problems/design-hashmap][706. Design HashMap]]
  :PROPERTIES:
  :CUSTOM_ID: design-hashmap
  :END:
[[./solution/0700-0799/0706.Design HashMap/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a HashMap without using any built-in hash table libraries.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the MyHashMap class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MyHashMap() initializes the object with an empty map.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void put(int key, int value) inserts a (key, value) pair into the
HashMap. If the key already exists in the map, update the corresponding
value.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int get(int key) returns the value to which the specified key is mapped,
or -1 if this map contains no mapping for the key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void remove(key) removes the key and its corresponding value if the map
contains the mapping for the key.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;MyHashMap&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;remove&quot;, &quot;get&quot;]
  [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
  <strong>Output</strong>
  [null, null, null, 1, -1, null, 1, null, -1]

  <strong>Explanation</strong>
  MyHashMap myHashMap = new MyHashMap();
  myHashMap.put(1, 1); // The map is now [[1,1]]
  myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
  myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
  myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
  myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
  myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
  myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
  myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= key, value <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 104 calls will be made to put, get, and remove.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Please do not use the built-in HashMap library.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class MyHashMap:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.data = [-1] * 1000001

      def put(self, key: int, value: int) -> None:
          """
          value will always be non-negative.
          """
          self.data[key] = value

      def get(self, key: int) -> int:
          """
          Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
          """
          return self.data[key]

      def remove(self, key: int) -> None:
          """
          Removes the mapping of the specified value key if this map contains a mapping for the key
          """
          self.data[key] = -1



  # Your MyHashMap object will be instantiated and called as such:
  # obj = MyHashMap()
  # obj.put(key,value)
  # param_2 = obj.get(key)
  # obj.remove(key)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class MyHashMap {

      private int[] data;

      /** Initialize your data structure here. */
      public MyHashMap() {
          data = new int[1000001];
          Arrays.fill(data, -1);
      }

      /** value will always be non-negative. */
      public void put(int key, int value) {
          data[key] = value;
      }

      /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
      public int get(int key) {
          return data[key];
      }

      /** Removes the mapping of the specified value key if this map contains a mapping for the key */
      public void remove(int key) {
          data[key] = -1;
      }
  }

  /**
   * Your MyHashMap object will be instantiated and called as such:
   * MyHashMap obj = new MyHashMap();
   * obj.put(key,value);
   * int param_2 = obj.get(key);
   * obj.remove(key);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
