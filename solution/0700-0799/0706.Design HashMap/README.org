* [[https://leetcode-cn.com/problems/design-hashmap][706. 设计哈希映射]]
  :PROPERTIES:
  :CUSTOM_ID: 设计哈希映射
  :END:
[[./solution/0700-0799/0706.Design HashMap/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

不使用任何内建的哈希表库设计一个哈希映射（HashMap）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 MyHashMap 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MyHashMap() 用空映射初始化对象

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void put(int key, int value) 向 HashMap 插入一个键值对 (key, value)
。如果 key 已经存在于映射中，则更新其对应的值 value 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int get(int key) 返回特定的 key 所映射的 value ；如果映射中不包含 key
的映射，返回 -1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void remove(key) 如果映射中存在 key 的映射，则移除 key 和它所对应的
value 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入</strong>：
  ["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
  [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
  <strong>输出</strong>：
  [null, null, null, 1, -1, null, 1, null, -1]

  <strong>解释</strong>：
  MyHashMap myHashMap = new MyHashMap();
  myHashMap.put(1, 1); // myHashMap 现在为 [[1,1]]
  myHashMap.put(2, 2); // myHashMap 现在为 [[1,1], [2,2]]
  myHashMap.get(1);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,2]]
  myHashMap.get(3);    // 返回 -1（未找到），myHashMap 现在为 [[1,1], [2,2]]
  myHashMap.put(2, 1); // myHashMap 现在为 [[1,1], [2,1]]（更新已有的值）
  myHashMap.get(2);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,1]]
  myHashMap.remove(2); // 删除键为 2 的数据，myHashMap 现在为 [[1,1]]
  myHashMap.get(2);    // 返回 -1（未找到），myHashMap 现在为 [[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= key, value <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 104 次 put、get 和 remove 方法

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：你能否不使用内置的 HashMap 库解决此问题？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

数组实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class MyHashMap:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.data = [-1] * 1000001

      def put(self, key: int, value: int) -> None:
          """
          value will always be non-negative.
          """
          self.data[key] = value

      def get(self, key: int) -> int:
          """
          Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
          """
          return self.data[key]

      def remove(self, key: int) -> None:
          """
          Removes the mapping of the specified value key if this map contains a mapping for the key
          """
          self.data[key] = -1



  # Your MyHashMap object will be instantiated and called as such:
  # obj = MyHashMap()
  # obj.put(key,value)
  # param_2 = obj.get(key)
  # obj.remove(key)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class MyHashMap {

      private int[] data;

      /** Initialize your data structure here. */
      public MyHashMap() {
          data = new int[1000001];
          Arrays.fill(data, -1);
      }

      /** value will always be non-negative. */
      public void put(int key, int value) {
          data[key] = value;
      }

      /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
      public int get(int key) {
          return data[key];
      }

      /** Removes the mapping of the specified value key if this map contains a mapping for the key */
      public void remove(int key) {
          data[key] = -1;
      }
  }

  /**
   * Your MyHashMap object will be instantiated and called as such:
   * MyHashMap obj = new MyHashMap();
   * obj.put(key,value);
   * int param_2 = obj.get(key);
   * obj.remove(key);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
