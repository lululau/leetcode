* [[https://leetcode-cn.com/problems/open-the-lock][752. 打开转盘锁]]
  :PROPERTIES:
  :CUSTOM_ID: 打开转盘锁
  :END:
[[./solution/0700-0799/0752.Open the Lock/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2',
'3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9'
变为  '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

列表 deadends
包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

字符串 target
代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回
-1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;
  <strong>输出：</strong>6
  <strong>解释：</strong>
  可能的移动序列为 &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;。
  注意 &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; 这样的序列是不能解锁的，
  因为当拨动到 &quot;0102&quot; 时这个锁就会被锁定。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> deadends = [&quot;8888&quot;], target = &quot;0009&quot;
  <strong>输出：</strong>1
  <strong>解释：</strong>
  把最后一位反向旋转一次即可 &quot;0000&quot; -&gt; &quot;0009&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;
  <strong>输出：</strong>-1
  <strong>解释：
  </strong>无法旋转到目标数字且不被锁定。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> deadends = [&quot;0000&quot;], target = &quot;8888&quot;
  <strong>输出：</strong>-1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

死亡列表 deadends 的长度范围为 [1, 500]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

目标数字 target 不会在 deadends 之中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 '0000'
到 '9999' 中产生。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
