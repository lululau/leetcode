* [[https://leetcode-cn.com/problems/smallest-rotation-with-highest-score][798.
得分最高的最小轮调]]
  :PROPERTIES:
  :CUSTOM_ID: 得分最高的最小轮调
  :END:
[[./solution/0700-0799/0798.Smallest Rotation with Highest Score/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个数组 A，我们可以将它按一个非负整数
K 进行轮调，这样可以使数组变为 A[K], A[K+1], A{K+2], ... A[A.length -
1], A[0], A[1], ...,
A[K-1] 的形式。此后，任何值小于或等于其索引的项都可以记作一分。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，如果数组为 [2, 4, 1, 3, 0]，我们按 K = 2 进行轮调后，它将变成 [1,
3, 0, 2, 4]。这将记作 3 分，因为 1 > 0 [no points], 3 > 1 [no points], 0
<= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在所有可能的轮调中，返回我们所能得到的最高分数对应的轮调索引
K。如果有多个答案，返回满足条件的最小的索引 K。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[2, 3, 1, 4, 0]
  <strong>输出：</strong>3
  <strong>解释：</strong>
  下面列出了每个 K 的得分：
  K = 0,  A = [2,3,1,4,0],    score 2
  K = 1,  A = [3,1,4,0,2],    score 3
  K = 2,  A = [1,4,0,2,3],    score 3
  K = 3,  A = [4,0,2,3,1],    score 4
  K = 4,  A = [0,2,3,1,4],    score 3
  所以我们应当选择&nbsp;K = 3，得分最高。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[1, 3, 0, 2, 4]
  <strong>输出：</strong>0
  <strong>解释：</strong>
  A 无论怎么变化总是有 3 分。
  所以我们将选择最小的 K，即 0。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

A 的长度最大为 20000。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A[i] 的取值范围是 [0, A.length]。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
