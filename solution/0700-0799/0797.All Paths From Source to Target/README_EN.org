* [[https://leetcode.com/problems/all-paths-from-source-to-target][797.
All Paths From Source to Target]]
  :PROPERTIES:
  :CUSTOM_ID: all-paths-from-source-to-target
  :END:
[[./solution/0700-0799/0797.All Paths From Source to Target/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n -
1, find all possible paths from node 0 to node n - 1, and return them in
any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The graph is given as follows: graph[i] is a list of all nodes you can
visit from node i (i.e., there is a directed edge from node i to node
graph[i][j]).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> graph = [[1,2],[3],[3],[]]
  <strong>Output:</strong> [[0,1,3],[0,2,3]]
  <strong>Explanation:</strong> There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> graph = [[4,3,1],[3,2,4],[3],[4],[]]
  <strong>Output:</strong> [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> graph = [[1],[]]
  <strong>Output:</strong> [[0,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> graph = [[1,2,3],[2],[3],[]]
  <strong>Output:</strong> [[0,1,2,3],[0,2,3],[0,3]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> graph = [[1,3],[2],[3],[]]
  <strong>Output:</strong> [[0,1,2,3],[0,3]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == graph.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= graph[i][j] < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

graph[i][j] != i (i.e., there will be no self-loops).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The input graph is guaranteed to be a DAG.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
