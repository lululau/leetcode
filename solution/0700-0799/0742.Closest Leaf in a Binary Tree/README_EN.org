* [[https://leetcode.com/problems/closest-leaf-in-a-binary-tree][742.
Closest Leaf in a Binary Tree]]
  :PROPERTIES:
  :CUSTOM_ID: closest-leaf-in-a-binary-tree
  :END:
[[./solution/0700-0799/0742.Closest Leaf in a Binary Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a binary tree where every node has a unique value, and a target
key k, find the value of the nearest leaf node to target k in the tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Here, nearest to a leaf means the least number of edges travelled on the
binary tree to reach any leaf of the tree. Also, a node is called a leaf
if it has no children.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In the following examples, the input tree is represented in flattened
form row by row.

The actual root tree given will be a TreeNode object.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  <pre>

  <b>Input:</b>

  root = [1, 3, 2], k = 1

  Diagram of binary tree:

            1

           / \

          3   2



  <b>Output:</b> 2 (or 3)



  <b>Explanation:</b> Either 2 or 3 is the nearest leaf node to the target of 1.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  <pre>

  <b>Input:</b>

  root = [1], k = 1

  <b>Output:</b> 1



  <b>Explanation:</b> The nearest leaf node is the root node itself.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  <pre>

  <b>Input:</b>

  root = [1,2,3,4,null,null,null,5,null,6], k = 2

  Diagram of binary tree:

               1

              / \

             2   3

            /

           4

          /

         5

        /

       6



  <b>Output:</b> 3

  <b>Explanation:</b> The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

root represents a binary tree with at least 1 node and at most 1000
nodes.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Every node has a unique node.val in range [1, 1000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There exists some node in the given binary tree for which node.val == k.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
