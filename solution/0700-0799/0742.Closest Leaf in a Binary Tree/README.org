* [[https://leetcode-cn.com/problems/closest-leaf-in-a-binary-tree][742.
二叉树最近的叶节点]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树最近的叶节点
  :END:
[[./solution/0700-0799/0742.Closest Leaf in a Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个 每个结点的值互不相同 的二叉树，和一个目标值 k，找出树中与目标值
k 最近的叶结点。 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

这里，与叶结点 最近
表示在二叉树中到达该叶节点需要行进的边数与到达其它叶结点相比最少。而且，当一个结点没有孩子结点时称其为叶结点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在下面的例子中，输入的树以逐行的平铺形式表示。实际上的有根树 root
将以TreeNode对象的形式给出。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  root = [1, 3, 2], k = 1
  二叉树图示：
            1
           / \
          3   2

  <strong>输出：</strong> 2 (或 3)

  <strong>解释：</strong> 2 和 3 都是距离目标 1 最近的叶节点。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  root = [1], k = 1
  <strong>输出：</strong>1

  <strong>解释：</strong> 最近的叶节点是根结点自身。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  root = [1,2,3,4,null,null,null,5,null,6], k = 2
  二叉树图示：
               1
              / \
             2   3
            /
           4
          /
         5
        /
       6

  <strong>输出：</strong>3
  <strong>解释：</strong> 值为 3（而不是值为 6）的叶节点是距离结点 2 的最近结点。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

root 表示的二叉树最少有 1 个结点且最多有 1000 个结点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个结点都有一个唯一的 node.val ，范围为 [1, 1000]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

给定的二叉树中有某个结点使得 node.val == k。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
