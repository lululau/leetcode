* [[https://leetcode-cn.com/problems/find-pivot-index][724.
寻找数组的中心下标]]
  :PROPERTIES:
  :CUSTOM_ID: 寻找数组的中心下标
  :END:
[[./solution/0700-0799/0724.Find Pivot Index/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums，请编写一个能够返回数组 "中心下标" 的方法。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

数组 中心下标
是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果数组不存在中心下标，返回 -1
。如果数组有多个中心下标，应该返回最靠近左边的那一个。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：中心下标可能出现在数组的两端。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1, 7, 3, 6, 5, 6]
  <strong>输出：</strong>3
  <strong>解释：</strong>
  中心下标是 3 。
  左侧数之和 (1 + 7 + 3 = 11)，
  右侧数之和 (5 + 6 = 11) ，二者相等。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1, 2, 3]
  <strong>输出：</strong>-1
  <strong>解释：</strong>
  数组中不存在满足此条件的中心下标。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [2, 1, -1]
  <strong>输出：</strong>0
  <strong>解释：</strong>
  中心下标是 0 。
  下标 0 左侧不存在元素，视作和为 0 ；
  右侧数之和为 1 + (-1) = 0 ，二者相等。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

nums 的长度范围为 [0, 10000]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def pivotIndex(self, nums: List[int]) -> int:
          sums = sum(nums)
          pre_sum = 0
          for i, v in enumerate(nums):
              if (pre_sum << 1) == sums - v:
                  return i
              pre_sum += v
          return -1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int pivotIndex(int[] nums) {
          int sums = 0;
          for (int e : nums) {
              sums += e;
          }
          int preSum = 0;
          for (int i = 0; i < nums.length; ++i) {
              // preSum == sums - nums[i] - preSum
              if (preSum << 1 == sums - nums[i]) {
                  return i;
              }
              preSum += nums[i];
          }
          return -1;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
