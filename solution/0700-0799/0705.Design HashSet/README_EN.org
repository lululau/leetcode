* [[https://leetcode.com/problems/design-hashset][705. Design HashSet]]
  :PROPERTIES:
  :CUSTOM_ID: design-hashset
  :END:
[[./solution/0700-0799/0705.Design HashSet/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a HashSet without using any built-in hash table libraries.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement MyHashSet class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

void add(key) Inserts the value key into the HashSet.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool contains(key) Returns whether the value key exists in the HashSet
or not.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void remove(key) Removes the value key in the HashSet. If key does not
exist in the HashSet, do nothing.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;MyHashSet&quot;, &quot;add&quot;, &quot;add&quot;, &quot;contains&quot;, &quot;contains&quot;, &quot;add&quot;, &quot;contains&quot;, &quot;remove&quot;, &quot;contains&quot;]
  [[], [1], [2], [1], [3], [2], [2], [2], [2]]
  <strong>Output</strong>
  [null, null, null, true, false, null, true, null, false]

  <strong>Explanation</strong>
  MyHashSet myHashSet = new MyHashSet();
  myHashSet.add(1);      // set = [1]
  myHashSet.add(2);      // set = [1, 2]
  myHashSet.contains(1); // return True
  myHashSet.contains(3); // return False, (not found)
  myHashSet.add(2);      // set = [1, 2]
  myHashSet.contains(2); // return True
  myHashSet.remove(2);   // set = [1]
  myHashSet.contains(2); // return False, (already removed)</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= key <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 104 calls will be made to add, remove, and contains.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you solve the problem without using the built-in
HashSet library?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class MyHashSet:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.data = [False] * 1000001

      def add(self, key: int) -> None:
          self.data[key] = True

      def remove(self, key: int) -> None:
          self.data[key] = False

      def contains(self, key: int) -> bool:
          """
          Returns true if this set contains the specified element
          """
          return self.data[key]



  # Your MyHashSet object will be instantiated and called as such:
  # obj = MyHashSet()
  # obj.add(key)
  # obj.remove(key)
  # param_3 = obj.contains(key)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class MyHashSet {

      private boolean[] data;

      /** Initialize your data structure here. */
      public MyHashSet() {
          data = new boolean[1000001];
      }

      public void add(int key) {
          data[key] = true;
      }

      public void remove(int key) {
          data[key] = false;
      }

      /** Returns true if this set contains the specified element */
      public boolean contains(int key) {
          return data[key];
      }
  }

  /**
   * Your MyHashSet object will be instantiated and called as such:
   * MyHashSet obj = new MyHashSet();
   * obj.add(key);
   * obj.remove(key);
   * boolean param_3 = obj.contains(key);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
