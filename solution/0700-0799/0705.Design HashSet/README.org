* [[https://leetcode-cn.com/problems/design-hashset][705. 设计哈希集合]]
  :PROPERTIES:
  :CUSTOM_ID: 设计哈希集合
  :END:
[[./solution/0700-0799/0705.Design HashSet/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

不使用任何内建的哈希表库设计一个哈希集合（HashSet）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 MyHashSet 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

void add(key) 向哈希集合中插入值 key 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool contains(key) 返回哈希集合中是否存在这个值 key 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void remove(key) 将给定值 key
从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

 

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
  [[], [1], [2], [1], [3], [2], [2], [2], [2]]
  <strong>输出：</strong>
  [null, null, null, true, false, null, true, null, false]

  <strong>解释：</strong>
  MyHashSet myHashSet = new MyHashSet();
  myHashSet.add(1);      // set = [1]
  myHashSet.add(2);      // set = [1, 2]
  myHashSet.contains(1); // 返回 True
  myHashSet.contains(3); // 返回 False ，（未找到）
  myHashSet.add(2);      // set = [1, 2]
  myHashSet.contains(2); // 返回 True
  myHashSet.remove(2);   // set = [1]
  myHashSet.contains(2); // 返回 False ，（已移除）</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= key <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 104 次 add、remove 和 contains 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：你可以不使用内建的哈希集合库解决此问题吗？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

数组实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class MyHashSet:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.data = [False] * 1000001

      def add(self, key: int) -> None:
          self.data[key] = True

      def remove(self, key: int) -> None:
          self.data[key] = False

      def contains(self, key: int) -> bool:
          """
          Returns true if this set contains the specified element
          """
          return self.data[key]



  # Your MyHashSet object will be instantiated and called as such:
  # obj = MyHashSet()
  # obj.add(key)
  # obj.remove(key)
  # param_3 = obj.contains(key)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

- 可以一次性开辟一个大的数组，存放所有元素。

#+begin_src java
  class MyHashSet {

      private boolean[] data;

      /** Initialize your data structure here. */
      public MyHashSet() {
          data = new boolean[1000001];
      }

      public void add(int key) {
          data[key] = true;
      }

      public void remove(int key) {
          data[key] = false;
      }

      /** Returns true if this set contains the specified element */
      public boolean contains(int key) {
          return data[key];
      }
  }

  /**
   * Your MyHashSet object will be instantiated and called as such:
   * MyHashSet obj = new MyHashSet();
   * obj.add(key);
   * obj.remove(key);
   * boolean param_3 = obj.contains(key);
   */
#+end_src

- 也可以开辟一个大小为 =SIZE= 的数组，数组的每个位置是一个链表。

#+begin_src java
  class MyHashSet {

      private static final int SIZE = 1000;
      private LinkedList[] data;

      /** Initialize your data structure here. */
      public MyHashSet() {
          data = new LinkedList[SIZE];
          Arrays.fill(data, new LinkedList<Integer>());
      }

      public void add(int key) {
          int index = hash(key);
          Iterator<Integer> iterator = data[index].iterator();
          while (iterator.hasNext()) {
              Integer e = iterator.next();
              if (e == key) return;
          }
          data[index].addFirst(key);
      }

      public void remove(int key) {
          int index = hash(key);
          ListIterator<Integer> iterator = data[index].listIterator();
          while (iterator.hasNext()) {
              Integer e = iterator.next();
              if (e == key) iterator.remove();
          }
      }

      /** Returns true if this set contains the specified element */
      public boolean contains(int key) {
          int index = hash(key);
          Iterator<Integer> iterator = data[index].iterator();
          while (iterator.hasNext()) {
              Integer e = iterator.next();
              if (e == key) return true;
          }
          return false;
      }

      private int hash(int key) {
          return key % SIZE;
      }
  }

  /**
   * Your MyHashSet object will be instantiated and called as such:
   * MyHashSet obj = new MyHashSet();
   * obj.add(key);
   * obj.remove(key);
   * boolean param_3 = obj.contains(key);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
