* [[https://leetcode-cn.com/problems/basic-calculator-iv][770.
基本计算器 IV]]
  :PROPERTIES:
  :CUSTOM_ID: 基本计算器-iv
  :END:
[[./solution/0700-0799/0770.Basic Calculator IV/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个表达式 expression 如 expression = "e + 8 - a +
5" 和一个求值映射，如 {"e": 1}（给定的形式为 evalvars = ["e"]
和 evalints = [1]），返回表示简化表达式的标记列表，例如 ["-1*a","14"]

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

表达式交替使用块和符号，每个块和符号之间有一个空格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

块要么是括号中的表达式，要么是变量，要么是非负整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

块是括号中的表达式，变量或非负整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

变量是一个由小写字母组成的字符串（不包括数字）。请注意，变量可以是多个字母，并注意变量从不具有像 "2x" 或 "-x" 这样的前导系数或一元运算符 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

表达式按通常顺序进行求值：先是括号，然后求乘法，再计算加法和减法。例如，expression
= "1 + 2 * 3" 的答案是 ["7"]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输出格式如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

对于系数非零的每个自变量项，我们按字典排序的顺序将自变量写在一个项中。例如，我们永远不会写像
“b/a/c” 这样的项，只写 “a/b/c”。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

项的次数等于被乘的自变量的数目，并计算重复项。(例如，"a/a/b*c" 的次数为
4。)。我们先写出答案的最大次数项，用字典顺序打破关系，此时忽略词的前导系数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

项的前导系数直接放在左边，用星号将它与变量分隔开(如果存在的话)。前导系数
1 仍然要打印出来。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

格式良好的一个示例答案是 ["-2/a/a/a", "3/a/a/b", "3/b/b", "4/a", "5/c",
"-6"] 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

系数为 0 的项（包括常数项）不包括在内。例如，“0” 的表达式输出为 []。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]
  <strong>输出：</strong>[&quot;-1*a&quot;,&quot;14&quot;]

  <strong>输入：</strong>expression = &quot;e - 8 + temperature - pressure&quot;,
  evalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]
  <strong>输出：</strong>[&quot;-1*pressure&quot;,&quot;5&quot;]

  <strong>输入：</strong>expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []
  <strong>输出：</strong>[&quot;1*e*e&quot;,&quot;-64&quot;]

  <strong>输入：</strong>expression = &quot;7 - 7&quot;, evalvars = [], evalints = []
  <strong>输出：</strong>[]

  <strong>输入：</strong>expression = &quot;a * b * c + b * a * c * 4&quot;, evalvars = [], evalints = []
  <strong>输出：</strong>[&quot;5*a*b*c&quot;]

  <strong>输入：</strong>expression = &quot;((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))&quot;,
  evalvars = [], evalints = []
  <strong>输出：</strong>[&quot;-1*a*a*b*b&quot;,&quot;2*a*a*b*c&quot;,&quot;-1*a*a*c*c&quot;,&quot;1*a*b*b*b&quot;,&quot;-1*a*b*b*c&quot;,&quot;-1*a*b*c*c&quot;,&quot;1*a*c*c*c&quot;,&quot;-1*b*b*b*c&quot;,&quot;2*b*b*c*c&quot;,&quot;-1*b*c*c*c&quot;,&quot;2*a*a*b&quot;,&quot;-2*a*a*c&quot;,&quot;-2*a*b*b&quot;,&quot;2*a*c*c&quot;,&quot;1*b*b*b&quot;,&quot;-1*b*b*c&quot;,&quot;1*b*c*c&quot;,&quot;-1*c*c*c&quot;,&quot;-1*a*a&quot;,&quot;1*a*b&quot;,&quot;1*a*c&quot;,&quot;-1*b*c&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

expression 的长度在 [1, 250] 范围内。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

evalvars, evalints 在范围 [0, 100] 内，且长度相同。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
