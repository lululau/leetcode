* [[https://leetcode.com/problems/random-pick-with-blacklist][710.
Random Pick with Blacklist]]
  :PROPERTIES:
  :CUSTOM_ID: random-pick-with-blacklist
  :END:
[[./solution/0700-0799/0710.Random Pick with Blacklist/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a blacklist B containing unique integers from [0, N), write a
function to return a uniform random integer from [0, N) which is NOT in
B.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Optimize it such that it minimizes the call to system's Math.random().

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= 1000000000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= B.length < min(100000, N)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

[0, N) does NOT include N. See interval notation.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: 

  </strong><span id="example-input-1-1">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]

  </span><span id="example-input-1-2">[[1,[]],[],[],[]]</span>

  <strong>Output: </strong><span id="example-output-1">[null,0,0,0]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: 

  </strong><span id="example-input-2-1">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]

  </span><span id="example-input-2-2">[[2,[]],[],[],[]]</span>

  <strong>Output: </strong><span id="example-output-2">[null,1,1,1]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: 

  </strong><span id="example-input-3-1">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]

  </span><span id="example-input-3-2">[[3,[1]],[],[],[]]</span>

  <strong>Output: </strong><span id="example-output-3">[null,0,0,2]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: 

  </strong><span id="example-input-4-1">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]

  </span><span id="example-input-4-2">[[4,[2]],[],[],[]]</span>

  <strong>Output: </strong><span id="example-output-4">[null,1,3,1]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Explanation of Input Syntax:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The input is two lists: the subroutines called and
their arguments. Solution's constructor has two arguments, N and the
blacklist B. pick has no arguments. Arguments are always wrapped with a
list, even if there aren't any.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
