* [[https://leetcode.com/problems/sentence-similarity][734. Sentence
Similarity]]
  :PROPERTIES:
  :CUSTOM_ID: sentence-similarity
  :END:
[[./solution/0700-0799/0734.Sentence Similarity/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

We can represent a sentence as an array of words, for example,
the sentence "I am happy with leetcode" can be represented as arr =
["I","am",happy","with","leetcode"].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given two sentences sentence1 and sentence2 each represented as a string
array and given an array of string pairs similarPairs
where similarPairs[i] = [xi, yi] indicates that the two words xi and yi
are similar.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return true if sentence1 and sentence2 are similar, or false if they are
not similar.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Two sentences are similar if:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

They have the same length (i.e. the same number of words)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sentence1[i] and sentence2[i] are similar.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that a word is always similar to itself, also notice that the
similarity relation is not transitive. For example, if the words a and b
are similar and the words b and c are similar, a and c
are not necessarily similar.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> sentence1 = [&quot;great&quot;,&quot;acting&quot;,&quot;skills&quot;], sentence2 = [&quot;fine&quot;,&quot;drama&quot;,&quot;talent&quot;], similarPairs = [[&quot;great&quot;,&quot;fine&quot;],[&quot;drama&quot;,&quot;acting&quot;],[&quot;skills&quot;,&quot;talent&quot;]]
  <strong>Output:</strong> true
  <strong>Explanation:</strong> The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> sentence1 = [&quot;great&quot;], sentence2 = [&quot;great&quot;], similarPairs = []
  <strong>Output:</strong> true
  <strong>Explanation:</strong> A word is similar to itself.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> sentence1 = [&quot;great&quot;], sentence2 = [&quot;doubleplus&quot;,&quot;good&quot;], similarPairs = [[&quot;great&quot;,&quot;doubleplus&quot;]]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> As they don&#39;t have the same length, we return false.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= sentence1.length, sentence2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= sentence1[i].length, sentence2[i].length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sentence1[i] and sentence2[i] consist of lower-case and upper-case
English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= similarPairs.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

similarPairs[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= xi.length, yi.length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

xi and yi consist of lower-case and upper-case English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the pairs (xi, yi) are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def areSentencesSimilar(self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]) -> bool:
          if len(sentence1) != len(sentence2):
              return False
          pairs = {(word1, word2) for word1, word2 in similarPairs}
          for i in range(len(sentence1)):
              similar = (sentence1[i], sentence2[i]) in pairs or (sentence2[i], sentence1[i]) in pairs or sentence1[i] == sentence2[i]
              if not similar:
                  return False
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean areSentencesSimilar(String[] sentence1, String[] sentence2, List<List<String>> similarPairs) {
          if (sentence1.length != sentence2.length) {
              return false;
          }
          Set<String> pairs = new HashSet<>();
          for (List<String> pair : similarPairs) {
              pairs.add(pair.get(0) + "." + pair.get(1));
          }
          for (int i = 0; i < sentence1.length; ++i) {
              boolean similar =  pairs.contains(sentence1[i] + "." + sentence2[i]) || pairs.contains(sentence2[i] + "." + sentence1[i]) || sentence1[i].equals(sentence2[i]);
              if (!similar) {
                  return false;
              }
          }
          return true;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
