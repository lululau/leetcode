* [[https://leetcode.com/problems/pyramid-transition-matrix][756.
Pyramid Transition Matrix]]
  :PROPERTIES:
  :CUSTOM_ID: pyramid-transition-matrix
  :END:
[[./solution/0700-0799/0756.Pyramid Transition Matrix/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

We are stacking blocks to form a pyramid. Each block has a color which
is a one-letter string.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We are allowed to place any color block C on top of two adjacent blocks
of colors A and B, if and only if ABC is an allowed triple.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We start with a bottom row of bottom, represented as a single string. We
also start with a list of allowed triples allowed. Each allowed triple
is represented as a string of length 3.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return true if we can build the pyramid all the way to the top,
otherwise false.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> bottom = &quot;BCD&quot;, allowed = [&quot;BCG&quot;,&quot;CDE&quot;,&quot;GEA&quot;,&quot;FFF&quot;]
  <strong>Output:</strong> true
  <strong>Explanation:</strong>
  We can stack the pyramid like this:
      A
     / \
    G   E
   / \ / \
  B   C   D

  We are allowed to place G on top of B and C because BCG is an allowed triple.  Similarly, we can place E on top of C and D, then A on top of G and E.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> bottom = &quot;AABA&quot;, allowed = [&quot;AAA&quot;,&quot;AAB&quot;,&quot;ABA&quot;,&quot;ABB&quot;,&quot;BAC&quot;]
  <strong>Output:</strong> false
  <strong>Explanation:</strong>
  We cannot stack the pyramid to the top.
  Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= bottom.length <= 8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= allowed.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

allowed[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The letters in all input strings are from the set {'A', 'B', 'C', 'D',
'E', 'F', 'G'}.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
