* [[https://leetcode-cn.com/problems/pyramid-transition-matrix][756.
金字塔转换矩阵]]
  :PROPERTIES:
  :CUSTOM_ID: 金字塔转换矩阵
  :END:
[[./solution/0700-0799/0756.Pyramid Transition Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

现在，我们用一些方块来堆砌一个金字塔。
每个方块用仅包含一个字母的字符串表示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

使用三元组表示金字塔的堆砌规则如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对于三元组 ABC ，C 为顶层方块，方块 A 、B 分别作为方块 C
下一层的的左、右子块。当且仅当 ABC
是被允许的三元组，我们才可以将其堆砌上。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

初始时，给定金字塔的基层 bottom，用一个字符串表示。一个允许的三元组列表 allowed，每个三元组用一个长度为
3 的字符串表示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果可以由基层一直堆到塔尖就返回 true ，否则返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>bottom = "BCD", allowed = ["BCG", "CDE", "GEA", "FFF"]
  <strong>输出：</strong>true
  <strong>解释：</strong>
  可以堆砌成这样的金字塔:
      A
     / \
    G   E
   / \ / \
  B   C   D

  因为符合 BCG、CDE 和 GEA 三种规则。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>bottom = "AABA", allowed = ["AAA", "AAB", "ABA", "ABB", "BAC"]
  <strong>输出：</strong>false
  <strong>解释：</strong>
  无法一直堆到塔尖。
  注意, 允许存在像 ABC 和 ABD 这样的三元组，其中 C != D。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

bottom 的长度范围在 [2, 8]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

allowed 的长度范围在[0, 200]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

方块的标记字母范围为{'A', 'B', 'C', 'D', 'E', 'F', 'G'}。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
