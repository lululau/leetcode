* [[https://leetcode-cn.com/problems/couples-holding-hands][765.
情侣牵手]]
  :PROPERTIES:
  :CUSTOM_ID: 情侣牵手
  :END:
[[./solution/0700-0799/0765.Couples Holding Hands/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

N 对情侣坐在连续排列的 2N 个座位上，想要牵到对方的手。
计算最少交换座位的次数，以便每对情侣可以并肩坐在一起。
一次交换可选择任意两人，让他们站起来交换座位。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

人和座位用 0 到 2N-1 的整数表示，情侣们按顺序编号，第一对是 (0, 1)，第二对是 (2, 3)，以此类推，最后一对是 (2N-2,
2N-1)。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

这些情侣的初始座位  row[i] 是由最初始坐在第 i 个座位上的人决定的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> row = [0, 2, 1, 3]
  <strong>输出:</strong> 1
  <strong>解释:</strong> 我们只需要交换row[1]和row[2]的位置即可。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> row = [3, 2, 0, 1]
  <strong>输出:</strong> 0
  <strong>解释:</strong> 无需交换座位，所有的情侣都已经可以手牵手了。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

说明:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

len(row) 是偶数且数值在 [4, 60]范围内。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

可以保证row 是序列 0...len(row)-1 的一个全排列。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
