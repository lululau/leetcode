* [[https://leetcode.com/problems/is-graph-bipartite][785. Is Graph
Bipartite]]
  :PROPERTIES:
  :CUSTOM_ID: is-graph-bipartite
  :END:
[[./solution/0700-0799/0785.Is Graph Bipartite/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is an undirected graph with n nodes, where each node is numbered
between 0 and n - 1. You are given a 2D array graph, where graph[u] is
an array of nodes that node u is adjacent to. More formally, for each v
in graph[u], there is an undirected edge between node u and node v. The
graph has the following properties:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

There are no self-edges (graph[u] does not contain u).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are no parallel edges (graph[u] does not contain duplicate
values).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If v is in graph[u], then u is in graph[v] (the graph is undirected).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The graph may not be connected, meaning there may be two nodes u and v
such that there is no path between them.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

A graph is bipartite if the nodes can be partitioned into two
independent sets A and B such that every edge in the graph connects a
node in set A and a node in set B.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return true if and only if it is bipartite.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> graph = [[1,3],[0,2],[1,3],[0,2]]
  <strong>Output:</strong> true
  <strong>Explanation:</strong> We can partition the nodes into two sets: {0, 2} and {1, 3}.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

graph.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= graph[u].length < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= graph[u][i] <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

graph[u] does not contain u.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the values of graph[u] are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If graph[u] contains v, then graph[v] contains u.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
