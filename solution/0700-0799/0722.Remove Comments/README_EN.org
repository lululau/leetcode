* [[https://leetcode.com/problems/remove-comments][722. Remove
Comments]]
  :PROPERTIES:
  :CUSTOM_ID: remove-comments
  :END:
[[./solution/0700-0799/0722.Remove Comments/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a C++ program, remove comments from it. The program source is an
array where source[i] is the i-th line of the source code. This
represents the result of splitting the original source code string by
the newline character \n.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In C++, there are two types of comments, line comments, and block
comments.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The string // denotes a line comment, which represents that it and rest
of the characters to the right of it in the same line should be ignored.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The string // denotes a block comment, which represents that all
characters until the next (non-overlapping) occurrence of // should be
ignored. (Here, occurrences happen in reading order: line by line from
left to right.) To be clear, the string /*/ does not yet end the block
comment, as the ending would be overlapping the beginning.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The first effective comment takes precedence over others: if the string
// occurs in a block comment, it is ignored. Similarly, if the string /*
occurs in a line or block comment, it is also ignored.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If a certain line of code is empty after removing comments, you must not
output that line: each string in the answer list will be non-empty.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

There will be no control characters, single quote, or double quote
characters. For example, source = "string s ="/* Not a comment. */";"
will not be a test case. (Also, nothing else such as defines or macros
will interfere with the comments.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed that every open block comment will eventually be
closed, so /* outside of a line or block comment always starts a new
comment.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Finally, implicit newline characters can be deleted by block comments.
Please see the examples below for details.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

After removing the comments from the source code, return the source code
in the same format.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  <pre style="white-space: pre-wrap">

  <b>Input:</b> 

  source = ["/*Test program */", "int main()", "{ ", "  // variable declaration ", "int a, b, c;", "/* This is a test", "   multiline  ", "   comment for ", "   testing */", "a = b + c;", "}"]



  The line by line code is visualized as below:

  /*Test program */

  int main()

  { 

    // variable declaration 

  int a, b, c;

  /* This is a test

     multiline  

     comment for 

     testing */

  a = b + c;

  }



  <b>Output:</b> ["int main()","{ ","  ","int a, b, c;","a = b + c;","}"]



  The line by line code is visualized as below:

  int main()

  { 

    

  int a, b, c;

  a = b + c;

  }



  <b>Explanation:</b> 

  The string <code>/*</code> denotes a block comment, including line 1 and lines 6-9. The string <code>//</code> denotes line 4 as comments.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  <pre style="white-space: pre-wrap">

  <b>Input:</b> 

  source = ["a/*comment", "line", "more_comment*/b"]

  <b>Output:</b> ["ab"]

  <b>Explanation:</b> The original source string is "a/*comment<b>\n</b>line<b>\n</b>more_comment*/b", where we have bolded the newline characters.  After deletion, the <i>implicit</i> newline characters are deleted, leaving the string "ab", which when delimited by newline characters becomes ["ab"].

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <li>
#+end_html

The length of source is in the range [1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The length of source[i] is in the range [0, 80].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Every open block comment is eventually closed.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are no single-quote, double-quote, or control characters in the
source code.

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
