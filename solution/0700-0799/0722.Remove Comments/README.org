* [[https://leetcode-cn.com/problems/remove-comments][722. 删除注释]]
  :PROPERTIES:
  :CUSTOM_ID: 删除注释
  :END:
[[./solution/0700-0799/0722.Remove Comments/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给一个 C++
程序，删除程序中的注释。这个程序source是一个数组，其中source[i]表示第i行源码。 这表示每行源码由\n分隔。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在 C++ 中有两种注释风格，行内注释和块注释。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

字符串// 表示行注释，表示//和其右侧的其余字符应该被忽略。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

字符串//
表示一个块注释，它表示直到//的下一个（非重叠）出现的所有字符都应该被忽略。（阅读顺序为从左到右）非重叠是指，字符串/*/并没有结束块注释，因为注释的结尾与开头相重叠。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

第一个有效注释优先于其他注释：如果字符串//出现在块注释中会被忽略。
同样，如果字符串/*出现在行或块注释中也会被忽略。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果一行在删除注释之后变为空字符串，那么不要输出该行。即，答案列表中的每个字符串都是非空的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

样例中没有控制字符，单引号或双引号字符。比如，source = "string s = "/*
Not a comment. */";"
不会出现在测试样例里。（此外，没有其他内容（如定义或宏）会干扰注释。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们保证每一个块注释最终都会被闭合，
所以在行或块注释之外的/*总是开始新的注释。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

最后，隐式换行符可以通过块注释删除。 有关详细信息，请参阅下面的示例。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

从源代码中删除注释后，需要以相同的格式返回源代码。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 
  source = [&quot;/*Test program */&quot;, &quot;int main()&quot;, &quot;{ &quot;, &quot;  // variable declaration &quot;, &quot;int a, b, c;&quot;, &quot;/* This is a test&quot;, &quot;   multiline  &quot;, &quot;   comment for &quot;, &quot;   testing */&quot;, &quot;a = b + c;&quot;, &quot;}&quot;]

  示例代码可以编排成这样:
  /*Test program */
  int main()
  { 
    // variable declaration 
  int a, b, c;
  /* This is a test
     multiline  
     comment for 
     testing */
  a = b + c;
  }

  <strong>输出:</strong> [&quot;int main()&quot;,&quot;{ &quot;,&quot;  &quot;,&quot;int a, b, c;&quot;,&quot;a = b + c;&quot;,&quot;}&quot;]

  编排后:
  int main()
  { 
    
  int a, b, c;
  a = b + c;
  }

  <strong>解释:</strong> 
  第 1 行和第 6-9 行的字符串 /* 表示块注释。第 4 行的字符串 // 表示行注释。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 
  source = [&quot;a/*comment&quot;, &quot;line&quot;, &quot;more_comment*/b&quot;]
  <strong>输出:</strong> [&quot;ab&quot;]
  <strong>解释:</strong> 原始的 source 字符串是 &quot;a/*comment<strong>\n</strong>line<strong>\n</strong>more_comment*/b&quot;, 其中我们用粗体显示了换行符。删除注释后，隐含的换行符被删除，留下字符串 &quot;ab&quot; 用换行符分隔成数组时就是 [&quot;ab&quot;].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

source的长度范围为[1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

source[i]的长度范围为[0, 80].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个块注释都会被闭合。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

给定的源码中不会有单引号、双引号或其他控制字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
