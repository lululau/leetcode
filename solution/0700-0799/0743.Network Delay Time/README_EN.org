* [[https://leetcode.com/problems/network-delay-time][743. Network Delay
Time]]
  :PROPERTIES:
  :CUSTOM_ID: network-delay-time
  :END:
[[./solution/0700-0799/0743.Network Delay Time/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a network of n nodes, labeled from 1 to n. You are also
given times, a list of travel times as directed edges times[i] = (ui,
vi, wi), where ui is the source node, vi is the target node, and wi is
the time it takes for a signal to travel from source to target.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We will send a signal from a given node k. Return the time it takes for
all the n nodes to receive the signal. If it is impossible for all the n
nodes to receive the signal, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> times = [[1,2,1]], n = 2, k = 1
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> times = [[1,2,1]], n = 2, k = 2
  <strong>Output:</strong> -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= times.length <= 6000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

times[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ui, vi <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ui != vi

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= wi <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the pairs (ui, vi) are unique. (i.e., no multiple edges.)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
