* [[https://leetcode.com/problems/split-linked-list-in-parts][725. Split
Linked List in Parts]]
  :PROPERTIES:
  :CUSTOM_ID: split-linked-list-in-parts
  :END:
[[./solution/0700-0799/0725.Split Linked List in Parts/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a (singly) linked list with head node root, write a function to
split the linked list into k consecutive linked list "parts".

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The length of each part should be as equal as possible: no two parts
should have a size differing by more than 1. This may lead to some parts
being null.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The parts should be in order of occurrence in the input list, and parts
occurring earlier should always have a size greater than or equal parts
occurring later.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return a List of ListNode's representing the linked list parts that are
formed.

#+begin_html
  </p>
#+end_html

Examples

1->2->3->4, k = 5 // 5 equal parts

[ [1], ]

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  <pre style="white-space: pre-line">

  <b>Input:</b> 

  root = [1, 2, 3], k = 5

  <b>Output:</b> [[1],[2],[3],[],[]]

  <b>Explanation:</b>

  The input and each element of the output are ListNodes, not arrays.

  For example, the input root has root.val = 1, root.next.val = 2, \root.next.next.val = 3, and root.next.next.next = null.

  The first element output[0] has output[0].val = 1, output[0].next = null.

  The last element output[4] is null, but it's string representation as a ListNode is [].

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  <pre>

  <b>Input:</b> 

  root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3

  <b>Output:</b> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]

  <b>Explanation:</b>

  The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <li>
#+end_html

The length of root will be in the range [0, 1000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each value of a node in the input will be an integer in the range [0,
999].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

k will be an integer in the range [1, 50].

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def splitListToParts(self, root: ListNode, k: int) -> List[ListNode]:
          n, cur = 0, root
          while cur:
              n += 1
              cur = cur.next
          cur = root
          width, remainder = divmod(n, k)
          res = [None for _ in range(k)]
          for i in range(k):
              head = cur
              for j in range(width + (i < remainder) - 1):
                  if cur:
                      cur = cur.next
              if cur:
                  cur.next, cur = None, cur.next
              res[i] = head
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  class Solution {
      public ListNode[] splitListToParts(ListNode root, int k) {
          int n = 0;
          ListNode cur = root;
          while (cur != null) {
              ++n;
              cur = cur.next;
          }
          int width = n / k, remainder = n % k;
          ListNode[] res = new ListNode[k];
          cur = root;
          for (int i = 0; i < k; ++i) {
              ListNode head = cur;
              for (int j = 0; j < width + ((i < remainder) ? 1 : 0) - 1; ++j) {
                  if (cur != null) {
                      cur = cur.next;
                  }
              }
              if (cur != null) {
                  ListNode t = cur.next;
                  cur.next = null;
                  cur = t;
              }
              res[i] = head;
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
