* [[https://leetcode.com/problems/design-linked-list][707. Design Linked
List]]
  :PROPERTIES:
  :CUSTOM_ID: design-linked-list
  :END:
[[./solution/0700-0799/0707.Design Linked List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design your implementation of the linked list. You can choose to use a
singly or doubly linked list. A node in a singly linked list should have
two attributes: val and next. val is the value of the current node, and
next is a pointer/reference to the next node. If you want to use the
doubly linked list, you will need one more attribute prev to indicate
the previous node in the linked list. Assume all nodes in the linked
list are 0-indexed.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the MyLinkedList class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MyLinkedList() Initializes the MyLinkedList object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int get(int index) Get the value of the indexth node in the linked list.
If the index is invalid, return -1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void addAtHead(int val) Add a node of value val before the first element
of the linked list. After the insertion, the new node will be the first
node of the linked list.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void addAtTail(int val) Append a node of value val as the last element
of the linked list.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void addAtIndex(int index, int val) Add a node of value val before the
indexth node in the linked list. If index equals the length of the
linked list, the node will be appended to the end of the linked list. If
index is greater than the length, the node will not be inserted.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void deleteAtIndex(int index) Delete the indexth node in the linked
list, if the index is valid.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]
  [[], [1], [3], [1, 2], [1], [1], [1]]
  <strong>Output</strong>
  [null, null, null, null, 2, null, 3]

  <strong>Explanation</strong>
  MyLinkedList myLinkedList = new MyLinkedList();
  myLinkedList.addAtHead(1);
  myLinkedList.addAtTail(3);
  myLinkedList.addAtIndex(1, 2);    // linked list becomes 1-&gt;2-&gt;3
  myLinkedList.get(1);              // return 2
  myLinkedList.deleteAtIndex(1);    // now the linked list is 1-&gt;3
  myLinkedList.get(1);              // return 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= index, val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Please do not use the built-in LinkedList library.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex
and deleteAtIndex.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class ListNode:

      def __init__(self, val=0, next=None):
          self.val = val
          self.next = next


  class MyLinkedList:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.dummy = ListNode()
          self.count = 0


      def get(self, index: int) -> int:
          """
          Get the value of the index-th node in the linked list. If the index is invalid, return -1.
          """
          if index < 0 or index >= self.count:
              return -1
          cur = self.dummy.next
          for _ in range(index):
              cur = cur.next
          return cur.val


      def addAtHead(self, val: int) -> None:
          """
          Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
          """
          self.addAtIndex(0, val)


      def addAtTail(self, val: int) -> None:
          """
          Append a node of value val to the last element of the linked list.
          """
          self.addAtIndex(self.count, val)


      def addAtIndex(self, index: int, val: int) -> None:
          """
          Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
          """
          if index > self.count:
              return
          pre = self.dummy
          for _ in range(index):
              pre = pre.next
          pre.next = ListNode(val, pre.next)
          self.count += 1


      def deleteAtIndex(self, index: int) -> None:
          """
          Delete the index-th node in the linked list, if the index is valid.
          """
          if index < 0 or index >= self.count:
              return
          pre = self.dummy
          for _ in range(index):
              pre = pre.next
          t = pre.next
          pre.next = t.next
          t.next = None
          self.count -= 1



  # Your MyLinkedList object will be instantiated and called as such:
  # obj = MyLinkedList()
  # param_1 = obj.get(index)
  # obj.addAtHead(val)
  # obj.addAtTail(val)
  # obj.addAtIndex(index,val)
  # obj.deleteAtIndex(index)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class MyLinkedList {

      private class ListNode {
          int val;
          ListNode next;
          ListNode(int val) {
              this(val, null);
          }
          ListNode(int val, ListNode next) {
              this.val = val;
              this.next = next;
          }
      }

      private ListNode dummy;
      private int count;

      /** Initialize your data structure here. */
      public MyLinkedList() {
          dummy = new ListNode(0);
          count = 0;
      }

      /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
      public int get(int index) {
          if (index < 0 || index >= count) {
              return -1;
          }
          ListNode cur = dummy.next;
          while (index-- > 0) {
              cur = cur.next;
          }
          return cur.val;
      }

      /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
      public void addAtHead(int val) {
          addAtIndex(0, val);
      }

      /** Append a node of value val to the last element of the linked list. */
      public void addAtTail(int val) {
          addAtIndex(count, val);
      }

      /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
      public void addAtIndex(int index, int val) {
          if (index > count) {
              return;
          }
          ListNode pre = dummy;
          while (index-- > 0) {
              pre = pre.next;
          }
          pre.next = new ListNode(val, pre.next);
          ++count;
      }

      /** Delete the index-th node in the linked list, if the index is valid. */
      public void deleteAtIndex(int index) {
          if (index < 0 || index >= count) {
              return;
          }
          ListNode pre = dummy;
          while (index-- > 0) {
              pre = pre.next;
          }
          ListNode t = pre.next;
          pre.next = t.next;
          t.next = null;
          --count;
      }
  }

  /**
   * Your MyLinkedList object will be instantiated and called as such:
   * MyLinkedList obj = new MyLinkedList();
   * int param_1 = obj.get(index);
   * obj.addAtHead(val);
   * obj.addAtTail(val);
   * obj.addAtIndex(index,val);
   * obj.deleteAtIndex(index);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
