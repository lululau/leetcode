* [[https://leetcode.com/problems/parse-lisp-expression][736. Parse Lisp
Expression]]
  :PROPERTIES:
  :CUSTOM_ID: parse-lisp-expression
  :END:
[[./solution/0700-0799/0736.Parse Lisp Expression/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a string expression representing a Lisp-like expression to
return the integer value of.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The syntax for these expressions is given as follows.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  <li>
#+end_html

An expression is either an integer, a let-expression, an add-expression,
a mult-expression, or an assigned variable. Expressions always evaluate
to a single integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  <li>
#+end_html

(An integer could be positive or negative.)

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  <li>
#+end_html

A let-expression takes the form (let v1 e1 v2 e2 ... vn en expr), where
let is always the string "let", then there are 1 or more pairs of
alternating variables and expressions, meaning that the first variable
v1 is assigned the value of the expression e1, the second variable v2 is
assigned the value of the expression e2, and so on sequentially; and
then the value of this let-expression is the value of the expression
expr.

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  <li>
#+end_html

An add-expression takes the form (add e1 e2) where add is always the
string "add", there are always two expressions e1, e2, and this
expression evaluates to the addition of the evaluation of e1 and the
evaluation of e2.

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  <li>
#+end_html

A mult-expression takes the form (mult e1 e2) where mult is always the
string "mult", there are always two expressions e1, e2, and this
expression evaluates to the multiplication of the evaluation of e1 and
the evaluation of e2.

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  <li>
#+end_html

For the purposes of this question, we will use a smaller subset of
variable names. A variable starts with a lowercase letter, then zero or
more lowercase letters or digits. Additionally for your convenience, the
names "add", "let", or "mult" are protected and will never be used as
variable names.

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  <li>
#+end_html

Finally, there is the concept of scope. When an expression of a variable
name is evaluated, within the context of that evaluation, the innermost
scope (in terms of parentheses) is checked first for the value of that
variable, and then outer scopes are checked sequentially. It is
guaranteed that every expression is legal. Please see the examples for
more details on scope.

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Evaluation Examples:

#+begin_html
  <pre>

  <b>Input:</b> (add 1 2)

  <b>Output:</b> 3



  <b>Input:</b> (mult 3 (add 2 3))

  <b>Output:</b> 15



  <b>Input:</b> (let x 2 (mult x 5))

  <b>Output:</b> 10



  <b>Input:</b> (let x 2 (mult x (let x 3 y 4 (add x y))))

  <b>Output:</b> 14

  <b>Explanation:</b> In the expression (add x y), when checking for the value of the variable x,

  we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.

  Since x = 3 is found first, the value of x is 3.



  <b>Input:</b> (let x 3 x 2 x)

  <b>Output:</b> 2

  <b>Explanation:</b> Assignment in let statements is processed sequentially.



  <b>Input:</b> (let x 1 y 2 x (add x y) (add x y))

  <b>Output:</b> 5

  <b>Explanation:</b> The first (add x y) evaluates as 3, and is assigned to x.

  The second (add x y) evaluates as 3+2 = 5.



  <b>Input:</b> (let x 2 (add (let x 3 (let x 4 x)) x))

  <b>Output:</b> 6

  <b>Explanation:</b> Even though (let x 4 x) has a deeper scope, it is outside the context

  of the final x in the add-expression.  That final x will equal 2.



  <b>Input:</b> (let a1 3 b2 (add a1 1) b2) 

  <b>Output</b> 4

  <b>Explanation:</b> Variable names can contain digits after the first character.



  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <li>
#+end_html

The given string expression is well formatted: There are no leading or
trailing spaces, there is only a single space separating different
components of the string, and no space between adjacent parentheses. The
expression is guaranteed to be legal and evaluate to an integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The length of expression is at most 2000. (It is also non-empty, as that
would not be a legal expression.)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The answer and all intermediate calculations of that answer are
guaranteed to fit in a 32-bit integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
