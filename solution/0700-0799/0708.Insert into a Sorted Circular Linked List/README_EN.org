* [[https://leetcode.com/problems/insert-into-a-sorted-circular-linked-list][708.
Insert into a Sorted Circular Linked List]]
  :PROPERTIES:
  :CUSTOM_ID: insert-into-a-sorted-circular-linked-list
  :END:
[[./solution/0700-0799/0708.Insert into a Sorted Circular Linked List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a node from a Circular Linked List which is sorted in ascending
order, write a function to insert a value insertVal into the list such
that it remains a sorted circular list. The given node can be a
reference to any single node in the list, and may not be necessarily the
smallest value in the circular list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If there are multiple suitable places for insertion, you may choose any
place to insert the new value. After the insertion, the circular list
should remain sorted.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If the list is empty (i.e., given node is null), you should create a new
single circular list and return the reference to that single node.
Otherwise, you should return the original given node.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <pre>
  <strong>Input:</strong> head = [3,4,1], insertVal = 2
  <strong>Output:</strong> [3,4,1,2]
  <strong>Explanation:</strong> In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.

  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0708.Insert into a Sorted Circular Linked List/images/example_1_after_65p.jpg" style="width: 250px; height: 149px;" />

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [], insertVal = 1
  <strong>Output:</strong> [1]
  <strong>Explanation:</strong> The list is empty (given head is&nbsp;<code>null</code>). We create a new single circular list and return the reference to that single node.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1], insertVal = 0
  <strong>Output:</strong> [1,0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Number of Nodes <= 5 * 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10^6 <= Node.val <= 10^6

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10^6 <= insertVal <= 10^6

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  """
  # Definition for a Node.
  class Node:
      def __init__(self, val=None, next=None):
          self.val = val
          self.next = next
  """

  class Solution:
      def insert(self, head: 'Node', insertVal: int) -> 'Node':
          node = Node(val=insertVal)
          if head is None:
              node.next = node
              return node
          pre, cur = head, head.next
          while 1:
              if pre.val <= insertVal <= cur.val or (pre.val > cur.val and (insertVal >= pre.val or insertVal <= cur.val)):
                  break
              pre, cur = cur, cur.next
              if pre == head:
                  break
          pre.next = node
          node.next = cur
          return head
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /*
  // Definition for a Node.
  class Node {
      public int val;
      public Node next;

      public Node() {}

      public Node(int _val) {
          val = _val;
      }

      public Node(int _val, Node _next) {
          val = _val;
          next = _next;
      }
  };
  */

  class Solution {
      public Node insert(Node head, int insertVal) {
          Node node = new Node(insertVal);
          if (head == null) {
              node.next = node;
              return node;
          }
          Node pre = head, cur = head.next;
          while (true) {
              if ((pre.val <= insertVal && insertVal <= cur.val) || (pre.val > cur.val && (insertVal >= pre.val || cur.val >= insertVal))) {
                  break;
              }
              pre = cur;
              cur = cur.next;
              if (pre == head) {
                  break;
              }
          }
          pre.next = node;
          node.next = cur;
          return head;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
