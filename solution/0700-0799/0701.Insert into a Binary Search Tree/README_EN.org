* [[https://leetcode.com/problems/insert-into-a-binary-search-tree][701.
Insert into a Binary Search Tree]]
  :PROPERTIES:
  :CUSTOM_ID: insert-into-a-binary-search-tree
  :END:
[[./solution/0700-0799/0701.Insert into a Binary Search Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given the root node of a binary search tree (BST) and a value to
insert into the tree. Return the root node of the BST after the
insertion. It is guaranteed that the new value does not exist in the
original BST.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that there may exist multiple valid ways for the insertion, as
long as the tree remains a BST after insertion. You can return any of
them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [4,2,7,1,3], val = 5
  <strong>Output:</strong> [4,2,7,1,3,5]
  <strong>Explanation:</strong> Another accepted tree is:
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0701.Insert into a Binary Search Tree/images/bst.jpg" style="width: 352px; height: 301px;" />
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [40,20,60,10,30,50,70], val = 25
  <strong>Output:</strong> [40,20,60,10,30,50,70,null,null,25]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
  <strong>Output:</strong> [4,2,7,1,3,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree will be in the range [0, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-108 <= Node.val <= 108

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the values Node.val are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-108 <= val <= 108

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It's guaranteed that val does not exist in the original BST.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
