* [[https://leetcode-cn.com/problems/shortest-completing-word][748.
最短补全词]]
  :PROPERTIES:
  :CUSTOM_ID: 最短补全词
  :END:
[[./solution/0700-0799/0748.Shortest Completing Word/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个字符串牌照 licensePlate 和一个字符串数组 words ，请你找出并返回
words 中的 最短补全词 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果单词列表（words）中的一个单词包含牌照（licensePlate）中所有的字母，那么我们称之为
补全词 。在所有完整词中，最短的单词我们称之为 最短补全词 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

单词在匹配牌照中的字母时要：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

忽略牌照中的数字和空格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

不区分大小写，比如牌照中的 "P" 依然可以匹配单词中的 "p" 字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果某个字母在牌照中出现不止一次，那么该字母在补全词中的出现次数应当一致或者更多。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

例如：licensePlate = "aBc 12c"，那么它由字母 'a'、'b' （忽略大写）和两个
'c' 。可能的 补全词 是 "abccdef"、"caaacab" 以及 "cbca" 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

题目数据保证一定存在一个最短补全词。当有多个单词都符合最短补全词的匹配条件时取单词列表中最靠前的一个。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>licensePlate = &quot;1s3 PSt&quot;, words = [&quot;step&quot;, &quot;steps&quot;, &quot;stripe&quot;, &quot;stepple&quot;]
  <strong>输出：</strong>&quot;steps&quot;
  <strong>说明：</strong>最短补全词应该包括 &quot;s&quot;、&quot;p&quot;、&quot;s&quot; 以及 &quot;t&quot;。在匹配过程中我们忽略牌照中的大小写。
  &quot;step&quot; 包含 &quot;t&quot;、&quot;p&quot;，但只包含一个 &quot;s&quot;，所以它不符合条件。
  &quot;steps&quot; 包含 &quot;t&quot;、&quot;p&quot; 和两个 &quot;s&quot;。
  &quot;stripe&quot; 缺一个 &quot;s&quot;。
  &quot;stepple&quot; 缺一个 &quot;s&quot;。
  因此，&quot;steps&quot; 是唯一一个包含所有字母的单词，也是本样例的答案。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>licensePlate = &quot;1s3 456&quot;, words = [&quot;looks&quot;, &quot;pest&quot;, &quot;stew&quot;, &quot;show&quot;]
  <strong>输出：</strong>&quot;pest&quot;
  <strong>说明：</strong>存在 3 个包含字母 &quot;s&quot; 且有着最短长度的补全词，&quot;pest&quot;、&quot;stew&quot;、和 &quot;show&quot; 三者长度相同，但我们返回最先出现的补全词 &quot;pest&quot; 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>licensePlate = &quot;Ah71752&quot;, words = [&quot;suggest&quot;,&quot;letter&quot;,&quot;of&quot;,&quot;husband&quot;,&quot;easy&quot;,&quot;education&quot;,&quot;drug&quot;,&quot;prevent&quot;,&quot;writer&quot;,&quot;old&quot;]
  <strong>输出：</strong>&quot;husband&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>licensePlate = &quot;OgEu755&quot;, words = [&quot;enough&quot;,&quot;these&quot;,&quot;play&quot;,&quot;wide&quot;,&quot;wonder&quot;,&quot;box&quot;,&quot;arrive&quot;,&quot;money&quot;,&quot;tax&quot;,&quot;thus&quot;]
  <strong>输出：</strong>&quot;enough&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>licensePlate = &quot;iMSlpe4&quot;, words = [&quot;claim&quot;,&quot;consumer&quot;,&quot;student&quot;,&quot;camera&quot;,&quot;public&quot;,&quot;never&quot;,&quot;wonder&quot;,&quot;simple&quot;,&quot;thought&quot;,&quot;use&quot;]
  <strong>输出：</strong>&quot;simple&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= licensePlate.length <= 7

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

licensePlate 由数字、大小写字母或空格 ' ' 组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words[i].length <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

words[i] 由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
