* [[https://leetcode.com/problems/min-cost-climbing-stairs][746. Min
Cost Climbing Stairs]]
  :PROPERTIES:
  :CUSTOM_ID: min-cost-climbing-stairs
  :END:
[[./solution/0700-0799/0746.Min Cost Climbing Stairs/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an integer array cost where cost[i] is the cost of ith
step on a staircase. Once you pay the cost, you can either climb one or
two steps.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You can either start from the step with index 0, or the step with index
1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum cost to reach the top of the floor.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> cost = [10,15,20]
  <strong>Output:</strong> 15
  <strong>Explanation:</strong> Cheapest is: start on cost[1], pay that cost, and go to the top.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> cost = [1,100,1,1,1,100,1,1,100,1]
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> Cheapest is: start on cost[0], and only step on 1s, skipping cost[3].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= cost.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= cost[i] <= 999

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def minCostClimbingStairs(self, cost: List[int]) -> int:
          pre = cur = 0
          n = len(cost)
          for i in range(1, n):
              t = min(cost[i] + cur, cost[i - 1] + pre)
              pre, cur = cur, t
          return cur
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int minCostClimbingStairs(int[] cost) {
          int pre = 0, cur = 0;
          for (int i = 1, n = cost.length; i < n; ++i) {
              int t = Math.min(cost[i] + cur, cost[i - 1] + pre);
              pre = cur;
              cur = t;
          }
          return cur;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
