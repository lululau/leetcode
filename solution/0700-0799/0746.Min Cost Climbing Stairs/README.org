* [[https://leetcode-cn.com/problems/min-cost-climbing-stairs][746.
使用最小花费爬楼梯]]
  :PROPERTIES:
  :CUSTOM_ID: 使用最小花费爬楼梯
  :END:
[[./solution/0700-0799/0746.Min Cost Climbing Stairs/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

数组的每个下标作为一个阶梯，第 i
个阶梯对应着一个非负数的体力花费值 cost[i]（下标从 0 开始）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1
的元素作为初始阶梯。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>cost = [10, 15, 20]
  <strong>输出：</strong>15
  <strong>解释：</strong>最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
  <strong>输出：</strong>6
  <strong>解释：</strong>最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

cost 的长度范围是 [2, 1000]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

cost[i] 将会是一个整型数据，范围为 [0, 999] 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def minCostClimbingStairs(self, cost: List[int]) -> int:
          pre = cur = 0
          n = len(cost)
          for i in range(1, n):
              t = min(cost[i] + cur, cost[i - 1] + pre)
              pre, cur = cur, t
          return cur
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int minCostClimbingStairs(int[] cost) {
          int pre = 0, cur = 0;
          for (int i = 1, n = cost.length; i < n; ++i) {
              int t = Math.min(cost[i] + cur, cost[i - 1] + pre);
              pre = cur;
              cur = t;
          }
          return cur;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
