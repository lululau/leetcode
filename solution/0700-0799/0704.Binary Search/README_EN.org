* [[https://leetcode.com/problems/binary-search][704. Binary Search]]
  :PROPERTIES:
  :CUSTOM_ID: binary-search
  :END:
[[./solution/0700-0799/0704.Binary Search/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array of integers nums which is sorted in ascending order, and
an integer target, write a function to search target in nums. If target
exists, then return its index. Otherwise, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 9
  <strong>Output:</strong> 4
  <strong>Explanation:</strong> 9 exists in nums and its index is 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 2
  <strong>Output:</strong> -1
  <strong>Explanation:</strong> 2 does not exist in nums so return -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-9999 <= nums[i], target <= 9999

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the integers in nums are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums is sorted in an ascending order.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def search(self, nums: List[int], target: int) -> int:
          low, high = 0, len(nums) - 1
          while low <= high:
              mid = (low + high) >> 1
              if nums[mid] == target:
                  return mid
              if nums[mid] < target:
                  low = mid + 1
              else:
                  high = mid - 1
          return -1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int search(int[] nums, int target) {
          int low = 0, high = nums.length - 1;
          while (low <= high) {
              int mid = (low + high) >>> 1;
              if (nums[mid] == target) {
                  return mid;
              }
              if (nums[mid] < target) {
                  low = mid + 1;
              } else {
                  high = mid - 1;
              }
          }
          return -1;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
