* [[https://leetcode-cn.com/problems/binary-search][704. 二分查找]]
  :PROPERTIES:
  :CUSTOM_ID: 二分查找
  :END:
[[./solution/0700-0799/0704.Binary Search/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target
 ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回
-1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9
  <strong>输出:</strong> 4
  <strong>解释:</strong> 9 出现在 <code>nums</code> 中并且下标为 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2
  <strong>输出:</strong> -1
  <strong>解释:</strong> 2 不存在 <code>nums</code> 中因此返回 -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

你可以假设 nums 中的所有元素是不重复的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n 将在 [1, 10000]之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums 的每个元素都将在 [-9999, 9999]之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int search(int[] nums, int target) {
          int low = 0, high = nums.length - 1;
          while (low <= high) {
              int mid = (low + high) >>> 1;
              if (nums[mid] == target) {
                  return mid;
              }
              if (nums[mid] < target) {
                  low = mid + 1;
              } else {
                  high = mid - 1;
              }
          }
          return -1;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
