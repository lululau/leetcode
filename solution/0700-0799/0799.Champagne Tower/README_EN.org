* [[https://leetcode.com/problems/champagne-tower][799. Champagne
Tower]]
  :PROPERTIES:
  :CUSTOM_ID: champagne-tower
  :END:
[[./solution/0700-0799/0799.Champagne Tower/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

We stack glasses in a pyramid, where the first row has 1 glass, the
second row has 2 glasses, and so on until the 100th row.  Each glass
holds one cup of champagne.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Then, some champagne is poured into the first glass at the top.  When
the topmost glass is full, any excess liquid poured will fall equally to
the glass immediately to the left and right of it.  When those glasses
become full, any excess champagne will fall equally to the left and
right of those glasses, and so on.  (A glass at the bottom row has its
excess champagne fall on the floor.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, after one cup of champagne is poured, the top most glass is
full.  After two cups of champagne are poured, the two glasses on the
second row are half full.  After three cups of champagne are poured,
those two cups become full - there are 3 full glasses total now.  After
four cups of champagne are poured, the third row has the middle glass
half full, and the two outside glasses are a quarter full, as pictured
below.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Now after pouring some non-negative integer cups of champagne, return
how full the jth glass in the ith row is (both i and j are 0-indexed.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> poured = 1, query_row = 1, query_glass = 1

  <strong>Output:</strong> 0.00000

  <strong>Explanation:</strong> We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> poured = 2, query_row = 1, query_glass = 1

  <strong>Output:</strong> 0.50000

  <strong>Explanation:</strong> We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> poured = 100000009, query_row = 33, query_glass = 17

  <strong>Output:</strong> 1.00000

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= poured <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= query_glass <= query_row < 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
