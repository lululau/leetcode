* [[https://leetcode.com/problems/find-anagram-mappings][760. Find
Anagram Mappings]]
  :PROPERTIES:
  :CUSTOM_ID: find-anagram-mappings
  :END:
[[./solution/0700-0799/0760.Find Anagram Mappings/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two lists Aand B, and B is an anagram of A. B is an anagram of A
means B is made by randomizing the order of the elements in A.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We want to find an index mapping P, from A to B. A mapping P[i] = j
means the ith element in A appears in B at index j.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

These lists A and B may contain duplicates. If there are multiple
answers, output any of them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, given

#+begin_html
  <pre>

  A = [12, 28, 46, 32, 50]

  B = [50, 12, 32, 46, 28]

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

We should return

#+begin_html
  <pre>

  [1, 4, 3, 2, 0]

  </pre>
#+end_html

as P[0] = 1 because the 0th element of A appears at B[1],

and P[1] = 4 because the 1st element of A appears at B[4],

and so on.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

A, B have equal lengths in range [1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A[i], B[i] are integers in range [0, 10^5].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def anagramMappings(self, nums1: List[int], nums2: List[int]) -> List[int]:
          mapper = collections.defaultdict(set)
          for i, num in enumerate(nums2):
              mapper[num].add(i)
          return [mapper[num].pop() for num in nums1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[] anagramMappings(int[] nums1, int[] nums2) {
          Map<Integer, Set<Integer>> map = new HashMap<>();
          for (int i = 0; i < nums2.length; ++i) {
              Set<Integer> s = map.getOrDefault(nums2[i], new HashSet<>());
              s.add(i);
              map.put(nums2[i], s);
          }
          int[] res = new int[nums1.length];
          for (int i = 0; i < nums1.length; ++i) {
              int idx = map.get(nums1[i]).iterator().next();
              res[i] = idx;
              map.get(nums1[i]).remove(idx);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
