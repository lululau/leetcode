* [[https://leetcode-cn.com/problems/ip-to-cidr][751. IP 到 CIDR]]
  :PROPERTIES:
  :CUSTOM_ID: ip-到-cidr
  :END:
[[./solution/0700-0799/0751.IP to CIDR/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个起始 IP 地址 ip 和一个我们需要包含的 IP
的数量 n，返回用列表（最小可能的长度）表示的 CIDR块的范围。 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

CIDR 块是包含 IP
的字符串，后接斜杠和固定长度。例如：“123.45.67.89/20”。固定长度 “20”
表示在特定的范围中公共前缀位的长度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>ip = &quot;255.0.0.7&quot;, n = 10
  <strong>输出：</strong>[&quot;255.0.0.7/32&quot;,&quot;255.0.0.8/29&quot;,&quot;255.0.0.16/32&quot;]
  <strong>解释：
  </strong>转换为二进制时，初始IP地址如下所示（为清晰起见添加了空格）：
  255.0.0.7 -&gt; 11111111 00000000 00000000 00000111
  地址 &quot;255.0.0.7/32&quot; 表示与给定地址有相同的 32 位前缀的所有地址，
  在这里只有这一个地址。

  地址 &quot;255.0.0.8/29&quot; 表示与给定地址有相同的 29 位前缀的所有地址：
  255.0.0.8 -&gt; 11111111 00000000 00000000 00001000
  有相同的 29 位前缀的地址如下：
  11111111 00000000 00000000 00001000
  11111111 00000000 00000000 00001001
  11111111 00000000 00000000 00001010
  11111111 00000000 00000000 00001011
  11111111 00000000 00000000 00001100
  11111111 00000000 00000000 00001101
  11111111 00000000 00000000 00001110
  11111111 00000000 00000000 00001111

  地址 &quot;255.0.0.16/32&quot; 表示与给定地址有相同的 32 位前缀的所有地址，
  这里只有 11111111 00000000 00000000 00010000。

  总之，答案指定了从 255.0.0.7 开始的 10 个 IP 的范围。

  有一些其他的表示方法，例如：
  [&quot;255.0.0.7/32&quot;,&quot;255.0.0.8/30&quot;, &quot;255.0.0.12/30&quot;, &quot;255.0.0.16/32&quot;],
  但是我们的答案是最短可能的答案。

  另外请注意以 &quot;255.0.0.7/30&quot; 开始的表示不正确，
  因为其包括了 255.0.0.4 = 11111111 00000000 00000000 00000100 这样的地址，
  超出了需要表示的范围。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

ip 是有效的 IPv4 地址。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每一个隐含地址 ip + x (其中 x < n) 都是有效的 IPv4 地址。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n 为整数，范围为 [1, 1000]。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
