* [[https://leetcode.com/problems/candy-crush][723. Candy Crush]]
  :PROPERTIES:
  :CUSTOM_ID: candy-crush
  :END:
[[./solution/0700-0799/0723.Candy Crush/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

This question is about implementing a basic elimination algorithm for
Candy Crush.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a 2D integer array board representing the grid of candy, different
positive integers board[i][j] represent different types of candies. A
value of board[i][j] = 0 represents that the cell at position (i, j) is
empty. The given board represents the state of the game following the
player's move. Now, you need to restore the board to a stable state by
crushing candies according to the following rules:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

If three or more candies of the same type are adjacent vertically or
horizontally, "crush" them all at the same time - these positions become
empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

After crushing all candies simultaneously, if an empty space on the
board has candies on top of itself, then these candies will drop until
they hit a candy or bottom at the same time. (No new candies will drop
outside the top boundary.)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

After the above steps, there may exist more candies that can be crushed.
If so, you need to repeat the above steps.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If there does not exist more candies that can be crushed (ie. the board
is stable), then return the current board.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

You need to perform the above rules until the board becomes stable, then
return the current board.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre style="white-space: pre-line">

  <b>Input:</b>

  board = 

  [[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]



  <b>Output:</b>

  [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]



  <b>Explanation:</b> 

  <img src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0723.Candy Crush/images/candy_crush_example_2.png" style="width: 777px; height: 532px;" />

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The length of board will be in the range [3, 50].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The length of board[i] will be in the range [3, 50].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each board[i][j] will initially start as an integer in the range [1,
2000].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
