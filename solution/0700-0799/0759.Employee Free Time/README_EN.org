* [[https://leetcode.com/problems/employee-free-time][759. Employee Free
Time]]
  :PROPERTIES:
  :CUSTOM_ID: employee-free-time
  :END:
[[./solution/0700-0799/0759.Employee Free Time/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

We are given a list schedule of employees, which represents the working
time for each employee.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each employee has a list of non-overlapping Intervals, and these
intervals are in sorted order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the list of finite intervals representing common, positive-length
free time for all employees, also in sorted order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

(Even though we are representing Intervals in the form [x, y], the
objects inside are Intervals, not lists or arrays. For example,
schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0]
is not defined).  Also, we wouldn't include intervals like [5, 5] in our
answer, as they have zero length.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
  <strong>Output:</strong> [[3,4]]
  <strong>Explanation:</strong> There are a total of three employees, and all common
  free time intervals would be [-inf, 1], [3, 4], [10, inf].
  We discard any intervals that contain inf as they aren&#39;t finite.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
  <strong>Output:</strong> [[5,6],[7,9]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= schedule.length , schedule[i].length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= schedule[i].start < schedule[i].end <= 10^8

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
