* [[https://leetcode-cn.com/problems/count-different-palindromic-subsequences][730.
统计不同回文子序列]]
  :PROPERTIES:
  :CUSTOM_ID: 统计不同回文子序列
  :END:
[[./solution/0700-0799/0730.Count Different Palindromic Subsequences/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个字符串 S，找出 S 中不同的非空回文子序列个数，并返回该数字与 10^9
+ 7 的模。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

通过从 S 中删除 0 个或多个字符来获得子序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果一个字符序列与它反转后的字符序列一致，那么它是回文字符序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果对于某个  i，A_i != B_i，那么 A_1, A_2, ... 和 B_1, B_2, ...
这两个字符序列是不同的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  S = &#39;bccb&#39;
  <strong>输出：</strong>6
  <strong>解释：</strong>
  6 个不同的非空回文子字符序列分别为：&#39;b&#39;, &#39;c&#39;, &#39;bb&#39;, &#39;cc&#39;, &#39;bcb&#39;, &#39;bccb&#39;。
  注意：&#39;bcb&#39; 虽然出现两次但仅计数一次。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  S = &#39;abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba&#39;
  <strong>输出：</strong>104860361
  <strong>解释：</strong>
  共有 3104860382 个不同的非空回文子序列，对 10^9 + 7 取模为 104860361。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

字符串 S 的长度将在[1, 1000]范围内。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个字符 S[i] 将会是集合 {'a', 'b', 'c', 'd'} 中的某一个。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
