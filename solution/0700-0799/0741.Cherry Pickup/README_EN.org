* [[https://leetcode.com/problems/cherry-pickup][741. Cherry Pickup]]
  :PROPERTIES:
  :CUSTOM_ID: cherry-pickup
  :END:
[[./solution/0700-0799/0741.Cherry Pickup/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an n x n grid representing a field of cherries, each cell
is one of three possible integers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 means the cell is empty, so you can pass through,

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 means the cell contains a cherry that you can pick up and pass
through, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1 means the cell contains a thorn that blocks your way.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum number of cherries you can collect by following the
rules below:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Starting at the position (0, 0) and reaching (n - 1, n - 1) by moving
right or down through valid path cells (cells with value 0 or 1).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

After reaching (n - 1, n - 1), returning to (0, 0) by moving left or up
through valid path cells.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

When passing through a path cell containing a cherry, you pick it up,
and the cell becomes an empty cell 0.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If there is no valid path between (0, 0) and (n - 1, n - 1), then no
cherries can be collected.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[0,1,-1],[1,0,-1],[1,1,1]]
  <strong>Output:</strong> 5
  <strong>Explanation:</strong> The player started at (0, 0) and went down, down, right right to reach (2, 2).
  4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].
  Then, the player went left, up, up, left to return home, picking up one more cherry.
  The total number of cherries picked up is 5, and this is the maximum possible.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,1,-1],[1,-1,1],[-1,1,1]]
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] is -1, 0, or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[0][0] != -1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[n - 1][n - 1] != -1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
