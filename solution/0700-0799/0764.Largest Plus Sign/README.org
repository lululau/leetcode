* [[https://leetcode-cn.com/problems/largest-plus-sign][764.
最大加号标志]]
  :PROPERTIES:
  :CUSTOM_ID: 最大加号标志
  :END:
[[./solution/0700-0799/0764.Largest Plus Sign/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在一个大小在 (0, 0) 到 (N-1, N-1)
的2D网格 grid 中，除了在 mines 中给出的单元为 0，其他每个单元都是 1。网格中包含 1 的最大的轴对齐加号标志是多少阶？返回加号标志的阶数。如果未找到加号标志，则返回
0。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个 k" 阶由 1 组成的“轴对称”加号标志具有中心网格  grid[x][y] =
1 ，以及4个从中心向上、向下、向左、向右延伸，长度为 k-1，由 1 组成的臂。下面给出 k"
阶“轴对称”加号标志的示例。注意，只有加号标志的所有网格要求为
1，别的网格可能为 0 也可能为 1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

k 阶轴对称加号标志示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  阶 1:
  000
  0<strong>1</strong>0
  000

  阶 2:
  00000
  00<strong>1</strong>00
  0<strong>111</strong>0
  00<strong>1</strong>00
  00000

  阶 3:
  0000000
  000<strong>1</strong>000
  000<strong>1</strong>000
  0<strong>11111</strong>0
  000<strong>1</strong>000
  000<strong>1</strong>000
  0000000
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> N = 5, mines = [[4, 2]]
  <strong>输出:</strong> 2
  <strong>解释:
  </strong>
  11111
  11111
  1<em><strong>1</strong></em>111
  <em><strong>111</strong></em>11
  1<em><strong>1</strong></em>011

  在上面的网格中，最大加号标志的阶只能是2。一个标志已在图中标出。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> N = 2, mines = []
  <strong>输出:</strong> 1
  <strong>解释:

  11
  11
  </strong>
  没有 2 阶加号标志，有 1 阶加号标志。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> N = 1, mines = [[0, 0]]
  <strong>输出:</strong> 0
  <strong>解释:

  0
  </strong>
  没有加号标志，返回 0 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

整数N 的范围： [1, 500].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

mines 的最大长度为 5000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

mines[i] 是长度为2的由2个 [0, N-1] 中的数组成.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

(另外,使用 C, C++, 或者 C# 编程将以稍小的时间限制进行​​判断.)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
