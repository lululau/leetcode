* [[https://leetcode-cn.com/problems/prefix-and-suffix-search][745.
前缀和后缀搜索]]
  :PROPERTIES:
  :CUSTOM_ID: 前缀和后缀搜索
  :END:
[[./solution/0700-0799/0745.Prefix and Suffix Search/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定多个 words，words[i] 的权重为 i 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

设计一个类 WordFilter 实现函数WordFilter.f(String prefix, String
suffix)。这个函数将返回具有前缀 prefix 和后缀suffix 的词的最大权重。如果没有这样的词，返回
-1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例子:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong>
  WordFilter([&quot;apple&quot;])
  WordFilter.f(&quot;a&quot;, &quot;e&quot;) // 返回 0
  WordFilter.f(&quot;b&quot;, &quot;&quot;) // 返回 -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

words的长度在[1, 15000]之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于每个测试用例，最多会有words.length次对WordFilter.f的调用。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

words[i]的长度在[1, 10]之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

prefix, suffix的长度在[0, 10]之前。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

words[i]和prefix, suffix只包含小写字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
