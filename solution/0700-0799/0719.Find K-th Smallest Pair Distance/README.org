* [[https://leetcode-cn.com/problems/find-k-th-smallest-pair-distance][719.
找出第 k 小的距离对]]
  :PROPERTIES:
  :CUSTOM_ID: 找出第-k-小的距离对
  :END:
[[./solution/0700-0799/0719.Find K-th Smallest Pair Distance/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个整数数组，返回所有数对之间的第 k 个最小距离。一对 (A, B)
的距离被定义为 A 和 B 之间的绝对差值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  nums = [1,3,1]
  k = 1
  <strong>输出：0</strong> 
  <strong>解释：</strong>
  所有数对如下：
  (1,3) -&gt; 2
  (1,1) -&gt; 0
  (3,1) -&gt; 2
  因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= len(nums) <= 10000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums[i] < 1000000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= len(nums) * (len(nums) - 1) / 2.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
