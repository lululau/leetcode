* [[https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid][1391.
Check if There is a Valid Path in a Grid]]
  :PROPERTIES:
  :CUSTOM_ID: check-if-there-is-a-valid-path-in-a-grid
  :END:
[[./solution/1300-1399/1391.Check if There is a Valid Path in a Grid/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:
Given a m x n grid. Each cell of the grid represents a street. The
street of grid[i][j] can be:

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 which means a street connecting the left cell and the right cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 which means a street connecting the upper cell and the lower cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

3 which means a street connecting the left cell and the lower cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

4 which means a street connecting the right cell and the lower cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

5 which means a street connecting the left cell and the upper cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

6 which means a street connecting the right cell and the upper cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You will initially start at the street of the upper-left cell (0,0). A
valid path in the grid is a path which starts from the upper left cell
(0,0) and ends at the bottom-right cell (m - 1, n - 1). The path should
only follow the streets.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that you are not allowed to change any street.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return true if there is a valid path in the grid or false otherwise.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[2,4,3],[6,5,2]]
  <strong>Output:</strong> true
  <strong>Explanation:</strong> As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,2,1],[1,2,1]]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,1,2]]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,1,1,1,1,1,3]]
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[2],[2],[2],[2],[2],[2],[6]]
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= grid[i][j] <= 6

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
