* [[https://leetcode-cn.com/problems/check-if-there-is-a-valid-path-in-a-grid][1391.
检查网格中是否存在有效路径]]
  :PROPERTIES:
  :CUSTOM_ID: 检查网格中是否存在有效路径
  :END:
[[./solution/1300-1399/1391.Check if There is a Valid Path in a Grid/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 m x n 的网格 grid。网格里的每个单元都代表一条街道。grid[i][j]
的街道可以是：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 表示连接左单元格和右单元格的街道。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 表示连接上单元格和下单元格的街道。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

3 表示连接左单元格和下单元格的街道。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

4 表示连接右单元格和下单元格的街道。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

5 表示连接左单元格和上单元格的街道。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

6 表示连接右单元格和上单元格的街道。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你最开始从左上角的单元格 (0,0)
开始出发，网格中的「有效路径」是指从左上方的单元格 (0,0)
开始、一直到右下方的 (m-1,n-1) 结束的路径。该路径必须只沿着街道走。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：你 不能 变更街道。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果网格中存在有效的路径，则返回 true，否则返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[2,4,3],[6,5,2]]
  <strong>输出：</strong>true
  <strong>解释：</strong>如图所示，你可以从 (0, 0) 开始，访问网格中的所有单元格并到达 (m - 1, n - 1) 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,2,1],[1,2,1]]
  <strong>输出：</strong>false
  <strong>解释：</strong>如图所示，单元格 (0, 0) 上的街道没有与任何其他单元格上的街道相连，你只会停在 (0, 0) 处。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,1,2]]
  <strong>输出：</strong>false
  <strong>解释：</strong>你会停在 (0, 1)，而且无法到达 (0, 2) 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,1,1,1,1,1,3]]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[2],[2],[2],[2],[2],[2],[6]]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= grid[i][j] <= 6

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
