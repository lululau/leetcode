* [[https://leetcode-cn.com/problems/pizza-with-3n-slices][1388. 3n
块披萨]]
  :PROPERTIES:
  :CUSTOM_ID: n-块披萨
  :END:
[[./solution/1300-1399/1388.Pizza With 3n Slices/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个披萨，它由 3n
块不同大小的部分组成，现在你和你的朋友们需要按照如下规则来分披萨：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你挑选 任意 一块披萨。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Alice 将会挑选你所选择的披萨逆时针方向的下一块披萨。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Bob 将会挑选你所选择的披萨顺时针方向的下一块披萨。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

重复上述过程直到没有披萨剩下。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

每一块披萨的大小按顺时针方向由循环数组 slices 表示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回你可以获得的披萨大小总和的最大值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>slices = [1,2,3,4,5,6]
  <strong>输出：</strong>10
  <strong>解释：</strong>选择大小为 4 的披萨，Alice 和 Bob 分别挑选大小为 3 和 5 的披萨。然后你选择大小为 6 的披萨，Alice 和 Bob 分别挑选大小为 2 和 1 的披萨。你获得的披萨总大小为 4 + 6 = 10 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>slices = [8,9,8,6,1,1]
  <strong>输出：</strong>16
  <strong>解释：</strong>两轮都选大小为 8 的披萨。如果你选择大小为 9 的披萨，你的朋友们就会选择大小为 8 的披萨，这种情况下你的总和不是最大的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>slices = [4,1,2,5,8,3,1,9,7]
  <strong>输出：</strong>21
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>slices = [3,1,2]
  <strong>输出：</strong>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= slices.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

slices.length % 3 == 0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= slices[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
