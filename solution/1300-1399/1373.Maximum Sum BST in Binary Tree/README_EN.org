* [[https://leetcode.com/problems/maximum-sum-bst-in-binary-tree][1373.
Maximum Sum BST in Binary Tree]]
  :PROPERTIES:
  :CUSTOM_ID: maximum-sum-bst-in-binary-tree
  :END:
[[./solution/1300-1399/1373.Maximum Sum BST in Binary Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a binary tree root, the task is to return the maximum sum of all
keys of any sub-tree which is also a Binary Search Tree (BST).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Assume a BST is defined as follows:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The left subtree of a node contains only nodes with keys less than the
node's key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The right subtree of a node contains only nodes with keys greater
than the node's key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Both the left and right subtrees must also be binary search trees.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
  <strong>Output:</strong> 20
  <strong>Explanation:</strong> Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [4,3,null,1,2]
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [-4,-2,-5]
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> All values are negatives. Return an empty BST.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [2,1,3]
  <strong>Output:</strong> 6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [5,4,8,3,null,6,3]
  <strong>Output:</strong> 7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The given binary tree will have between 1 and 40000 nodes.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each node's value is between [-4 * 10^4 , 4 * 10^4].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
