* [[https://leetcode-cn.com/problems/maximum-sum-bst-in-binary-tree][1373.
二叉搜索子树的最大键值和]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉搜索子树的最大键值和
  :END:
[[./solution/1300-1399/1373.Maximum Sum BST in Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一棵以 root 为根的 二叉树 ，请你返回 任意 二叉搜索子树的最大键值和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

二叉搜索树的定义如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

任意节点的左子树中的键值都 小于 此节点的键值。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

任意节点的右子树中的键值都 大于 此节点的键值。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

任意节点的左子树和右子树都是二叉搜索树。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
  <strong>输出：</strong>20
  <strong>解释：</strong>键值为 3 的子树是和最大的二叉搜索树。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [4,3,null,1,2]
  <strong>输出：</strong>2
  <strong>解释：</strong>键值为 2 的单节点子树是和最大的二叉搜索树。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [-4,-2,-5]
  <strong>输出：</strong>0
  <strong>解释：</strong>所有节点键值都为负数，和最大的二叉搜索树为空。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [2,1,3]
  <strong>输出：</strong>6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [5,4,8,3,null,6,3]
  <strong>输出：</strong>7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每棵树有 1 到 40000 个节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的键值在 [-4 * 10^4 , 4 * 10^4] 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
