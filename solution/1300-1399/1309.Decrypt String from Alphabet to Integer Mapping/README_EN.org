* [[https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping][1309.
Decrypt String from Alphabet to Integer Mapping]]
  :PROPERTIES:
  :CUSTOM_ID: decrypt-string-from-alphabet-to-integer-mapping
  :END:
[[./solution/1300-1399/1309.Decrypt String from Alphabet to Integer Mapping/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s formed by digits ('0' - '9') and '#' . We want to map s
to English lowercase characters as follows:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Characters ('a' to 'i') are represented by ('1' to '9') respectively.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Characters ('j' to 'z') are represented by
('10#' to '26#') respectively. 

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the string formed after mapping.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It's guaranteed that a unique mapping will always exist.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;10#11#12&quot;
  <strong>Output:</strong> &quot;jkab&quot;
  <strong>Explanation:</strong> &quot;j&quot; -&gt; &quot;10#&quot; , &quot;k&quot; -&gt; &quot;11#&quot; , &quot;a&quot; -&gt; &quot;1&quot; , &quot;b&quot; -&gt; &quot;2&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;1326#&quot;
  <strong>Output:</strong> &quot;acz&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;25#&quot;
  <strong>Output:</strong> &quot;y&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#&quot;
  <strong>Output:</strong> &quot;abcdefghijklmnopqrstuvwxyz&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[i] only contains digits letters ('0'-'9') and '#' letter.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s will be valid string such that mapping is always possible.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
