* [[https://leetcode-cn.com/problems/get-watched-videos-by-your-friends][1311.
获取你好友已观看的视频]]
  :PROPERTIES:
  :CUSTOM_ID: 获取你好友已观看的视频
  :END:
[[./solution/1300-1399/1311.Get Watched Videos by Your Friends/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有 n 个人，每个人都有一个  0 到 n-1 的唯一 id 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你数组 watchedVideos  和 friends ，其中 watchedVideos[i] 
和 friends[i] 分别表示 id = i 的人观看过的视频列表和他的好友列表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Level 1 的视频包含所有你好友观看过的视频，level 2 的视频包含所有你好友的好友观看过的视频，以此类推。一般的，Level
为 k 的视频包含所有从你出发，最短距离为 k 的好友观看过的视频。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定你的 id  和一个 level 值，请你找出所有指定 level
的视频，并将它们按观看频率升序返回。如果有频率相同的视频，请将它们按字母顺序从小到大排列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>watchedVideos = [[&quot;A&quot;,&quot;B&quot;],[&quot;C&quot;],[&quot;B&quot;,&quot;C&quot;],[&quot;D&quot;]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1
  <strong>输出：</strong>[&quot;B&quot;,&quot;C&quot;] 
  <strong>解释：</strong>
  你的 id 为 0（绿色），你的朋友包括（黄色）：
  id 为 1 -&gt; watchedVideos = [&quot;C&quot;]&nbsp;
  id 为 2 -&gt; watchedVideos = [&quot;B&quot;,&quot;C&quot;]&nbsp;
  你朋友观看过视频的频率为：
  B -&gt; 1&nbsp;
  C -&gt; 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>watchedVideos = [[&quot;A&quot;,&quot;B&quot;],[&quot;C&quot;],[&quot;B&quot;,&quot;C&quot;],[&quot;D&quot;]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2
  <strong>输出：</strong>[&quot;D&quot;]
  <strong>解释：</strong>
  你的 id 为 0（绿色），你朋友的朋友只有一个人，他的 id 为 3（黄色）。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == watchedVideos.length == friends.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= watchedVideos[i].length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= watchedVideos[i][j].length <= 8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= friends[i].length < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= friends[i][j] < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= id < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= level < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 friends[i] 包含 j ，那么 friends[j] 包含 i

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
