* [[https://leetcode.com/problems/linked-list-in-binary-tree][1367.
Linked List in Binary Tree]]
  :PROPERTIES:
  :CUSTOM_ID: linked-list-in-binary-tree
  :END:
[[./solution/1300-1399/1367.Linked List in Binary Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a binary tree root and a linked list with head as the first node. 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return True if all the elements in the linked list starting from the
head correspond to some downward path connected in the binary
tree otherwise return False.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In this context downward path means a path that starts at some node and
goes downwards.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
  <strong>Output:</strong> true
  <strong>Explanation:</strong> Nodes in blue form a subpath in the binary Tree.  
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> There is no path in the binary tree that contains all the elements of the linked list from <code>head</code>.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree will be in the range [1, 2500].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the list will be in the range [1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 100 for each node in the linked list and binary tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def isSubPath(self, head: ListNode, root: TreeNode) -> bool:
          def dfs(head, root):
              if head is None:
                  return True
              if root is None:
                  return False
              if root.val != head.val:
                  return False
              return dfs(head.next, root.left) or dfs(head.next, root.right)

          if root is None:
              return False
          return dfs(head, root) or self.isSubPath(head, root.left) or self.isSubPath(head, root.right)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public boolean isSubPath(ListNode head, TreeNode root) {
          if (root == null) {
              return false;
          }
          return dfs(head, root) || isSubPath(head, root.left) || isSubPath(head, root.right);
      }

      private boolean dfs(ListNode head, TreeNode root) {
          if (head == null) {
              return true;
          }
          if (root == null) {
              return false;
          }
          if (root.val != head.val) {
              return false;
          }
          return dfs(head.next, root.left) || dfs(head.next, root.right);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
