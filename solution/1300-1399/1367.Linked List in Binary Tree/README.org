* [[https://leetcode-cn.com/problems/linked-list-in-binary-tree][1367.
二叉树中的列表]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树中的列表
  :END:
[[./solution/1300-1399/1367.Linked List in Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一棵以 root 为根的二叉树和一个 head 为第一个节点的链表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以 head 为首的链表中每个节点的值，那么请你返回
True ，否则返回 False 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
  <strong>输出：</strong>true
  <strong>解释：</strong>树中蓝色的节点构成了与链表对应的子路径。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
  <strong>输出：</strong>false
  <strong>解释：</strong>二叉树中不存在一一对应链表的路径。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

二叉树和链表中的每个节点的值都满足 1 <= node.val <= 100 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

链表包含的节点数目在 1 到 100 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

二叉树包含的节点数目在 1 到 2500 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def isSubPath(self, head: ListNode, root: TreeNode) -> bool:
          def dfs(head, root):
              if head is None:
                  return True
              if root is None:
                  return False
              if root.val != head.val:
                  return False
              return dfs(head.next, root.left) or dfs(head.next, root.right)

          if root is None:
              return False
          return dfs(head, root) or self.isSubPath(head, root.left) or self.isSubPath(head, root.right)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public boolean isSubPath(ListNode head, TreeNode root) {
          if (root == null) {
              return false;
          }
          return dfs(head, root) || isSubPath(head, root.left) || isSubPath(head, root.right);
      }

      private boolean dfs(ListNode head, TreeNode root) {
          if (head == null) {
              return true;
          }
          if (root == null) {
              return false;
          }
          if (root.val != head.val) {
              return false;
          }
          return dfs(head.next, root.left) || dfs(head.next, root.right);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
