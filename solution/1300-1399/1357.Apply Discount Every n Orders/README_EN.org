* [[https://leetcode.com/problems/apply-discount-every-n-orders][1357.
Apply Discount Every n Orders]]
  :PROPERTIES:
  :CUSTOM_ID: apply-discount-every-n-orders
  :END:
[[./solution/1300-1399/1357.Apply Discount Every n Orders/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is a sale in a supermarket, there will be a discount every n
customer.

There are some products in the supermarket where the id of the i-th
product is products[i] and the price per unit of this product
is prices[i].

The system will count the number of customers and when the n-th customer
arrive he/she will have a discount on the bill. (i.e if the cost is x
the new cost is x - (discount * x) / 100). Then the system will start
counting customers again.

The customer orders a certain amount of each product where product[i] is
the id of the i-th product the customer ordered and amount[i] is the
number of units the customer ordered of that product.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the Cashier class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Cashier(int n, int discount, int[] products, int[] prices) Initializes
the object with n, the discount, the products and their prices.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

double getBill(int[] product, int[] amount) returns the value of the
bill and apply the discount if needed. Answers within 10^-5 of the
actual value will be accepted as correct.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input</strong>

  [&quot;Cashier&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;]

  [[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]

  <strong>Output</strong>

  [null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]

  <strong>Explanation</strong>

  Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);

  cashier.getBill([1,2],[1,2]);                        // return 500.0, bill = 1 * 100 + 2 * 200 = 500.

  cashier.getBill([3,7],[10,10]);                      // return 4000.0

  cashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0, The bill was 1600.0 but as this is the third customer, he has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) = 800.

  cashier.getBill([4],[10]);                           // return 4000.0

  cashier.getBill([7,3],[10,10]);                      // return 4000.0

  cashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, Bill was 14700.0 but as the system counted three more customers, he will have a 50% discount and the bill becomes 7350.0

  cashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= discount <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= products.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= products[i] <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are not repeated elements in the array products.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

prices.length == products.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= prices[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= product.length <= products.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

product[i] exists in products.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

amount.length == product.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= amount[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 1000 calls will be made to getBill.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Answers within 10^-5 of the actual value will be accepted as correct.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
