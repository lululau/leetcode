* [[https://leetcode-cn.com/problems/minimum-number-of-steps-to-make-two-strings-anagram][1347.
制造字母异位词的最小步骤数]]
  :PROPERTIES:
  :CUSTOM_ID: 制造字母异位词的最小步骤数
  :END:
[[./solution/1300-1399/1347.Minimum Number of Steps to Make Two Strings Anagram/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个长度相等的字符串 s 和 t。每一个步骤中，你可以选择将 t 中的
任一字符 替换为 另一个字符。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回使 t 成为 s 的字母异位词的最小步骤数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

字母异位词 指字母相同，但排列不同（也可能相同）的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输出：</strong>s = &quot;bab&quot;, t = &quot;aba&quot;
  <strong>输出：</strong>1
  <strong>提示：</strong>用 &#39;b&#39; 替换 t 中的第一个 &#39;a&#39;，t = &quot;bba&quot; 是 s 的一个字母异位词。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输出：</strong>s = &quot;leetcode&quot;, t = &quot;practice&quot;
  <strong>输出：</strong>5
  <strong>提示：</strong>用合适的字符替换 t 中的 &#39;p&#39;, &#39;r&#39;, &#39;a&#39;, &#39;i&#39; 和 &#39;c&#39;，使 t 变成 s 的字母异位词。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输出：</strong>s = &quot;anagram&quot;, t = &quot;mangaar&quot;
  <strong>输出：</strong>0
  <strong>提示：</strong>&quot;anagram&quot; 和 &quot;mangaar&quot; 本身就是一组字母异位词。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输出：</strong>s = &quot;xxyyzz&quot;, t = &quot;xxyyzz&quot;
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输出：</strong>s = &quot;friend&quot;, t = &quot;family&quot;
  <strong>输出：</strong>4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 50000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s.length == t.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 和 t 只包含小写英文字母

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
