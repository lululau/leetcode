* [[https://leetcode.com/problems/lucky-numbers-in-a-matrix][1380. Lucky
Numbers in a Matrix]]
  :PROPERTIES:
  :CUSTOM_ID: lucky-numbers-in-a-matrix
  :END:
[[./solution/1300-1399/1380.Lucky Numbers in a Matrix/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a m * n matrix of distinct numbers, return all lucky numbers in
the matrix in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A lucky number is an element of the matrix such that it is the minimum
element in its row and maximum in its column.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[3,7,8],[9,11,13],[15,16,17]]
  <strong>Output:</strong> [15]
  <strong>Explanation:</strong> 15 is the only lucky number since it is the minimum in its row and the maximum in its column
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
  <strong>Output:</strong> [12]
  <strong>Explanation:</strong> 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[7,8],[1,2]]
  <strong>Output:</strong> [7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == mat.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == mat[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n, m <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= matrix[i][j] <= 10^5.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All elements in the matrix are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:
          row_min = {min(rows) for rows in matrix}
          col_max = {max(cols) for cols in zip(*matrix)}
          return [e for e in row_min if e in col_max]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<Integer> luckyNumbers (int[][] matrix) {
          int m = matrix.length, n = matrix[0].length;
          Set<Integer> rowMin = new HashSet<>();
          List<Integer> res = new ArrayList<>();
          for (int i = 0; i < m; ++i) {
              int min = Integer.MAX_VALUE;
              for (int j = 0; j < n; ++j) {
                  min = Math.min(min, matrix[i][j]);
              }
              rowMin.add(min);
          }

          for (int j = 0; j < n; ++j) {
              int max = Integer.MIN_VALUE;
              for (int i = 0; i < m; ++i) {
                  max = Math.max(max, matrix[i][j]);
              }
              if (rowMin.contains(max)) {
                  res.add(max);
              }

          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
