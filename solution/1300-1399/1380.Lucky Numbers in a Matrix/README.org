* [[https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix][1380.
矩阵中的幸运数]]
  :PROPERTIES:
  :CUSTOM_ID: 矩阵中的幸运数
  :END:
[[./solution/1300-1399/1380.Lucky Numbers in a Matrix/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意
顺序返回矩阵中的所有幸运数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

幸运数是指矩阵中满足同时下列两个条件的元素：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

在同一行的所有元素中最小

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

在同一列的所有元素中最大

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>matrix = [[3,7,8],[9,11,13],[15,16,17]]
  <strong>输出：</strong>[15]
  <strong>解释：</strong>15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
  <strong>输出：</strong>[12]
  <strong>解释：</strong>12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>matrix = [[7,8],[1,2]]
  <strong>输出：</strong>[7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == mat.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == mat[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n, m <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= matrix[i][j] <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

矩阵中的所有元素都是不同的

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

取行最小值与列最大值的交集即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:
          row_min = {min(rows) for rows in matrix}
          col_max = {max(cols) for cols in zip(*matrix)}
          return [e for e in row_min if e in col_max]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public List<Integer> luckyNumbers (int[][] matrix) {
          int m = matrix.length, n = matrix[0].length;
          Set<Integer> rowMin = new HashSet<>();
          List<Integer> res = new ArrayList<>();
          for (int i = 0; i < m; ++i) {
              int min = Integer.MAX_VALUE;
              for (int j = 0; j < n; ++j) {
                  min = Math.min(min, matrix[i][j]);
              }
              rowMin.add(min);
          }

          for (int j = 0; j < n; ++j) {
              int max = Integer.MIN_VALUE;
              for (int i = 0; i < m; ++i) {
                  max = Math.max(max, matrix[i][j]);
              }
              if (rowMin.contains(max)) {
                  res.add(max);
              }

          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
