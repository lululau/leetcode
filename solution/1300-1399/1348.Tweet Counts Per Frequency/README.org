* [[https://leetcode-cn.com/problems/tweet-counts-per-frequency][1348.
推文计数]]
  :PROPERTIES:
  :CUSTOM_ID: 推文计数
  :END:
[[./solution/1300-1399/1348.Tweet Counts Per Frequency/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

请你实现一个能够支持以下两种方法的推文计数类 TweetCounts：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

1. recordTweet(string tweetName, int time)

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

记录推文发布情况：用户 tweetName 在 time（以
秒 为单位）时刻发布了一条推文。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

2. getTweetCountsPerFrequency(string freq, string tweetName, int
startTime, int endTime)

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

返回从开始时间 startTime（以 秒 为单位）到结束时间 endTime（以 秒
为单位）内，每 分 minute，时 hour 或者
日 day （取决于 freq）内指定用户 tweetName 发布的推文总数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

freq 的值始终为 分 minute，时 hour 或者 日
day 之一，表示获取指定用户 tweetName 发布推文次数的时间间隔。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第一个时间间隔始终从 startTime 开始，因此时间间隔为 [startTime,
startTime + delta/1>,  [startTime + delta/1, startTime + delta/2>,
[startTime + delta/2, startTime + delta/3>, ... , [startTime +
delta/i, min(startTime + delta*(i+1), endTime + 1)>，其中 i 和
delta（取决于 freq）都是非负整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  [&quot;TweetCounts&quot;,&quot;recordTweet&quot;,&quot;recordTweet&quot;,&quot;recordTweet&quot;,&quot;getTweetCountsPerFrequency&quot;,&quot;getTweetCountsPerFrequency&quot;,&quot;recordTweet&quot;,&quot;getTweetCountsPerFrequency&quot;]
  [[],[&quot;tweet3&quot;,0],[&quot;tweet3&quot;,60],[&quot;tweet3&quot;,10],[&quot;minute&quot;,&quot;tweet3&quot;,0,59],[&quot;minute&quot;,&quot;tweet3&quot;,0,60],[&quot;tweet3&quot;,120],[&quot;hour&quot;,&quot;tweet3&quot;,0,210]]

  <strong>输出：</strong>
  [null,null,null,null,[2],[2,1],null,[4]]

  <strong>解释：</strong>
  TweetCounts tweetCounts = new TweetCounts();
  tweetCounts.recordTweet(&quot;tweet3&quot;, 0);
  tweetCounts.recordTweet(&quot;tweet3&quot;, 60);
  tweetCounts.recordTweet(&quot;tweet3&quot;, 10);                             //&nbsp;&quot;tweet3&quot;&nbsp;发布推文的时间分别是&nbsp;0,&nbsp;10&nbsp;和&nbsp;60 。
  tweetCounts.getTweetCountsPerFrequency(&quot;minute&quot;, &quot;tweet3&quot;, 0, 59); //&nbsp;返回&nbsp;[2]。统计频率是每分钟（60 秒），因此只有一个有效时间间隔 [0,60&gt;&nbsp;-&nbsp;&gt;&nbsp;2&nbsp;条推文。
  tweetCounts.getTweetCountsPerFrequency(&quot;minute&quot;, &quot;tweet3&quot;, 0, 60); //&nbsp;返回&nbsp;[2,1]。统计频率是每分钟（60 秒），因此有两个有效时间间隔&nbsp;<strong>1)</strong>&nbsp;[0,60&gt;&nbsp;-&nbsp;&gt;&nbsp;2&nbsp;条推文，和&nbsp;<strong>2)</strong>&nbsp;[60,61&gt;&nbsp;-&nbsp;&gt;&nbsp;1&nbsp;条推文。 
  tweetCounts.recordTweet(&quot;tweet3&quot;, 120);                            // &quot;tweet3&quot;&nbsp;发布推文的时间分别是 0, 10, 60 和 120 。
  tweetCounts.getTweetCountsPerFrequency(&quot;hour&quot;, &quot;tweet3&quot;, 0, 210);  //&nbsp;返回&nbsp;[4]。统计频率是每小时（3600 秒），因此只有一个有效时间间隔 [0,211&gt;&nbsp;-&nbsp;&gt;&nbsp;4&nbsp;条推文。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

同时考虑 recordTweet 和 getTweetCountsPerFrequency，最多有 10000
次操作。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= time, startTime, endTime <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= endTime - startTime <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
