* [[https://leetcode.com/problems/cinema-seat-allocation][1386. Cinema
Seat Allocation]]
  :PROPERTIES:
  :CUSTOM_ID: cinema-seat-allocation
  :END:
[[./solution/1300-1399/1386.Cinema Seat Allocation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A cinema has n rows of seats, numbered from 1 to n and there are
ten seats in each row, labelled from 1 to 10 as shown in the figure
above.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given the array reservedSeats containing the numbers of seats already
reserved, for example, reservedSeats[i] = [3,8] means the seat located
in row 3 and labelled with 8 is already reserved.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum number of four-person groups you can assign on the
cinema seats. A four-person group occupies four adjacent seats in one
single row. Seats across an aisle (such as [3,3] and [3,4]) are not
considered to be adjacent, but there is an exceptional case on which an
aisle split a four-person group, in that case, the aisle split a
four-person group in the middle, which means to have two people on each
side.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
  <strong>Output:</strong> 4
  <strong>Explanation:</strong> The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2, reservedSeats = [[2,1],[1,8],[2,6]]
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
  <strong>Output:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= reservedSeats.length <= min(10*n, 10^4)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

reservedSeats[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= reservedSeats[i][0] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= reservedSeats[i][1] <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All reservedSeats[i] are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
