* [[https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees][1305.
两棵二叉搜索树中的所有元素]]
  :PROPERTIES:
  :CUSTOM_ID: 两棵二叉搜索树中的所有元素
  :END:
[[./solution/1300-1399/1305.All Elements in Two Binary Search Trees/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你 root1 和 root2 这两棵二叉搜索树。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回一个列表，其中包含 两棵树 中的所有整数并按 升序 排序。.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root1 = [2,1,4], root2 = [1,0,3]
  <strong>输出：</strong>[0,1,1,2,3,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root1 = [0,-10,10], root2 = [5,1,7,0,2]
  <strong>输出：</strong>[-10,0,0,1,2,5,7,10]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root1 = [], root2 = [5,1,7,0,2]
  <strong>输出：</strong>[0,1,2,5,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root1 = [0,-10,10], root2 = []
  <strong>输出：</strong>[-10,0,10]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root1 = [1,null,8], root2 = [8,1]
  <strong>输出：</strong>[1,1,8,8]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每棵树最多有 5000 个节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的值在 [-10^5, 10^5] 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
