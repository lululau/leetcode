* [[https://leetcode.com/problems/product-of-the-last-k-numbers][1352.
Product of the Last K Numbers]]
  :PROPERTIES:
  :CUSTOM_ID: product-of-the-last-k-numbers
  :END:
[[./solution/1300-1399/1352.Product of the Last K Numbers/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement the class ProductOfNumbers that supports two methods:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

1. add(int num)

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Adds the number num to the back of the current list of numbers.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

2. getProduct(int k)

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Returns the product of the last k numbers in the current list.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

You can assume that always the current list has at least k numbers.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

At any time, the product of any contiguous sequence of numbers will fit
into a single 32-bit integer without overflowing.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]
  [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

  <strong>Output</strong>
  [null,null,null,null,null,null,20,40,0,null,32]

  <strong>Explanation</strong>
  ProductOfNumbers productOfNumbers = new ProductOfNumbers();
  productOfNumbers.add(3);        // [3]
  productOfNumbers.add(0);        // [3,0]
  productOfNumbers.add(2);        // [3,0,2]
  productOfNumbers.add(5);        // [3,0,2,5]
  productOfNumbers.add(4);        // [3,0,2,5,4]
  productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
  productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
  productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
  productOfNumbers.add(8);        // [3,0,2,5,4,8]
  productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

There will be at most 40000 operations considering both add and
getProduct.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= num <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 40000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class ProductOfNumbers:

      def __init__(self):
          self.pre_product = []

      def add(self, num: int) -> None:
          if num == 0:
              self.pre_product = []
              return
          if not self.pre_product:
              self.pre_product.append(1)
          self.pre_product.append(num * self.pre_product[-1])

      def getProduct(self, k: int) -> int:
          n = len(self.pre_product)
          return 0 if n <= k else self.pre_product[n - 1] // self.pre_product[n - k - 1]


  # Your ProductOfNumbers object will be instantiated and called as such:
  # obj = ProductOfNumbers()
  # obj.add(num)
  # param_2 = obj.getProduct(k)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class ProductOfNumbers {
      private List<Integer> preProduct;

      public ProductOfNumbers() {
          preProduct = new ArrayList<>();
      }

      public void add(int num) {
          if (num == 0) {
              preProduct.clear();
              return;
          }
          if (preProduct.isEmpty()) {
              preProduct.add(1);
          }
          preProduct.add(num * preProduct.get(preProduct.size() - 1));
      }

      public int getProduct(int k) {
          return preProduct.size() <= k ? 0 : preProduct.get(preProduct.size() - 1) / preProduct.get(preProduct.size() - 1 - k);
      }
  }

  /**
   * Your ProductOfNumbers object will be instantiated and called as such:
   * ProductOfNumbers obj = new ProductOfNumbers();
   * obj.add(num);
   * int param_2 = obj.getProduct(k);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
