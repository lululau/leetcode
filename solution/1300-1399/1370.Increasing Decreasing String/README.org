* [[https://leetcode-cn.com/problems/increasing-decreasing-string][1370.
上升下降字符串]]
  :PROPERTIES:
  :CUSTOM_ID: 上升下降字符串
  :END:
[[./solution/1300-1399/1370.Increasing Decreasing String/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 s ，请你根据下面的算法重新构造字符串：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它
接在 结果字符串后面。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

重复步骤 2 ，直到你没法从 s 中选择字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它
接在 结果字符串后面。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

重复步骤 5 ，直到你没法从 s 中选择字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回将 s 中字符重新排序后的 结果字符串 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;aaaabbbbcccc&quot;
  <strong>输出：</strong>&quot;abccbaabccba&quot;
  <strong>解释：</strong>第一轮的步骤 1，2，3 后，结果字符串为 result = &quot;abc&quot;
  第一轮的步骤 4，5，6 后，结果字符串为 result = &quot;abccba&quot;
  第一轮结束，现在 s = &quot;aabbcc&quot; ，我们再次回到步骤 1
  第二轮的步骤 1，2，3 后，结果字符串为 result = &quot;abccbaabc&quot;
  第二轮的步骤 4，5，6 后，结果字符串为 result = &quot;abccbaabccba&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;rat&quot;
  <strong>输出：</strong>&quot;art&quot;
  <strong>解释：</strong>单词 &quot;rat&quot; 在上述算法重排序以后变成 &quot;art&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;leetcode&quot;
  <strong>输出：</strong>&quot;cdelotee&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;ggggggg&quot;
  <strong>输出：</strong>&quot;ggggggg&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;spo&quot;
  <strong>输出：</strong>&quot;ops&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 只包含小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
