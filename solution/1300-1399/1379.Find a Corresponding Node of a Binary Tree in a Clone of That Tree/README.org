* [[https://leetcode-cn.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree][1379.
找出克隆二叉树中的相同节点]]
  :PROPERTIES:
  :CUSTOM_ID: 找出克隆二叉树中的相同节点
  :END:
[[./solution/1300-1399/1379.Find a Corresponding Node of a Binary Tree in a Clone of That Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两棵二叉树，原始树 original 和克隆树 cloned，以及一个位于原始树
original 中的目标节点 target。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

其中，克隆树 cloned 是原始树 original 的一个 副本 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请找出在树 cloned 中，与 target 相同 的节点，并返回对该节点的引用（在
C/C++ 等有指针的语言中返回 节点指针，其他语言返回节点本身）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

你 不能 对两棵二叉树，以及 target 节点进行更改。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

只能 返回对克隆树 cloned 中已有的节点的引用。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：如果树中允许出现值相同的节点，你将如何解答？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> tree = [7,4,3,null,null,6,19], target = 3
  <strong>输出:</strong> 3
  <strong>解释:</strong> 上图画出了树 original 和 cloned。target 节点在树 original 中，用绿色标记。答案是树 cloned 中的黄颜色的节点（其他示例类似）。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> tree = [7], target =  7
  <strong>输出:</strong> 7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4
  <strong>输出:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> tree = [1,2,3,4,5,6,7,8,9,10], target = 5
  <strong>输出:</strong> 5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> tree = [1,2,null,3], target = 2
  <strong>输出:</strong> 2</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点的数量范围为 [1, 10^4] 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

同一棵树中，没有值相同的节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target 节点是树 original 中的一个节点，并且不会是 null 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
