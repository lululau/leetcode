* [[https://leetcode-cn.com/problems/longest-zigzag-path-in-a-binary-tree][1372.
二叉树中的最长交错路径]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树中的最长交错路径
  :END:
[[./solution/1300-1399/1372.Longest ZigZag Path in a Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一棵以 root 为根的二叉树，二叉树中的交错路径定义如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

选择二叉树中 任意 节点和一个方向（左或者右）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果前进方向为右，那么移动到当前节点的的右子节点，否则移动到它的左子节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

改变前进方向：左变右或者右变左。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

重复第二步和第三步，直到你在树中无法继续移动。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

交错路径的长度定义为：访问过的节点数目 - 1（单个节点的路径长度为 0 ）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回给定树中最长 交错路径 的长度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]
  <strong>输出：</strong>3
  <strong>解释：</strong>蓝色节点为树中最长交错路径（右 -&gt; 左 -&gt; 右）。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [1,1,1,null,1,null,null,1,1,null,1]
  <strong>输出：</strong>4
  <strong>解释：</strong>蓝色节点为树中最长交错路径（左 -&gt; 右 -&gt; 左 -&gt; 右）。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [1]
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每棵树最多有 50000 个节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的值在 [1, 100] 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
