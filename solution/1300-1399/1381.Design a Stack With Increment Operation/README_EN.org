* [[https://leetcode.com/problems/design-a-stack-with-increment-operation][1381.
Design a Stack With Increment Operation]]
  :PROPERTIES:
  :CUSTOM_ID: design-a-stack-with-increment-operation
  :END:
[[./solution/1300-1399/1381.Design a Stack With Increment Operation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a stack which supports the following operations.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the CustomStack class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

CustomStack(int maxSize) Initializes the object with maxSize which is
the maximum number of elements in the stack or do nothing if the stack
reached the maxSize.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void push(int x) Adds x to the top of the stack if the stack hasn't
reached the maxSize.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int pop() Pops and returns the top of stack or -1 if the stack is empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void inc(int k, int val) Increments the bottom k elements of the stack
by val. If there are less than k elements in the stack, just increment
all the elements in the stack.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input</strong>

  [&quot;CustomStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;increment&quot;,&quot;increment&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]

  [[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]

  <strong>Output</strong>

  [null,null,null,2,null,null,null,null,null,103,202,201,-1]

  <strong>Explanation</strong>

  CustomStack customStack = new CustomStack(3); // Stack is Empty []

  customStack.push(1);                          // stack becomes [1]

  customStack.push(2);                          // stack becomes [1, 2]

  customStack.pop();                            // return 2 --&gt; Return top of the stack 2, stack becomes [1]

  customStack.push(2);                          // stack becomes [1, 2]

  customStack.push(3);                          // stack becomes [1, 2, 3]

  customStack.push(4);                          // stack still [1, 2, 3], Don&#39;t add another elements as size is 4

  customStack.increment(5, 100);                // stack becomes [101, 102, 103]

  customStack.increment(2, 100);                // stack becomes [201, 202, 103]

  customStack.pop();                            // return 103 --&gt; Return top of the stack 103, stack becomes [201, 202]

  customStack.pop();                            // return 202 --&gt; Return top of the stack 102, stack becomes [201]

  customStack.pop();                            // return 201 --&gt; Return top of the stack 101, stack becomes []

  customStack.pop();                            // return -1 --&gt; Stack is empty return -1.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= maxSize <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= x <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 1000 calls will be made to each method of increment, push and
pop each separately.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class CustomStack:

      def __init__(self, maxSize: int):
          self.s = [0] * maxSize
          self.tail = 0

      def push(self, x: int) -> None:
          if self.tail < len(self.s):
              self.s[self.tail] = x
              self.tail += 1

      def pop(self) -> int:
          if self.tail == 0:
              return -1
          self.tail -= 1
          return self.s[self.tail]

      def increment(self, k: int, val: int) -> None:
          for i in range(min(k, self.tail)):
              self.s[i] += val


  # Your CustomStack object will be instantiated and called as such:
  # obj = CustomStack(maxSize)
  # obj.push(x)
  # param_2 = obj.pop()
  # obj.increment(k,val)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class CustomStack {
      private int[] s;
      private int tail;

      public CustomStack(int maxSize) {
          s = new int[maxSize];
      }
      
      public void push(int x) {
          if (tail < s.length) {
              s[tail++] = x;
          }
      }
      
      public int pop() {
          return tail == 0 ? -1 : s[--tail];
      }
      
      public void increment(int k, int val) {
          for (int i = 0; i < Math.min(k, tail); ++i) {
              s[i] += val;
          }
      }
  }

  /**
   * Your CustomStack object will be instantiated and called as such:
   * CustomStack obj = new CustomStack(maxSize);
   * obj.push(x);
   * int param_2 = obj.pop();
   * obj.increment(k,val);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
