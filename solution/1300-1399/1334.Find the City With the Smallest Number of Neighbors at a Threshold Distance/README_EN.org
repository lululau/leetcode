* [[https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance][1334.
Find the City With the Smallest Number of Neighbors at a Threshold
Distance]]
  :PROPERTIES:
  :CUSTOM_ID: find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance
  :END:
[[./solution/1300-1399/1334.Find the City With the Smallest Number of Neighbors at a Threshold Distance/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There are n cities numbered from 0 to n-1. Given the array edges where
edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted
edge between cities fromi and toi, and given the integer
distanceThreshold.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the city with the smallest number of cities that are reachable
through some path and whose distance is at most distanceThreshold, If
there are multiple such cities, return the city with the greatest
number.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that the distance of a path connecting cities i and j is equal to
the sum of the edges' weights along that path.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
  <strong>Output:</strong> 3
  <strong>Explanation: </strong>The figure above describes the graph.&nbsp;
  The neighboring cities at a distanceThreshold = 4 for each city are:
  City 0 -&gt; [City 1, City 2]&nbsp;
  City 1 -&gt; [City 0, City 2, City 3]&nbsp;
  City 2 -&gt; [City 0, City 1, City 3]&nbsp;
  City 3 -&gt; [City 1, City 2]&nbsp;
  Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
  <strong>Output:</strong> 0
  <strong>Explanation: </strong>The figure above describes the graph.&nbsp;
  The neighboring cities at a distanceThreshold = 2 for each city are:
  City 0 -&gt; [City 1]&nbsp;
  City 1 -&gt; [City 0, City 4]&nbsp;
  City 2 -&gt; [City 3, City 4]&nbsp;
  City 3 -&gt; [City 2, City 4]
  City 4 -&gt; [City 1, City 2, City 3]&nbsp;
  The city 0 has 1 neighboring city at a distanceThreshold = 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edges.length <= n * (n - 1) / 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= fromi < toi < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= weighti, distanceThreshold <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All pairs (fromi, toi) are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
