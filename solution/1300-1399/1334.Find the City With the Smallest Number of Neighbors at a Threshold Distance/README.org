* [[https://leetcode-cn.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance][1334.
阈值距离内邻居最少的城市]]
  :PROPERTIES:
  :CUSTOM_ID: 阈值距离内邻居最少的城市
  :END:
[[./solution/1300-1399/1334.Find the City With the Smallest Number of Neighbors at a Threshold Distance/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有 n 个城市，按从 0 到 n-1 编号。给你一个边数组 edges，其中 edges[i] =
[fromi, toi,
weighti] 代表 fromi 和 toi 两个城市之间的双向加权边，距离阈值是一个整数 distanceThreshold。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回能通过某些路径到达其他城市数目最少、且路径距离 最大
为 distanceThreshold 的城市。如果有多个这样的城市，则返回编号最大的城市。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意，连接城市 i 和 j 的路径的距离等于沿该路径的所有边的权重之和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
  <strong>输出：</strong>3
  <strong>解释：</strong>城市分布图如上。
  每个城市阈值距离 distanceThreshold = 4 内的邻居城市分别是：
  城市 0 -> [城市 1, 城市 2] 
  城市 1 -> [城市 0, 城市 2, 城市 3] 
  城市 2 -> [城市 0, 城市 1, 城市 3] 
  城市 3 -> [城市 1, 城市 2] 
  城市 0 和 3 在阈值距离 4 以内都有 2 个邻居城市，但是我们必须返回城市 3，因为它的编号最大。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
  <strong>输出：</strong>0
  <strong>解释：</strong>城市分布图如上。 
  每个城市阈值距离 distanceThreshold = 2 内的邻居城市分别是：
  城市 0 -> [城市 1] 
  城市 1 -> [城市 0, 城市 4] 
  城市 2 -> [城市 3, 城市 4] 
  城市 3 -> [城市 2, 城市 4]
  城市 4 -> [城市 1, 城市 2, 城市 3] 
  城市 0 在阈值距离 2 以内只有 1 个邻居城市。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edges.length <= n * (n - 1) / 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= fromi < toi < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= weighti, distanceThreshold <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有 (fromi, toi) 都是不同的。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
