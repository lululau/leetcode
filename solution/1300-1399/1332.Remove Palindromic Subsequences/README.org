* [[https://leetcode-cn.com/problems/remove-palindromic-subsequences][1332.
删除回文子序列]]
  :PROPERTIES:
  :CUSTOM_ID: 删除回文子序列
  :END:
[[./solution/1300-1399/1332.Remove Palindromic Subsequences/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 s，它仅由字母 'a' 和 'b' 组成。每一次删除操作都可以从 s
中删除一个回文 子序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回删除给定字符串中所有字符（字符串为空）的最小删除次数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;ababa&quot;
  <strong>输出：</strong>1
  <strong>解释：</strong>字符串本身就是回文序列，只需要删除一次。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;abb&quot;
  <strong>输出：</strong>2
  <strong>解释：</strong>&quot;<strong>a</strong>bb&quot; -&gt; &quot;<strong>bb</strong>&quot; -&gt; &quot;&quot;. 
  先删除回文子序列 &quot;a&quot;，然后再删除 &quot;bb&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;baabb&quot;
  <strong>输出：</strong>2
  <strong>解释：</strong>&quot;<strong>baa</strong>b<strong>b</strong>&quot; -&gt; &quot;b&quot; -&gt; &quot;&quot;. 
  先删除回文子序列 &quot;baab&quot;，然后再删除 &quot;b&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;&quot;
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= s.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 仅包含字母 'a'  和 'b'

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
