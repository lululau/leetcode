* [[https://leetcode-cn.com/problems/minimum-number-of-frogs-croaking][1419.
数青蛙]]
  :PROPERTIES:
  :CUSTOM_ID: 数青蛙
  :END:
[[./solution/1400-1499/1419.Minimum Number of Frogs Croaking/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 croakOfFrogs，它表示不同青蛙发出的蛙鸣声（字符串 "croak"
）的组合。由于同一时间可以有多只青蛙呱呱作响，所以 croakOfFrogs
中会混合多个 “croak”
。请你返回模拟字符串中所有蛙鸣所需不同青蛙的最少数目。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：要想发出蛙鸣 "croak"，青蛙必须 依序 输出 ‘c', 'r', 'o', 'a', 'k'
这 5 个字母。如果没有输出全部五个字母，那么它就不会发出声音。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果字符串 croakOfFrogs 不是由若干有效的 "croak" 字符混合而成，请返回 -1
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>croakOfFrogs = &quot;croakcroak&quot;
  <strong>输出：</strong>1 
  <strong>解释：</strong>一只青蛙 &ldquo;呱呱&rdquo; 两次
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>croakOfFrogs = &quot;crcoakroak&quot;
  <strong>输出：</strong>2 
  <strong>解释：</strong>最少需要两只青蛙，&ldquo;呱呱&rdquo; 声用黑体标注
  第一只青蛙 &quot;<strong>cr</strong>c<strong>oak</strong>roak&quot;
  第二只青蛙 &quot;cr<strong>c</strong>oak<strong>roak</strong>&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>croakOfFrogs = &quot;croakcrook&quot;
  <strong>输出：</strong>-1
  <strong>解释：</strong>给出的字符串不是 &quot;croak<strong>&quot;</strong> 的有效组合。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>croakOfFrogs = &quot;croakcroa&quot;
  <strong>输出：</strong>-1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= croakOfFrogs.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

字符串中的字符只有 'c', 'r', 'o', 'a' 或者 'k'

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
