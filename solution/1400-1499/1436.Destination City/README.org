* [[https://leetcode-cn.com/problems/destination-city][1436.
旅行终点站]]
  :PROPERTIES:
  :CUSTOM_ID: 旅行终点站
  :END:
[[./solution/1400-1499/1436.Destination City/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一份旅游线路图，该线路图中的旅行线路用数组 paths 表示，其中 paths[i]
= [cityAi, cityBi] 表示该线路将会从 cityAi 直接前往 cityBi
。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>paths = [[&quot;London&quot;,&quot;New York&quot;],[&quot;New York&quot;,&quot;Lima&quot;],[&quot;Lima&quot;,&quot;Sao Paulo&quot;]]
  <strong>输出：</strong>&quot;Sao Paulo&quot; 
  <strong>解释：</strong>从 &quot;London&quot; 出发，最后抵达终点站 &quot;Sao Paulo&quot; 。本次旅行的路线是 &quot;London&quot; -&gt; &quot;New York&quot; -&gt; &quot;Lima&quot; -&gt; &quot;Sao Paulo&quot; 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>paths = [[&quot;B&quot;,&quot;C&quot;],[&quot;D&quot;,&quot;B&quot;],[&quot;C&quot;,&quot;A&quot;]]
  <strong>输出：</strong>&quot;A&quot;
  <strong>解释：</strong>所有可能的线路是：
  &quot;D&quot; -&gt; &quot;B&quot; -&gt; &quot;C&quot; -&gt; &quot;A&quot;.&nbsp;
  &quot;B&quot; -&gt; &quot;C&quot; -&gt; &quot;A&quot;.&nbsp;
  &quot;C&quot; -&gt; &quot;A&quot;.&nbsp;
  &quot;A&quot;.&nbsp;
  显然，旅行终点站是 &quot;A&quot; 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>paths = [[&quot;A&quot;,&quot;Z&quot;]]
  <strong>输出：</strong>&quot;Z&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= paths.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

paths[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= cityAi.length, cityBi.length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

cityAi != cityBi

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有字符串均由大小写英文字母和空格字符组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
