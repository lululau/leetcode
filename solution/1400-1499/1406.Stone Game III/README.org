* [[https://leetcode-cn.com/problems/stone-game-iii][1406. 石子游戏
III]]
  :PROPERTIES:
  :CUSTOM_ID: 石子游戏-iii
  :END:
[[./solution/1400-1499/1406.Stone Game III/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

Alice 和 Bob
用几堆石子在做游戏。几堆石子排成一行，每堆石子都对应一个得分，由数组
stoneValue 给出。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Alice 和 Bob 轮流取石子，Alice
总是先开始。在每个玩家的回合中，该玩家可以拿走剩下石子中的的前 1、2 或 3
堆石子 。比赛一直持续到所有石头都被拿走。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每个玩家的最终得分为他所拿到的每堆石子的对应得分之和。每个玩家的初始分数都是
0
。比赛的目标是决出最高分，得分最高的选手将会赢得比赛，比赛也可能会出现平局。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设 Alice 和 Bob 都采取 最优策略 。如果 Alice 赢了就返回 "Alice" ，Bob
赢了就返回 "Bob"，平局（分数相同）返回 "Tie" 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>values = [1,2,3,7]
  <strong>输出：</strong>&quot;Bob&quot;
  <strong>解释：</strong>Alice 总是会输，她的最佳选择是拿走前三堆，得分变成 6 。但是 Bob 的得分为 7，Bob 获胜。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>values = [1,2,3,-9]
  <strong>输出：</strong>&quot;Alice&quot;
  <strong>解释：</strong>Alice 要想获胜就必须在第一个回合拿走前三堆石子，给 Bob 留下负分。
  如果 Alice 只拿走第一堆，那么她的得分为 1，接下来 Bob 拿走第二、三堆，得分为 5 。之后 Alice 只能拿到分数 -9 的石子堆，输掉比赛。
  如果 Alice 拿走前两堆，那么她的得分为 3，接下来 Bob 拿走第三堆，得分为 3 。之后 Alice 只能拿到分数 -9 的石子堆，同样会输掉比赛。
  注意，他们都应该采取 <strong>最优策略 </strong>，所以在这里 Alice 将选择能够使她获胜的方案。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>values = [1,2,3,6]
  <strong>输出：</strong>&quot;Tie&quot;
  <strong>解释：</strong>Alice 无法赢得比赛。如果她决定选择前三堆，她可以以平局结束比赛，否则她就会输。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>values = [1,2,3,-1,-2,-3,7]
  <strong>输出：</strong>&quot;Alice&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>values = [-1,-2,-3]
  <strong>输出：</strong>&quot;Tie&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= values.length <= 50000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= values[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
