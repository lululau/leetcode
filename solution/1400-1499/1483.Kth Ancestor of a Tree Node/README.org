* [[https://leetcode-cn.com/problems/kth-ancestor-of-a-tree-node][1483.
树节点的第 K 个祖先]]
  :PROPERTIES:
  :CUSTOM_ID: 树节点的第-k-个祖先
  :END:
[[./solution/1400-1499/1483.Kth Ancestor of a Tree Node/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一棵树，树上有 n 个节点，按从 0 到 n-1
编号。树以父节点数组的形式给出，其中 parent[i] 是节点 i
的父节点。树的根节点是编号为 0 的节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你设计并实现 getKthAncestor(int node, int k) 函数，函数返回节点 node
的第 k 个祖先节点。如果不存在这样的祖先节点，返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

树节点的第 k 个祖先节点是从该节点到根节点路径上的第 k 个节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  [&quot;TreeAncestor&quot;,&quot;getKthAncestor&quot;,&quot;getKthAncestor&quot;,&quot;getKthAncestor&quot;]
  [[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]

  <strong>输出：</strong>
  [null,1,0,-1]

  <strong>解释：</strong>
  TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);

  treeAncestor.getKthAncestor(3, 1);  // 返回 1 ，它是 3 的父节点
  treeAncestor.getKthAncestor(5, 2);  // 返回 0 ，它是 5 的祖父节点
  treeAncestor.getKthAncestor(6, 3);  // 返回 -1 因为不存在满足要求的祖先节点
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= n <= 5*10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

parent[0] == -1 表示编号为 0 的节点是根节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于所有的 0 < i < n ，0 <= parent[i] < n 总成立

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= node < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

至多查询 5*10^4 次

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
