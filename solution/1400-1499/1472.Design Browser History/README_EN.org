* [[https://leetcode.com/problems/design-browser-history][1472. Design
Browser History]]
  :PROPERTIES:
  :CUSTOM_ID: design-browser-history
  :END:
[[./solution/1400-1499/1472.Design Browser History/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You have a browser of one tab where you start on the homepage and you
can visit another url, get back in the history number of steps or move
forward in the history number of steps.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the BrowserHistory class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

BrowserHistory(string homepage) Initializes the object with the
homepage of the browser.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void visit(string url) Visits url from the current page. It clears up
all the forward history.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

string back(int steps) Move steps back in history. If you can only
return x steps in the history and steps > x, you will return only x
steps. Return the current url after moving back in history at most
steps.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

string forward(int steps) Move steps forward in history. If you can only
forward x steps in the history and steps > x, you will forward only x
steps. Return the current url after forwarding in history at most steps.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>Input:</b>
  [&quot;BrowserHistory&quot;,&quot;visit&quot;,&quot;visit&quot;,&quot;visit&quot;,&quot;back&quot;,&quot;back&quot;,&quot;forward&quot;,&quot;visit&quot;,&quot;forward&quot;,&quot;back&quot;,&quot;back&quot;]
  [[&quot;leetcode.com&quot;],[&quot;google.com&quot;],[&quot;facebook.com&quot;],[&quot;youtube.com&quot;],[1],[1],[1],[&quot;linkedin.com&quot;],[2],[2],[7]]
  <b>Output:</b>
  [null,null,null,null,&quot;facebook.com&quot;,&quot;google.com&quot;,&quot;facebook.com&quot;,null,&quot;linkedin.com&quot;,&quot;google.com&quot;,&quot;leetcode.com&quot;]

  <b>Explanation:</b>
  BrowserHistory browserHistory = new BrowserHistory(&quot;leetcode.com&quot;);
  browserHistory.visit(&quot;google.com&quot;);       // You are in &quot;leetcode.com&quot;. Visit &quot;google.com&quot;
  browserHistory.visit(&quot;facebook.com&quot;);     // You are in &quot;google.com&quot;. Visit &quot;facebook.com&quot;
  browserHistory.visit(&quot;youtube.com&quot;);      // You are in &quot;facebook.com&quot;. Visit &quot;youtube.com&quot;
  browserHistory.back(1);                   // You are in &quot;youtube.com&quot;, move back to &quot;facebook.com&quot; return &quot;facebook.com&quot;
  browserHistory.back(1);                   // You are in &quot;facebook.com&quot;, move back to &quot;google.com&quot; return &quot;google.com&quot;
  browserHistory.forward(1);                // You are in &quot;google.com&quot;, move forward to &quot;facebook.com&quot; return &quot;facebook.com&quot;
  browserHistory.visit(&quot;linkedin.com&quot;);     // You are in &quot;facebook.com&quot;. Visit &quot;linkedin.com&quot;
  browserHistory.forward(2);                // You are in &quot;linkedin.com&quot;, you cannot move forward any steps.
  browserHistory.back(2);                   // You are in &quot;linkedin.com&quot;, move back two steps to &quot;facebook.com&quot; then to &quot;google.com&quot;. return &quot;google.com&quot;
  browserHistory.back(7);                   // You are in &quot;google.com&quot;, you can move back only one step to &quot;leetcode.com&quot;. return &quot;leetcode.com&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= homepage.length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= url.length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= steps <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

homepage and url consist of  '.' or lower case English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 5000 calls will be made to visit, back, and forward.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
Using list.

#+begin_src python
  class BrowserHistory:

      def __init__(self, homepage: str):
          self.urls = []
          self.cur = -1
          self.tail = -1
          self.visit(homepage)

      def visit(self, url: str) -> None:
          self.cur += 1
          if self.cur < len(self.urls):
              self.urls[self.cur] = url
          else:
              self.urls.append(url)
          self.tail = self.cur

      def back(self, steps: int) -> str:
          self.cur = max(0, self.cur -steps)
          return self.urls[self.cur]

      def forward(self, steps: int) -> str:
          self.cur = min(self.tail, self.cur + steps)
          return self.urls[self.cur]

  # Your BrowserHistory object will be instantiated and called as such:
  # obj = BrowserHistory(homepage)
  # obj.visit(url)
  # param_2 = obj.back(steps)
  # param_3 = obj.forward(steps)
#+end_src

Using stacks.

#+begin_src python
  class BrowserHistory:

      def __init__(self, homepage: str):
          self.s1 = []
          self.s2 = []
          self.cur = homepage

      def visit(self, url: str) -> None:
          self.s2.clear()
          self.s1.append(self.cur)
          self.cur = url

      def back(self, steps: int) -> str:
          while steps > 0 and self.s1:
              self.s2.append(self.cur)
              self.cur = self.s1.pop()
              steps -= 1
          return self.cur

      def forward(self, steps: int) -> str:
          while steps > 0 and self.s2:
              self.s1.append(self.cur)
              self.cur = self.s2.pop()
              steps -= 1
          return self.cur


  # Your BrowserHistory object will be instantiated and called as such:
  # obj = BrowserHistory(homepage)
  # obj.visit(url)
  # param_2 = obj.back(steps)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
Using list.

#+begin_src java
  class BrowserHistory {
      private List<String> urls;
      private int cur = -1;
      private int tail = -1;

      public BrowserHistory(String homepage) {
          urls = new ArrayList<>();
          visit(homepage);
      }

      public void visit(String url) {
          ++cur;
          if (cur < urls.size()) {
              urls.set(cur, url);
          } else {
              urls.add(url);
          }
          tail = cur;
      }

      public String back(int steps) {
          cur = Math.max(0, cur - steps);
          return urls.get(cur);
      }

      public String forward(int steps) {
          cur = Math.min(tail, cur + steps);
          return urls.get(cur);
      }
  }

  /**
   * Your BrowserHistory object will be instantiated and called as such:
   * BrowserHistory obj = new BrowserHistory(homepage);
   * obj.visit(url);
   * String param_2 = obj.back(steps);
   * String param_3 = obj.forward(steps);
   */
#+end_src

Using stacks.

#+begin_src java
  class BrowserHistory {
      private Deque<String> s1;
      private Deque<String> s2;
      private String cur;

      public BrowserHistory(String homepage) {
          s1 = new ArrayDeque<>();
          s2 = new ArrayDeque<>();
          cur = homepage;
      }

      public void visit(String url) {
          s2.clear();
          s1.push(cur);
          cur = url;
      }

      public String back(int steps) {
          while (steps > 0 && !s1.isEmpty()) {
              s2.push(cur);
              cur = s1.pop();
              --steps;
          }
          return cur;
      }

      public String forward(int steps) {
          while (steps > 0 && !s2.isEmpty()) {
              s1.push(cur);
              cur = s2.pop();
              --steps;
          }
          return cur;
      }
  }

  /**
   * Your BrowserHistory object will be instantiated and called as such:
   * BrowserHistory obj = new BrowserHistory(homepage);
   * obj.visit(url);
   * String param_2 = obj.back(steps);
   * String param_3 = obj.forward(steps);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
