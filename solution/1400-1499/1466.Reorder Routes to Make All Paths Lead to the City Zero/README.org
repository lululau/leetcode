* [[https://leetcode-cn.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero][1466.
重新规划路线]]
  :PROPERTIES:
  :CUSTOM_ID: 重新规划路线
  :END:
[[./solution/1400-1499/1466.Reorder Routes to Make All Paths Lead to the City Zero/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

n 座城市，从 0 到 n-1 编号，其间共有 n-1
条路线。因此，要想在两座不同城市之间旅行只有唯一一条路线可供选择（路线网形成一颗树）。去年，交通运输部决定重新规划路线，以改变交通拥堵的状况。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

路线用 connections 表示，其中 connections[i] = [a, b] 表示从城市 a 到 b
的一条有向路线。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

今年，城市 0 将会举办一场大型比赛，很多游客都想前往城市 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你帮助重新规划路线方向，使每个城市都可以访问城市 0
。返回需要变更方向的最小路线数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

题目数据 保证 每个城市在重新规划路线方向后都能到达城市 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
  <strong>输出：</strong>3
  <strong>解释：</strong>更改以红色显示的路线的方向，使每个城市都可以到达城市 0 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
  <strong>输出：</strong>2
  <strong>解释：</strong>更改以红色显示的路线的方向，使每个城市都可以到达城市 0 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, connections = [[1,0],[2,0]]
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 5 * 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

connections.length == n-1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

connections[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= connections[i][0], connections[i][1] <= n-1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

connections[i][0] != connections[i][1]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
