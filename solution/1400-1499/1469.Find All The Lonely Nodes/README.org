* [[https://leetcode-cn.com/problems/find-all-the-lonely-nodes][1469.
寻找所有的独生节点]]
  :PROPERTIES:
  :CUSTOM_ID: 寻找所有的独生节点
  :END:
[[./solution/1400-1499/1469.Find All The Lonely Nodes/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

二叉树中，如果一个节点是其父节点的唯一子节点，则称这样的节点为
“独生节点” 。二叉树的根节点不会是独生节点，因为它没有父节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定一棵二叉树的根节点 root ，返回树中 所有的独生节点的值所构成的数组
。数组的顺序 不限 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,2,3,null,4]
  <strong>输出：</strong>[4]
  <strong>解释：</strong>浅蓝色的节点是唯一的独生节点。
  节点 1 是根节点，不是独生的。
  节点 2 和 3 有共同的父节点，所以它们都不是独生的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [7,1,4,6,null,5,3,null,null,null,null,null,2]
  <strong>输出：</strong>[6,2]
  <strong>输出：</strong>浅蓝色的节点是独生节点。
  请谨记，顺序是不限的。 [2,6] 也是一种可接受的答案。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]
  <strong>输出：</strong>[77,55,33,66,44,22]
  <strong>解释：</strong>节点 99 和 88 有共同的父节点，节点 11 是根节点。
  其他所有节点都是独生节点。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [197]
  <strong>输出：</strong>[]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [31,null,78,null,28]
  <strong>输出：</strong>[78,28]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

 tree 中节点个数的取值范围是 [1, 1000]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的值的取值范围是 [1, 10^6]。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def getLonelyNodes(self, root: TreeNode) -> List[int]:
          def traverse(root):
              if root is None:
                  return
              if root.left is None and root.right is not None:
                  self.res.append(root.right.val)
              if root.left is not None and root.right is None:
                  self.res.append(root.left.val)
              traverse(root.left)
              traverse(root.right)
          self.res = []
          traverse(root)
          return self.res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      private List<Integer> res;

      public List<Integer> getLonelyNodes(TreeNode root) {
          res = new ArrayList<>();
          traverse(root);
          return res;
      }

      private void traverse(TreeNode root) {
          if (root == null) {
              return;
          }
          if (root.left == null && root.right != null) {
              res.add(root.right.val);
          }
          if (root.left != null && root.right == null) {
              res.add(root.left.val);
          }
          traverse(root.left);
          traverse(root.right);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
