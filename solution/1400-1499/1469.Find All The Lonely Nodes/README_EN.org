* [[https://leetcode.com/problems/find-all-the-lonely-nodes][1469. Find
All The Lonely Nodes]]
  :PROPERTIES:
  :CUSTOM_ID: find-all-the-lonely-nodes
  :END:
[[./solution/1400-1499/1469.Find All The Lonely Nodes/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In a binary tree, a lonely node is a node that is the only child of its
parent node. The root of the tree is not lonely because it does not have
a parent node.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given the root of a binary tree, return an array containing the values
of all lonely nodes in the tree. Return the list in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2,3,null,4]
  <strong>Output:</strong> [4]
  <strong>Explanation:</strong> Light blue node is the only lonely node.
  Node 1 is the root and is not lonely.
  Nodes 2 and 3 have the same parent and are not lonely.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [7,1,4,6,null,5,3,null,null,null,null,null,2]
  <strong>Output:</strong> [6,2]
  <strong>Explanation:</strong> Light blue nodes are lonely nodes.
  Please remember that order doesn&#39;t matter, [2,6] is also an acceptable answer.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>
  Input:</strong> root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]
  <strong>Output:</strong> [77,55,33,66,44,22]
  <strong>Explanation:</strong> Nodes 99 and 88 share the same parent. Node 11 is the root.
  All other nodes are lonely.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [197]
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [31,null,78,null,28]
  <strong>Output:</strong> [78,28]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 1000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each node's value is between [1, 10^6].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def getLonelyNodes(self, root: TreeNode) -> List[int]:
          def traverse(root):
              if root is None:
                  return
              if root.left is None and root.right is not None:
                  self.res.append(root.right.val)
              if root.left is not None and root.right is None:
                  self.res.append(root.left.val)
              traverse(root.left)
              traverse(root.right)
          self.res = []
          traverse(root)
          return self.res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      private List<Integer> res;

      public List<Integer> getLonelyNodes(TreeNode root) {
          res = new ArrayList<>();
          traverse(root);
          return res;
      }

      private void traverse(TreeNode root) {
          if (root == null) {
              return;
          }
          if (root.left == null && root.right != null) {
              res.add(root.right.val);
          }
          if (root.left != null && root.right == null) {
              res.add(root.left.val);
          }
          traverse(root.left);
          traverse(root.right);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
