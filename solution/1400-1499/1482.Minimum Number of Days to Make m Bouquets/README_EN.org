* [[https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets][1482.
Minimum Number of Days to Make m Bouquets]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-number-of-days-to-make-m-bouquets
  :END:
[[./solution/1400-1499/1482.Minimum Number of Days to Make m Bouquets/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array bloomDay, an integer m and an integer k.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We need to make m bouquets. To make a bouquet, you need to use k
adjacent flowers from the garden.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The garden consists of n flowers, the ith flower will bloom in the
bloomDay[i] and then can be used in exactly one bouquet.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum number of days you need to wait to be able to make m
bouquets from the garden. If it is impossible to make m bouquets return
-1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> bloomDay = [1,10,3,10,2], m = 3, k = 1

  <strong>Output:</strong> 3

  <strong>Explanation:</strong> Let&#39;s see what happened in the first three days. x means flower bloomed and _ means flower didn&#39;t bloom in the garden.

  We need 3 bouquets each should contain 1 flower.

  After day 1: [x, _, _, _, _]   // we can only make one bouquet.

  After day 2: [x, _, _, _, x]   // we can only make two bouquets.

  After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> bloomDay = [1,10,3,10,2], m = 3, k = 2

  <strong>Output:</strong> -1

  <strong>Explanation:</strong> We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3

  <strong>Output:</strong> 12

  <strong>Explanation:</strong> We need 2 bouquets each should have 3 flowers.

  Here&#39;s the garden after the 7 and 12 days:

  After day 7: [x, x, x, x, _, x, x]

  We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.

  After day 12: [x, x, x, x, x, x, x]

  It is obvious that we can make two bouquets in different ways.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> bloomDay = [1000000000,1000000000], m = 1, k = 1

  <strong>Output:</strong> 1000000000

  <strong>Explanation:</strong> You need to wait 1000000000 days to have a flower ready for a bouquet.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2

  <strong>Output:</strong> 9

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

bloomDay.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= bloomDay[i] <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= 10^6

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:
Quickly locate using binary search

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def minDays(self, bloomDay: List[int], m: int, k: int) -> int:
          if m * k > len(bloomDay):
              return -1

          def check(day: int) -> bool:
              cnt, cur = 0, 0
              for bd in bloomDay:
                  cur = cur + 1 if bd <= day else 0
                  if cur == k:
                      cnt += 1
                      cur = 0
              return cnt >= m

          left, right = min(bloomDay), max(bloomDay)
          while left < right:
              mid = (left + right) // 2
              if check(mid):
                  right = mid
              else:
                  left = mid + 1
          return left
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int minDays(int[] bloomDay, int m, int k) {
          if (m * k > bloomDay.length) {
              return -1;
          }
          int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
          for (int bd : bloomDay) {
              min = Math.min(min, bd);
              max = Math.max(max, bd);
          }
          int left = min, right = max;
          while (left < right) {
              int mid = (left + right) >>> 1;
              if (check(bloomDay, m, k, mid)) {
                  right = mid;
              } else {
                  left = mid + 1;
              }
          }
          return left;
      }

      private boolean check(int[] bloomDay, int m, int k, int day) {
          int cnt = 0, cur = 0;
          for (int bd : bloomDay) {
              cur = bd <= day ? cur + 1 : 0;
              if (cur == k) {
                  cnt++;
                  cur = 0;
              }
          }
          return cnt >= m;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
