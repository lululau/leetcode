* [[https://leetcode-cn.com/problems/make-two-arrays-equal-by-reversing-sub-arrays][1460.
通过翻转子数组使两个数组相等]]
  :PROPERTIES:
  :CUSTOM_ID: 通过翻转子数组使两个数组相等
  :END:
[[./solution/1400-1499/1460.Make Two Arrays Equal by Reversing Sub-arrays/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个长度相同的整数数组 target 和 arr 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每一步中，你可以选择 arr 的任意
非空子数组 并将它翻转。你可以执行此过程任意次。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果你能让 arr 变得与 target 相同，返回 True；否则，返回 False 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = [1,2,3,4], arr = [2,4,1,3]
  <strong>输出：</strong>true
  <strong>解释：</strong>你可以按照如下步骤使 arr 变成 target：
  1- 翻转子数组 [2,4,1] ，arr 变成 [1,4,2,3]
  2- 翻转子数组 [4,2] ，arr 变成 [1,2,4,3]
  3- 翻转子数组 [4,3] ，arr 变成 [1,2,3,4]
  上述方法并不是唯一的，还存在多种将 arr 变成 target 的方法。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = [7], arr = [7]
  <strong>输出：</strong>true
  <strong>解释：</strong>arr 不需要做任何翻转已经与 target 相等。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = [1,12], arr = [12,1]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = [3,7,9], arr = [3,7,11]
  <strong>输出：</strong>false
  <strong>解释：</strong>arr 没有数字 9 ，所以无论如何也无法变成 target 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = [1,1,1,1,1], arr = [1,1,1,1,1]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

target.length == arr.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

只要两数组元素均相同，那么就能通过翻转使得两个数组相等。

因此，对两数组进行排序，然后判断两数组是否相同即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def canBeEqual(self, target: List[int], arr: List[int]) -> bool:
          return sorted(target) == sorted(arr)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean canBeEqual(int[] target, int[] arr) {
          Arrays.sort(target);
          Arrays.sort(arr);
          return Arrays.equals(target, arr);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
