* [[https://leetcode.com/problems/subrectangle-queries][1476.
Subrectangle Queries]]
  :PROPERTIES:
  :CUSTOM_ID: subrectangle-queries
  :END:
[[./solution/1400-1499/1476.Subrectangle Queries/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement the class SubrectangleQueries which receives a rows x cols
rectangle as a matrix of integers in the constructor and supports two
methods:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

1. updateSubrectangle(int row1, int col1, int row2, int col2, int
newValue)

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Updates all values with newValue in the subrectangle whose upper left
coordinate is (row1,col1) and bottom right coordinate is (row2,col2).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

2. getValue(int row, int col)

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Returns the current value of the coordinate (row,col) from the
rectangle.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input</strong>

  [&quot;SubrectangleQueries&quot;,&quot;getValue&quot;,&quot;updateSubrectangle&quot;,&quot;getValue&quot;,&quot;getValue&quot;,&quot;updateSubrectangle&quot;,&quot;getValue&quot;,&quot;getValue&quot;]

  [[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]

  <strong>Output</strong>

  [null,1,null,5,5,null,10,5]

  <strong>Explanation</strong>

  SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  

  // The initial rectangle (4x3) looks like:

  // 1 2 1

  // 4 3 4

  // 3 2 1

  // 1 1 1

  subrectangleQueries.getValue(0, 2); // return 1

  subrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);

  // After this update the rectangle looks like:

  // 5 5 5

  // 5 5 5

  // 5 5 5

  // 5 5 5 

  subrectangleQueries.getValue(0, 2); // return 5

  subrectangleQueries.getValue(3, 1); // return 5

  subrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);

  // After this update the rectangle looks like:

  // 5   5   5

  // 5   5   5

  // 5   5   5

  // 10  10  10 

  subrectangleQueries.getValue(3, 1); // return 10

  subrectangleQueries.getValue(0, 2); // return 5

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input</strong>

  [&quot;SubrectangleQueries&quot;,&quot;getValue&quot;,&quot;updateSubrectangle&quot;,&quot;getValue&quot;,&quot;getValue&quot;,&quot;updateSubrectangle&quot;,&quot;getValue&quot;]

  [[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]

  <strong>Output</strong>

  [null,1,null,100,100,null,20]

  <strong>Explanation</strong>

  SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);

  subrectangleQueries.getValue(0, 0); // return 1

  subrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);

  subrectangleQueries.getValue(0, 0); // return 100

  subrectangleQueries.getValue(2, 2); // return 100

  subrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);

  subrectangleQueries.getValue(2, 2); // return 20

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

There will be at most 500 operations considering both
methods: updateSubrectangle and getValue.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rows, cols <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

rows == rectangle.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

cols == rectangle[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= row1 <= row2 < rows

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= col1 <= col2 < cols

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= newValue, rectangle[i][j] <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= row < rows

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= col < cols

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
