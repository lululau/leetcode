* [[https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards][1423.
可获得的最大点数]]
  :PROPERTIES:
  :CUSTOM_ID: 可获得的最大点数
  :END:
[[./solution/1400-1499/1423.Maximum Points You Can Obtain from Cards/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

几张卡牌 排成一行，每张卡牌都有一个对应的点数。点数由整数数组 cardPoints
给出。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每次行动，你可以从行的开头或者末尾拿一张卡牌，最终你必须正好拿 k
张卡牌。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你的点数就是你拿到手中的所有卡牌的点数之和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 cardPoints 和整数 k，请你返回可以获得的最大点数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>cardPoints = [1,2,3,4,5,6,1], k = 3
  <strong>输出：</strong>12
  <strong>解释：</strong>第一次行动，不管拿哪张牌，你的点数总是 1 。但是，先拿最右边的卡牌将会最大化你的可获得点数。最优策略是拿右边的三张牌，最终点数为 1 + 6 + 5 = 12 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>cardPoints = [2,2,2], k = 2
  <strong>输出：</strong>4
  <strong>解释：</strong>无论你拿起哪两张卡牌，可获得的点数总是 4 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>cardPoints = [9,7,7,9,7,7,9], k = 7
  <strong>输出：</strong>55
  <strong>解释：</strong>你必须拿起所有卡牌，可以获得的点数为所有卡牌的点数之和。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>cardPoints = [1,1000,1], k = 1
  <strong>输出：</strong>1
  <strong>解释：</strong>你无法拿到中间那张卡牌，所以可以获得的最大点数为 1 。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>cardPoints = [1,79,80,1,1,1,200,1], k = 3
  <strong>输出：</strong>202
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= cardPoints.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= cardPoints[i] <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= cardPoints.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
