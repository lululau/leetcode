* [[https://leetcode-cn.com/problems/maximum-product-of-two-elements-in-an-array][1464.
数组中两元素的最大乘积]]
  :PROPERTIES:
  :CUSTOM_ID: 数组中两元素的最大乘积
  :END:
[[./solution/1400-1499/1464.Maximum Product of Two Elements in an Array/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums，请你选择数组的两个不同下标 i 和 j，使
(nums[i]-1)*(nums[j]-1) 取得最大值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你计算并返回该式的最大值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [3,4,5,2]
  <strong>输出：</strong>12 
  <strong>解释：</strong>如果选择下标 i=1 和 j=2（下标从 0 开始），则可以获得最大值，(nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12 。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [1,5,4,5]
  <strong>输出：</strong>16
  <strong>解释：</strong>选择下标 i=1 和 j=3（下标从 0 开始），则可以获得最大值 (5-1)*(5-1) = 16 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [3,7]
  <strong>输出：</strong>12
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= nums.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 10^3

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

找出数组中最大的两个元素的下标 i、j，然后计算 =(nums[i]-1)*(nums[j]-1)=
即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def maxProduct(self, nums: List[int]) -> int:
          i = 0 if nums[0] > nums[1] else 1
          j = 1 - i
          for k in range(2, len(nums)):
              if nums[k] > nums[i]:
                  j = k
                  i, j = j, i
              elif nums[k] > nums[j]:
                  j = k
          return (nums[i] - 1) * (nums[j] - 1)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int maxProduct(int[] nums) {
          int i = nums[0] > nums[1] ? 0 : 1;
          int j = 1 - i;
          for (int k = 2; k < nums.length; ++k) {
              if (nums[k] > nums[i]) {
                  j = k;
                  int t = i;
                  i = j;
                  j = t;
              } else if (nums[k] > nums[j]) {
                  j = k;
              }
          }
          return (nums[i] - 1) * (nums[j] - 1);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
