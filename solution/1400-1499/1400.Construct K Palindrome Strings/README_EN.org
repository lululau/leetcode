* [[https://leetcode.com/problems/construct-k-palindrome-strings][1400.
Construct K Palindrome Strings]]
  :PROPERTIES:
  :CUSTOM_ID: construct-k-palindrome-strings
  :END:
[[./solution/1400-1499/1400.Construct K Palindrome Strings/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s and an integer k. You should construct k non-empty
palindrome strings using all the characters in s.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return True if you can use all the characters in s to construct k
palindrome strings or False otherwise.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;annabelle&quot;, k = 2

  <strong>Output:</strong> true

  <strong>Explanation:</strong> You can construct two palindromes using all characters in s.

  Some possible constructions &quot;anna&quot; + &quot;elble&quot;, &quot;anbna&quot; + &quot;elle&quot;, &quot;anellena&quot; + &quot;b&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;leetcode&quot;, k = 3

  <strong>Output:</strong> false

  <strong>Explanation:</strong> It is impossible to construct 3 palindromes using all the characters of s.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;true&quot;, k = 4

  <strong>Output:</strong> true

  <strong>Explanation:</strong> The only possible solution is to put each character in a separate string.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;yzyzyzyzyzyzyzy&quot;, k = 2

  <strong>Output:</strong> true

  <strong>Explanation:</strong> Simply you can put all z&#39;s in one string and all y&#39;s in the other string. Both strings will be palindrome.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> s = &quot;cr&quot;, k = 7

  <strong>Output:</strong> false

  <strong>Explanation:</strong> We don&#39;t have enough characters in s to construct 7 palindromes.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All characters in s are lower-case English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
