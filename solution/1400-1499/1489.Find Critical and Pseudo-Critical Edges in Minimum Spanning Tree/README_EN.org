* [[https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree][1489.
Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree]]
  :PROPERTIES:
  :CUSTOM_ID: find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree
  :END:
[[./solution/1400-1499/1489.Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a weighted undirected connected graph with n vertices numbered
from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti]
represents a bidirectional and weighted edge between nodes ai and bi. A
minimum spanning tree (MST) is a subset of the graph's edges that
connects all vertices without cycles and with the minimum possible total
edge weight.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Find all the critical and pseudo-critical edges in the given graph's
minimum spanning tree (MST). An MST edge whose deletion from the graph
would cause the MST weight to increase is called a critical edge. On the
other hand, a pseudo-critical edge is that which can appear in some MSTs
but not all.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that you can return the indices of the edges in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]
  <strong>Output:</strong> [[0,1],[2,3,4,5]]
  <strong>Explanation:</strong> The figure above describes the graph.
  The following figure shows all the possible MSTs:
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1489.Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree/images/msts.png" style="width: 540px; height: 553px;" />
  Notice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.
  The edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]
  <strong>Output:</strong> [[],[0,1,2,3]]
  <strong>Explanation:</strong> We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edges.length <= min(200, n * (n - 1) / 2)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ai < bi < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= weighti <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All pairs (ai, bi) are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
