* [[https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n][1415.
The k-th Lexicographical String of All Happy Strings of Length n]]
  :PROPERTIES:
  :CUSTOM_ID: the-k-th-lexicographical-string-of-all-happy-strings-of-length-n
  :END:
[[./solution/1400-1499/1415.The k-th Lexicographical String of All Happy Strings of Length n/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A happy string is a string that:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

consists only of letters of the set ['a', 'b', 'c'].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is
1-indexed).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy
strings and strings "aa", "baa" and "ababbc" are not happy strings.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given two integers n and k, consider a list of all happy strings of
length n sorted in lexicographical order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the kth string of this list or return an empty string if there
are less than k happy strings of length n.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 1, k = 3

  <strong>Output:</strong> &quot;c&quot;

  <strong>Explanation:</strong> The list [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] contains all happy strings of length 1. The third string is &quot;c&quot;.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 1, k = 4

  <strong>Output:</strong> &quot;&quot;

  <strong>Explanation:</strong> There are only 3 happy strings of length 1.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 3, k = 9

  <strong>Output:</strong> &quot;cab&quot;

  <strong>Explanation:</strong> There are 12 different happy string of length 3 [&quot;aba&quot;, &quot;abc&quot;, &quot;aca&quot;, &quot;acb&quot;, &quot;bab&quot;, &quot;bac&quot;, &quot;bca&quot;, &quot;bcb&quot;, &quot;cab&quot;, &quot;cac&quot;, &quot;cba&quot;, &quot;cbc&quot;]. You will find the 9th string = &quot;cab&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 2, k = 7

  <strong>Output:</strong> &quot;&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> n = 10, k = 100

  <strong>Output:</strong> &quot;abacbabacb&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

<<vidyowebrtcscreenshare_is_installed>>
 

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
