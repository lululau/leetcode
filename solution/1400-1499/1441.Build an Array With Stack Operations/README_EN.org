* [[https://leetcode.com/problems/build-an-array-with-stack-operations][1441.
Build an Array With Stack Operations]]
  :PROPERTIES:
  :CUSTOM_ID: build-an-array-with-stack-operations
  :END:
[[./solution/1400-1499/1441.Build an Array With Stack Operations/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array target and an integer n. In each iteration, you will read
a number from  list = {1,2,3..., n}.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Build the target array using the following operations:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Push: Read a new element from the beginning list, and push it in the
array.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Pop: delete the last element of the array.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If the target array is already built, stop reading more elements.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the operations to build the target array. You are guaranteed that
the answer is unique.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> target = [1,3], n = 3
  <strong>Output:</strong> [&quot;Push&quot;,&quot;Push&quot;,&quot;Pop&quot;,&quot;Push&quot;]
  <strong>Explanation: 
  </strong>Read number 1 and automatically push in the array -&gt; [1]
  Read number 2 and automatically push in the array then Pop it -&gt; [1]
  Read number 3 and automatically push in the array -&gt; [1,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> target = [1,2,3], n = 3
  <strong>Output:</strong> [&quot;Push&quot;,&quot;Push&quot;,&quot;Push&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> target = [1,2], n = 4
  <strong>Output:</strong> [&quot;Push&quot;,&quot;Push&quot;]
  <strong>Explanation: </strong>You only need to read the first 2 numbers and stop.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> target = [2,3,4], n = 4
  <strong>Output:</strong> [&quot;Push&quot;,&quot;Pop&quot;,&quot;Push&quot;,&quot;Push&quot;,&quot;Push&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target[i] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target is strictly increasing.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
