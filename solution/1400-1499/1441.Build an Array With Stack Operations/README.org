* [[https://leetcode-cn.com/problems/build-an-array-with-stack-operations][1441.
用栈操作构建数组]]
  :PROPERTIES:
  :CUSTOM_ID: 用栈操作构建数组
  :END:
[[./solution/1400-1499/1441.Build an Array With Stack Operations/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个目标数组 target 和一个整数 n。每次迭代，需要从  list =
{1,2,3..., n} 中依序读取一个数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请使用下述操作来构建目标数组 target ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Push：从 list 中读取一个新元素， 并将其推入数组中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Pop：删除数组中的最后一个元素。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果目标数组构建完成，就停止读取更多元素。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

题目数据保证目标数组严格递增，并且只包含 1 到 n 之间的数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请返回构建目标数组所用的操作序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

题目数据保证答案是唯一的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>target = [1,3], n = 3
  <strong>输出：</strong>["Push","Push","Pop","Push"]
  <strong>解释： 
  </strong>读取 1 并自动推入数组 -> [1]
  读取 2 并自动推入数组，然后删除它 -> [1]
  读取 3 并自动推入数组 -> [1,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>target = [1,2,3], n = 3
  <strong>输出：</strong>["Push","Push","Push"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>target = [1,2], n = 4
  <strong>输出：</strong>["Push","Push"]
  <strong>解释：</strong>只需要读取前 2 个数字就可以停止。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>target = [2,3,4], n = 4
  <strong>输出：</strong>["Push","Pop","Push","Push","Push"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target 是严格递增的

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
