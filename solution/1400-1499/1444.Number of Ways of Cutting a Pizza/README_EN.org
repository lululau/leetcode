* [[https://leetcode.com/problems/number-of-ways-of-cutting-a-pizza][1444.
Number of Ways of Cutting a Pizza]]
  :PROPERTIES:
  :CUSTOM_ID: number-of-ways-of-cutting-a-pizza
  :END:
[[./solution/1400-1499/1444.Number of Ways of Cutting a Pizza/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a rectangular pizza represented as a rows x cols matrix containing
the following characters: 'A' (an apple) and '.' (empty cell) and given
the integer k. You have to cut the pizza into k pieces using k-1 cuts. 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For each cut you choose the direction: vertical or horizontal, then you
choose a cut position at the cell boundary and cut the pizza into two
pieces. If you cut the pizza vertically, give the left part of the pizza
to a person. If you cut the pizza horizontally, give the upper part of
the pizza to a person. Give the last piece of pizza to the last person.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the number of ways of cutting the pizza such that each piece
contains at least one apple. Since the answer can be a huge number,
return this modulo 10^9 + 7.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> pizza = [&quot;A..&quot;,&quot;AAA&quot;,&quot;...&quot;], k = 3

  <strong>Output:</strong> 3 

  <strong>Explanation:</strong> The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> pizza = [&quot;A..&quot;,&quot;AA.&quot;,&quot;...&quot;], k = 3

  <strong>Output:</strong> 1

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> pizza = [&quot;A..&quot;,&quot;A..&quot;,&quot;...&quot;], k = 1

  <strong>Output:</strong> 1

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rows, cols <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

rows == pizza.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

cols == pizza[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pizza consists of characters 'A' and '.' only.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
