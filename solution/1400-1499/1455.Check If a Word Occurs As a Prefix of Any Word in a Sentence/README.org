* [[https://leetcode-cn.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence][1455.
检查单词是否为句中其他单词的前缀]]
  :PROPERTIES:
  :CUSTOM_ID: 检查单词是否为句中其他单词的前缀
  :END:
[[./solution/1400-1499/1455.Check If a Word Occurs As a Prefix of Any Word in a Sentence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 sentence 作为句子并指定检索词为 searchWord
，其中句子由若干用 单个空格 分隔的单词组成。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你检查检索词 searchWord 是否为句子 sentence 中任意单词的前缀。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果 searchWord 是某一个单词的前缀，则返回句子 sentence
中该单词所对应的下标（下标从 1 开始）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 searchWord
是多个单词的前缀，则返回匹配的第一个单词的下标（最小下标）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 searchWord 不是任何单词的前缀，则返回 -1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

字符串 S 的 前缀 是 S 的任何前导连续子字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>sentence = "i love eating burger", searchWord = "burg"
  <strong>输出：</strong>4
  <strong>解释：</strong>"burg" 是 "burger" 的前缀，而 "burger" 是句子中第 4 个单词。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>sentence = "this problem is an easy problem", searchWord = "pro"
  <strong>输出：</strong>2
  <strong>解释：</strong>"pro" 是 "problem" 的前缀，而 "problem" 是句子中第 2 个也是第 6 个单词，但是应该返回最小下标 2 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>sentence = "i am tired", searchWord = "you"
  <strong>输出：</strong>-1
  <strong>解释：</strong>"you" 不是句子中任何单词的前缀。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>sentence = "i use triple pillow", searchWord = "pill"
  <strong>输出：</strong>4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>sentence = "hello from the other side", searchWord = "they"
  <strong>输出：</strong>-1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= sentence.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= searchWord.length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sentence 由小写英文字母和空格组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

searchWord 由小写英文字母组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

前缀就是紧密附着于词根的语素，中间不能插入其它成分，并且它的位置是固定的-------位于词根之前。（引用自
前缀_百度百科 ）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:
          words = sentence.split(' ')
          i, n = 0, len(words)
          while i < n:
              word = words[i]
              if word[: len(searchWord)] == searchWord:
                  return i + 1
              i += 1
          return -1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int isPrefixOfWord(String sentence, String searchWord) {
          String[] words = sentence.split(" ");
          int i = 0, n = words.length;
          for (; i < n; ++i) {
              if (words[i].indexOf(searchWord) == 0) {
                  return i + 1;
              }
          }
          return -1;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
