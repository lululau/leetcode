* [[https://leetcode-cn.com/problems/html-entity-parser][1410. HTML
实体解析器]]
  :PROPERTIES:
  :CUSTOM_ID: html-实体解析器
  :END:
[[./solution/1400-1499/1410.HTML Entity Parser/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

「HTML 实体解析器」 是一种特殊的解析器，它将 HTML
代码作为输入，并用字符本身替换掉所有这些特殊的字符实体。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

HTML 里这些特殊字符和它们对应的字符实体包括：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

双引号：字符实体为 &quot; ，对应的字符是 " 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

单引号：字符实体为 &apos; ，对应的字符是 ' 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

与符号：字符实体为 &amp; ，对应对的字符是 & 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

大于号：字符实体为 &gt; ，对应的字符是 > 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

小于号：字符实体为 &lt; ，对应的字符是 < 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

斜线号：字符实体为 &frasl; ，对应的字符是 / 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你输入字符串 text ，请你实现一个
HTML 实体解析器，返回解析器解析后的结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>text = &quot;&amp;amp; is an HTML entity but &amp;ambassador; is not.&quot;
  <strong>输出：</strong>&quot;&amp; is an HTML entity but &amp;ambassador; is not.&quot;
  <strong>解释：</strong>解析器把字符实体 &amp;amp; 用 &amp; 替换
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>text = &quot;and I quote: &amp;quot;...&amp;quot;&quot;
  <strong>输出：</strong>&quot;and I quote: \&quot;...\&quot;&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>text = &quot;Stay home! Practice on Leetcode :)&quot;
  <strong>输出：</strong>&quot;Stay home! Practice on Leetcode :)&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>text = &quot;x &amp;gt; y &amp;amp;&amp;amp; x &amp;lt; y is always false&quot;
  <strong>输出：</strong>&quot;x &gt; y &amp;&amp; x &lt; y is always false&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>text = &quot;leetcode.com&amp;frasl;problemset&amp;frasl;all&quot;
  <strong>输出：</strong>&quot;leetcode.com/problemset/all&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= text.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

字符串可能包含 256 个ASCII 字符中的任意字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
