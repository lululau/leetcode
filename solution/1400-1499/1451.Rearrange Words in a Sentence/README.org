* [[https://leetcode-cn.com/problems/rearrange-words-in-a-sentence][1451.
重新排列句子中的单词]]
  :PROPERTIES:
  :CUSTOM_ID: 重新排列句子中的单词
  :END:
[[./solution/1400-1499/1451.Rearrange Words in a Sentence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

「句子」是一个用空格分隔单词的字符串。给你一个满足下述格式的句子 text :

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

句子的首字母大写

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

text 中的每个单词都用单个空格分隔。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请你重新排列 text
中的单词，使所有单词按其长度的升序排列。如果两个单词的长度相同，则保留其在原句子中的相对顺序。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请同样按上述格式返回新的句子。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;Leetcode is cool&quot;
  <strong>输出：</strong>&quot;Is cool leetcode&quot;
  <strong>解释：</strong>句子中共有 3 个单词，长度为 8 的 &quot;Leetcode&quot; ，长度为 2 的 &quot;is&quot; 以及长度为 4 的 &quot;cool&quot; 。
  输出需要按单词的长度升序排列，新句子中的第一个单词首字母需要大写。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;Keep calm and code on&quot;
  <strong>输出：</strong>&quot;On and keep calm code&quot;
  <strong>解释：</strong>输出的排序情况如下：
  &quot;On&quot; 2 个字母。
  &quot;and&quot; 3 个字母。
  &quot;keep&quot; 4 个字母，因为存在长度相同的其他单词，所以它们之间需要保留在原句子中的相对顺序。
  &quot;calm&quot; 4 个字母。
  &quot;code&quot; 4 个字母。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;To be or not to be&quot;
  <strong>输出：</strong>&quot;To be or to be not&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

text 以大写字母开头，然后包含若干小写字母以及单词间的单个空格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= text.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
