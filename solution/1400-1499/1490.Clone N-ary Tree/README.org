* [[https://leetcode-cn.com/problems/clone-n-ary-tree][1490. 克隆 N
叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 克隆-n-叉树
  :END:
[[./solution/1400-1499/1490.Clone N-ary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一棵 N 叉树的根节点 root ，返回该树的深拷贝（克隆）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

N 叉树的每个节点都包含一个值（ int ）和子节点的列表（ List[Node] ）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  class Node {
      public int val;
      public List&lt;Node&gt; children;
  }
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

N 叉树的输入序列用层序遍历表示，每组子节点用 null 分隔（见示例）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：你的答案可以适用于克隆图问题吗？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,null,3,2,4,null,5,6]
  <strong>输出：</strong>[1,null,3,2,4,null,5,6]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
  <strong>输出：</strong>[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

给定的 N 叉树的深度小于或等于 1000。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

节点的总个数在 [0, 10^4] 之间

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
