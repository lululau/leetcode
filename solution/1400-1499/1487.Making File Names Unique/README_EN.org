* [[https://leetcode.com/problems/making-file-names-unique][1487. Making
File Names Unique]]
  :PROPERTIES:
  :CUSTOM_ID: making-file-names-unique
  :END:
[[./solution/1400-1499/1487.Making File Names Unique/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array of strings names of size n. You will create n folders in
your file system such that, at the ith minute, you will create a folder
with the name names[i].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Since two files cannot have the same name, if you enter a folder name
which is previously used, the system will have a suffix addition to its
name in the form of (k), where, k is the smallest positive integer such
that the obtained name remains unique.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an array of strings of length n where ans[i] is the actual name
the system will assign to the ith folder when you create it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> names = [&quot;pes&quot;,&quot;fifa&quot;,&quot;gta&quot;,&quot;pes(2019)&quot;]

  <strong>Output:</strong> [&quot;pes&quot;,&quot;fifa&quot;,&quot;gta&quot;,&quot;pes(2019)&quot;]

  <strong>Explanation:</strong> Let&#39;s see how the file system creates folder names:

  &quot;pes&quot; --&gt; not assigned before, remains &quot;pes&quot;

  &quot;fifa&quot; --&gt; not assigned before, remains &quot;fifa&quot;

  &quot;gta&quot; --&gt; not assigned before, remains &quot;gta&quot;

  &quot;pes(2019)&quot; --&gt; not assigned before, remains &quot;pes(2019)&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> names = [&quot;gta&quot;,&quot;gta(1)&quot;,&quot;gta&quot;,&quot;avalon&quot;]

  <strong>Output:</strong> [&quot;gta&quot;,&quot;gta(1)&quot;,&quot;gta(2)&quot;,&quot;avalon&quot;]

  <strong>Explanation:</strong> Let&#39;s see how the file system creates folder names:

  &quot;gta&quot; --&gt; not assigned before, remains &quot;gta&quot;

  &quot;gta(1)&quot; --&gt; not assigned before, remains &quot;gta(1)&quot;

  &quot;gta&quot; --&gt; the name is reserved, system adds (k), since &quot;gta(1)&quot; is also reserved, systems put k = 2. it becomes &quot;gta(2)&quot;

  &quot;avalon&quot; --&gt; not assigned before, remains &quot;avalon&quot;

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> names = [&quot;onepiece&quot;,&quot;onepiece(1)&quot;,&quot;onepiece(2)&quot;,&quot;onepiece(3)&quot;,&quot;onepiece&quot;]

  <strong>Output:</strong> [&quot;onepiece&quot;,&quot;onepiece(1)&quot;,&quot;onepiece(2)&quot;,&quot;onepiece(3)&quot;,&quot;onepiece(4)&quot;]

  <strong>Explanation:</strong> When the last folder is created, the smallest positive valid k is 4, and it becomes &quot;onepiece(4)&quot;.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> names = [&quot;wano&quot;,&quot;wano&quot;,&quot;wano&quot;,&quot;wano&quot;]

  <strong>Output:</strong> [&quot;wano&quot;,&quot;wano(1)&quot;,&quot;wano(2)&quot;,&quot;wano(3)&quot;]

  <strong>Explanation:</strong> Just increase the value of k each time you create folder &quot;wano&quot;.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> names = [&quot;kaido&quot;,&quot;kaido(1)&quot;,&quot;kaido&quot;,&quot;kaido(1)&quot;]

  <strong>Output:</strong> [&quot;kaido&quot;,&quot;kaido(1)&quot;,&quot;kaido(2)&quot;,&quot;kaido(1)(1)&quot;]

  <strong>Explanation:</strong> Please note that system adds the suffix (k) to current name even it contained the same suffix before.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= names.length <= 5 * 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= names[i].length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

names[i] consists of lower case English letters, digits and/or round
brackets.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
