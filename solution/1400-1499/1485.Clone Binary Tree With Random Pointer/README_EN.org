* [[https://leetcode.com/problems/clone-binary-tree-with-random-pointer][1485.
Clone Binary Tree With Random Pointer]]
  :PROPERTIES:
  :CUSTOM_ID: clone-binary-tree-with-random-pointer
  :END:
[[./solution/1400-1499/1485.Clone Binary Tree With Random Pointer/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A binary tree is given such that each node contains an additional random
pointer which could point to any node in the tree or null.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return a deep copy of the tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The tree is represented in the same input/output way as normal binary
trees where each node is represented as a pair of [val,
random_index] where:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

val: an integer representing Node.val

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

random_index: the index of the node (in the input) where the random
pointer points to, or null if it does not point to any node.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You will be given the tree in class Node and you should return the
cloned tree in class NodeCopy.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [[1,null],null,[4,3],[7,0]]
  <strong>Output:</strong> [[1,null],null,[4,3],[7,0]]
  <strong>Explanation:</strong> The original binary tree is [1,null,4,7].
  The random pointer of node one is null, so it is represented as [1, null].
  The random pointer of node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the tree array.
  The random pointer of node 7 is node 1, so it is represented as [7, 0] where 0 is the index of node 1 in the tree array
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [[1,4],null,[1,0],null,[1,5],[1,5]]
  <strong>Output:</strong> [[1,4],null,[1,0],null,[1,5],[1,5]]
  <strong>Explanation:</strong> The random pointer of a node can be the node itself.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]
  <strong>Output:</strong> [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [[1,null],null,[2,null],null,[1,null]]
  <strong>Output:</strong> [[1,null],null,[2,null],null,[1,null]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [0, 1000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each node's value is between [1, 10^6].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
