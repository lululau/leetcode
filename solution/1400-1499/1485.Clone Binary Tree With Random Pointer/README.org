* [[https://leetcode-cn.com/problems/clone-binary-tree-with-random-pointer][1485.
克隆含随机指针的二叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 克隆含随机指针的二叉树
  :END:
[[./solution/1400-1499/1485.Clone Binary Tree With Random Pointer/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个二叉树，树中每个节点都含有一个附加的随机指针，该指针可以指向树中的任何节点或者指向空（null）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请返回该树的 深拷贝 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

该树的输入/输出形式与普通二叉树相同，每个节点都用 [val, random_index]
表示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

val：表示 Node.val 的整数

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

random_index：随机指针指向的节点（在输入的树数组中）的下标；如果未指向任何节点，则为
null 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

该树以 Node 类的形式给出，而你需要以 NodeCopy
类的形式返回克隆得到的树。NodeCopy 类和Node 类定义一致。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [[1,null],null,[4,3],[7,0]]
  <strong>输出：</strong>[[1,null],null,[4,3],[7,0]]
  <strong>解释：</strong>初始二叉树为 [1,null,4,7] 。
  节点 1 的随机指针指向 null，所以表示为 [1, null] 。
  节点 4 的随机指针指向 7，所以表示为 [4, 3] 其中 3 是树数组中节点 7 对应的下标。
  节点 7 的随机指针指向 1，所以表示为 [7, 0] 其中 0 是树数组中节点 1 对应的下标。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [[1,4],null,[1,0],null,[1,5],[1,5]]
  <strong>输出：</strong>[[1,4],null,[1,0],null,[1,5],[1,5]]
  <strong>解释：</strong>节点的随机指针可以指向它自身。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]
  <strong>输出：</strong>[[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = []
  <strong>输出：</strong>[]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>root = [[1,null],null,[2,null],null,[1,null]]
  <strong>输出：</strong>[[1,null],null,[2,null],null,[1,null]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

tree 中节点数目范围是 [0, 1000]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的值的范围是 [1, 10^6]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
