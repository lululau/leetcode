* [[https://leetcode.com/problems/first-unique-number][1429. First
Unique Number]]
  :PROPERTIES:
  :CUSTOM_ID: first-unique-number
  :END:
[[./solution/1400-1499/1429.First Unique Number/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You have a queue of integers, you need to retrieve the first unique
integer in the queue.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the FirstUnique class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

FirstUnique(int[] nums) Initializes the object with the numbers in the
queue.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int showFirstUnique() returns the value of the first unique integer of
the queue, and returns -1 if there is no such integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void add(int value) insert value to the queue.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>Input: </b>
  [&quot;FirstUnique&quot;,&quot;showFirstUnique&quot;,&quot;add&quot;,&quot;showFirstUnique&quot;,&quot;add&quot;,&quot;showFirstUnique&quot;,&quot;add&quot;,&quot;showFirstUnique&quot;]
  [[[2,3,5]],[],[5],[],[2],[],[3],[]]
  <b>Output: </b>
  [null,2,null,2,null,3,null,-1]
  <b>Explanation: </b>
  FirstUnique firstUnique = new FirstUnique([2,3,5]);
  firstUnique.showFirstUnique(); // return 2
  firstUnique.add(5);            // the queue is now [2,3,5,5]
  firstUnique.showFirstUnique(); // return 2
  firstUnique.add(2);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [2,3,5,5,2]
  firstUnique.showFirstUnique(); // return 3
  firstUnique.add(3);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [2,3,5,5,2,3]
  firstUnique.showFirstUnique(); // return -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>Input: </b>
  [&quot;FirstUnique&quot;,&quot;showFirstUnique&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;showFirstUnique&quot;]
  [[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]
  <b>Output: </b>
  [null,-1,null,null,null,null,null,17]
  <b>Explanation: </b>
  FirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);
  firstUnique.showFirstUnique(); // return -1
  firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]
  firstUnique.add(3);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [7,7,7,7,7,7,7,3]
  firstUnique.add(3);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [7,7,7,7,7,7,7,3,3]
  firstUnique.add(7);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [7,7,7,7,7,7,7,3,3,7]
  firstUnique.add(17);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// the queue is now [7,7,7,7,7,7,7,3,3,7,17]
  firstUnique.showFirstUnique(); // return 17
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>Input: </b>
  [&quot;FirstUnique&quot;,&quot;showFirstUnique&quot;,&quot;add&quot;,&quot;showFirstUnique&quot;]
  [[[809]],[],[809],[]]
  <b>Output: </b>
  [null,809,null,-1]
  <b>Explanation: </b>
  FirstUnique firstUnique = new FirstUnique([809]);
  firstUnique.showFirstUnique(); // return 809
  firstUnique.add(809);          // the queue is now [809,809]
  firstUnique.showFirstUnique(); // return -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 10^8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= value <= 10^8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 50000 calls will be made to showFirstUnique and add.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class FirstUnique:

      def __init__(self, nums: List[int]):
          self.counter = collections.OrderedDict()
          self.unique_nums = collections.OrderedDict()
          for num in nums:
              self.counter[num] = self.counter.get(num, 0) + 1
          for k, v in self.counter.items():
              if v == 1:
                  self.unique_nums[k] = 1

      def showFirstUnique(self) -> int:
          if len(self.unique_nums) == 0:
              return -1
          for k in self.unique_nums.keys():
              return k

      def add(self, value: int) -> None:
          if value not in self.counter:
              self.counter[value] = 1
              self.unique_nums[value] = 1
          else:
              self.counter[value] += 1
              if value in self.unique_nums:
                  self.unique_nums.pop(value)

  # Your FirstUnique object will be instantiated and called as such:
  # obj = FirstUnique(nums)
  # param_1 = obj.showFirstUnique()
  # obj.add(value)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class FirstUnique {
      private Map<Integer, Integer> counter;
      private Set<Integer> uniqueNums;

      public FirstUnique(int[] nums) {
          counter = new LinkedHashMap<>();
          uniqueNums = new LinkedHashSet<>();
          for (int num : nums) {
              counter.put(num, counter.getOrDefault(num, 0) + 1);
          }
          for (Map.Entry<Integer, Integer> entry : counter.entrySet()) {
              if (entry.getValue() == 1) {
                  uniqueNums.add(entry.getKey());
              }
          }
      }

      public int showFirstUnique() {
          return uniqueNums.isEmpty() ? -1 : uniqueNums.iterator().next();
      }

      public void add(int value) {
          if (!counter.containsKey(value)) {
              counter.put(value, 1);
              uniqueNums.add(value);
          } else {
              counter.put(value, counter.get(value) + 1);
              uniqueNums.remove(value);
          }
      }
  }

  /**
   * Your FirstUnique object will be instantiated and called as such:
   * FirstUnique obj = new FirstUnique(nums);
   * int param_1 = obj.showFirstUnique();
   * obj.add(value);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
