* [[https://leetcode-cn.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k][1461.
检查一个字符串是否包含所有长度为 K 的二进制子串]]
  :PROPERTIES:
  :CUSTOM_ID: 检查一个字符串是否包含所有长度为-k-的二进制子串
  :END:
[[./solution/1400-1499/1461.Check If a String Contains All Binary Codes of Size K/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个二进制字符串 s 和一个整数 k 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果所有长度为 k 的二进制字符串都是 s 的子串，请返回 True ，否则请返回
False 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;00110110&quot;, k = 2
  <strong>输出：</strong>true
  <strong>解释：</strong>长度为 2 的二进制串包括 &quot;00&quot;，&quot;01&quot;，&quot;10&quot; 和 &quot;11&quot;。它们分别是 s 中下标为 0，1，3，2 开始的长度为 2 的子串。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;00110&quot;, k = 2
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;0110&quot;, k = 1
  <strong>输出：</strong>true
  <strong>解释：</strong>长度为 1 的二进制串包括 &quot;0&quot; 和 &quot;1&quot;，显然它们都是 s 的子串。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;0110&quot;, k = 2
  <strong>输出：</strong>false
  <strong>解释：</strong>长度为 2 的二进制串 &quot;00&quot; 没有出现在 s 中。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;0000000001011100&quot;, k = 4
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 5 * 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中只含 0 和 1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

遍历字符串 s，用一个 set 存储所有长度为 k
的不同子串。只需要判断子串数能否达到 2k 即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def hasAllCodes(self, s: str, k: int) -> bool:
          counter = 1 << k
          exists = set()
          for i in range(k, len(s) + 1):
              if s[i - k: i] not in exists:
                  exists.add(s[i - k: i])
                  counter -= 1
              if counter == 0:
                  return True
          return False
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean hasAllCodes(String s, int k) {
          int counter = 1 << k;
          Set<String> exists = new HashSet<>();
          for (int i = k; i <= s.length(); ++i) {
              String t = s.substring(i - k, i);
              if (!exists.contains(t)) {
                  exists.add(t);
                  --counter;
              }
              if (counter == 0) {
                  return true;
              }
          }
          return false;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
