* [[https://leetcode-cn.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts][1465.
切割后面积最大的蛋糕]]
  :PROPERTIES:
  :CUSTOM_ID: 切割后面积最大的蛋糕
  :END:
[[./solution/1400-1499/1465.Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

矩形蛋糕的高度为 h 且宽度为 w，给你两个整数数组 horizontalCuts 和
verticalCuts，其中 horizontalCuts[i] 是从矩形蛋糕顶部到第  i
个水平切口的距离，类似地， verticalCuts[j] 是从矩形蛋糕的左侧到第 j
个竖直切口的距离。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你按数组 horizontalCuts 和 verticalCuts
中提供的水平和竖直位置切割后，请你找出 面积最大 的那份蛋糕，并返回其
面积 。由于答案可能是一个很大的数字，因此需要将结果对 10^9 + 7
取余后返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
  <strong>输出：</strong>4 
  <strong>解释：</strong>上图所示的矩阵蛋糕中，红色线表示水平和竖直方向上的切口。切割蛋糕后，绿色的那份蛋糕面积最大。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
  <strong>输出：</strong>6
  <strong>解释：</strong>上图所示的矩阵蛋糕中，红色线表示水平和竖直方向上的切口。切割蛋糕后，绿色和黄色的两份蛋糕面积最大。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
  <strong>输出：</strong>9
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= h, w <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= horizontalCuts.length < min(h, 10^5)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= verticalCuts.length < min(w, 10^5)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= horizontalCuts[i] < h

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= verticalCuts[i] < w

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目数据保证 horizontalCuts 中的所有元素各不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目数据保证 verticalCuts 中的所有元素各不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
