* [[https://leetcode-cn.com/problems/course-schedule-iv][1462. 课程表
IV]]
  :PROPERTIES:
  :CUSTOM_ID: 课程表-iv
  :END:
[[./solution/1400-1499/1462.Course Schedule IV/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你总共需要上 n 门课，课程编号依次为 0 到 n-1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

有的课会有直接的先修课程，比如如果想上课程 0 ，你必须先上课程 1
，那么会以 [1,0] 数对的形式给出先修课程数对。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你课程总数 n 和一个直接先修课程数对列表 prerequisite
和一个查询对列表 queries 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对于每个查询对
queries[i] ，请判断 queries[i][0] 是否是 queries[i][1] 的先修课程。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请返回一个布尔值列表，列表中每个元素依次分别对应
queries 每个查询对的判断结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：如果课程 a 是课程 b 的先修课程且课程 b 是课程 c 的先修课程，那么课程 a 也是课程 c 的先修课程。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]
  <strong>输出：</strong>[false,true]
  <strong>解释：</strong>课程 0 不是课程 1 的先修课程，但课程 1 是课程 0 的先修课程。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 2, prerequisites = [], queries = [[1,0],[0,1]]
  <strong>输出：</strong>[false,false]
  <strong>解释：</strong>没有先修课程对，所以每门课程之间是独立的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]
  <strong>输出：</strong>[true,true]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[2,0]]
  <strong>输出：</strong>[false,true]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,0]]
  <strong>输出：</strong>[true,false,true,false]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= prerequisite.length <= (n * (n - 1) / 2)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= prerequisite[i][0], prerequisite[i][1] < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

prerequisite[i][0] != prerequisite[i][1]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

先修课程图中没有环。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

先修课程图中没有重复的边。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries.length <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[i][0] != queries[i][1]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
