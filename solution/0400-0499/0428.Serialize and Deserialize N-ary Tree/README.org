* [[https://leetcode-cn.com/problems/serialize-and-deserialize-n-ary-tree][428.
序列化和反序列化 N 叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 序列化和反序列化-n-叉树
  :END:
[[./solution/0400-0499/0428.Serialize and Deserialize N-ary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

序列化是指将一个数据结构转化为位序列的过程，因此可以将其存储在文件中或内存缓冲区中，以便稍后在相同或不同的计算机环境中恢复结构。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

设计一个序列化和反序列化 N 叉树的算法。一个 N 叉树是指每个节点都有不超过
N 个孩子节点的有根树。序列化 /
反序列化算法的算法实现没有限制。你只需要保证 N
叉树可以被序列化为一个字符串并且该字符串可以被反序列化成原树结构即可。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，你需要序列化下面的 3-叉 树。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

为 [1 [3[5 6] 2
4]]。你不需要以这种形式完成，你可以自己创造和实现不同的方法。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

或者，您可以遵循 LeetCode
的层序遍历序列化格式，其中每组孩子节点由空值分隔。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，上面的树可以序列化为
[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你不一定要遵循以上建议的格式，有很多不同的格式，所以请发挥创造力，想出不同的方法来完成本题。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点数目的范围是 [0, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

N 叉树的高度小于等于 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

不要使用类成员 / 全局变量 /
静态变量来存储状态。你的序列化和反序列化算法应是无状态的。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
