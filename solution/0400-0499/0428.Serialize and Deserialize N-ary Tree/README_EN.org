* [[https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree][428.
Serialize and Deserialize N-ary Tree]]
  :PROPERTIES:
  :CUSTOM_ID: serialize-and-deserialize-n-ary-tree
  :END:
[[./solution/0400-0499/0428.Serialize and Deserialize N-ary Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Serialization is the process of converting a data structure or object
into a sequence of bits so that it can be stored in a file or memory
buffer, or transmitted across a network connection link to be
reconstructed later in the same or another computer environment.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Design an algorithm to serialize and deserialize an N-ary tree. An N-ary
tree is a rooted tree in which each node has no more than N children.
There is no restriction on how your serialization/deserialization
algorithm should work. You just need to ensure that an N-ary tree can be
serialized to a string and this string can be deserialized to the
original tree structure.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, you may serialize the following 3-ary tree

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

as [1 [3[5 6] 2 4]]. Note that this is just an example, you do not
necessarily need to follow this format.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Or you can follow LeetCode's level order traversal serialization format,
where each group of children is separated by the null value.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, the above tree may be serialized as
[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You do not necessarily need to follow the above suggested formats, there
are many more different formats that work so please be creative and come
up with different approaches yourself.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [0, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The height of the n-ary tree is less than or equal to 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Do not use class member/global/static variables to store states. Your
encode and decode algorithms should be stateless.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
