* [[https://leetcode-cn.com/problems/arranging-coins][441. 排列硬币]]
  :PROPERTIES:
  :CUSTOM_ID: 排列硬币
  :END:
[[./solution/0400-0499/0441.Arranging Coins/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定一个数字 n，找出可形成完整阶梯行的总行数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

n 是一个非负整数，并且在32位有符号整型的范围内。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  n = 5

  硬币可排列成以下几行:
  &curren;
  &curren; &curren;
  &curren; &curren;

  因为第三行不完整，所以返回2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  n = 8

  硬币可排列成以下几行:
  &curren;
  &curren; &curren;
  &curren; &curren; &curren;
  &curren; &curren;

  因为第四行不完整，所以返回3.
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

=(1 + x) * x / 2 <= n=，求解 x。

=(x + 1/2)² <= 2n + 1/4=，即 =x <= sqrt(2n + 1/4) - 1/2=。

由于 2n 可能溢出，故转换为 =x <= sqrt(2) * sqrt(n + 1/8) - 1/2=。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def arrangeCoins(self, n: int) -> int:
          return int(math.sqrt(2) * math.sqrt(n + 0.125) - 0.5)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int arrangeCoins(int n) {
          return (int) (Math.sqrt(2) * Math.sqrt(n + 0.125) - 0.5);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
