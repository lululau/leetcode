* [[https://leetcode.com/problems/serialize-and-deserialize-bst][449.
Serialize and Deserialize BST]]
  :PROPERTIES:
  :CUSTOM_ID: serialize-and-deserialize-bst
  :END:
[[./solution/0400-0499/0449.Serialize and Deserialize BST/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Serialization is converting a data structure or object into a sequence
of bits so that it can be stored in a file or memory buffer, or
transmitted across a network connection link to be reconstructed later
in the same or another computer environment.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Design an algorithm to serialize and deserialize a binary search tree.
There is no restriction on how your serialization/deserialization
algorithm should work. You need to ensure that a binary search tree can
be serialized to a string, and this string can be deserialized to the
original tree structure.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The encoded string should be as compact as possible.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> root = [2,1,3]
  <strong>Output:</strong> [2,1,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> root = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [0, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The input tree is guaranteed to be a binary search tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
