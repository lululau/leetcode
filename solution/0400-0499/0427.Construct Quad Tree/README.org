* [[https://leetcode-cn.com/problems/construct-quad-tree][427.
建立四叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 建立四叉树
  :END:
[[./solution/0400-0499/0427.Construct Quad Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 n * n 矩阵 grid ，矩阵由若干 0 和 1
组成。请你用四叉树表示该矩阵 grid 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你需要返回能表示矩阵的 四叉树 的根结点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意，当 isLeaf 为 False 时，你可以把 True 或者 False
赋值给节点，两种值都会被判题机制 接受 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

val：储存叶子结点所代表的区域的值。1 对应 True，0 对应 False；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isLeaf: 当这个节点是一个叶子结点时为 True，如果它有 4 个子节点则为 False
。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <pre>class Node {
      public boolean val;
  &nbsp; &nbsp; public boolean isLeaf;
  &nbsp; &nbsp; public Node topLeft;
  &nbsp; &nbsp; public Node topRight;
  &nbsp; &nbsp; public Node bottomLeft;
  &nbsp; &nbsp; public Node bottomRight;
  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

我们可以按以下步骤为二维区域构建四叉树：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

如果当前网格的值相同（即，全为 0 或者全为 1），将 isLeaf 设为 True ，将
val 设为网格相应的值，并将四个子节点都设为 Null 然后停止。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果当前网格的值不同，将 isLeaf 设为 False， 将 val
设为任意值，然后如下图所示，将当前网格划分为四个子网格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

使用适当的子网格递归每个子节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果你想了解更多关于四叉树的内容，可以参考 wiki 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

四叉树格式：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输出为使用层序遍历后四叉树的序列化形式，其中 null
表示路径终止符，其下面不存在节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

它与二叉树的序列化非常相似。唯一的区别是节点以列表形式表示 [isLeaf, val]
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果 isLeaf 或者 val 的值为 True ，则表示它在列表 [isLeaf, val] 中的值为
1 ；如果 isLeaf 或者 val 的值为 False ，则表示值为 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[0,1],[1,0]]
  <strong>输出：</strong>[[0,1],[1,0],[1,1],[1,1],[1,0]]
  <strong>解释：</strong>此示例的解释如下：
  请注意，在下面四叉树的图示中，0 表示 false，1 表示 True 。
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0427.Construct Quad Tree/images/e1tree.png" style="height: 186px; width: 777px;">
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]
  <strong>输出：</strong>[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
  <strong>解释：</strong>网格中的所有值都不相同。我们将网格划分为四个子网格。
  topLeft，bottomLeft 和 bottomRight 均具有相同的值。
  topRight 具有不同的值，因此我们将其再分为 4 个子网格，这样每个子网格都具有相同的值。
  解释如下图所示：
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0427.Construct Quad Tree/images/e2tree.png" style="height: 328px; width: 777px;">
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,1],[1,1]]
  <strong>输出：</strong>[[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[0]]
  <strong>输出：</strong>[[1,0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]
  <strong>输出：</strong>[[0,1],[1,1],[1,0],[1,0],[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid.length == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == 2^x 其中 0 <= x <= 6

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
