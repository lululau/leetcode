* [[https://leetcode.com/problems/construct-quad-tree][427. Construct
Quad Tree]]
  :PROPERTIES:
  :CUSTOM_ID: construct-quad-tree
  :END:
[[./solution/0400-0499/0427.Construct Quad Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a n * n matrix grid of 0's and 1's only. We want to represent the
grid with a Quad-Tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the root of the Quad-Tree representing the grid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that you can assign the value of a node to True or False when
isLeaf is False, and both are accepted in the answer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A Quad-Tree is a tree data structure in which each internal node has
exactly four children. Besides, each node has two attributes:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

val: True if the node represents a grid of 1's or False if the node
represents a grid of 0's. 

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isLeaf: True if the node is leaf node on the tree or False if the node
has the four children.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <pre>

  class Node {

      public boolean val;

  &nbsp; &nbsp; public boolean isLeaf;

  &nbsp; &nbsp; public Node topLeft;

  &nbsp; &nbsp; public Node topRight;

  &nbsp; &nbsp; public Node bottomLeft;

  &nbsp; &nbsp; public Node bottomRight;

  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

We can construct a Quad-Tree from a two-dimensional area using the
following steps:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

If the current grid has the same value (i.e all 1's or all 0's) set
isLeaf True and set val to the value of the grid and set the four
children to Null and stop.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If the current grid has different values, set isLeaf to False and set
val to any value and divide the current grid into four sub-grids as
shown in the photo.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Recurse for each of the children with the proper sub-grid.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

If you want to know more about the Quad-Tree, you can refer to the wiki.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Quad-Tree format:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The output represents the serialized format of a Quad-Tree using level
order traversal, where null signifies a path terminator where no node
exists below.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is very similar to the serialization of the binary tree. The only
difference is that the node is represented as a list [isLeaf, val].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If the value of isLeaf or val is True we represent it as 1 in the
list [isLeaf, val] and if the value of isLeaf or val is False we
represent it as 0.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[0,1],[1,0]]
  <strong>Output:</strong> [[0,1],[1,0],[1,1],[1,1],[1,0]]
  <strong>Explanation:</strong> The explanation of this example is shown below:
  Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0427.Construct Quad Tree/images/e1tree.png" style="width: 777px; height: 186px;" />
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]
  <strong>Output:</strong> [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
  <strong>Explanation:</strong> All values in the grid are not the same. We divide the grid into four sub-grids.
  The topLeft, bottomLeft and bottomRight each has the same value.
  The topRight have different values so we divide it into 4 sub-grids where each has the same value.
  Explanation is shown in the photo below:
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0427.Construct Quad Tree/images/e2tree.png" style="width: 777px; height: 328px;" />
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,1],[1,1]]
  <strong>Output:</strong> [[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[0]]
  <strong>Output:</strong> [[1,0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]
  <strong>Output:</strong> [[0,1],[1,1],[1,0],[1,0],[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid.length == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == 2^x where 0 <= x <= 6

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
