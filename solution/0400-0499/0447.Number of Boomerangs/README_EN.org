* [[https://leetcode.com/problems/number-of-boomerangs][447. Number of
Boomerangs]]
  :PROPERTIES:
  :CUSTOM_ID: number-of-boomerangs
  :END:
[[./solution/0400-0499/0447.Number of Boomerangs/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given n points in the plane that are all distinct, where
points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such
that the distance between i and j equals the distance between i and k
(the order of the tuple matters).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the number of boomerangs.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> points = [[0,0],[1,0],[2,0]]
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> points = [[1,1],[2,2],[3,3]]
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> points = [[1,1]]
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == points.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

points[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= xi, yi <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the points are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def numberOfBoomerangs(self, points: List[List[int]]) -> int:
          n = len(points)
          if n < 3:
              return 0
          number = 0
          for i in range(n):
              distance_counter = collections.Counter()
              for j in range(n):
                  if i == j:
                      continue
                  x1, y1 = points[i][0], points[i][1]
                  x2, y2 = points[j][0], points[j][1]
                  distance = (x1 - x2) ** 2 + (y1 - y2) ** 2
                  distance_counter[distance] += 1
              number += sum([val * (val - 1) for val in distance_counter.values()])
          return number
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int numberOfBoomerangs(int[][] points) {
          int n = points.length;
          if (n < 3) {
              return 0;
          }
          int number = 0;
          for (int i = 0; i < n; ++i) {
              Map<Integer, Integer> distanceCounter = new HashMap<>();
              for (int j = 0; j < n; ++j) {
                  if (i == j) {
                      continue;
                  }
                  int x1 = points[i][0], y1 = points[i][1];
                  int x2 = points[j][0], y2 = points[j][1];
                  int distance = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
                  distanceCounter.put(distance, distanceCounter.getOrDefault(distance, 0) + 1);
              }
              for (int val : distanceCounter.values()) {
                  number += val * (val - 1);
              }
          }
          return number;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
