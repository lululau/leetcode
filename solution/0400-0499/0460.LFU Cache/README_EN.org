* [[https://leetcode.com/problems/lfu-cache][460. LFU Cache]]
  :PROPERTIES:
  :CUSTOM_ID: lfu-cache
  :END:
[[./solution/0400-0499/0460.LFU Cache/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design and implement a data structure for a Least Frequently Used (LFU)
cache.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the LFUCache class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

LFUCache(int capacity) Initializes the object with the capacity of the
data structure.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int get(int key) Gets the value of the key if the key exists in the
cache. Otherwise, returns -1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void put(int key, int value) Update the value of the key if present, or
inserts the key if not already present. When the cache reaches its
capacity, it should invalidate and remove the least frequently used key
before inserting a new item. For this problem, when there is a tie
(i.e., two or more keys with the same frequency), the least recently
used key would be invalidated.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

To determine the least frequently used key, a use counter is maintained
for each key in the cache. The key with the smallest use counter is the
least frequently used key.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

When a key is first inserted into the cache, its use counter is set to 1
(due to the put operation). The use counter for a key in the cache is
incremented either a get or put operation is called on it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;LFUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]
  [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]
  <strong>Output</strong>
  [null, null, null, 1, null, -1, 3, null, -1, 3, 4]

  <strong>Explanation</strong>
  // cnt(x) = the use counter for key x
  // cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)
  LFUCache lfu = new LFUCache(2);
  lfu.put(1, 1);   // cache=[1,_], cnt(1)=1
  lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1
  lfu.get(1);      // return 1
                   // cache=[1,2], cnt(2)=1, cnt(1)=2
  lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.
  &nbsp;                // cache=[3,1], cnt(3)=1, cnt(1)=2
  lfu.get(2);      // return -1 (not found)
  lfu.get(3);      // return 3
                   // cache=[3,1], cnt(3)=2, cnt(1)=2
  lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.
                   // cache=[4,3], cnt(4)=1, cnt(3)=2
  lfu.get(1);      // return -1 (not found)
  lfu.get(3);      // return 3
                   // cache=[3,4], cnt(4)=1, cnt(3)=3
  lfu.get(4);      // return 4
                   // cache=[3,4], cnt(4)=2, cnt(3)=3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= capacity, key, value <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 105 calls will be made to get and put.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you do both operations in O(1) time complexity? 

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
