* [[https://leetcode.com/problems/n-ary-tree-level-order-traversal][429.
N-ary Tree Level Order Traversal]]
  :PROPERTIES:
  :CUSTOM_ID: n-ary-tree-level-order-traversal
  :END:
[[./solution/0400-0499/0429.N-ary Tree Level Order Traversal/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an n-ary tree, return the level order traversal of its nodes'
values.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Nary-Tree input serialization is represented in their level order
traversal, each group of children is separated by the null value (See
examples).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,null,3,2,4,null,5,6]
  <strong>Output:</strong> [[1],[3,2,4],[5,6]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
  <strong>Output:</strong> [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The height of the n-ary tree is less than or equal to 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The total number of nodes is between [0, 104]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  """
  # Definition for a Node.
  class Node:
      def __init__(self, val=None, children=None):
          self.val = val
          self.children = children
  """

  class Solution:
      def levelOrder(self, root: 'Node') -> List[List[int]]:
          if root is None:
              return []
          q = collections.deque([root])
          res = []
          while q:
              n = len(q)
              t = []
              for _ in range(n):
                  node = q.popleft()
                  t.append(node.val)
                  if node.children:
                      q.extend(node.children)
              res.append(t)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /*
  // Definition for a Node.
  class Node {
      public int val;
      public List<Node> children;

      public Node() {}

      public Node(int _val) {
          val = _val;
      }

      public Node(int _val, List<Node> _children) {
          val = _val;
          children = _children;
      }
  };
  */

  class Solution {
      public List<List<Integer>> levelOrder(Node root) {
          if (root == null) {
              return Collections.emptyList();
          }
          Deque<Node> q = new ArrayDeque<>();
          List<List<Integer>> res = new ArrayList<>();
          q.offer(root);
          while (!q.isEmpty()) {
              List<Integer> t = new ArrayList<>();
              for (int i = 0, n = q.size(); i < n; ++i) {
                  Node node = q.poll();
                  t.add(node.val);
                  if (node.children != null) {
                      q.addAll(node.children);
                  }
              }
              res.add(t);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
