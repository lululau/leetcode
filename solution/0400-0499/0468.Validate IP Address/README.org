* [[https://leetcode-cn.com/problems/validate-ip-address][468.
验证IP地址]]
  :PROPERTIES:
  :CUSTOM_ID: 验证ip地址
  :END:
[[./solution/0400-0499/0468.Validate IP Address/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

编写一个函数来验证输入的字符串是否是有效的 IPv4 或 IPv6 地址。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果是有效的 IPv4 地址，返回 "IPv4" ；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果是有效的 IPv6 地址，返回 "IPv6" ；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果不是上述类型的 IP 地址，返回 "Neither" 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

IPv4 地址由十进制数和点来表示，每个地址包含 4 个十进制数，其范围为 0
- 255， 用(".")分割。比如，172.16.254.1；

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

同时，IPv4 地址内的数不会以 0 开头。比如，地址 172.16.254.01
是不合法的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

IPv6 地址由 8 组 16 进制的数字来表示，每组表示 16 比特。这些组数字通过
(":")分割。比如,  2001:0db8:85a3:0000:0000:8a2e:0370:7334
是一个有效的地址。而且，我们可以加入一些以 0
开头的数字，字母可以使用大写，也可以是小写。所以， 2001:db8:85a3:0:0:8A2E:0370:7334
也是一个有效的 IPv6 address地址 (即，忽略 0 开头，忽略大小写)。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

然而，我们不能因为某个组的值为 0，而使用一个空的组，以至于出现 (::)
的情况。 比如， 2001:0db8:85a3::8A2E:0370:7334 是无效的 IPv6 地址。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

同时，在 IPv6 地址中，多余的 0
也是不被允许的。比如， 02001:0db8:85a3:0000:0000:8a2e:0370:7334
是无效的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>IP = &quot;172.16.254.1&quot;
  <strong>输出：</strong>&quot;IPv4&quot;
  <strong>解释：</strong>有效的 IPv4 地址，返回 &quot;IPv4&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>IP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;
  <strong>输出：</strong>&quot;IPv6&quot;
  <strong>解释：</strong>有效的 IPv6 地址，返回 &quot;IPv6&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>IP = &quot;256.256.256.256&quot;
  <strong>输出：</strong>&quot;Neither&quot;
  <strong>解释：</strong>既不是 IPv4 地址，又不是 IPv6 地址
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>IP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334:&quot;
  <strong>输出：</strong>&quot;Neither&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>IP = &quot;1e1.4.5.6&quot;
  <strong>输出：</strong>&quot;Neither&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

IP 仅由英文字母，数字，字符 '.' 和 ':' 组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
