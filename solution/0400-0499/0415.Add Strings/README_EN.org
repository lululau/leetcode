* [[https://leetcode.com/problems/add-strings][415. Add Strings]]
  :PROPERTIES:
  :CUSTOM_ID: add-strings
  :END:
[[./solution/0400-0499/0415.Add Strings/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two non-negative integers, num1 and num2 represented as string,
return the sum of num1 and num2 as a string.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num1 = &quot;11&quot;, num2 = &quot;123&quot;
  <strong>Output:</strong> &quot;134&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num1 = &quot;456&quot;, num2 = &quot;77&quot;
  <strong>Output:</strong> &quot;533&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num1 = &quot;0&quot;, num2 = &quot;0&quot;
  <strong>Output:</strong> &quot;0&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= num1.length, num2.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

num1 and num2 consist of only digits.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

num1 and num2 don't have any leading zeros except for the zero itself.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you solve it without using any built-in BigInteger
library or converting the inputs to integer directly?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def addStrings(self, num1: str, num2: str) -> str:
          n1, n2 = len(num1) - 1, len(num2) - 1
          carry = 0
          res = []
          while n1 >= 0 or n2 >= 0 or carry > 0:
              carry += (0 if n1 < 0 else int(num1[n1])) + (0 if n2 < 0 else int(num2[n2]))
              res.append(str(carry % 10))
              carry //= 10
              n1, n2 = n1 - 1, n2 - 1
          return ''.join(res[::-1])
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public String addStrings(String num1, String num2) {
          int n1 = num1.length() - 1, n2 = num2.length() - 1;
          int carry = 0;
          StringBuilder sb = new StringBuilder();
          while (n1 >= 0 || n2 >= 0 || carry > 0) {
              carry += (n1 < 0 ? 0 : num1.charAt(n1--) - '0') + (n2 < 0 ? 0 : num2.charAt(n2--) - '0');
              sb.append(carry % 10);
              carry /= 10;
          }
          return sb.reverse().toString();
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
