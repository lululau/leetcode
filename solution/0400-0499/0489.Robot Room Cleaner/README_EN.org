* [[https://leetcode.com/problems/robot-room-cleaner][489. Robot Room
Cleaner]]
  :PROPERTIES:
  :CUSTOM_ID: robot-room-cleaner
  :END:
[[./solution/0400-0499/0489.Robot Room Cleaner/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a robot cleaner in a room modeled as a grid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each cell in the grid can be empty or blocked.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The robot cleaner with 4 given APIs can move forward, turn left or turn
right. Each turn it made is 90 degrees.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

When it tries to move into a blocked cell, its bumper sensor detects the
obstacle and it stays on the current cell.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Design an algorithm to clean the entire room using only the 4 given APIs
shown below.

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  interface Robot {

  &nbsp; // returns true if next cell is open and robot moves into the cell.

  &nbsp; // returns false if next cell is obstacle and robot stays on the current cell.

  &nbsp; boolean move();



    // Robot will stay on the same cell after calling turnLeft/turnRight.

  &nbsp; // Each turn will be 90 degrees.

  &nbsp; void turnLeft();

  &nbsp; void turnRight();



    // Clean the current cell.

    void clean();

  }

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong>

  room = [

    [1,1,1,1,1,0,1,1],

    [1,1,1,1,1,0,1,1],

    [1,0,1,1,1,1,1,1],

    [0,0,0,1,0,0,0,0],

    [1,1,1,1,1,1,1,1]

  ],

  row = 1,

  col = 3



  <strong>Explanation:</strong>

  All grids in the room are marked by either 0 or 1.

  0 means the cell is blocked, while 1 means the cell is accessible.

  The robot initially starts at the position of row=1, col=3.

  From the top left corner, its position is one row below and three columns right.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Notes:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The input is only given to initialize the room and the robot's position
internally. You must solve this problem "blindfolded". In other words,
you must control the robot using only the mentioned 4 APIs, without
knowing the room layout and the initial robot's position.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The robot's initial position will always be in an accessible cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The initial direction of the robot will be facing up.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All accessible cells are connected, which means the all cells marked as
1 will be accessible by the robot.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Assume all four edges of the grid are all surrounded by wall.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
