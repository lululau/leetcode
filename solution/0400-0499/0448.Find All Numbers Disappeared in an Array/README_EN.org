* [[https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array][448.
Find All Numbers Disappeared in an Array]]
  :PROPERTIES:
  :CUSTOM_ID: find-all-numbers-disappeared-in-an-array
  :END:
[[./solution/0400-0499/0448.Find All Numbers Disappeared in an Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array nums of n integers where nums[i] is in the range [1, n],
return an array of all the integers in the range [1, n] that do not
appear in nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [4,3,2,7,8,2,3,1]
  <strong>Output:</strong> [5,6]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,1]
  <strong>Output:</strong> [2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you do it without extra space and in O(n) runtime? You
may assume the returned list does not count as extra space.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
          for num in nums:
              index = abs(num) - 1
              if nums[index] > 0:
                  nums[index] *= -1
          res = []
          for i, v in enumerate(nums):
              if v > 0:
                  res.append(i + 1)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<Integer> findDisappearedNumbers(int[] nums) {
          int n = nums.length;
          for (int i = 0; i < n; ++i) {
              int index = Math.abs(nums[i]) - 1;
              if (nums[index] > 0) {
                  nums[index] *= -1;
              }
          }
          List<Integer> res = new ArrayList<>();
          for (int i = 0; i < n; ++i) {
              if (nums[i] > 0) {
                  res.add(i + 1);
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
