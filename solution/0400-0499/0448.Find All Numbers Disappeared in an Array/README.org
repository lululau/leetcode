* [[https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array][448.
找到所有数组中消失的数字]]
  :PROPERTIES:
  :CUSTOM_ID: 找到所有数组中消失的数字
  :END:
[[./solution/0400-0499/0448.Find All Numbers Disappeared in an Array/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的
整型数组，数组中的元素一些出现了两次，另一些只出现一次。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

找到所有在 [1, n] 范围之间没有出现在数组中的数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗?
你可以假定返回的数组不算在额外空间内。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong>
  [4,3,2,7,8,2,3,1]

  <strong>输出:</strong>
  [5,6]
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

- 遍历输入数组的每个元素一次。
- 把 =|nums[i]|-1= 索引位置的元素标记为负数。即 =nums[|nums[i]|-1]= *
  -1。
- 然后遍历数组，若当前数组元素 =nums[i]=
  为负数，说明我们在数组中存在数字 =i+1=。否则，说明数组不存在数字
  =i+1=，添加到结果列表中。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
          for num in nums:
              index = abs(num) - 1
              if nums[index] > 0:
                  nums[index] *= -1
          res = []
          for i, v in enumerate(nums):
              if v > 0:
                  res.append(i + 1)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public List<Integer> findDisappearedNumbers(int[] nums) {
          int n = nums.length;
          for (int i = 0; i < n; ++i) {
              int index = Math.abs(nums[i]) - 1;
              if (nums[index] > 0) {
                  nums[index] *= -1;
              }
          }
          List<Integer> res = new ArrayList<>();
          for (int i = 0; i < n; ++i) {
              if (nums[i] > 0) {
                  res.add(i + 1);
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
