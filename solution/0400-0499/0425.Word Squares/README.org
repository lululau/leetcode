* [[https://leetcode-cn.com/problems/word-squares][425. 单词方块]]
  :PROPERTIES:
  :CUSTOM_ID: 单词方块
  :END:
[[./solution/0400-0499/0425.Word Squares/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个单词集合 （没有重复），找出其中所有的 单词方块 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个单词序列形成了一个有效的单词方块的意思是指从第 k 行和第 k 列 (0 ≤ k
< max(行数, 列数)) 来看都是相同的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，单词序列 ["ball","area","lead","lady"] 形成了一个单词方块，因为每个单词从水平方向看和从竖直方向看都是相同的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>b a l l
  a r e a
  l e a d
  l a d y
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

单词个数大于等于 1 且不超过 500。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有的单词长度都相同。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

单词长度大于等于 1 且不超过 5。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个单词只包含小写英文字母 a-z。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  [&quot;area&quot;,&quot;lead&quot;,&quot;wall&quot;,&quot;lady&quot;,&quot;ball&quot;]

  <strong>输出：</strong>
  [
    [ &quot;wall&quot;,
      &quot;area&quot;,
      &quot;lead&quot;,
      &quot;lady&quot;
    ],
    [ &quot;ball&quot;,
      &quot;area&quot;,
      &quot;lead&quot;,
      &quot;lady&quot;
    ]
  ]

  <strong>解释：</strong>
  输出包含两个单词方块，输出的顺序不重要，只需要保证每个单词方块内的单词顺序正确即可。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
  [&quot;abat&quot;,&quot;baba&quot;,&quot;atan&quot;,&quot;atal&quot;]

  <strong>输出：</strong>
  [
    [ &quot;baba&quot;,
      &quot;abat&quot;,
      &quot;baba&quot;,
      &quot;atan&quot;
    ],
    [ &quot;baba&quot;,
      &quot;abat&quot;,
      &quot;baba&quot;,
      &quot;atal&quot;
    ]
  ]

  <strong>解释：</strong>
  输出包含两个单词方块，输出的顺序不重要，只需要保证每个单词方块内的单词顺序正确即可。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
