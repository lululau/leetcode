* [[https://leetcode-cn.com/problems/island-perimeter][463. 岛屿的周长]]
  :PROPERTIES:
  :CUSTOM_ID: 岛屿的周长
  :END:
[[./solution/0400-0499/0463.Island Perimeter/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个 row x col 的二维网格地图 grid ，其中：grid[i][j] = 1 表示陆地，
grid[i][j] = 0 表示水域。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

网格中的格子 水平和垂直
方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

岛屿中没有“湖”（"湖"
指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1
的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
  <strong>输出：</strong>16
  <strong>解释：</strong>它的周长是上面图片中的 16 个黄色的边</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[1]]
  <strong>输出：</strong>4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[1,0]]
  <strong>输出：</strong>4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

row == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

col == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= row, col <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] 为 0 或 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
