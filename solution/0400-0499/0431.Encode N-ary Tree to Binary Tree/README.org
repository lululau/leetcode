* [[https://leetcode-cn.com/problems/encode-n-ary-tree-to-binary-tree][431.
将 N 叉树编码为二叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 将-n-叉树编码为二叉树
  :END:
[[./solution/0400-0499/0431.Encode N-ary Tree to Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

设计一个算法，可以将 N 叉树编码为二叉树，并能将该二叉树解码为原 N
叉树。一个 N 叉树是指每个节点都有不超过 N
个孩子节点的有根树。类似地，一个二叉树是指每个节点都有不超过 2
个孩子节点的有根树。你的编码 /
解码的算法的实现没有限制，你只需要保证一个 N
叉树可以编码为二叉树且该二叉树可以解码回原始 N 叉树即可。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，你可以将下面的 3-叉 树以该种方式编码：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意，上面的方法仅仅是一个例子，可能可行也可能不可行。你没有必要遵循这种形式转化，你可以自己创造和实现不同的方法。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

N 的范围在 [1, 1000]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

不要使用类成员 / 全局变量 /
静态变量来存储状态。你的编码和解码算法应是无状态的。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
