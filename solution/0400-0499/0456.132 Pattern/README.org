* [[https://leetcode-cn.com/problems/132-pattern][456. 132 模式]]
  :PROPERTIES:
  :CUSTOM_ID: 模式
  :END:
[[./solution/0400-0499/0456.132 Pattern/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums ，数组中共有 n 个整数。132 模式的子序列 由三个整数
nums[i]、nums[j] 和 nums[k] 组成，并同时满足：i < j < k 和 nums[i] <
nums[k] < nums[j] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果 nums 中存在 132 模式的子序列 ，返回 true ；否则，返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：很容易想到时间复杂度为 O(n^2)
的解决方案，你可以设计一个时间复杂度为 O(n logn) 或 O(n) 的解决方案吗？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,2,3,4]
  <strong>输出：</strong>false
  <strong>解释：</strong>序列中不存在 132 模式的子序列。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [3,1,4,2]
  <strong>输出：</strong>true
  <strong>解释：</strong>序列中有 1 个 132 模式的子序列： [1, 4, 2] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [-1,3,2,0]
  <strong>输出：</strong>true
  <strong>解释：</strong>序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= nums[i] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

单调栈实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def find132pattern(self, nums: List[int]) -> bool:
          ak = float('-inf')
          stack = []
          for num in nums[::-1]:
              if num < ak:
                  return True
              while stack and num > stack[-1]:
                  ak = stack.pop()
              stack.append(num)
          return False
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean find132pattern(int[] nums) {
          int ak = Integer.MIN_VALUE;
          Deque<Integer> stack = new ArrayDeque<>();
          for (int i = nums.length - 1; i >= 0; --i) {
              if (nums[i] < ak) {
                  return true;
              }
              while (!stack.isEmpty() && nums[i] > stack.peek()) {
                  ak = stack.pop();
              }
              stack.push(nums[i]);
          }
          return false;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
