* [[https://leetcode.com/problems/hamming-distance][461. Hamming
Distance]]
  :PROPERTIES:
  :CUSTOM_ID: hamming-distance
  :END:
[[./solution/0400-0499/0461.Hamming Distance/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

The Hamming distance between two integers is the number of positions at
which the corresponding bits are different.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given two integers x and y, return the Hamming distance between them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> x = 1, y = 4
  <strong>Output:</strong> 2
  <strong>Explanation:</strong>
  1   (0 0 0 1)
  4   (0 1 0 0)
         &uarr;   &uarr;
  The above arrows point to positions where the corresponding bits are different.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> x = 3, y = 1
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= x, y <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:
Use xor operation to find different bits.

- 0 ^ 0 = 0
- 1 ^ 1 = 0
- 0 ^ 1 = 1
- 1 ^ 0 = 1

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def hammingDistance(self, x: int, y: int) -> int:
          num, count = x ^ y, 0
          while num != 0:
              num &= num - 1
              count += 1
          return count
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int hammingDistance(int x, int y) {
          int num = x ^ y;
          int count = 0;
          while (num != 0) {
              num &= num - 1;
              count++;
          }
          return count;
      }
  }
#+end_src

Or use the library function =Integer.bitCount()=

#+begin_src java
  class Solution {
      public int hammingDistance(int x, int y) {
          return Integer.bitCount(x ^ y);
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number} x
   * @param {number} y
   * @return {number}
   */
  var hammingDistance = function(x, y) {
      let distance = x ^ y;
      let count = 0;
      while (distance != 0) {
          count++;
          distance &= (distance - 1);
      }
      return count;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
