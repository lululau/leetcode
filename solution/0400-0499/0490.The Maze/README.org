* [[https://leetcode-cn.com/problems/the-maze][490. 迷宫]]
  :PROPERTIES:
  :CUSTOM_ID: 迷宫
  :END:
[[./solution/0400-0499/0490.The Maze/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

由空地（用 0 表示）和墙（用 1 表示）组成的迷宫 maze
中有一个球。球可以途经空地向 上、下、左、右
四个方向滚动，且在遇到墙壁前不会停止滚动。当球停下时，可以选择向下一个方向滚动。

#+begin_html
  <p>
#+end_html

给你一个大小为 m x n 的迷宫 maze ，以及球的初始位置 start 和目的地
destination ，其中 start = [startrow, startcol] 且 destination =
[destinationrow, destinationcol]
。请你判断球能否在目的地停下：如果可以，返回 true ；否则，返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以 假定迷宫的边缘都是墙壁（参考示例）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
  <strong>输出：</strong>true
  <strong>解释：</strong>一种可能的路径是 : 左 -> 下 -> 左 -> 下 -> 右 -> 下 -> 右。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
  <strong>输出：</strong>false
  <strong>解释：</strong>不存在能够使球停在目的地的路径。注意，球可以经过目的地，但无法在那里停驻。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == maze.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == maze[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

maze[i][j] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

start.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

destination.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= startrow, destinationrow <= m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= startcol, destinationcol <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

球和目的地都在空地上，且初始时它们不在同一位置

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

迷宫 至少包括 2 块空地

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

深度优先搜索或广度优先搜索实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

深度优先搜索。

#+begin_src python
  class Solution:
      def hasPath(self, maze: List[List[int]], start: List[int], destination: List[int]) -> bool:
          def dfs(maze, start, destination):
              if visited[start[0]][start[1]]:
                  return False
              if start[0] == destination[0] and start[1] == destination[1]:
                  return True
              visited[start[0]][start[1]] = True
              l, r, u, d = start[1] - 1, start[1] + 1, start[0] - 1, start[0] + 1
              while l >= 0 and maze[start[0]][l] == 0:
                  l -= 1
              if dfs(maze, [start[0], l + 1], destination):
                  return True
              while r < len(maze[0]) and maze[start[0]][r] == 0:
                  r += 1
              if dfs(maze, [start[0], r - 1], destination):
                  return True
              while u >= 0 and maze[u][start[1]] == 0:
                  u -= 1
              if dfs(maze, [u + 1, start[1]], destination):
                  return True
              while d < len(maze) and maze[d][start[1]] == 0:
                  d += 1
              if dfs(maze, [d - 1, start[1]], destination):
                  return True
              return False

          visited = [[False for _ in maze[0]] for _ in maze]
          return dfs(maze, start, destination)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      private boolean[][] visited;

      public boolean hasPath(int[][] maze, int[] start, int[] destination) {
          int m = maze.length, n = maze[0].length;
          visited = new boolean[m][n];
          return dfs(maze, start, destination);
      }

      private boolean dfs(int[][] maze, int[] start, int[] destination) {
          if (visited[start[0]][start[1]]) return false;
          if (start[0] == destination[0] && start[1] == destination[1]) return true;
          visited[start[0]][start[1]] = true;

          int l = start[1] - 1, r = start[1] + 1, u = start[0] - 1, d = start[0] + 1;

          while (l >= 0 && maze[start[0]][l] == 0) --l;
          if (dfs(maze, new int[]{start[0], l + 1}, destination)) return true;

          while (r < maze[0].length && maze[start[0]][r] == 0) ++r;
          if (dfs(maze, new int[]{start[0], r - 1}, destination)) return true;

          while (u >= 0 && maze[u][start[1]] == 0) --u;
          if (dfs(maze, new int[]{u + 1, start[1]}, destination)) return true;

          while (d < maze.length && maze[d][start[1]] == 0) ++d;
          if (dfs(maze, new int[]{d - 1, start[1]}, destination)) return true;

          return false;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
