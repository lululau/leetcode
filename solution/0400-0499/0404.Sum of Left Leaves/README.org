* [[https://leetcode-cn.com/problems/sum-of-left-leaves][404.
左叶子之和]]
  :PROPERTIES:
  :CUSTOM_ID: 左叶子之和
  :END:
[[./solution/0400-0499/0404.Sum of Left Leaves/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

计算给定二叉树的所有左叶子之和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
      3
     / \
    9  20
      /  \
     15   7

  在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def sumOfLeftLeaves(self, root: TreeNode) -> int:
          if root is None:
              return 0
          res = 0
          if root.left and root.left.left is None and root.left.right is None:
              res += root.left.val
          res += self.sumOfLeftLeaves(root.left)
          res += self.sumOfLeftLeaves(root.right)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public int sumOfLeftLeaves(TreeNode root) {
          if (root == null) {
              return 0;
          }
          int res = 0;
          if (root.left != null && root.left.left == null && root.left.right == null) {
              res += root.left.val;
          }
          res += sumOfLeftLeaves(root.left);
          res += sumOfLeftLeaves(root.right);
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
