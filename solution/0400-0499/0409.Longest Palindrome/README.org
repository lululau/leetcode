* [[https://leetcode-cn.com/problems/longest-palindrome][409.
最长回文串]]
  :PROPERTIES:
  :CUSTOM_ID: 最长回文串
  :END:
[[./solution/0400-0499/0409.Longest Palindrome/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在构造过程中，请注意区分大小写。比如 "Aa" 不能当做一个回文字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意: 假设字符串的长度不会超过 1010。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  输入:
  &quot;abccccdd&quot;

  输出:
  7

  解释:
  我们可以构造的最长的回文串是&quot;dccaccd&quot;, 它的长度是 7。
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def longestPalindrome(self, s: str) -> int:
          res = [0] * 128
          for ch in s:
              res[ord(ch)] += 1
          odd_cnt, n = 0, len(s)
          for e in res:
              odd_cnt += (e % 2)
          return n if odd_cnt == 0 else n - odd_cnt + 1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int longestPalindrome(String s) {
          int[] res = new int[128];
          int n = s.length();
          for (int i = 0; i < n; ++i) {
              res[s.charAt(i)]++;
          }
          int oddCnt = 0;
          for (int e : res) {
              oddCnt += (e % 2);
          }
          return oddCnt == 0 ? n : n - oddCnt + 1;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
