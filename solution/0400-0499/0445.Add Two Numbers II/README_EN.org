* [[https://leetcode.com/problems/add-two-numbers-ii][445. Add Two
Numbers II]]
  :PROPERTIES:
  :CUSTOM_ID: add-two-numbers-ii
  :END:
[[./solution/0400-0499/0445.Add Two Numbers II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two non-empty linked lists representing two non-negative
integers. The most significant digit comes first and each of their nodes
contains a single digit. Add the two numbers and return the sum as a
linked list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You may assume the two numbers do not contain any leading zero, except
the number 0 itself.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> l1 = [7,2,4,3], l2 = [5,6,4]
  <strong>Output:</strong> [7,8,0,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]
  <strong>Output:</strong> [8,0,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> l1 = [0], l2 = [0]
  <strong>Output:</strong> [0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in each linked list is in the range [1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that the list represents a number that does not have
leading zeros.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you solve it without reversing the input lists?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
          s1, s2 = [], []
          while l1:
              s1.append(l1.val)
              l1 = l1.next
          while l2:
              s2.append(l2.val)
              l2 = l2.next
          carry, dummy = 0, ListNode(-1)
          while s1 or s2 or carry:
              carry += (0 if not s1 else s1.pop()) + (0 if not s2 else s2.pop())
              node = ListNode(carry % 10)
              node.next = dummy.next
              dummy.next = node
              carry //= 10
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  class Solution {
      public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
          Deque<Integer> s1 = new ArrayDeque<>();
          Deque<Integer> s2 = new ArrayDeque<>();
          for (; l1 != null; l1 = l1.next) {
              s1.push(l1.val);
          }
          for (; l2 != null; l2 = l2.next) {
              s2.push(l2.val);
          }
          int carry = 0;
          ListNode dummy = new ListNode(-1);
          while (!s1.isEmpty() || !s2.isEmpty() || carry != 0) {
              carry += (s1.isEmpty() ? 0 : s1.pop()) + (s2.isEmpty() ? 0 : s2.pop());
              ListNode node = new ListNode(carry % 10);
              node.next = dummy.next;
              dummy.next = node;
              carry /= 10;
          }
          return dummy.next;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
