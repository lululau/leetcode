* [[https://leetcode.com/problems/queue-reconstruction-by-height][406.
Queue Reconstruction by Height]]
  :PROPERTIES:
  :CUSTOM_ID: queue-reconstruction-by-height
  :END:
[[./solution/0400-0499/0406.Queue Reconstruction by Height/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an array of people, people, which are the attributes of
some people in a queue (not necessarily in order). Each people[i] = [hi,
ki] represents the ith person of height hi with exactly ki other people
in front who have a height greater than or equal to hi.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Reconstruct and return the queue that is represented by the input array
people. The returned queue should be formatted as an array queue, where
queue[j] = [hj, kj] is the attributes of the jth person in the queue
(queue[0] is the person at the front of the queue).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
  <strong>Output:</strong> [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
  <strong>Explanation:</strong>
  Person 0 has height 5 with no other people taller or the same height in front.
  Person 1 has height 7 with no other people taller or the same height in front.
  Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.
  Person 3 has height 6 with one person taller or the same height in front, which is person 1.
  Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.
  Person 5 has height 7 with one person taller or the same height in front, which is person 1.
  Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
  <strong>Output:</strong> [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= people.length <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= hi <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ki < people.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that the queue can be reconstructed.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
