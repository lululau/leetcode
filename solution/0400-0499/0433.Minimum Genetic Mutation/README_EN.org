* [[https://leetcode.com/problems/minimum-genetic-mutation][433. Minimum
Genetic Mutation]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-genetic-mutation
  :END:
[[./solution/0400-0499/0433.Minimum Genetic Mutation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A gene string can be represented by an 8-character long string, with
choices from 'A', 'C', 'G', and 'T'.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Suppose we need to investigate a mutation from a gene string start to a
gene string end where one mutation is defined as one single character
changed in the gene string.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, "AACCGGTT" --> "AACCGGTA" is one mutation.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

There is also a gene bank bank that records all the valid gene
mutations. A gene must be in bank to make it a valid gene string.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given the two gene strings start and end and the gene bank bank, return
the minimum number of mutations needed to mutate from start to end. If
there is no such a mutation, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that the starting point is assumed to be valid, so it might not be
included in the bank.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> start = &quot;AACCGGTT&quot;, end = &quot;AACCGGTA&quot;, bank = [&quot;AACCGGTA&quot;]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> start = &quot;AACCGGTT&quot;, end = &quot;AAACGGTA&quot;, bank = [&quot;AACCGGTA&quot;,&quot;AACCGCTA&quot;,&quot;AAACGGTA&quot;]
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> start = &quot;AAAAACCC&quot;, end = &quot;AACCCCCC&quot;, bank = [&quot;AAAACCCC&quot;,&quot;AAACCCCC&quot;,&quot;AACCCCCC&quot;]
  <strong>Output:</strong> 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

start.length == 8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

end.length == 8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= bank.length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bank[i].length == 8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

start, end, and bank[i] consist of only the characters ['A', 'C', 'G',
'T'].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
