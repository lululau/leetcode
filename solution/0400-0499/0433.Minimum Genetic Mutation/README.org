* [[https://leetcode-cn.com/problems/minimum-genetic-mutation][433.
最小基因变化]]
  :PROPERTIES:
  :CUSTOM_ID: 最小基因变化
  :END:
[[./solution/0400-0499/0433.Minimum Genetic Mutation/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

一条基因序列由一个带有8个字符的字符串表示，其中每个字符都属于 "A", "C",
"G", "T"中的任意一个。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设我们要调查一个基因序列的变化。一次基因变化意味着这个基因序列中的一个字符发生了变化。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，基因序列由"AACCGGTT" 变化至 "AACCGGTA" 即发生了一次基因变化。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

与此同时，每一次基因变化的结果，都需要是一个合法的基因串，即该结果属于一个基因库。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

现在给定3个参数 --- start, end,
bank，分别代表起始基因序列，目标基因序列及基因库，请找出能够使起始基因序列变化为目标基因序列所需的最少变化次数。如果无法实现目标变化，请返回
-1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

起始基因序列默认是合法的，但是它并不一定会出现在基因库中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果一个起始基因序列需要多次变化，那么它每一次变化之后的基因序列都必须是合法的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

假定起始基因序列与目标基因序列是不一样的。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  start: "AACCGGTT"
  end:   "AACCGGTA"
  bank: ["AACCGGTA"]

  返回值: 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  start: "AACCGGTT"
  end:   "AAACGGTA"
  bank: ["AACCGGTA", "AACCGCTA", "AAACGGTA"]

  返回值: 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  start: "AAAAACCC"
  end:   "AACCCCCC"
  bank: ["AAAACCCC", "AAACCCCC", "AACCCCCC"]

  返回值: 3
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
