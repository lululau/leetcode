* [[https://leetcode.com/problems/delete-node-in-a-bst][450. Delete Node
in a BST]]
  :PROPERTIES:
  :CUSTOM_ID: delete-node-in-a-bst
  :END:
[[./solution/0400-0499/0450.Delete Node in a BST/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a root node reference of a BST and a key, delete the node with the
given key in the BST. Return the root node reference (possibly updated)
of the BST.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Basically, the deletion can be divided into two stages:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Search for a node to remove.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If the node is found, delete the node.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Can you solve it with time complexity O(height of tree)?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 3
  <strong>Output:</strong> [5,4,6,2,null,null,7]
  <strong>Explanation:</strong> Given key to delete is 3. So we find the node with value 3 and delete it.
  One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
  Please notice that another valid answer is [5,2,6,null,4,null,7] and it&#39;s also accepted.
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0450.Delete Node in a BST/images/del_node_supp.jpg" style="width: 350px; height: 255px;" />
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 0
  <strong>Output:</strong> [5,3,6,2,4,null,7]
  <strong>Explanation:</strong> The tree does not contain a node with value = 0.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [], key = 0
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [0, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each node has a unique value.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

root is a valid binary search tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= key <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
