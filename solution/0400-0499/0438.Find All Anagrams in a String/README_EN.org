* [[https://leetcode.com/problems/find-all-anagrams-in-a-string][438.
Find All Anagrams in a String]]
  :PROPERTIES:
  :CUSTOM_ID: find-all-anagrams-in-a-string
  :END:
[[./solution/0400-0499/0438.Find All Anagrams in a String/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two strings s and p, return an array of all the start indices of
p's anagrams in s. You may return the answer in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;
  <strong>Output:</strong> [0,6]
  <strong>Explanation:</strong>
  The substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.
  The substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;abab&quot;, p = &quot;ab&quot;
  <strong>Output:</strong> [0,1,2]
  <strong>Explanation:</strong>
  The substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.
  The substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.
  The substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length, p.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s and p consist of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def findAnagrams(self, s: str, p: str) -> List[int]:
          counter = collections.Counter(p)
          res = []
          left = right = 0
          t = collections.Counter()
          while right < len(s):
              t[s[right]] += 1
              while t[s[right]] > counter[s[right]]:
                  t[s[left]] -= 1
                  left += 1
              if right - left == len(p) - 1:
                  res.append(left)
              right += 1
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<Integer> findAnagrams(String s, String p) {
          int[] counter = new int[26];
          for (int i = 0; i < p.length(); ++i) {
              ++counter[p.charAt(i) - 'a'];
          }
          List<Integer> res = new ArrayList<>();
          int left = 0, right = 0;
          int[] t = new int[26];
          while (right < s.length()) {
              int i = s.charAt(right) - 'a';
              ++t[i];
              while (t[i] > counter[i]) {
                  --t[s.charAt(left) - 'a'];
                  ++left;
              }
              if (right - left == p.length() - 1) {
                  res.add(left);
              }
              ++right;
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
