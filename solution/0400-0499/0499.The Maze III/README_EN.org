* [[https://leetcode.com/problems/the-maze-iii][499. The Maze III]]
  :PROPERTIES:
  :CUSTOM_ID: the-maze-iii
  :END:
[[./solution/0400-0499/0499.The Maze III/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is a ball in a maze with empty spaces (represented as 0) and walls
(represented as 1). The ball can go through the empty spaces by rolling
up, down, left or right, but it won't stop rolling until hitting a wall.
When the ball stops, it could choose the next direction. There is also a
hole in this maze. The ball will drop into the hole if it rolls onto the
hole.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given the m x n maze, the ball's position ball and the hole's position
hole, where ball = [ballrow, ballcol] and hole = [holerow, holecol],
return a string instructions of all the instructions that the ball
should follow to drop in the hole with the shortest distance possible.
If there are multiple valid instructions, return the lexicographically
minimum one. If the ball can't drop in the hole, return "impossible".

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If there is a way for the ball to drop in the hole, the answer
instructions should contain the characters 'u' (i.e., up), 'd' (i.e.,
down), 'l' (i.e., left), and 'r' (i.e., right).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The distance is the number of empty spaces traveled by the ball from the
start position (excluded) to the destination (included).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You may assume that the borders of the maze are all walls (see
examples).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [0,1]
  <strong>Output:</strong> &quot;lul&quot;
  <strong>Explanation:</strong> There are two shortest ways for the ball to drop into the hole.
  The first way is left -&gt; up -&gt; left, represented by &quot;lul&quot;.
  The second way is up -&gt; left, represented by &#39;ul&#39;.
  Both ways have shortest distance 6, but the first way is lexicographically smaller because &#39;l&#39; &lt; &#39;u&#39;. So the output is &quot;lul&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [3,0]
  <strong>Output:</strong> &quot;impossible&quot;
  <strong>Explanation:</strong> The ball cannot reach the hole.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> maze = [[0,0,0,0,0,0,0],[0,0,1,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,1]], ball = [0,4], hole = [3,5]
  <strong>Output:</strong> &quot;dldr&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == maze.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == maze[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

maze[i][j] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ball.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

hole.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ballrow, holerow <= m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ballcol, holecol <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Both the ball and the hole exist in an empty space, and they will not be
in the same position initially.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The maze contains at least 2 empty spaces.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
