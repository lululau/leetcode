* [[https://leetcode.com/problems/random-point-in-non-overlapping-rectangles][497.
Random Point in Non-overlapping Rectangles]]
  :PROPERTIES:
  :CUSTOM_ID: random-point-in-non-overlapping-rectangles
  :END:
[[./solution/0400-0499/0497.Random Point in Non-overlapping Rectangles/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a list of non-overlapping axis-aligned rectangles rects, write a
function pick which randomly and uniformily picks an integer point in
the space covered by the rectangles.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

An integer point is a point that has integer coordinates. 

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A point on the perimeter of a rectangle is included in the space covered
by the rectangles. 

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ith rectangle = rects[i] = [x1,y1,x2,y2], where [x1, y1] are the integer
coordinates of the bottom-left corner, and [x2, y2] are the integer
coordinates of the top-right corner.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

length and width of each rectangle does not exceed 2000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rects.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pick return a point as an array of integer coordinates [p_x, p_y]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pick is called at most 10000 times.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: 

  </strong><span id="example-input-1-1">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]

  </span><span id="example-input-1-2">[[[[1,1,5,5]]],[],[],[]]</span>

  <strong>Output: 

  </strong><span id="example-output-1">[null,[4,1],[4,1],[3,3]]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: 

  </strong><span id="example-input-2-1">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]

  </span><span id="example-input-2-2">[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]</span>

  <strong>Output: 

  </strong><span id="example-output-2">[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</span></pre>
#+end_html

#+begin_html
  <p>
#+end_html

Explanation of Input Syntax:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The input is two lists: the subroutines called and
their arguments. Solution's constructor has one argument, the array of
rectangles rects. pick has no arguments. Arguments are always wrapped
with a list, even if there aren't any.

#+begin_html
  </p>
#+end_html

 

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
