* [[https://leetcode-cn.com/problems/random-point-in-non-overlapping-rectangles][497.
非重叠矩形中的随机点]]
  :PROPERTIES:
  :CUSTOM_ID: 非重叠矩形中的随机点
  :END:
[[./solution/0400-0499/0497.Random Point in Non-overlapping Rectangles/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个非重叠轴对齐矩形的列表 rects，写一个函数 pick
随机均匀地选取矩形覆盖的空间中的整数点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

整数点是具有整数坐标的点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

矩形周边上的点包含在矩形覆盖的空间中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第 i 个矩形 rects [i] = [x1，y1，x2，y2]，其中 [x1，y1]
是左下角的整数坐标，[x2，y2] 是右上角的整数坐标。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个矩形的长度和宽度不超过 2000。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rects.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pick 以整数坐标数组 [p_x, p_y] 的形式返回一个点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pick 最多被调用10000次。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入: 
  </strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]
  [[[[1,1,5,5]]],[],[],[]]
  <strong>输出: 
  </strong>[null,[4,1],[4,1],[3,3]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入: 
  </strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]
  [[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]
  <strong>输出: 
  </strong>[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输入语法的说明：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输入是两个列表：调用的子例程及其参数。Solution
的构造函数有一个参数，即矩形数组 rects。pick
没有参数。参数总是用列表包装的，即使没有也是如此。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
