* [[https://leetcode.com/problems/next-greater-element-i][496. Next
Greater Element I]]
  :PROPERTIES:
  :CUSTOM_ID: next-greater-element-i
  :END:
[[./solution/0400-0499/0496.Next Greater Element I/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two integer arrays nums1 and nums2 both of unique
elements, where nums1 is a subset of nums2.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Find all the next greater numbers for nums1's elements in the
corresponding places of nums2.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The Next Greater Number of a number x in nums1 is the first greater
number to its right in nums2. If it does not exist, return -1 for this
number.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [4,1,2], nums2 = [1,3,4,2]
  <strong>Output:</strong> [-1,3,-1]
  <strong>Explanation:
  </strong>For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
  For number 1 in the first array, the next greater number for it in the second array is 3.
  For number 2 in the first array, there is no next greater number for it in the second array, so output -1.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [2,4], nums2 = [1,2,3,4]
  <strong>Output:</strong> [3,-1]
  <strong>Explanation:</strong>
  For number 2 in the first array, the next greater number for it in the second array is 3.
  For number 4 in the first array, there is no next greater number for it in the second array, so output -1.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums1.length <= nums2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums1[i], nums2[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All integers in nums1 and nums2 are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the integers of nums1 also appear in nums2.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you find an O(nums1.length + nums2.length) solution?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
          stack = []
          mapper = {}
          for num in nums2:
              while stack and stack[-1] < num:
                  mapper[stack.pop()] = num
              stack.append(num)
          return [mapper.get(num, -1) for num in nums1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[] nextGreaterElement(int[] nums1, int[] nums2) {
          Deque<Integer> stack = new ArrayDeque<>();
          Map<Integer, Integer> map = new HashMap<>();
          for (int num : nums2) {
              while (!stack.isEmpty() && stack.peek() < num) {
                  map.put(stack.pop(), num);
              }
              stack.push(num);
          }
          int n = nums1.length;
          int[] res = new int[n];
          for (int i = 0; i < n; ++i) {
              res[i] = map.getOrDefault(nums1[i], -1);
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums1
   * @param {number[]} nums2
   * @return {number[]}
   */
  var nextGreaterElement = function(nums1, nums2) {
      let stack = [];
      let nextGreater = {};
      for (let num of nums2) {
          while (stack.length > 0 && stack[stack.length - 1] < num) {
              nextGreater[stack.pop()] = num;
          }
          stack.push(num);
      }
      let res = nums1.map(d => nextGreater[d] || -1);
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
