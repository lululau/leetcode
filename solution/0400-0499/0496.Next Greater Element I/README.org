* [[https://leetcode-cn.com/problems/next-greater-element-i][496.
下一个更大元素 I]]
  :PROPERTIES:
  :CUSTOM_ID: 下一个更大元素-i
  :END:
[[./solution/0400-0499/0496.Next Greater Element I/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个 没有重复元素 的数组 nums1
和 nums2 ，其中nums1 是 nums2 的子集。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你找出 nums1 中每个元素在 nums2 中的下一个比其大的值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出
-1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> nums1 = [4,1,2], nums2 = [1,3,4,2].
  <strong>输出:</strong> [-1,3,-1]
  <strong>解释:</strong>
      对于 num1 中的数字 4 ，你无法在第二个数组中找到下一个更大的数字，因此输出 -1 。
      对于 num1 中的数字 1 ，第二个数组中数字1右边的下一个较大数字是 3 。
      对于 num1 中的数字 2 ，第二个数组中没有下一个更大的数字，因此输出 -1 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> nums1 = [2,4], nums2 = [1,2,3,4].
  <strong>输出:</strong> [3,-1]
  <strong>解释:</strong>
      对于 num1 中的数字 2 ，第二个数组中的下一个较大数字是 3 。
      对于 num1 中的数字 4 ，第二个数组中没有下一个更大的数字，因此输出 -1 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums1.length <= nums2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums1[i], nums2[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums1和nums2中所有整数 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums1 中的所有整数同样出现在 nums2 中

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：你可以设计一个时间复杂度为 O(nums1.length + nums2.length)
的解决方案吗？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

先对将 nums2
中的每一个元素，求出其下一个更大的元素。随后对于将这些答案放入哈希映射（HashMap）中，再遍历数组
nums1，并直接找出答案。对于 nums2，可以使用单调栈来解决这个问题。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
          stack = []
          mapper = {}
          for num in nums2:
              while stack and stack[-1] < num:
                  mapper[stack.pop()] = num
              stack.append(num)
          return [mapper.get(num, -1) for num in nums1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[] nextGreaterElement(int[] nums1, int[] nums2) {
          Deque<Integer> stack = new ArrayDeque<>();
          Map<Integer, Integer> map = new HashMap<>();
          for (int num : nums2) {
              while (!stack.isEmpty() && stack.peek() < num) {
                  map.put(stack.pop(), num);
              }
              stack.push(num);
          }
          int n = nums1.length;
          int[] res = new int[n];
          for (int i = 0; i < n; ++i) {
              res[i] = map.getOrDefault(nums1[i], -1);
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums1
   * @param {number[]} nums2
   * @return {number[]}
   */
  var nextGreaterElement = function(nums1, nums2) {
      let stack = [];
      let nextGreater = {};
      for (let num of nums2) {
          while (stack.length > 0 && stack[stack.length - 1] < num) {
              nextGreater[stack.pop()] = num;
          }
          stack.push(num);
      }
      let res = nums1.map(d => nextGreater[d] || -1);
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
