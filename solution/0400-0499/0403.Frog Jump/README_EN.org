* [[https://leetcode.com/problems/frog-jump][403. Frog Jump]]
  :PROPERTIES:
  :CUSTOM_ID: frog-jump
  :END:
[[./solution/0400-0499/0403.Frog Jump/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A frog is crossing a river. The river is divided into some number of
units, and at each unit, there may or may not exist a stone. The frog
can jump on a stone, but it must not jump into the water.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a list of stones' positions (in units) in sorted ascending order,
determine if the frog can cross the river by landing on the last stone.
Initially, the frog is on the first stone and assumes the first jump
must be 1 unit.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If the frog's last jump was k units, its next jump must be either k - 1,
k, or k + 1 units. The frog can only jump in the forward direction.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> stones = [0,1,3,5,6,8,12,17]
  <strong>Output:</strong> true
  <strong>Explanation:</strong> The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> stones = [0,1,2,3,4,8,9,11]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= stones.length <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= stones[i] <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

stones[0] == 0

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:
DP, use =dp[i][k]= to indicate whether =i= can be reached when the last
jump was =k= units, and define the base case as =dp[0][0] = True=
(starting point is at index 0).

Because "the frog's last jump was =k= units, its next jump must be
either =k - 1=, =k=, or =k + 1= units", so if any of
=dp[j][k-1], dp[j][k], dp[j][k + 1]= is true, frog can jump from =j= to
=i=.

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def canCross(self, stones: List[int]) -> bool:
          n = len(stones)
          dp = [[False] * n for i in range(n)]
          dp[0][0] = True
          for i in range(1, n):
              for j in range(i):
                  k = stones[i] - stones[j];
                  if k > j + 1:
                      continue
                  dp[i][k] = dp[j][k - 1] or dp[j][k] or dp[j][k + 1]
                  if i == n - 1 and dp[i][k]:
                      return True
          return False
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean canCross(int[] stones) {
          int n = stones.length;
          boolean[][] dp = new boolean[n][n];
          dp[0][0] = true;
          for (int i = 1; i < n; i++) {
              for (int j = 0; j < i; j++) {
                  int k = stones[i] - stones[j];
                  if (k > j + 1) {
                      continue;
                  }
                  dp[i][k] = dp[j][k - 1] || dp[j][k] || dp[j][k + 1];
                  if (i == n - 1 && dp[i][k]) {
                      return true;
                  }
              }
          }
          return false;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
