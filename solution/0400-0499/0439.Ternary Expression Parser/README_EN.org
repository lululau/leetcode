* [[https://leetcode.com/problems/ternary-expression-parser][439.
Ternary Expression Parser]]
  :PROPERTIES:
  :CUSTOM_ID: ternary-expression-parser
  :END:
[[./solution/0400-0499/0439.Ternary Expression Parser/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string expression representing arbitrarily nested ternary
expressions, evaluate the expression, and return the result of it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You can always assume that the given expression is valid and only
contains digits, '?', ':', 'T', and 'F' where 'T' is true and 'F' is
false. All the numbers in the expression are one-digit numbers (i.e., in
the range [0, 9]).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The conditional expressions group right-to-left (as usual in most
languages), and the result of the expression will always evaluate to
either a digit, 'T' or 'F'.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> expression = &quot;T?2:3&quot;
  <strong>Output:</strong> &quot;2&quot;
  <strong>Explanation:</strong> If true, then result is 2; otherwise result is 3.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> expression = &quot;F?1:T?4:5&quot;
  <strong>Output:</strong> &quot;4&quot;
  <strong>Explanation:</strong> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:
  &quot;(F ? 1 : (T ? 4 : 5))&quot; --&gt; &quot;(F ? 1 : 4)&quot; --&gt; &quot;4&quot;
  or &quot;(F ? 1 : (T ? 4 : 5))&quot; --&gt; &quot;(T ? 4 : 5)&quot; --&gt; &quot;4&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> expression = &quot;T?T?F:5:3&quot;
  <strong>Output:</strong> &quot;F&quot;
  <strong>Explanation:</strong> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:
  &quot;(T ? (T ? F : 5) : 3)&quot; --&gt; &quot;(T ? F : 3)&quot; --&gt; &quot;F&quot;
  &quot;(T ? (T ? F : 5) : 3)&quot; --&gt; &quot;(T ? F : 5)&quot; --&gt; &quot;F&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

5 <= expression.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

expression consists of digits, 'T', 'F', '?', and ':'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that expression is a valid ternary expression and that
each number is a one-digit number.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
