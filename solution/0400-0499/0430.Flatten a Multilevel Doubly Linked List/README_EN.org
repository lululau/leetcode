* [[https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list][430.
Flatten a Multilevel Doubly Linked List]]
  :PROPERTIES:
  :CUSTOM_ID: flatten-a-multilevel-doubly-linked-list
  :END:
[[./solution/0400-0499/0430.Flatten a Multilevel Doubly Linked List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a doubly linked list which in addition to the next and
previous pointers, it could have a child pointer, which may or may not
point to a separate doubly linked list. These child lists may have one
or more children of their own, and so on, to produce a multilevel data
structure, as shown in the example below.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Flatten the list so that all the nodes appear in a single-level, doubly
linked list. You are given the head of the first level of the list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
  <strong>Output:</strong> [1,2,3,7,8,11,12,9,10,4,5,6]
  <strong>Explanation:
  </strong>
  The multilevel linked list in the input is as follows:

  <img src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0430.Flatten a Multilevel Doubly Linked List/images/multilevellinkedlist.png" style="width: 640px;" />

  After flattening the multilevel linked list it becomes:

  <img src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0430.Flatten a Multilevel Doubly Linked List/images/multilevellinkedlistflattened.png" style="width: 1100px;" />
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,null,3]
  <strong>Output:</strong> [1,3,2]
  <strong>Explanation:

  </strong>The input multilevel linked list is as follows:

    1---2---NULL
    |
    3---NULL
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

How multilevel linked list is represented in test case:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We use the multilevel linked list from Example 1 above:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
   1---2---3---4---5---6--NULL
           |
           7---8---9---10--NULL
               |
               11--12--NULL</pre>
#+end_html

#+begin_html
  <p>
#+end_html

The serialization of each level is as follows:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  [1,2,3,4,5,6,null]
  [7,8,9,10,null]
  [11,12,null]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

To serialize all levels together we will add nulls in each level to
signify no node connects to the upper node of the previous level. The
serialization becomes:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  [1,2,3,4,5,6,null]
  [null,null,7,8,9,10,null]
  [null,11,12,null]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Merging the serialization of each level and removing trailing nulls we
obtain:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of Nodes will not exceed 1000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
