* [[https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list][430.
扁平化多级双向链表]]
  :PROPERTIES:
  :CUSTOM_ID: 扁平化多级双向链表
  :END:
[[./solution/0400-0499/0430.Flatten a Multilevel Doubly Linked List/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你位于列表第一级的头节点，请你扁平化列表，使所有结点出现在单级双链表中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
  <strong>输出：</strong>[1,2,3,7,8,11,12,9,10,4,5,6]
  <strong>解释：
  </strong>
  输入的多级列表如下图所示：

  <img src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0430.Flatten a Multilevel Doubly Linked List/images/multilevellinkedlist.png" style="height: 363px; width: 640px;">

  扁平化后的链表如下图：

  <img src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0430.Flatten a Multilevel Doubly Linked List/images/multilevellinkedlistflattened.png" style="height: 80px; width: 1100px;">
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1,2,null,3]
  <strong>输出：</strong>[1,3,2]
  <strong>解释：

  </strong>输入的多级列表如下图所示：

    1---2---NULL
    |
    3---NULL
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = []
  <strong>输出：</strong>[]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如何表示测试用例中的多级链表？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

以 示例 1 为例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre> 1---2---3---4---5---6--NULL
           |
           7---8---9---10--NULL
               |
               11--12--NULL</pre>
#+end_html

#+begin_html
  <p>
#+end_html

序列化其中的每一级之后：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>[1,2,3,4,5,6,null]
  [7,8,9,10,null]
  [11,12,null]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

为了将每一级都序列化到一起，我们需要每一级中添加值为 null
的元素，以表示没有节点连接到上一级的上级节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>[1,2,3,4,5,6,null]
  [null,null,7,8,9,10,null]
  [null,11,12,null]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

合并所有序列化结果，并去除末尾的 null 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

节点数目不超过 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
