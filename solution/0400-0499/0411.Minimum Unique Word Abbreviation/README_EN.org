* [[https://leetcode.com/problems/minimum-unique-word-abbreviation][411.
Minimum Unique Word Abbreviation]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-unique-word-abbreviation
  :END:
[[./solution/0400-0499/0411.Minimum Unique Word Abbreviation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A string can be abbreviated by replacing any number of non-adjacent
substrings with their lengths. For example, a string such as
"substitution" could be abbreviated as (but not limited to):

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

"s10n" ("s ubstitutio n")

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"sub4u4" ("sub stit u tion")

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"12" ("substitution")

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"su3i1u2on" ("su bst i t u ti on")

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"substitution" (no substrings replaced)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Note that "s55n" ("s ubsti tutio n") is not a valid abbreviation of
"substitution" because the replaced substrings are adjacent.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The length of an abbreviation is the number of letters that were not
replaced plus the number of substrings that were replaced. For example,
the abbreviation "s10n" has a length of 3 (2 letters + 1 substring) and
"su3i1u2on" has a length of 9 (6 letters + 3 substrings).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a target string target and an array of strings dictionary, return
an abbreviation of target with the shortest possible length such that it
is not an abbreviation of any string in dictionary. If there are
multiple shortest abbreviations, return any of them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> target = &quot;apple&quot;, dictionary = [&quot;blade&quot;]
  <strong>Output:</strong> &quot;a4&quot;
  <strong>Explanation:</strong> The shortest abbreviation of &quot;apple&quot; is &quot;5&quot;, but this is also an abbreviation of &quot;blade&quot;.
  The next shortest abbreviations are &quot;a4&quot; and &quot;4e&quot;. &quot;4e&quot; is an abbreviation of blade while &quot;a4&quot; is not.
  Hence, return &quot;a4&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> target = &quot;apple&quot;, dictionary = [&quot;blade&quot;,&quot;plain&quot;,&quot;amber&quot;]
  <strong>Output:</strong> &quot;1p3&quot;
  <strong>Explanation:</strong> &quot;5&quot; is an abbreviation of both &quot;apple&quot; but also every word in the dictionary.
  &quot;a4&quot; is an abbreviation of &quot;apple&quot; but also &quot;amber&quot;.
  &quot;4e&quot; is an abbreviation of &quot;apple&quot; but also &quot;blade&quot;.
  &quot;1p3&quot;, &quot;2p2&quot;, and &quot;3l1&quot; are the next shortest abbreviations of &quot;apple&quot;.
  Since none of them are abbreviations of words in the dictionary, returning any of them is correct.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

target.length == m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

dictionary.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= 21

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= dictionary[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

log2(n) + m <= 21 if n > 0

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
