* [[https://leetcode-cn.com/problems/minimum-unique-word-abbreviation][411.
最短独占单词缩写]]
  :PROPERTIES:
  :CUSTOM_ID: 最短独占单词缩写
  :END:
[[./solution/0400-0499/0411.Minimum Unique Word Abbreviation/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

通过将任意数量的 不相邻 子字符串替换为它们的长度，可以完成对字符串的
缩写 。 例如，像 "substitution" 这样的字符串可以缩写为（但不限于）：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

"s10n" ("s ubstitutio n")

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"sub4u4" ("sub stit u tion")

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"12" ("substitution")

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"su3i1u2on" ("su bst i t u ti on")

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"substitution" (不替换子字符串)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

注意："s55n" ("s ubsti tutio n") 不是 "substitution"
的有效缩写形式，因为它试图替换两个相邻的子字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

缩写的 长度 是未被替换的字母数加上被替换的字符串数。例如，缩写 "s10n"
的长度为 3（2 个字母 + 1 个子字符串），而 "su3i1u2on" 的长度为 9（6
个字母 + 3 子字符串）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个目标字符串 target 和一个字符串数组 dictionary 作为字典，为
target 找出并返回一个 最短 长度的缩写字符串，同时这个缩写字符串 不是
字典 dictionary
中其他字符串的缩写形式。如果有多个有效答案，可以返回其中任意一个。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>target = "apple", dictionary = ["blade"]
  <strong>输出：</strong>"a4"
  <strong>解释：</strong>"apple" 的最短缩写形式为 "5" ，但这也是 "blade" 的缩写形式之一。
  下一组最短缩写是 "a4" 和 "4e" ，其中 "4e" 也是 "blade" 的缩写形式之一，而 "a4" 不是。
  因此，返回 "a4" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>target = "apple", dictionary = ["blade","plain","amber"]
  <strong>输出：</strong>"1p3"
  <strong>解释：</strong>"5" 同时是 "apple" 和字典中所有单词的缩写形式。
  "a4" 同时是 "apple" 和 "amber" 的缩写形式。
  "4e" 同时是 "apple" 和 "blade" 的缩写形式。
  "1p3"、"2p2" 和 "3l1" 是 "apple" 的下一组最短缩写形式。
  因为它们不是字典中其他单词的缩写形式，返回其中任意一个都是正确的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

target.length == m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

dictionary.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m <= 21

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= dictionary[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 n > 0 ，那么 log2(n) + m <= 21

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
