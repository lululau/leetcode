* [[https://leetcode.com/problems/random-flip-matrix][519. Random Flip
Matrix]]
  :PROPERTIES:
  :CUSTOM_ID: random-flip-matrix
  :END:
[[./solution/0500-0599/0519.Random Flip Matrix/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given the number of rows n_rows and number of columns n_cols of
a 2D binary matrix where all values are initially 0. Write a function
flip which chooses a 0 value uniformly at random, changes it to 1, and
then returns the position [row.id, col.id] of that value. Also, write a
function reset which sets all values back to 0. Try to minimize the
number of calls to system's Math.random() and optimize the time
and space complexity.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n_rows, n_cols <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= row.id < n_rows and 0 <= col.id < n_cols

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

flip will not be called when the matrix has no 0 values left.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

the total number of calls to flip and reset will not exceed 1000.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: 

  </strong><span id="example-input-1-1">[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;]

  </span><span id="example-input-1-2">[[2,3],[],[],[],[]]</span>

  <strong>Output: </strong><span id="example-output-1">[null,[0,1],[1,2],[1,0],[1,1]]</span>

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input: 

  </strong><span id="example-input-2-1">[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;reset&quot;,&quot;flip&quot;]

  </span><span id="example-input-2-2">[[1,2],[],[],[],[]]</span>

  <strong>Output: </strong><span id="example-output-2">[null,[0,0],[0,1],null,[0,0]]</span></pre>
#+end_html

#+begin_html
  <p>
#+end_html

Explanation of Input Syntax:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The input is two lists: the subroutines called and their arguments.
Solution's constructor has two arguments, n_rows and n_cols. flip and
reset have no arguments. Arguments are always wrapped with a list, even
if there aren't any.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
