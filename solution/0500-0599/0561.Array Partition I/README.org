* [[https://leetcode-cn.com/problems/array-partition-i][561. 数组拆分
I]]
  :PROPERTIES:
  :CUSTOM_ID: 数组拆分-i
  :END:
[[./solution/0500-0599/0561.Array Partition I/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定长度为 2n 的整数数组 nums ，你的任务是将这些数分成 n 对, 例如 (a1,
b1), (a2, b2), ..., (an, bn) ，使得从 1 到 n 的 min(ai, bi) 总和最大。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回该 最大总和 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,4,3,2]
  <strong>输出：</strong>4
  <strong>解释：</strong>所有可能的分法（忽略元素顺序）为：
  1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
  2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
  3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
  所以最大总和为 4</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [6,2,6,5,1,2]
  <strong>输出：</strong>9
  <strong>解释：</strong>最优的分法为 (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums.length == 2 * n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

先排序，然后求相邻的两个元素的最小值，得到的总和即为结果。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def arrayPairSum(self, nums: List[int]) -> int:
          return sum(sorted(nums)[::2])
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int arrayPairSum(int[] nums) {
          Arrays.sort(nums);
          int res = 0;
          for (int i = 0, n = nums.length; i < n; i += 2) {
              res += nums[i];
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var arrayPairSum = function (nums) {
    nums.sort((a, b) => a - b);
    let res = 0;
    for (let i = 0, n = nums.length; i < n; i += 2) {
      res += nums[i];
    }
    return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
