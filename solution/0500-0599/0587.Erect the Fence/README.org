* [[https://leetcode-cn.com/problems/erect-the-fence][587. 安装栅栏]]
  :PROPERTIES:
  :CUSTOM_ID: 安装栅栏
  :END:
[[./solution/0500-0599/0587.Erect the Fence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在一个二维的花园中，有一些用 (x, y)
坐标表示的树。由于安装费用十分昂贵，你的任务是先用最短的绳子围起所有的树。只有当所有的树都被绳子包围时，花园才能围好栅栏。你需要找到正好位于栅栏边界上的树的坐标。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]

  <strong>输出:</strong> [[1,1],[2,0],[4,2],[3,3],[2,4]]

  <strong>解释:</strong>

  <img src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0587.Erect the Fence/images/erect_the_fence_1.png" style="width: 100%; max-width: 320px">

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [[1,2],[2,2],[4,2]]

  <strong>输出:</strong> [[1,2],[2,2],[4,2]]

  <strong>解释:</strong>

  <img src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0587.Erect the Fence/images/erect_the_fence_2.png" style="width: 100%; max-width: 320px">

  即使树都在一条直线上，你也需要先用绳子包围它们。

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

所有的树应当被围在一起。你不能剪断绳子来包围树或者把树分成一组以上。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

输入的整数在 0 到 100 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

花园至少有一棵树。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有树的坐标都是不同的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

输入的点没有顺序。输出顺序也没有要求。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
