* [[https://leetcode.com/problems/find-mode-in-binary-search-tree][501.
Find Mode in Binary Search Tree]]
  :PROPERTIES:
  :CUSTOM_ID: find-mode-in-binary-search-tree
  :END:
[[./solution/0500-0599/0501.Find Mode in Binary Search Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary search tree (BST) with duplicates, return all
the mode(s) (i.e., the most frequently occurred element) in it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If the tree has more than one mode, return them in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Assume a BST is defined as follows:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The left subtree of a node contains only nodes with keys less than or
equal to the node's key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The right subtree of a node contains only nodes with keys greater than
or equal to the node's key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Both the left and right subtrees must also be binary search trees.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,null,2,2]
  <strong>Output:</strong> [2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [0]
  <strong>Output:</strong> [0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you do that without using any extra space? (Assume that
the implicit stack space incurred due to recursion does not count).

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
