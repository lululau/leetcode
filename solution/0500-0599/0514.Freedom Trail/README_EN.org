* [[https://leetcode.com/problems/freedom-trail][514. Freedom Trail]]
  :PROPERTIES:
  :CUSTOM_ID: freedom-trail
  :END:
[[./solution/0500-0599/0514.Freedom Trail/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In the video game Fallout 4, the quest "Road to Freedom" requires
players to reach a metal dial called the "Freedom Trail Ring" and use
the dial to spell a specific keyword to open the door.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a string ring that represents the code engraved on the outer ring
and another string key that represents the keyword that needs to be
spelled, return the minimum number of steps to spell all the characters
in the keyword.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Initially, the first character of the ring is aligned at the "12:00"
direction. You should spell all the characters in key one by one by
rotating ring clockwise or anticlockwise to make each character of the
string key aligned at the "12:00" direction and then by pressing the
center button.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

At the stage of rotating the ring to spell the key character key[i]:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

You can rotate the ring clockwise or anticlockwise by one place, which
counts as one step. The final purpose of the rotation is to align one of
ring's characters at the "12:00" direction, where this character must
equal key[i].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If the character key[i] has been aligned at the "12:00" direction, press
the center button to spell, which also counts as one step. After the
pressing, you could begin to spell the next character in the key (next
stage). Otherwise, you have finished all the spelling.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> ring = &quot;godding&quot;, key = &quot;gd&quot;
  <strong>Output:</strong> 4
  <strong>Explanation:</strong>
  For the first key character &#39;g&#39;, since it is already in place, we just need 1 step to spell this character. 
  For the second key character &#39;d&#39;, we need to rotate the ring &quot;godding&quot; anticlockwise by two steps to make it become &quot;ddinggo&quot;.
  Also, we need 1 more step for spelling.
  So the final output is 4.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> ring = &quot;godding&quot;, key = &quot;godding&quot;
  <strong>Output:</strong> 13
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ring.length, key.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ring and key consist of only lower case English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that key could always be spelled by rotating ring.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
