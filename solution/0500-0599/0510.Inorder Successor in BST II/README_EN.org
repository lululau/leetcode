* [[https://leetcode.com/problems/inorder-successor-in-bst-ii][510.
Inorder Successor in BST II]]
  :PROPERTIES:
  :CUSTOM_ID: inorder-successor-in-bst-ii
  :END:
[[./solution/0500-0599/0510.Inorder Successor in BST II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a node in a binary search tree, return the in-order successor of
that node in the BST. If that node has no in-order successor, return
null.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The successor of a node is the node with the smallest key greater than
node.val.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You will have direct access to the node but not to the root of the tree.
Each node will have a reference to its parent node. Below is the
definition for Node:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  class Node {
      public int val;
      public Node left;
      public Node right;
      public Node parent;
  }
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tree = [2,1,3], node = 1
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> 1&#39;s in-order successor node is 2. Note that both the node and the return value is of Node type.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tree = [5,3,6,2,4,null,null,1], node = 6
  <strong>Output:</strong> null
  <strong>Explanation:</strong> There is no in-order successor of the current node, so the answer is null.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
  <strong>Output:</strong> 17
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
  <strong>Output:</strong> 15
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tree = [0], node = 0
  <strong>Output:</strong> null
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All Nodes will have unique values.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you solve it without looking up any of the node's
values?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
