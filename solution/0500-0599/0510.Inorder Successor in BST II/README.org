* [[https://leetcode-cn.com/problems/inorder-successor-in-bst-ii][510.
二叉搜索树中的中序后继 II]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉搜索树中的中序后继-ii
  :END:
[[./solution/0500-0599/0510.Inorder Successor in BST II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一棵二叉搜索树和其中的一个节点 node
，找到该节点在树中的中序后继。如果节点没有中序后继，请返回 null 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个节点 node 的中序后继是键值比 node.val 大所有的节点中键值最小的那个。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以直接访问结点，但无法直接访问树。每个节点都会有其父节点的引用。节点 Node
定义如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  class Node {
      public int val;
      public Node left;
      public Node right;
      public Node parent;
  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tree = [2,1,3], node = 1
  <strong>输出：</strong>2
  <strong>解析：</strong>1 的中序后继结点是 2 。注意节点和返回值都是 Node 类型的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tree = [5,3,6,2,4,null,null,1], node = 6
  <strong>输出：</strong>null
  <strong>解析：</strong>该结点没有中序后继，因此返回<code> null 。</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
  <strong>输出：</strong>17
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
  <strong>输出：</strong>15
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tree = [0], node = 0
  <strong>输出：</strong>null
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点的数目在范围 [1, 104] 内。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

树中各结点的值均保证唯一。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：你能否在不访问任何结点的值的情况下解决问题?

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
