* [[https://leetcode.com/problems/encode-and-decode-tinyurl][535. Encode
and Decode TinyURL]]
  :PROPERTIES:
  :CUSTOM_ID: encode-and-decode-tinyurl
  :END:
[[./solution/0500-0599/0535.Encode and Decode TinyURL/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <blockquote>
#+end_html

Note: This is a companion problem to the System Design problem: Design
TinyURL.

#+begin_html
  </blockquote>
#+end_html

#+begin_html
  <p>
#+end_html

TinyURL is a URL shortening service where you enter a URL such as
https://leetcode.com/problems/design-tinyurl and it returns a short URL
such as http://tinyurl.com/4e9iAk.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Design the encode and decode methods for the TinyURL service. There is
no restriction on how your encode/decode algorithm should work. You just
need to ensure that a URL can be encoded to a tiny URL and the tiny URL
can be decoded to the original URL.

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Codec:
      def __init__(self):
          self.code_url = {}
          self.count = 0
          self.prefix_url = 'http://tinyurl.com/'

      def encode(self, longUrl: str) -> str:
          """Encodes a URL to a shortened URL.
          """
          self.count += 1
          code = str(hex(self.count))[2:]
          self.code_url[code] = longUrl
          return self.prefix_url + code

      def decode(self, shortUrl: str) -> str:
          """Decodes a shortened URL to its original URL.
          """
          code = shortUrl.replace(self.prefix_url, '')
          return self.code_url[code]

  # Your Codec object will be instantiated and called as such:
  # codec = Codec()
  # codec.decode(codec.encode(url))
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  public class Codec {
      private Map<String, String> code2Url = new HashMap<>();
      private int count = 0;
      private static final String prefixUrl = "http://tinyurl.com/";

      // Encodes a URL to a shortened URL.
      public String encode(String longUrl) {
          String code = Integer.toHexString(++count);
          code2Url.put(code, longUrl);
          return prefixUrl + code;
      }

      // Decodes a shortened URL to its original URL.
      public String decode(String shortUrl) {
          String code = shortUrl.replace(prefixUrl, "");
          return code2Url.get(code);
      }
  }

  // Your Codec object will be instantiated and called as such:
  // Codec codec = new Codec();
  // codec.decode(codec.encode(url));
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
