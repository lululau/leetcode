* [[https://leetcode-cn.com/problems/number-of-provinces][547.
省份数量]]
  :PROPERTIES:
  :CUSTOM_ID: 省份数量
  :END:
[[./solution/0500-0599/0547.Number of Provinces/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b
直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i
个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0
表示二者不直接相连。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回矩阵中 省份 的数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>isConnected = [[1,1,0],[1,1,0],[0,0,1]]
  <strong>输出：</strong>2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>isConnected = [[1,0,0],[0,1,0],[0,0,1]]
  <strong>输出：</strong>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == isConnected.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == isConnected[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isConnected[i][j] 为 1 或 0

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isConnected[i][i] == 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isConnected[i][j] == isConnected[j][i]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

深度优先搜索。判断学生与学生之间是否属于同一个连通分量，最后连通分量的总数即为结果。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def findCircleNum(self, isConnected: List[List[int]]) -> int:
          def dfs(i):
              for j in range(n):
                  if not visited[j] and isConnected[i][j] == 1:
                      visited[j] = True
                      dfs(j)

          n = len(isConnected)
          visited = [False] * n
          num = 0
          for i in range(n):
              if not visited[i]:
                  dfs(i)
                  num += 1
          return num
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int findCircleNum(int[][] isConnected) {
          int n = isConnected.length;
          boolean[] visited = new boolean[n];
          int num = 0;
          for (int i = 0; i < n; ++i) {
              if (!visited[i]) {
                  dfs(isConnected, visited, i, n);
                  ++num;
              }
          }
          return num;
      }

      private void dfs(int[][] isConnected, boolean[] visited, int i, int n) {
          for (int j = 0; j < n; ++j) {
              if (!visited[j] && isConnected[i][j] == 1) {
                  visited[j] = true;
                  dfs(isConnected, visited, j, n);
              }
          }
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
