* [[https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists][599.
两个列表的最小索引总和]]
  :PROPERTIES:
  :CUSTOM_ID: 两个列表的最小索引总和
  :END:
[[./solution/0500-0599/0599.Minimum Index Sum of Two Lists/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。
如果答案不止一个，则输出所有答案并且不考虑顺序。
你可以假设总是存在一个答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong>
  [&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]
  [&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]
  <strong>输出:</strong> [&quot;Shogun&quot;]
  <strong>解释:</strong> 他们唯一共同喜爱的餐厅是&ldquo;Shogun&rdquo;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong>
  [&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]
  [&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]
  <strong>输出:</strong> [&quot;Shogun&quot;]
  <strong>解释:</strong> 他们共同喜爱且具有最小索引和的餐厅是&ldquo;Shogun&rdquo;，它有最小的索引和1(0+1)。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

提示:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

两个列表的长度范围都在 [1, 1000]内。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

两个列表中的字符串的长度将在[1，30]的范围内。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

下标从0开始，到列表的长度减1。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

两个列表都没有重复的元素。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
