* [[https://leetcode.com/problems/reshape-the-matrix][566. Reshape the
Matrix]]
  :PROPERTIES:
  :CUSTOM_ID: reshape-the-matrix
  :END:
[[./solution/0500-0599/0566.Reshape the Matrix/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In MATLAB, there is a very useful function called 'reshape', which can
reshape a matrix into a new one with different size but keep its
original data.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You're given a matrix represented by a two-dimensional array, and two
positive integers r and c representing the row number and column number
of the wanted reshaped matrix, respectively.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The reshaped matrix need to be filled with all the elements of the
original matrix in the same row-traversing order as they were.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If the 'reshape' operation with given parameters is possible and legal,
output the new reshaped matrix; Otherwise, output the original matrix.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  <pre>

  <b>Input:</b> 

  nums = 

  [[1,2],

   [3,4]]

  r = 1, c = 4

  <b>Output:</b> 

  [[1,2,3,4]]

  <b>Explanation:</b><br>The <b>row-traversing</b> of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  <pre>

  <b>Input:</b> 

  nums = 

  [[1,2],

   [3,4]]

  r = 2, c = 4

  <b>Output:</b> 

  [[1,2],

   [3,4]]

  <b>Explanation:</b><br>There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The height and width of the given matrix is in range [1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The given r and c are all positive.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def matrixReshape(self, nums: List[List[int]], r: int, c: int) -> List[List[int]]:
          m, n = len(nums), len(nums[0])
          if m * n != r * c:
              return nums
          res = [[0] * c for _ in range(r)]
          for x in range(m * n):
              res[x // c][x % c] = nums[x // n][x % n]
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[][] matrixReshape(int[][] nums, int r, int c) {
          int m = nums.length, n = nums[0].length;
          if (m * n != r * c) return nums;
          int[][] res = new int[r][c];
          for (int i = 0; i < m * n; ++i) {
              res[i / c][i % c] = nums[i / n][i % n];
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
