* [[https://leetcode.com/problems/find-bottom-left-tree-value][513. Find
Bottom Left Tree Value]]
  :PROPERTIES:
  :CUSTOM_ID: find-bottom-left-tree-value
  :END:
[[./solution/0500-0599/0513.Find Bottom Left Tree Value/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary tree, return the leftmost value in the last
row of the tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [2,1,3]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2,3,4,null,5,6,null,null,7]
  <strong>Output:</strong> 7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= Node.val <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def findBottomLeftValue(self, root: TreeNode) -> int:
          res = 0
          q = collections.deque([root])
          while q:
              res = q[0].val
              n = len(q)
              for _ in range(n):
                  node = q.popleft()
                  if node.left:
                      q.append(node.left)
                  if node.right:
                      q.append(node.right)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public int findBottomLeftValue(TreeNode root) {
          Deque<TreeNode> q = new ArrayDeque<>();
          q.offer(root);
          int res = 0;
          while (!q.isEmpty()) {
              res = q.peek().val;
              for (int i = 0, n = q.size(); i < n; ++i) {
                  TreeNode node = q.poll();
                  if (node.left != null) {
                      q.offer(node.left);
                  }
                  if (node.right != null) {
                      q.offer(node.right);
                  }
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
