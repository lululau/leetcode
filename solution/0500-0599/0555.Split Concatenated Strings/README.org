* [[https://leetcode-cn.com/problems/split-concatenated-strings][555.
分割连接字符串]]
  :PROPERTIES:
  :CUSTOM_ID: 分割连接字符串
  :END:
[[./solution/0500-0599/0555.Split Concatenated Strings/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个字符串列表，你可以将这些字符串连接成一个循环字符串，对于每个字符串，你可以选择是否翻转它。在所有可能的循环字符串中，你需要分割循环字符串（这将使循环字符串变成一个常规的字符串），然后找到字典序最大的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

具体来说，要找到字典序最大的字符串，你需要经历两个阶段：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

将所有字符串连接成一个循环字符串，你可以选择是否翻转某些字符串，并按照给定的顺序连接它们。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

在循环字符串的某个位置分割它，这将使循环字符串从分割点变成一个常规的字符串。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

你的工作是在所有可能的常规字符串中找到字典序最大的一个。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> &quot;abc&quot;, &quot;xyz&quot;
  <strong>输出:</strong> &quot;zyxcba&quot;
  <strong>解释:</strong> 你可以得到循环字符串 &quot;-abcxyz-&quot;, &quot;-abczyx-&quot;, &quot;-cbaxyz-&quot;, &quot;-cbazyx-&quot;，
  其中 &#39;-&#39; 代表循环状态。 
  答案字符串来自第四个循环字符串， 
  你可以从中间字符 &#39;a&#39; 分割开然后得到 &quot;zyxcba&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

输入字符串只包含小写字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有字符串的总长度不会超过 1,000。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
