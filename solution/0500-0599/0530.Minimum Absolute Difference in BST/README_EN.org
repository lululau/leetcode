* [[https://leetcode.com/problems/minimum-absolute-difference-in-bst][530.
Minimum Absolute Difference in BST]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-absolute-difference-in-bst
  :END:
[[./solution/0500-0599/0530.Minimum Absolute Difference in BST/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a binary search tree with non-negative values, find the minimum
absolute difference between values of any two nodes.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>Input:</b>

     1
      \
       3
      /
     2

  <b>Output:</b>
  1

  <b>Explanation:</b>
  The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

There are at least two nodes in this BST.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

This question is the same as
783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def getMinimumDifference(self, root: TreeNode) -> int:
          def inorder(root):
              if not root:
                  return
              inorder(root.left)
              if self.pre is not None:
                  self.min_diff = min(self.min_diff, abs(root.val - self.pre))
              self.pre = root.val
              inorder(root.right)

          self.pre = None
          self.min_diff = 10 ** 5
          inorder(root)
          return self.min_diff
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {

      private int minDiff = Integer.MAX_VALUE;
      private Integer pre;

      public int getMinimumDifference(TreeNode root) {
          inorder(root);
          return minDiff;
      }

      private void inorder(TreeNode root) {
          if (root == null) return;
          inorder(root.left);
          if (pre != null) minDiff = Math.min(minDiff, Math.abs(root.val - pre));
          pre = root.val;
          inorder(root.right);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
