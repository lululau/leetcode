* [[https://leetcode-cn.com/problems/output-contest-matches][544.
输出比赛匹配对]]
  :PROPERTIES:
  :CUSTOM_ID: 输出比赛匹配对
  :END:
[[./solution/0500-0599/0544.Output Contest Matches/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在 NBA 季后赛中，我们总是安排较强的队伍对战较弱的队伍，例如用排名第 1
的队伍和第 n
的队伍对决，这是一个可以让比赛更加有趣的好策略。现在，给你 n 支队伍，你需要以字符串格式输出它们的 最终 比赛配对。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

n 支队伍按从 1 到 n 的正整数格式给出，分别代表它们的初始排名（排名 1
最强，排名 n 最弱）。我们用括号（'(',
')'）和逗号（','）来表示匹配对------括号（'(',
')'）表示匹配，逗号（','）来用于分割。 在每一轮的匹配过程中，你都需要遵循将强队与弱队配对的原则。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> 2
  <strong>输出:</strong> (1,2)
  <strong>解析:</strong> 
  初始地，我们有队1和队2两支队伍，按照1，2排列。
  因此 用 &#39;(&#39;, &#39;)&#39; 和 &#39;,&#39;来将队1和队2进行配对，得到最终答案。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> 4
  <strong>输出:</strong> ((1,4),(2,3))
  <strong>解析:</strong> 
  在第一轮，我们将队伍1和4配对，2和3配对，以满足将强队和弱队搭配的效果。得到(1,4),(2,3).
  在第二轮，(1,4) 和 (2,3) 的赢家需要进行比赛以确定最终赢家，因此需要再在外面加一层括号。
  于是最终答案是((1,4),(2,3))。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> 8
  <strong>输出:</strong> (((1,8),(4,5)),((2,7),(3,6)))
  <strong>解析:</strong> 
  第一轮: (1,8),(2,7),(3,6),(4,5)
  第二轮: ((1,8),(4,5)),((2,7),(3,6))
  第三轮 (((1,8),(4,5)),((2,7),(3,6)))
  由于第三轮会决出最终胜者，故输出答案为(((1,8),(4,5)),((2,7),(3,6)))。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

n 的范围是 [2, 212].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

保证 n 可以写成 2k 的形式，其中 k 是正整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
