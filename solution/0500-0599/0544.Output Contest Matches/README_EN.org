* [[https://leetcode.com/problems/output-contest-matches][544. Output
Contest Matches]]
  :PROPERTIES:
  :CUSTOM_ID: output-contest-matches
  :END:
[[./solution/0500-0599/0544.Output Contest Matches/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

During the NBA playoffs, we always arrange the rather strong team to
play with the rather weak team, like make the rank 1 team play with the
rank nth team, which is a good strategy to make the contest more
interesting. Now, you're given n teams, you need to output their final
contest matches in the form of a string.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The n teams are given in the form of positive integers from 1 to n,
which represents their initial rank. (Rank 1 is the strongest team and
Rank n is the weakest team.) We'll use parentheses('(', ')') and
commas(',') to represent the contest team pairing - parentheses('(' ,
')') for pairing and commas(',') for partition. During the pairing
process in each round, you always need to follow the strategy of making
the rather strong one pair with the rather weak one.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  <pre>

  <b>Input:</b> 2

  <b>Output:</b> (1,2)

  <b>Explanation:</b> 

  Initially, we have the team 1 and the team 2, placed like: 1,2.

  Then we pair the team (1,2) together with '(', ')' and ',', which is the final answer.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  <pre>

  <b>Input:</b> 4

  <b>Output:</b> ((1,4),(2,3))

  <b>Explanation:</b> 

  In the first round, we pair the team 1 and 4, the team 2 and 3 together, as we need to make the strong team and weak team together.

  And we got (1,4),(2,3).

  In the second round, the winners of (1,4) and (2,3) need to play again to generate the final winner, so you need to add the paratheses outside them.

  And we got the final answer ((1,4),(2,3)).

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  <pre>

  <b>Input:</b> 8

  <b>Output:</b> (((1,8),(4,5)),((2,7),(3,6)))

  <b>Explanation:</b> 

  First round: (1,8),(2,7),(3,6),(4,5)

  Second round: ((1,8),(4,5)),((2,7),(3,6))

  Third round: (((1,8),(4,5)),((2,7),(3,6)))

  Since the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))).

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The n is in range [2, 212].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

We ensure that the input n can be converted into the form 2k, where k is
a positive integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
