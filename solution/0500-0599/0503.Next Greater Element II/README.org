* [[https://leetcode-cn.com/problems/next-greater-element-ii][503.
下一个更大元素 II]]
  :PROPERTIES:
  :CUSTOM_ID: 下一个更大元素-ii
  :END:
[[./solution/0500-0599/0503.Next Greater Element II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字
x
的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出
-1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> [1,2,1]
  <strong>输出:</strong> [2,-1,2]
  <strong>解释:</strong> 第一个 1 的下一个更大的数是 2；
  数字 2 找不到下一个更大的数； 
  第二个 1 的下一个最大的数需要循环搜索，结果也是 2。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意: 输入数组的长度不会超过 10000。

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"单调栈 + 循环数组"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def nextGreaterElements(self, nums: List[int]) -> List[int]:
          stack = []
          n = len(nums)
          res = [-1] * n
          for i in range(n << 1):
              while stack and nums[stack[-1]] < nums[i % n]:
                  res[stack.pop()] = nums[i % n]
              stack.append(i % n)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[] nextGreaterElements(int[] nums) {
          int n = nums.length;
          int[] res = new int[n];
          Arrays.fill(res, -1);
          Deque<Integer> stack = new ArrayDeque<>();
          for (int i = 0; i < (n << 1); ++i) {
              while (!stack.isEmpty() && nums[stack.peek()] < nums[i % n]) {
                  res[stack.pop()] = nums[i % n];
              }
              stack.push(i % n);
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number[]}
   */
   var nextGreaterElements = function(nums) {
      let n = nums.length;
      let stack = [];
      let res = new Array(n).fill(-1);
      for (let i = 0; i < 2 * n; i++) {
          let cur = nums[i % n];
          while (stack.length > 0 && nums[stack[stack.length - 1]] < cur) {
              res[stack.pop()] = cur;
          }
          stack.push(i % n);
      }
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
