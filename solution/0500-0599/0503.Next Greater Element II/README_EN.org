* [[https://leetcode.com/problems/next-greater-element-ii][503. Next
Greater Element II]]
  :PROPERTIES:
  :CUSTOM_ID: next-greater-element-ii
  :END:
[[./solution/0500-0599/0503.Next Greater Element II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a circular integer array nums (i.e., the next element of
nums[nums.length - 1] is nums[0]), return the next greater number for
every element in nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The next greater number of a number x is the first greater number to its
traversing-order next in the array, which means you could search
circularly to find its next greater number. If it doesn't exist, return
-1 for this number.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,2,1]
  <strong>Output:</strong> [2,-1,2]
  Explanation: The first 1&#39;s next greater number is 2; 
  The number 2 can&#39;t find next greater number. 
  The second 1&#39;s next greater number needs to search circularly, which is also 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,2,3,4,3]
  <strong>Output:</strong> [2,3,4,-1,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= nums[i] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def nextGreaterElements(self, nums: List[int]) -> List[int]:
          stack = []
          n = len(nums)
          res = [-1] * n
          for i in range(n << 1):
              while stack and nums[stack[-1]] < nums[i % n]:
                  res[stack.pop()] = nums[i % n]
              stack.append(i % n)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[] nextGreaterElements(int[] nums) {
          int n = nums.length;
          int[] res = new int[n];
          Arrays.fill(res, -1);
          Deque<Integer> stack = new ArrayDeque<>();
          for (int i = 0; i < (n << 1); ++i) {
              while (!stack.isEmpty() && nums[stack.peek()] < nums[i % n]) {
                  res[stack.pop()] = nums[i % n];
              }
              stack.push(i % n);
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number[]}
   */
   var nextGreaterElements = function(nums) {
      let n = nums.length;
      let stack = [];
      let res = new Array(n).fill(-1);
      for (let i = 0; i < 2 * n; i++) {
          let cur = nums[i % n];
          while (stack.length > 0 && nums[stack[stack.length - 1]] < cur) {
              res[stack.pop()] = cur;
          }
          stack.push(i % n);
      }
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
