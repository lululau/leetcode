* [[https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row][515.
在每个树行中找最大值]]
  :PROPERTIES:
  :CUSTOM_ID: 在每个树行中找最大值
  :END:
[[./solution/0500-0599/0515.Find Largest Value in Each Tree Row/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

您需要在二叉树的每一行中找到最大的值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 

            1
           / \
          3   2
         / \   \  
        5   3   9 

  <strong>输出:</strong> [1, 3, 9]
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"BFS 层次遍历"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def largestValues(self, root: TreeNode) -> List[int]:
          if root is None:
              return []
          q = collections.deque([root])
          res = []
          while q:
              n = len(q)
              t = float('-inf')
              for _ in range(n):
                  node = q.popleft()
                  t = max(t, node.val)
                  if node.left:
                      q.append(node.left)
                  if node.right:
                      q.append(node.right)
              res.append(t)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public List<Integer> largestValues(TreeNode root) {
          if (root == null) {
              return Collections.emptyList();
          }
          Deque<TreeNode> q = new ArrayDeque<>();
          q.offer(root);
          List<Integer> res = new ArrayList<>();
          while (!q.isEmpty()) {
              int t = Integer.MIN_VALUE;
              for (int i = 0, n = q.size(); i < n; ++i) {
                  TreeNode node = q.poll();
                  t = Math.max(t, node.val);
                  if (node.left != null) {
                      q.offer(node.left);
                  }
                  if (node.right != null) {
                      q.offer(node.right);
                  }
              }
              res.add(t);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
