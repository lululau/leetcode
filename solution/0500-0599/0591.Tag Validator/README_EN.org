* [[https://leetcode.com/problems/tag-validator][591. Tag Validator]]
  :PROPERTIES:
  :CUSTOM_ID: tag-validator
  :END:
[[./solution/0500-0599/0591.Tag Validator/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string representing a code snippet, you need to implement a tag
validator to parse the code and return whether it is valid. A code
snippet is valid if all the following rules hold:

#+begin_html
  <p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The code must be wrapped in a valid closed tag. Otherwise, the code is
invalid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A closed tag (not necessarily valid) has exactly the following format :
<TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start
tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags
should be the same. A closed tag is valid if and only if the TAG_NAME
and TAG_CONTENT are valid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A valid TAG_NAME only contain upper-case letters, and has length in
range [1,9]. Otherwise, the TAG_NAME is invalid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A valid TAG_CONTENT may contain other valid closed tags, cdata and any
characters (see note1) EXCEPT unmatched <, unmatched start and end tag,
and unmatched or closed tags with invalid TAG_NAME. Otherwise, the
TAG_CONTENT is invalid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A start tag is unmatched if no end tag exists with the same TAG_NAME,
and vice versa. However, you also need to consider the issue of
unbalanced when tags are nested.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A < is unmatched if you cannot find a subsequent >. And when you find a
< or </, all the subsequent characters until the next > should be parsed
as TAG_NAME (not necessarily valid).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The cdata has the following format : <[CDATA[CDATA_CONTENT]]>. The range
of CDATA_CONTENT is defined as the characters between <[CDATA[ and the
first subsequent ]]>.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

CDATA_CONTENT may contain any characters. The function of cdata is to
forbid the validator to parse CDATA_CONTENT, so even it has some
characters that can be parsed as tag (no matter valid or invalid), you
should treat it as regular characters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Valid Code Examples:

#+begin_html
  <pre>

  <b>Input:</b> "&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;"<br />

  <b>Output:</b> True<br />

  <b>Explanation:</b> <br>

  The code is wrapped in a closed tag : &lt;DIV> and &lt;/DIV>. <br>

  The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. <br>

  Although CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.<br>

  So TAG_CONTENT is valid, and then the code is valid. Thus return true.<br />



  <b>Input:</b> "&lt;DIV>>>  ![cdata[]] &lt;![CDATA[&lt;div>]>]]>]]>>]&lt;/DIV>"<br />

  <b>Output:</b> True<br />

  <b>Explanation:</b><br />

  We first separate the code into : start_tag|tag_content|end_tag.<br />

  start_tag -> <b>"&lt;DIV&gt;"</b><br />

  end_tag -> <b>"&lt;/DIV>"</b><br />

  tag_content could also be separated into : text1|cdata|text2.<br />

  text1 -> <b>">>  ![cdata[]] "</b><br />

  cdata -> <b>"&lt;![CDATA[&lt;div>]>]]>"</b>, where the CDATA_CONTENT is <b>"&lt;div>]>"</b><br />

  text2 -> <b>"]]>>]"</b><br />



  The reason why start_tag is NOT <b>"&lt;DIV>>>"</b> is because of the rule 6.

  The reason why cdata is NOT <b>"&lt;![CDATA[&lt;div>]>]]>]]>"</b> is because of the rule 7.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Invalid Code Examples:

#+begin_html
  <pre>

  <b>Input:</b> "&lt;A>  &lt;B> &lt;/A>   &lt;/B>"

  <b>Output:</b> False

  <b>Explanation:</b> Unbalanced. If "&lt;A>" is closed, then "&lt;B>" must be unmatched, and vice versa.



  <b>Input:</b> "&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;"

  <b>Output:</b> False



  <b>Input:</b> "&lt;DIV&gt;  unmatched &lt  &lt;/DIV&gt;"

  <b>Output:</b> False



  <b>Input:</b> "&lt;DIV&gt; closed tags with invalid tag name  &lt;b>123&lt;/b> &lt;/DIV&gt;"

  <b>Output:</b> False



  <b>Input:</b> "&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890> and &lt;CDATA[[]]>  &lt;/DIV&gt;"

  <b>Output:</b> False



  <b>Input:</b> "&lt;DIV&gt;  unmatched start tag &lt;B>  and unmatched end tag &lt;/C>  &lt;/DIV&gt;"

  <b>Output:</b> False

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

For simplicity, you could assume the input code (including the any
characters mentioned above) only contain letters, digits,
'<','>','/','!','[',']' and ' '.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
