* [[https://leetcode-cn.com/problems/tag-validator][591. 标签验证器]]
  :PROPERTIES:
  :CUSTOM_ID: 标签验证器
  :END:
[[./solution/0500-0599/0591.Tag Validator/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个表示代码片段的字符串，你需要实现一个验证器来解析这段代码，并返回它是否合法。合法的代码片段需要遵守以下的所有规则：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

代码必须被合法的闭合标签包围。否则，代码是无效的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

闭合标签（不一定合法）要严格符合格式：<TAG_NAME>TAG_CONTENT</TAG_NAME>。其中，<TAG_NAME>是起始标签，</TAG_NAME>是结束标签。起始和结束标签中的
TAG_NAME 应当相同。当且仅当 TAG_NAME 和 TAG_CONTENT
都是合法的，闭合标签才是合法的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

合法的 TAG_NAME 仅含有大写字母，长度在范围 [1,9]
之间。否则，该 TAG_NAME 是不合法的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

合法的 TAG_CONTENT 可以包含其他合法的闭合标签，cdata （请参考规则7）和任意字符（注意参考规则1）除了不匹配的<、不匹配的起始和结束标签、不匹配的或带有不合法
TAG_NAME 的闭合标签。否则，TAG_CONTENT 是不合法的。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

一个起始标签，如果没有具有相同 TAG_NAME
的结束标签与之匹配，是不合法的。反之亦然。不过，你也需要考虑标签嵌套的问题。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

一个<，如果你找不到一个后续的>与之匹配，是不合法的。并且当你找到一个<或</时，所有直到下一个>的前的字符，都应当被解析为 TAG_NAME（不一定合法）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

cdata
有如下格式：<[CDATA[CDATA_CONTENT]]>。CDATA_CONTENT 的范围被定义成 <[CDATA[ 和后续的第一个 ]]>之间的字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

CDATA_CONTENT 可以包含任意字符。cdata
的功能是阻止验证器解析CDATA_CONTENT，所以即使其中有一些字符可以被解析为标签（无论合法还是不合法），也应该将它们视为常规字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

合法代码的例子:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> &quot;&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;&quot;

  <strong>输出:</strong> True

  <strong>解释:</strong> 

  代码被包含在了闭合的标签内： &lt;DIV&gt; 和 &lt;/DIV&gt; 。

  TAG_NAME 是合法的，TAG_CONTENT 包含了一些字符和 cdata 。 

  即使 CDATA_CONTENT 含有不匹配的起始标签和不合法的 TAG_NAME，它应该被视为普通的文本，而不是标签。

  所以 TAG_CONTENT 是合法的，因此代码是合法的。最终返回True。


  <strong>输入:</strong> &quot;&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;&quot;

  <strong>输出:</strong> True

  <strong>解释:</strong>

  我们首先将代码分割为： start_tag|tag_content|end_tag 。

  start_tag -&gt; <strong>&quot;&lt;DIV&gt;&quot;</strong>

  end_tag -&gt; <strong>&quot;&lt;/DIV&gt;&quot;</strong>

  tag_content 也可被分割为： text1|cdata|text2 。

  text1 -&gt; <strong>&quot;&gt;&gt;  ![cdata[]] &quot;</strong>

  cdata -&gt; <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;&quot;</strong> ，其中 CDATA_CONTENT 为 <strong>&quot;&lt;div&gt;]&gt;&quot;</strong>

  text2 -&gt; <strong>&quot;]]&gt;&gt;]&quot;</strong>


  start_tag <strong>不</strong>是 <strong>&quot;&lt;DIV&gt;&gt;&gt;&quot;</strong> 的原因参照规则 6 。
  cdata <strong>不</strong>是 <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&quot;</strong> 的原因参照规则 7 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

不合法代码的例子:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> &quot;&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;&quot;
  <strong>输出:</strong> False
  <strong>解释:</strong> 不合法。如果 &quot;&lt;A&gt;&quot; 是闭合的，那么 &quot;&lt;B&gt;&quot; 一定是不匹配的，反之亦然。

  <strong>输入:</strong> &quot;&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;&quot;
  <strong>输出:</strong> False

  <strong>输入:</strong> &quot;&lt;DIV&gt;  unmatched &lt;  &lt;/DIV&gt;&quot;
  <strong>输出:</strong> False

  <strong>输入:</strong> &quot;&lt;DIV&gt; closed tags with invalid tag name  &lt;b&gt;123&lt;/b&gt; &lt;/DIV&gt;&quot;
  <strong>输出:</strong> False

  <strong>输入:</strong> &quot;&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890&gt; and &lt;CDATA[[]]&gt;  &lt;/DIV&gt;&quot;
  <strong>输出:</strong> False

  <strong>输入:</strong> &quot;&lt;DIV&gt;  unmatched start tag &lt;B&gt;  and unmatched end tag &lt;/C&gt;  &lt;/DIV&gt;&quot;
  <strong>输出:</strong> False
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

为简明起见，你可以假设输入的代码（包括提到的任意字符）只包含数字, 字母,
'<','>','/','!','[',']'和' '。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
