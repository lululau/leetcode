* [[https://leetcode-cn.com/problems/kill-process][582. 杀掉进程]]
  :PROPERTIES:
  :CUSTOM_ID: 杀掉进程
  :END:
[[./solution/0500-0599/0582.Kill Process/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

系统中存在 n 个进程，形成一个有根树结构。给你两个整数数组 pid 和 ppid
，其中 pid[i] 是第 i 个进程的 ID ，ppid[i] 是第 i 个进程的父进程 ID 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每一个进程只有 一个父进程 ，但是可能会有 一个或者多个子进程
。只有一个进程的 ppid[i] = 0 ，意味着这个进程 没有父进程 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

当一个进程 被杀掉 的时候，它所有的子进程和后代进程都要被杀掉。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数 kill 表示要杀掉​​进程的 ID ，返回杀掉该进程后的所有进程 ID
的列表。可以按 任意顺序 返回答案。

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5
  <strong>输出：</strong>[5,10]
  <strong>解释：</strong>涂为红色的进程是应该被杀掉的进程。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>pid = [1], ppid = [0], kill = 1
  <strong>输出：</strong>[1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == pid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == ppid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 5 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pid[i] <= 5 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ppid[i] <= 5 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

仅有一个进程没有父进程

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pid 中的所有值 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目数据保证 kill 在 pid 中

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
