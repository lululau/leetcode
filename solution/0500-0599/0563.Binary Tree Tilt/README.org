* [[https://leetcode-cn.com/problems/binary-tree-tilt][563.
二叉树的坡度]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树的坡度
  :END:
[[./solution/0500-0599/0563.Binary Tree Tilt/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树，计算 整个树 的坡度 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个树的 节点的坡度 定义即为，该节点左子树的节点之和和右子树节点之和的
差的绝对值 。如果没有左子树的话，左子树的节点之和为 0
；没有右子树的话也是一样。空结点的坡度是 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

整个树 的坡度就是其所有节点的坡度之和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,2,3]
  <strong>输出：</strong>1
  <strong>解释：</strong>
  节点 2 的坡度：|0-0| = 0（没有子节点）
  节点 3 的坡度：|0-0| = 0（没有子节点）
  节点 1 的坡度：|2-3| = 1（左子树就是左子节点，所以和是 2 ；右子树就是右子节点，所以和是 3 ）
  坡度总和：0 + 0 + 1 = 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [4,2,9,3,5,null,7]
  <strong>输出：</strong>15
  <strong>解释：</strong>
  节点 3 的坡度：|0-0| = 0（没有子节点）
  节点 5 的坡度：|0-0| = 0（没有子节点）
  节点 7 的坡度：|0-0| = 0（没有子节点）
  节点 2 的坡度：|3-5| = 2（左子树就是左子节点，所以和是 3 ；右子树就是右子节点，所以和是 5 ）
  节点 9 的坡度：|0-7| = 7（没有左子树，所以和是 0 ；右子树正好是右子节点，所以和是 7 ）
  节点 4 的坡度：|(3+5+2)-(9+7)| = |10-16| = 6（左子树值为 3、5 和 2 ，和是 10 ；右子树值为 9 和 7 ，和是 16 ）
  坡度总和：0 + 0 + 0 + 2 + 7 + 6 = 15
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [21,7,14,1,1,2,2,3,3]
  <strong>输出：</strong>9
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点数目的范围在 [0, 104] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
