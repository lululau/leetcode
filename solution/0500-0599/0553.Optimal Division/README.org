* [[https://leetcode-cn.com/problems/optimal-division][553. 最优除法]]
  :PROPERTIES:
  :CUSTOM_ID: 最优除法
  :END:
[[./solution/0500-0599/0553.Optimal Division/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一组正整数，相邻的整数之间将会进行浮点除法操作。例如， [2,3,4] -> 2
/ 3 / 4 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。你需要找出怎么添加括号，才能得到最大的结果，并且返回相应的字符串格式的表达式。你的表达式不应该含有冗余的括号。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> [1000,100,10,2]
  <strong>输出:</strong> &quot;1000/(100/10/2)&quot;
  <strong>解释:</strong>
  1000/(100/10/2) = 1000/((100/10)/2) = 200
  但是，以下加粗的括号 &quot;1000/(<strong>(</strong>100/10<strong>)</strong>/2)&quot; 是冗余的，
  因为他们并不影响操作的优先级，所以你需要返回 &quot;1000/(100/10/2)&quot;。

  其他用例:
  1000/(100/10)/2 = 50
  1000/(100/(10/2)) = 50
  1000/100/10/2 = 0.5
  1000/100/(10/2) = 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

说明:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

输入数组的长度在 [1, 10] 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

数组中每个元素的大小都在 [2, 1000] 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个测试用例只有一个最优除法解。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
