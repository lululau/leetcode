* [[https://leetcode.com/problems/random-pick-with-weight][528. Random
Pick with Weight]]
  :PROPERTIES:
  :CUSTOM_ID: random-pick-with-weight
  :END:
[[./solution/0500-0599/0528.Random Pick with Weight/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an array of positive integers w where w[i] describes the
weight of ith index (0-indexed).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We need to call the function pickIndex() which randomly returns an
integer in the range [0, w.length - 1]. pickIndex() should return the
integer proportional to its weight in the w array. For example, for w =
[1, 3], the probability of picking the index 0 is 1 / (1 + 3) = 0.25
(i.e 25%) while the probability of picking the index 1 is 3 / (1 + 3) =
0.75 (i.e 75%).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

More formally, the probability of picking index i is w[i] / sum(w).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;Solution&quot;,&quot;pickIndex&quot;]
  [[[1]],[]]
  <strong>Output</strong>
  [null,0]

  <strong>Explanation</strong>
  Solution solution = new Solution([1]);
  solution.pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]
  [[[1,3]],[],[],[],[],[]]
  <strong>Output</strong>
  [null,1,1,1,1,0]

  <strong>Explanation</strong>
  Solution solution = new Solution([1, 3]);
  solution.pickIndex(); // return 1. It&#39;s returning the second element (index = 1) that has probability of 3/4.
  solution.pickIndex(); // return 1
  solution.pickIndex(); // return 1
  solution.pickIndex(); // return 1
  solution.pickIndex(); // return 0. It&#39;s returning the first element (index = 0) that has probability of 1/4.

  Since this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :
  [null,1,1,1,1,0]
  [null,1,1,1,1,1]
  [null,1,1,1,0,0]
  [null,1,1,1,0,1]
  [null,1,0,1,0,0]
  ......
  and so on.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= w.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= w[i] <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pickIndex will be called at most 10000 times.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
