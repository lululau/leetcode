* [[https://leetcode.com/problems/minesweeper][529. Minesweeper]]
  :PROPERTIES:
  :CUSTOM_ID: minesweeper
  :END:
[[./solution/0500-0599/0529.Minesweeper/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Let's play the minesweeper game (Wikipedia, online game)!

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are given a 2D char matrix representing the game board. 'M'
represents an unrevealed mine, 'E' represents an unrevealed empty
square, 'B' represents a revealed blank square that has no adjacent
(above, below, left, right, and all 4 diagonals) mines, digit ('1' to
'8') represents how many mines are adjacent to this revealed square, and
finally 'X' represents a revealed mine.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Now given the next click position (row and column indices) among all the
unrevealed squares ('M' or 'E'), return the board after revealing this
position according to the following rules:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

If a mine ('M') is revealed, then the game is over - change it to 'X'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If an empty square ('E') with no adjacent mines is revealed, then change
it to revealed blank ('B') and all of its adjacent unrevealed squares
should be revealed recursively.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If an empty square ('E') with at least one adjacent mine is revealed,
then change it to a digit ('1' to '8') representing the number of
adjacent mines.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Return the board when no more squares will be revealed.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <b>Input:</b> 



  [[&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],

   [&#39;E&#39;, &#39;E&#39;, &#39;M&#39;, &#39;E&#39;, &#39;E&#39;],

   [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],

   [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;]]



  Click : [3,0]



  <b>Output:</b> 



  [[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],

   [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],

   [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],

   [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]



  <b>Explanation:</b>

  <img src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0529.Minesweeper/images/minesweeper_example_1.png" style="width: 100%; max-width: 400px" />

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <b>Input:</b> 



  [[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],

   [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],

   [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],

   [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]



  Click : [1,2]



  <b>Output:</b> 



  [[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],

   [&#39;B&#39;, &#39;1&#39;, &#39;X&#39;, &#39;1&#39;, &#39;B&#39;],

   [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],

   [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]



  <b>Explanation:</b>

  <img src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0529.Minesweeper/images/minesweeper_example_2.png" style="width: 100%; max-width: 400px" />

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The range of the input matrix's height and width is [1,50].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The click position will only be an unrevealed square ('M' or 'E'), which
also means the input board contains at least one clickable square.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The input board won't be a stage when game is over (some mines have been
revealed).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

For simplicity, not mentioned rules should be ignored in this problem.
For example, you don't need to reveal all the unrevealed mines when the
game is over, consider any cases that you will win the game or flag any
squares.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
