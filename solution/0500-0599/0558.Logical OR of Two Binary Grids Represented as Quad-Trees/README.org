* [[https://leetcode-cn.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees][558.
四叉树交集]]
  :PROPERTIES:
  :CUSTOM_ID: 四叉树交集
  :END:
[[./solution/0500-0599/0558.Logical OR of Two Binary Grids Represented as Quad-Trees/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

二进制矩阵中的所有元素不是 0 就是 1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你两个四叉树，quadTree1 和 quadTree2。其中 quadTree1 表示一个 n * n
二进制矩阵，而 quadTree2 表示另一个 n * n 二进制矩阵。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回一个表示 n * n 二进制矩阵的四叉树，它是 quadTree1 和 quadTree2
所表示的两个二进制矩阵进行 按位逻辑或运算 的结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意，当 isLeaf 为 False 时，你可以把 True 或者 False
赋值给节点，两种值都会被判题机制 接受 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

val：储存叶子结点所代表的区域的值。1 对应 True，0 对应 False；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isLeaf: 当这个节点是一个叶子结点时为 True，如果它有 4 个子节点则为 False
。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <pre>
  class Node {
      public boolean val;
      public boolean isLeaf;
      public Node topLeft;
      public Node topRight;
      public Node bottomLeft;
      public Node bottomRight;
  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

我们可以按以下步骤为二维区域构建四叉树：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

如果当前网格的值相同（即，全为 0 或者全为 1），将 isLeaf 设为 True ，将
val 设为网格相应的值，并将四个子节点都设为 Null 然后停止。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果当前网格的值不同，将 isLeaf 设为 False， 将 val
设为任意值，然后如下图所示，将当前网格划分为四个子网格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

使用适当的子网格递归每个子节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果你想了解更多关于四叉树的内容，可以参考 wiki 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

四叉树格式：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输出为使用层序遍历后四叉树的序列化形式，其中 null
表示路径终止符，其下面不存在节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

它与二叉树的序列化非常相似。唯一的区别是节点以列表形式表示 [isLeaf, val]
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果 isLeaf 或者 val 的值为 True ，则表示它在列表 [isLeaf, val] 中的值为
1 ；如果 isLeaf 或者 val 的值为 False ，则表示值为 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]
  , quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
  <strong>输出：</strong>[[0,0],[1,1],[1,1],[1,1],[1,0]]
  <strong>解释：</strong>quadTree1 和 quadTree2 如上所示。由四叉树所表示的二进制矩阵也已经给出。
  如果我们对这两个矩阵进行按位逻辑或运算，则可以得到下面的二进制矩阵，由一个作为结果的四叉树表示。
  注意，我们展示的二进制矩阵仅仅是为了更好地说明题意，你无需构造二进制矩阵来获得结果四叉树。
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0558.Logical OR of Two Binary Grids Represented as Quad-Trees/images/qtr.png" style="height: 222px; width: 777px;" />
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>quadTree1 = [[1,0]]
  , quadTree2 = [[1,0]]
  <strong>输出：</strong>[[1,0]]
  <strong>解释：</strong>两个数所表示的矩阵大小都为 1*1，值全为 0 
  结果矩阵大小为 1*1，值全为 0 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]
  , quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]
  <strong>输出：</strong>[[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]
  , quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]
  <strong>输出：</strong>[[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
  , quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]
  <strong>输出：</strong>[[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

quadTree1 和 quadTree2 都是符合题目要求的四叉树，每个都代表一个 n * n
的矩阵。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == 2^x ，其中 0 <= x <= 9.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
