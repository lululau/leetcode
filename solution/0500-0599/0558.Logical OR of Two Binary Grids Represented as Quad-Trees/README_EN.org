* [[https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees][558.
Logical OR of Two Binary Grids Represented as Quad-Trees]]
  :PROPERTIES:
  :CUSTOM_ID: logical-or-of-two-binary-grids-represented-as-quad-trees
  :END:
[[./solution/0500-0599/0558.Logical OR of Two Binary Grids Represented as Quad-Trees/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A Binary Matrix is a matrix in which all the elements are either 0 or 1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given quadTree1 and quadTree2. quadTree1 represents a n * n binary
matrix and quadTree2 represents another n * n binary matrix. 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return a Quad-Tree representing the n * n binary matrix which is the
result of logical bitwise OR of the two binary matrixes represented by
quadTree1 and quadTree2.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that you can assign the value of a node to True or False when
isLeaf is False, and both are accepted in the answer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A Quad-Tree is a tree data structure in which each internal node has
exactly four children. Besides, each node has two attributes:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

val: True if the node represents a grid of 1's or False if the node
represents a grid of 0's. 

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isLeaf: True if the node is leaf node on the tree or False if the node
has the four children.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <pre>

  class Node {

      public boolean val;

  &nbsp; &nbsp; public boolean isLeaf;

  &nbsp; &nbsp; public Node topLeft;

  &nbsp; &nbsp; public Node topRight;

  &nbsp; &nbsp; public Node bottomLeft;

  &nbsp; &nbsp; public Node bottomRight;

  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

We can construct a Quad-Tree from a two-dimensional area using the
following steps:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

If the current grid has the same value (i.e all 1's or all 0's) set
isLeaf True and set val to the value of the grid and set the four
children to Null and stop.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If the current grid has different values, set isLeaf to False and set
val to any value and divide the current grid into four sub-grids as
shown in the photo.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Recurse for each of the children with the proper sub-grid.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

If you want to know more about the Quad-Tree, you can refer to the wiki.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Quad-Tree format:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The input/output represents the serialized format of a Quad-Tree using
level order traversal, where null signifies a path terminator where no
node exists below.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is very similar to the serialization of the binary tree. The only
difference is that the node is represented as a list [isLeaf, val].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If the value of isLeaf or val is True we represent it as 1 in the
list [isLeaf, val] and if the value of isLeaf or val is False we
represent it as 0.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]
  , quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
  <strong>Output:</strong> [[0,0],[1,1],[1,1],[1,1],[1,0]]
  <strong>Explanation:</strong> quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.
  If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.
  Notice that the binary matrices shown are only for illustration, you don&#39;t have to construct the binary matrix to get the result tree.
  <img alt="" src="https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0558.Logical OR of Two Binary Grids Represented as Quad-Trees/images/qtr.png" style="width: 777px; height: 222px;" />
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> quadTree1 = [[1,0]]
  , quadTree2 = [[1,0]]
  <strong>Output:</strong> [[1,0]]
  <strong>Explanation:</strong> Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.
  The resulting matrix is of size 1*1 with also zero.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]
  , quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]
  <strong>Output:</strong> [[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]
  , quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]
  <strong>Output:</strong> [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
  , quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]
  <strong>Output:</strong> [[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

quadTree1 and quadTree2 are both valid Quad-Trees each representing a n
* n grid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == 2^x where 0 <= x <= 9.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
