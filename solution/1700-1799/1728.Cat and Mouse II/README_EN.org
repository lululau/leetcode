* [[https://leetcode.com/problems/cat-and-mouse-ii][1728. Cat and Mouse
II]]
  :PROPERTIES:
  :CUSTOM_ID: cat-and-mouse-ii
  :END:
[[./solution/1700-1799/1728.Cat and Mouse II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A game is played by a cat and a mouse named Cat and Mouse.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The environment is represented by a grid of size rows x cols, where each
element is a wall, floor, player (Cat, Mouse), or food.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Players are represented by the characters 'C'(Cat),'M'(Mouse).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Floors are represented by the character '.' and can be walked on.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Walls are represented by the character '#' and cannot be walked on.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Food is represented by the character 'F' and can be walked on.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There is only one of each character 'C', 'M', and 'F' in grid.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Mouse and Cat play according to the following rules:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Mouse moves first, then they take turns to move.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

During each turn, Cat and Mouse can jump in one of the four directions
(left, right, up, down). They cannot jump over the wall nor outside of
the grid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

catJump, mouseJump are the maximum lengths Cat and Mouse can jump at a
time, respectively. Cat and Mouse can jump less than the maximum length.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Staying in the same position is allowed.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Mouse can jump over Cat.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

The game can end in 4 ways:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If Cat occupies the same position as Mouse, Cat wins.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If Cat reaches the food first, Cat wins.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If Mouse reaches the food first, Mouse wins.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If Mouse cannot get to the food within 1000 turns, Cat wins.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Given a rows x cols matrix grid and two integers catJump and mouseJump,
return true if Mouse can win the game if both Cat and Mouse play
optimally, otherwise return false.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [&quot;####F&quot;,&quot;#C...&quot;,&quot;M....&quot;], catJump = 1, mouseJump = 2
  <strong>Output:</strong> true
  <strong>Explanation:</strong> Cat cannot catch Mouse on its turn nor can it get the food before Mouse.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [&quot;M.C...F&quot;], catJump = 1, mouseJump = 4
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [&quot;M.C...F&quot;], catJump = 1, mouseJump = 3
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [&quot;C...#&quot;,&quot;...#F&quot;,&quot;....#&quot;,&quot;M....&quot;], catJump = 2, mouseJump = 5
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [&quot;.M...&quot;,&quot;..#..&quot;,&quot;#..#.&quot;,&quot;C#.#.&quot;,&quot;...#F&quot;], catJump = 3, mouseJump = 1
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

rows == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

cols = grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rows, cols <= 8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] consist only of characters 'C', 'M', 'F', '.', and '#'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There is only one of each character 'C', 'M', and 'F' in grid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= catJump, mouseJump <= 8

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
