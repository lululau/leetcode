* [[https://leetcode.com/problems/map-of-highest-peak][1765. Map of
Highest Peak]]
  :PROPERTIES:
  :CUSTOM_ID: map-of-highest-peak
  :END:
[[./solution/1700-1799/1765.Map of Highest Peak/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an integer matrix isWater of size m x n that represents a
map of land and water cells.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If isWater[i][j] == 0, cell (i, j) is a land cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If isWater[i][j] == 1, cell (i, j) is a water cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You must assign each cell a height in a way that follows these rules:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The height of each cell must be non-negative.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If the cell is a water cell, its height must be 0.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Any two adjacent cells must have an absolute height difference of at
most 1. A cell is adjacent to another cell if the former is directly
north, east, south, or west of the latter (i.e., their sides are
touching).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Find an assignment of heights such that the maximum height in the matrix
is maximized.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an integer matrix height of size m x n where height[i][j] is cell
(i, j)'s height. If there are multiple solutions, return any of them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> isWater = [[0,1],[0,0]]
  <strong>Output:</strong> [[1,0],[2,1]]
  <strong>Explanation:</strong> The image shows the assigned heights of each cell.
  The blue cell is the water cell, and the green cells are the land cells.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> isWater = [[0,0,1],[1,0,0],[0,0,0]]
  <strong>Output:</strong> [[1,1,0],[0,1,1],[1,2,2]]
  <strong>Explanation:</strong> A height of 2 is the maximum possible height of any assignment.
  Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == isWater.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == isWater[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isWater[i][j] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There is at least one water cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
