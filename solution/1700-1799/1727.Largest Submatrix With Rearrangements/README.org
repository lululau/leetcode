* [[https://leetcode-cn.com/problems/largest-submatrix-with-rearrangements][1727.
重新排列后的最大子矩阵]]
  :PROPERTIES:
  :CUSTOM_ID: 重新排列后的最大子矩阵
  :END:
[[./solution/1700-1799/1727.Largest Submatrix With Rearrangements/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个二进制矩阵 matrix ，它的大小为 m x n ，你可以将 matrix 中的
列 按任意顺序重新排列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回最优方案下将 matrix 重新排列后，全是 1 的子矩阵面积。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>matrix = [[0,0,1],[1,1,1],[1,0,1]]
  <b>输出：</b>4
  <b>解释：</b>你可以按照上图方式重新排列矩阵的每一列。
  最大的全 1 子矩阵是上图中加粗的部分，面积为 4 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>matrix = [[1,0,1,0,1]]
  <b>输出：</b>3
  <b>解释：</b>你可以按照上图方式重新排列矩阵的每一列。
  最大的全 1 子矩阵是上图中加粗的部分，面积为 3 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>matrix = [[1,1,0],[1,0,1]]
  <b>输出：</b>2
  <b>解释：</b>由于你只能整列整列重新排布，所以没有比面积为 2 更大的全 1 子矩形。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>matrix = [[0,0],[0,0]]
  <b>输出：</b>0
  <b>解释：</b>由于矩阵中没有 1 ，没有任何全 1 的子矩阵，所以面积为 0 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == matrix.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m * n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

matrix[i][j] 要么是 0 ，要么是 1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
