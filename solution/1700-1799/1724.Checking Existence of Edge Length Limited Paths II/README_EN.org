* [[https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths-ii][1724.
Checking Existence of Edge Length Limited Paths II]]
  :PROPERTIES:
  :CUSTOM_ID: checking-existence-of-edge-length-limited-paths-ii
  :END:
[[./solution/1700-1799/1724.Checking Existence of Edge Length Limited Paths II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

An undirected graph of n nodes is defined by edgeList, where edgeList[i]
= [ui, vi, disi] denotes an edge between nodes ui and vi with distance
disi. Note that there may be multiple edges between two nodes, and the
graph may not be connected.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the DistanceLimitedPathsExist class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

DistanceLimitedPathsExist(int n, int[][] edgeList) Initializes the class
with an undirected graph.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean query(int p, int q, int limit) Returns true if there exists a
path from p to q such that each edge on the path has a distance strictly
less than limit, and otherwise false.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;DistanceLimitedPathsExist&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;]
  [[6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]], [2, 3, 2], [1, 3, 3], [2, 0, 3], [0, 5, 6]]
  <strong>Output</strong>
  [null, true, false, true, false]

  <strong>Explanation</strong>
  DistanceLimitedPathsExist distanceLimitedPathsExist = new DistanceLimitedPathsExist(6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]);
  distanceLimitedPathsExist.query(2, 3, 2); // return true. There is an edge from 2 to 3 of distance 1, which is less than 2.
  distanceLimitedPathsExist.query(1, 3, 3); // return false. There is no way to go from 1 to 3 with distances <strong>strictly</strong> less than 3.
  distanceLimitedPathsExist.query(2, 0, 3); // return true. There is a way to go from 2 to 0 with distance &lt; 3: travel from 2 to 3 to 0.
  distanceLimitedPathsExist.query(0, 5, 6); // return false. There are no paths from 0 to 5.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= edgeList.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edgeList[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ui, vi, p, q <= n-1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ui != vi

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p != q

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= disi, limit <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 104 calls will be made to query.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
