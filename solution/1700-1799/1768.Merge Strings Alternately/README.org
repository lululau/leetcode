* [[https://leetcode-cn.com/problems/merge-strings-alternately][1768.
交替合并字符串]]
  :PROPERTIES:
  :CUSTOM_ID: 交替合并字符串
  :END:
[[./solution/1700-1799/1768.Merge Strings Alternately/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个字符串 word1 和 word2 。请你从 word1
开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 合并后的字符串 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>word1 = "abc", word2 = "pqr"
  <strong>输出：</strong>"apbqcr"
  <strong>解释：</strong>字符串合并情况如下所示：
  word1：  a   b   c
  word2：    p   q   r
  合并后：  a p b q c r
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>word1 = "ab", word2 = "pqrs"
  <strong>输出：</strong>"apbqrs"
  <strong>解释：</strong>注意，word2 比 word1 长，"rs" 需要追加到合并后字符串的末尾。
  word1：  a   b 
  word2：    p   q   r   s
  合并后：  a p b q   r   s
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>word1 = "abcd", word2 = "pq"
  <strong>输出：</strong>"apbqcd"
  <strong>解释：</strong>注意，word1 比 word2 长，"cd" 需要追加到合并后字符串的末尾。
  word1：  a   b   c   d
  word2：    p   q 
  合并后：  a p b q c   d
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= word1.length, word2.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word1 和 word2 由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def mergeAlternately(self, word1: str, word2: str) -> str:
          i, m, n = 0, len(word1), len(word2)
          res = []
          while i < m or i < n:
              if i < m:
                  res.append(word1[i])
              if i < n:
                  res.append(word2[i])
              i += 1
          return ''.join(res)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public String mergeAlternately(String word1, String word2) {
          int m = word1.length(), n = word2.length();
          StringBuilder res = new StringBuilder();
          for (int i = 0; i < m || i < n; ++i) {
              if (i < m) {
                  res.append(word1.charAt(i));
              }
              if (i < n) {
                  res.append(word2.charAt(i));
              }
          }
          return res.toString();
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      string mergeAlternately(string word1, string word2) {
          int m = word1.size(), n = word2.size();
          string res;
          for (int i = 0; i < m || i < n; ++i) {
              if (i < m) {
                  res.push_back(word1[i]);
              }
              if (i < n) {
                  res.push_back(word2[i]);
              }
          }
          return res;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
