* [[https://leetcode-cn.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box][1769.
移动所有球到每个盒子所需的最小操作数]]
  :PROPERTIES:
  :CUSTOM_ID: 移动所有球到每个盒子所需的最小操作数
  :END:
[[./solution/1700-1799/1769.Minimum Number of Operations to Move All Balls to Each Box/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有 n 个盒子。给你一个长度为 n 的二进制字符串 boxes ，其中 boxes[i]
的值为 '0' 表示第 i 个盒子是 空 的，而 boxes[i] 的值为 '1' 表示盒子里有
一个 小球。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在一步操作中，你可以将 一个 小球从某个盒子移动到一个与之相邻的盒子中。第
i 个盒子和第 j 个盒子相邻需满足 abs(i - j) == 1
。注意，操作执行后，某些盒子中可能会存在不止一个小球。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回一个长度为 n 的数组 answer ，其中 answer[i] 是将所有小球移动到第 i
个盒子所需的 最小 操作数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每个 answer[i] 都需要根据盒子的 初始状态 进行计算。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>boxes = "110"
  <strong>输出：</strong>[1,1,3]
  <strong>解释：</strong>每个盒子对应的最小操作数如下：
  1) 第 1 个盒子：将一个小球从第 2 个盒子移动到第 1 个盒子，需要 1 步操作。
  2) 第 2 个盒子：将一个小球从第 1 个盒子移动到第 2 个盒子，需要 1 步操作。
  3) 第 3 个盒子：将一个小球从第 1 个盒子移动到第 3 个盒子，需要 2 步操作。将一个小球从第 2 个盒子移动到第 3 个盒子，需要 1 步操作。共计 3 步操作。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>boxes = "001011"
  <strong>输出：</strong>[11,8,5,4,3,4]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == boxes.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boxes[i] 为 '0' 或 '1'

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
