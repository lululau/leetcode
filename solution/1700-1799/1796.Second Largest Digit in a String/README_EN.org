* [[https://leetcode.com/problems/second-largest-digit-in-a-string][1796.
Second Largest Digit in a String]]
  :PROPERTIES:
  :CUSTOM_ID: second-largest-digit-in-a-string
  :END:
[[./solution/1700-1799/1796.Second Largest Digit in a String/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an alphanumeric string s, return the second largest numerical
digit that appears in s, or -1 if it does not exist.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

An alphanumeric string is a string consisting of lowercase English
letters and digits.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;dfa12321afd&quot;
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> The digits that appear in s are [1, 2, 3]. The second largest digit is 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;abc1111&quot;
  <strong>Output:</strong> -1
  <strong>Explanation:</strong> The digits that appear in s are [1]. There is no second largest digit. 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consists of only lowercase English letters and/or digits.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def secondHighest(self, s: str) -> int:
          largest_digit = second_largest_digit = -1
          for c in s:
              if c.isdigit():
                  num = int(c)
                  if num > largest_digit:
                      second_largest_digit, largest_digit = largest_digit, num
                  elif num > second_largest_digit and num < largest_digit:
                      second_largest_digit = num
          return second_largest_digit
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int secondHighest(String s) {
          int largestDigit = -1, secondLargestDigit = -1;
          for (int i = 0; i < s.length(); ++i) {
              char c = s.charAt(i);
              if (c >= '0' && c <= '9') {
                  int num = c - '0';
                  if (num > largestDigit) {
                      secondLargestDigit = largestDigit;
                      largestDigit = num;
                  } else if (num > secondLargestDigit && num < largestDigit) {
                      secondLargestDigit = num;
                  }
              }
          }
          return secondLargestDigit;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
