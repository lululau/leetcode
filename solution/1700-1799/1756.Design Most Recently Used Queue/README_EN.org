* [[https://leetcode.com/problems/design-most-recently-used-queue][1756.
Design Most Recently Used Queue]]
  :PROPERTIES:
  :CUSTOM_ID: design-most-recently-used-queue
  :END:
[[./solution/1700-1799/1756.Design Most Recently Used Queue/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a queue-like data structure that moves the most recently used
element to the end of the queue.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the MRUQueue class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MRUQueue(int n) constructs the MRUQueue with n elements: [1,2,3,...,n].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

fetch(int k) moves the kth element (1-indexed) to the end of the queue
and returns it.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong>

  [&quot;MRUQueue&quot;, &quot;fetch&quot;, &quot;fetch&quot;, &quot;fetch&quot;, &quot;fetch&quot;]

  [[8], [3], [5], [2], [8]]

  <strong>Output:</strong>

  [null, 3, 6, 2, 2]



  <strong>Explanation:</strong>

  MRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to [1,2,3,4,5,6,7,8].

  mRUQueue.fetch(3); // Moves the 3<sup>rd</sup> element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and returns it.

  mRUQueue.fetch(5); // Moves the 5<sup>th</sup> element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and returns it.

  mRUQueue.fetch(2); // Moves the 2<sup>nd</sup> element (2) to the end of the queue to become [1,4,5,7,8,3,6,2] and returns it.

  mRUQueue.fetch(8); // The 8<sup>th</sup> element (2) is already at the end of the queue so just return it.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 2000 calls will be made to fetch.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Finding an O(n) algorithm per fetch is a bit easy. Can you
find an algorithm with a better complexity for each fetch call?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
