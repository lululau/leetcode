* [[https://leetcode-cn.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate][1779.
找到最近的有相同 X 或 Y 坐标的点]]
  :PROPERTIES:
  :CUSTOM_ID: 找到最近的有相同-x-或-y-坐标的点
  :END:
[[./solution/1700-1799/1779.Find Nearest Point That Has the Same X or Y Coordinate/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个整数 x 和 y ，表示你在一个笛卡尔坐标系下的 (x,
y) 处。同时，在同一个坐标系下给你一个数组 points ，其中 points[i] = [ai,
bi] 表示在 (ai, bi) 处有一个点。当一个点与你所在的位置有相同的 x
坐标或者相同的 y 坐标时，我们称这个点是 有效的 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请返回距离你当前位置 曼哈顿距离 最近的 有效 点的下标（下标从 0
开始）。如果有多个最近的有效点，请返回下标 最小 的一个。如果没有有效点，请返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

两个点 (x1, y1) 和 (x2, y2) 之间的 曼哈顿距离 为 abs(x1 - x2) + abs(y1 -
y2) 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]
  <b>输出：</b>2
  <b>解释：</b>所有点中，[3,1]，[2,4] 和 [4,4] 是有效点。有效点中，[2,4] 和 [4,4] 距离你当前位置的曼哈顿距离最小，都为 1 。[2,4] 的下标最小，所以返回 2 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>x = 3, y = 4, points = [[3,4]]
  <b>输出：</b>0
  <b>提示：</b>答案可以与你当前所在位置坐标相同。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>x = 3, y = 4, points = [[2,3]]
  <b>输出：</b>-1
  <b>解释：</b>没有有效点。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= points.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

points[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= x, y, ai, bi <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
