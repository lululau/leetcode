* [[https://leetcode-cn.com/problems/maximize-score-after-n-operations][1799.
N 次操作后的最大分数和]]
  :PROPERTIES:
  :CUSTOM_ID: n-次操作后的最大分数和
  :END:
[[./solution/1700-1799/1799.Maximize Score After N Operations/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你 nums ，它是一个大小为 2 * n 的正整数数组。你必须对这个数组执行
n 次操作。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在第 i 次操作时（操作编号从 1 开始），你需要：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

选择两个元素 x 和 y 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

获得分数 i * gcd(x, y) 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

将 x 和 y 从 nums 中删除。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回 n 次操作后你能获得的分数和最大为多少。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

函数 gcd(x, y) 是 x 和 y 的最大公约数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,2]
  <b>输出：</b>1
  <b>解释：</b>最优操作是：
  (1 * gcd(1, 2)) = 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [3,4,6,8]
  <b>输出：</b>11
  <b>解释：</b>最优操作是：
  (1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,2,3,4,5,6]
  <b>输出：</b>14
  <b>解释：</b>最优操作是：
  (1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 7

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums.length == 2 * n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
