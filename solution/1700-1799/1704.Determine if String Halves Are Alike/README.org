* [[https://leetcode-cn.com/problems/determine-if-string-halves-are-alike][1704.
判断字符串的两半是否相似]]
  :PROPERTIES:
  :CUSTOM_ID: 判断字符串的两半是否相似
  :END:
[[./solution/1700-1799/1704.Determine if String Halves Are Alike/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个偶数长度的字符串 s 。将其拆分成长度相同的两半，前一半为 a
，后一半为 b 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

两个字符串 相似
的前提是它们都含有相同数目的元音（'a'，'e'，'i'，'o'，'u'，'A'，'E'，'I'，'O'，'U'）。注意，s
可能同时含有大写和小写字母。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果 a 和 b 相似，返回 true ；否则，返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "book"
  <strong>输出：</strong>true
  <strong>解释：</strong>a = "b<strong>o</strong>" 且 b = "<strong>o</strong>k" 。a 中有 1 个元音，b 也有 1 个元音。所以，a 和 b 相似。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "textbook"
  <strong>输出：</strong>false
  <strong>解释：</strong>a = "t<strong>e</strong>xt" 且 b = "b<strong>oo</strong>k" 。a 中有 1 个元音，b 中有 2 个元音。因此，a 和 b 不相似。
  注意，元音 o 在 b 中出现两次，记为 2 个。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "MerryChristmas"
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "AbCdEfGh"
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= s.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s.length 是偶数

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 由 大写和小写 字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def halvesAreAlike(self, s: str) -> bool:
          half = len(s) >> 1
          vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
          s1 = sum(1 for c in s[:half] if c in vowels)
          s2 = sum(1 for c in s[half:] if c in vowels)
          return s1 == s2
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean halvesAreAlike(String s) {
          int half = s.length() >> 1;
          Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));
          int s1 = 0, s2 = 0;
          for (int i = 0; i < half; ++i) {
              if (vowels.contains(s.charAt(i))) {
                  ++s1;
              }
              if (vowels.contains(s.charAt(half + i))) {
                  ++s2;
              }
          }
          return s1 == s2;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
