* [[https://leetcode-cn.com/problems/design-authentication-manager][1797.
设计一个验证系统]]
  :PROPERTIES:
  :CUSTOM_ID: 设计一个验证系统
  :END:
[[./solution/1700-1799/1797.Design Authentication Manager/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你需要设计一个包含验证码的验证系统。每一次验证中，用户会收到一个新的验证码，这个验证码在
currentTime 时刻之后 timeToLive 秒过期。如果验证码被更新了，那么它会在
currentTime （可能与之前的 currentTime 不同）时刻延长 timeToLive 秒。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你实现 AuthenticationManager 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

AuthenticationManager(int
timeToLive) 构造 AuthenticationManager 并设置 timeToLive 参数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

generate(string tokenId, int currentTime) 给定
tokenId ，在当前时间 currentTime 生成一个新的验证码。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

renew(string tokenId, int currentTime) 将给定 tokenId 且
未过期 的验证码在
currentTime 时刻更新。如果给定 tokenId 对应的验证码不存在或已过期，请你忽略该操作，不会有任何更新操作发生。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

countUnexpiredTokens(int
currentTime) 请返回在给定 currentTime 时刻，未过期 的验证码数目。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

如果一个验证码在时刻 t 过期，且另一个操作恰好在时刻 t 发生（renew 或者 countUnexpiredTokens 操作），过期事件 优先于 其他操作。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["AuthenticationManager", "<code>renew</code>", "generate", "<code>countUnexpiredTokens</code>", "generate", "<code>renew</code>", "<code>renew</code>", "<code>countUnexpiredTokens</code>"]
  [[5], ["aaa", 1], ["aaa", 2], [6], ["bbb", 7], ["aaa", 8], ["bbb", 10], [15]]
  <strong>输出：</strong>
  [null, null, null, 1, null, null, null, 0]

  <strong>解释：</strong>
  AuthenticationManager authenticationManager = new AuthenticationManager(5); // 构造 AuthenticationManager ，设置 <code>timeToLive</code> = 5 秒。
  authenticationManager.<code>renew</code>("aaa", 1); // 时刻 1 时，没有验证码的 tokenId 为 "aaa" ，没有验证码被更新。
  authenticationManager.generate("aaa", 2); // 时刻 2 时，生成一个 tokenId 为 "aaa" 的新验证码。
  authenticationManager.<code>countUnexpiredTokens</code>(6); // 时刻 6 时，只有 tokenId 为 "aaa" 的验证码未过期，所以返回 1 。
  authenticationManager.generate("bbb", 7); // 时刻 7 时，生成一个 tokenId 为 "bbb" 的新验证码。
  authenticationManager.<code>renew</code>("aaa", 8); // tokenId 为 "aaa" 的验证码在时刻 7 过期，且 8 >= 7 ，所以时刻 8 的 renew 操作被忽略，没有验证码被更新。
  authenticationManager.<code>renew</code>("bbb", 10); // tokenId 为 "bbb" 的验证码在时刻 10 没有过期，所以 renew 操作会执行，该 token 将在时刻 15 过期。
  authenticationManager.<code>countUnexpiredTokens</code>(15); // tokenId 为 "bbb" 的验证码在时刻 15 过期，tokenId 为 "aaa" 的验证码在时刻 7 过期，所有验证码均已过期，所以返回 0 。

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= timeToLive <= 108

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= currentTime <= 108

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= tokenId.length <= 5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

tokenId 只包含小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有 generate 函数的调用都会包含独一无二的 tokenId 值。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有函数调用中，currentTime 的值 严格递增 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有函数的调用次数总共不超过 2000 次。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

用哈希表存放 token 与对应的过期时间。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class AuthenticationManager:

      def __init__(self, timeToLive: int):
          self.timeToLive = timeToLive
          self.tokens = {}

      def generate(self, tokenId: str, currentTime: int) -> None:
          self.tokens[tokenId] = currentTime + self.timeToLive

      def renew(self, tokenId: str, currentTime: int) -> None:
          expire_time = self.tokens.get(tokenId)
          if expire_time is None or expire_time <= currentTime:
              return
          self.tokens[tokenId] = currentTime + self.timeToLive

      def countUnexpiredTokens(self, currentTime: int) -> int:
          unexpiredCount = 0
          for val in self.tokens.values():
              if val > currentTime:
                  unexpiredCount += 1
          return unexpiredCount


  # Your AuthenticationManager object will be instantiated and called as such:
  # obj = AuthenticationManager(timeToLive)
  # obj.generate(tokenId,currentTime)
  # obj.renew(tokenId,currentTime)
  # param_3 = obj.countUnexpiredTokens(currentTime)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class AuthenticationManager {
      private int timeToLive;
      private Map<String, Integer> tokens;

      public AuthenticationManager(int timeToLive) {
          this.timeToLive = timeToLive;
          tokens = new HashMap<>();
      }

      public void generate(String tokenId, int currentTime) {
          tokens.put(tokenId, currentTime + timeToLive);
      }

      public void renew(String tokenId, int currentTime) {
          Integer expireTime = tokens.get(tokenId);
          if (expireTime == null || expireTime <= currentTime) {
              return;
          }
          tokens.put(tokenId, currentTime + timeToLive);
      }

      public int countUnexpiredTokens(int currentTime) {
          int unexpiredCount = 0;
          for (Integer val : tokens.values()) {
              if (val > currentTime) {
                  ++unexpiredCount;
              }
          }
          return unexpiredCount;
      }
  }

  /**
   * Your AuthenticationManager object will be instantiated and called as such:
   * AuthenticationManager obj = new AuthenticationManager(timeToLive);
   * obj.generate(tokenId,currentTime);
   * obj.renew(tokenId,currentTime);
   * int param_3 = obj.countUnexpiredTokens(currentTime);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
