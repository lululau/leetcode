* [[https://leetcode-cn.com/problems/minimum-changes-to-make-alternating-binary-string][1758.
生成交替二进制字符串的最少操作数]]
  :PROPERTIES:
  :CUSTOM_ID: 生成交替二进制字符串的最少操作数
  :END:
[[./solution/1700-1799/1758.Minimum Changes To Make Alternating Binary String/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个仅由字符 '0' 和 '1' 组成的字符串 s 。一步操作中，你可以将任一
'0' 变成 '1' ，或者将 '1' 变成 '0' 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

交替字符串
定义为：如果字符串中不存在相邻两个字符相等的情况，那么该字符串就是交替字符串。例如，字符串
"010" 是交替字符串，而字符串 "0100" 不是。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回使 s 变成 交替字符串 所需的 最少 操作数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "0100"
  <strong>输出：</strong>1
  <strong>解释：</strong>如果将最后一个字符变为 '1' ，s 就变成 "0101" ，即符合交替字符串定义。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "10"
  <strong>输出：</strong>0
  <strong>解释：</strong>s 已经是交替字符串。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "1111"
  <strong>输出：</strong>2
  <strong>解释：</strong>需要 2 步操作得到 "0101" 或 "1010" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[i] 是 '0' 或 '1'

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def minOperations(self, s: str) -> int:
          cnt = 0
          for i, c in enumerate(s):
              cnt += c == '01'[i & 1]
          return min(cnt, len(s) - cnt)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int minOperations(String s) {
          int cnt = 0, n = s.length();
          for (int i = 0; i < n; ++i) {
              cnt += (s.charAt(i) == "01".charAt(i & 1) ? 1 : 0);
          }
          return Math.min(cnt, n - cnt);
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int minOperations(string s) {
          int cnt = 0, n = s.size();
          for (int i = 0; i < n; ++i) {
              cnt += s[i] == "01"[i & 1];
          }
          return min(cnt, n - cnt);
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
