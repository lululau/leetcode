* [[https://leetcode.com/problems/maximize-palindrome-length-from-subsequences][1771.
Maximize Palindrome Length From Subsequences]]
  :PROPERTIES:
  :CUSTOM_ID: maximize-palindrome-length-from-subsequences
  :END:
[[./solution/1700-1799/1771.Maximize Palindrome Length From Subsequences/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two strings, word1 and word2. You want to construct a
string in the following manner:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Choose some non-empty subsequence subsequence1 from word1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Choose some non-empty subsequence subsequence2 from word2.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Concatenate the subsequences: subsequence1 + subsequence2, to make the
string.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the length of the longest palindrome that can be constructed in
the described manner. If no palindromes can be constructed, return 0.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A subsequence of a string s is a string that can be made by deleting
some (possibly none) characters from s without changing the order of the
remaining characters.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A palindrome is a string that reads the same forward as well as
backward.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> word1 = &quot;cacb&quot;, word2 = &quot;cbba&quot;
  <strong>Output:</strong> 5
  <strong>Explanation:</strong> Choose &quot;ab&quot; from word1 and &quot;cba&quot; from word2 to make &quot;abcba&quot;, which is a palindrome.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> word1 = &quot;ab&quot;, word2 = &quot;ab&quot;
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> Choose &quot;ab&quot; from word1 and &quot;a&quot; from word2 to make &quot;aba&quot;, which is a palindrome.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> word1 = &quot;aa&quot;, word2 = &quot;bb&quot;
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> You cannot construct a palindrome from the described method, so return 0.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= word1.length, word2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word1 and word2 consist of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
