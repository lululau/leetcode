* [[https://leetcode-cn.com/problems/maximize-palindrome-length-from-subsequences][1771.
由子序列构造的最长回文串的长度]]
  :PROPERTIES:
  :CUSTOM_ID: 由子序列构造的最长回文串的长度
  :END:
[[./solution/1700-1799/1771.Maximize Palindrome Length From Subsequences/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个字符串 word1 和 word2 ，请你按下述方法构造一个字符串：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

从 word1 中选出某个 非空 子序列 subsequence1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

从 word2 中选出某个 非空 子序列 subsequence2 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

连接两个子序列 subsequence1 + subsequence2 ，得到字符串。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

返回可按上述方法构造的最长 回文串 的 长度 。如果无法构造回文串，返回 0
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

字符串 s 的一个 子序列 是通过从 s
中删除一些（也可能不删除）字符而不更改其余字符的顺序生成的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

回文串 是正着读和反着读结果一致的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>word1 = "cacb", word2 = "cbba"
  <strong>输出：</strong>5
  <strong>解释：</strong>从 word1 中选出 "ab" ，从 word2 中选出 "cba" ，得到回文串 "abcba" 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>word1 = "ab", word2 = "ab"
  <strong>输出：</strong>3
  <strong>解释：</strong>从 word1 中选出 "ab" ，从 word2 中选出 "a" ，得到回文串 "aba" 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>word1 = "aa", word2 = "bb"
  <strong>输出：</strong>0
  <strong>解释：</strong>无法按题面所述方法构造回文串，所以返回 0 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= word1.length, word2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word1 和 word2 由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
