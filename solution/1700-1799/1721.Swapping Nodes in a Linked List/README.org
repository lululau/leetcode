* [[https://leetcode-cn.com/problems/swapping-nodes-in-a-linked-list][1721.
交换链表中的节点]]
  :PROPERTIES:
  :CUSTOM_ID: 交换链表中的节点
  :END:
[[./solution/1700-1799/1721.Swapping Nodes in a Linked List/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你链表的头节点 head 和一个整数 k 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

交换 链表正数第 k 个节点和倒数第 k 个节点的值后，返回链表的头节点（链表
从 1 开始索引）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,2,3,4,5], k = 2
  <strong>输出：</strong>[1,4,3,2,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [7,9,6,6,7,8,3,0,9,5], k = 5
  <strong>输出：</strong>[7,9,6,6,8,7,3,0,9,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1], k = 1
  <strong>输出：</strong>[1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,2], k = 1
  <strong>输出：</strong>[2,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,2,3], k = 2
  <strong>输出：</strong>[1,2,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

链表中节点的数目是 n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def swapNodes(self, head: ListNode, k: int) -> ListNode:
          fast = head
          for _ in range(k - 1):
              fast = fast.next
          p = fast
          slow = head
          while fast.next:
              slow, fast = slow.next, fast.next
          q = slow
          p.val, q.val = q.val, p.val
          return head
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode swapNodes(ListNode head, int k) {
          ListNode fast = head;
          while (--k > 0) {
              fast = fast.next;
          }
          ListNode p = fast;
          ListNode slow = head;
          while (fast.next != null) {
              slow = slow.next;
              fast = fast.next;
          }
          ListNode q = slow;
          int t = p.val;
          p.val = q.val;
          q.val = t;
          return head;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
