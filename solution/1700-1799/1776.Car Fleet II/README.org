* [[https://leetcode-cn.com/problems/car-fleet-ii][1776. 车队 II]]
  :PROPERTIES:
  :CUSTOM_ID: 车队-ii
  :END:
[[./solution/1700-1799/1776.Car Fleet II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在一条单车道上有 n 辆车，它们朝着同样的方向行驶。给你一个长度为 n 的数组
cars ，其中 cars[i] = [positioni, speedi] ，它表示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

positioni 是第
i 辆车和道路起点之间的距离（单位：米）。题目保证 positioni <
positioni+1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

speedi 是第 i 辆车的初始速度（单位：米/秒）。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

简单起见，所有车子可以视为在数轴上移动的点。当两辆车占据同一个位置时，我们称它们相遇了。一旦两辆车相遇，它们会合并成一个车队，这个车队里的车有着同样的位置和相同的速度，速度为这个车队里 最慢 一辆车的速度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回一个数组 answer ，其中 answer[i] 是第
i 辆车与下一辆车相遇的时间（单位：秒），如果这辆车不会与下一辆车相遇，则
answer[i] 为 -1 。答案精度误差需在 10-5 以内。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>cars = [[1,2],[2,1],[4,3],[7,2]]
  <b>输出：</b>[1.00000,-1.00000,3.00000,-1.00000]
  <b>解释：</b>经过恰好 1 秒以后，第一辆车会与第二辆车相遇，并形成一个 1 m/s 的车队。经过恰好 3 秒以后，第三辆车会与第四辆车相遇，并形成一个 2 m/s 的车队。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>cars = [[3,4],[5,4],[6,3],[9,1]]
  <b>输出：</b>[2.00000,1.00000,1.50000,-1.00000]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= cars.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= positioni, speedi <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

positioni < positioni+1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
