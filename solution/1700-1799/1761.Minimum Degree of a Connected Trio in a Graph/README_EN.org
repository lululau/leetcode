* [[https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph][1761.
Minimum Degree of a Connected Trio in a Graph]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-degree-of-a-connected-trio-in-a-graph
  :END:
[[./solution/1700-1799/1761.Minimum Degree of a Connected Trio in a Graph/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an undirected graph. You are given an integer n which is
the number of nodes in the graph and an array edges, where each edges[i]
= [ui, vi] indicates that there is an undirected edge between ui and vi.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A connected trio is a set of three nodes where there is an edge between
every pair of them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The degree of a connected trio is the number of edges where one endpoint
is in the trio, and the other is not.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum degree of a connected trio in the graph, or -1 if the
graph has no connected trios.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> There are exactly three trios:
  1) [1,4,3] with degree 0.
  2) [2,5,6] with degree 2.
  3) [5,6,7] with degree 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 400

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edges.length <= n * (n-1) / 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ui, vi <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ui != vi

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are no repeated edges.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
