* [[https://leetcode-cn.com/problems/minimum-degree-of-a-connected-trio-in-a-graph][1761.
一个图中连通三元组的最小度数]]
  :PROPERTIES:
  :CUSTOM_ID: 一个图中连通三元组的最小度数
  :END:
[[./solution/1700-1799/1761.Minimum Degree of a Connected Trio in a Graph/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个无向图，整数
n 表示图中节点的数目，edges 数组表示图中的边，其中 edges[i] = [ui,
vi] ，表示 ui 和 vi 之间有一条无向边。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个 连通三元组 指的是 三个 节点组成的集合且这三个点之间 两两 有边。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

连通三元组的度数 是所有满足此条件的边的数目：一个顶点在这个三元组内，而另一个顶点不在这个三元组内。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回所有连通三元组中度数的 最小值 ，如果图中没有连通三元组，那么返回
-1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
  <b>输出：</b>3
  <b>解释：</b>只有一个三元组 [1,2,3] 。构成度数的边在上图中已被加粗。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]
  <b>输出：</b>0
  <b>解释：</b>有 3 个三元组：
  1) [1,4,3]，度数为 0 。
  2) [2,5,6]，度数为 2 。
  3) [5,6,7]，度数为 2 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 400

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= edges.length <= n * (n-1) / 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ui, vi <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ui != vi

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

图中没有重复的边。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
