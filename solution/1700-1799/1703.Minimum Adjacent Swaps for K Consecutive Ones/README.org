* [[https://leetcode-cn.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones][1703.
得到连续 K 个 1 的最少相邻交换次数]]
  :PROPERTIES:
  :CUSTOM_ID: 得到连续-k-个-1-的最少相邻交换次数
  :END:
[[./solution/1700-1799/1703.Minimum Adjacent Swaps for K Consecutive Ones/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums 和一个整数 k 。 nums
仅包含 0 和 1 。每一次移动，你可以选择 相邻 两个数字并将它们交换。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回使 nums 中包含 k 个 连续 1 的 最少 交换次数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,0,0,1,0,1], k = 2
  <b>输出：</b>1
  <b>解释：</b>在第一次操作时，nums 可以变成 [1,0,0,0,<strong>1</strong>,<strong>1</strong>] 得到连续两个 1 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,0,0,0,0,0,1,1], k = 3
  <b>输出：</b>5
  <b>解释：</b>通过 5 次操作，最左边的 1 可以移到右边直到 nums 变为 [0,0,0,0,0,<strong>1</strong>,<strong>1</strong>,<strong>1</strong>] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>nums = [1,1,0,1], k = 2
  <b>输出：</b>0
  <b>解释：</b>nums 已经有连续 2 个 1 了。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums[i] 要么是 0 ，要么是 1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= sum(nums)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
