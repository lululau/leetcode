* [[https://leetcode-cn.com/problems/shortest-path-to-get-food][1730.
获取食物的最短路径]]
  :PROPERTIES:
  :CUSTOM_ID: 获取食物的最短路径
  :END:
[[./solution/1700-1799/1730.Shortest Path to Get Food/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你现在很饿，想要尽快找东西吃。你需要找到最短的路径到达一个食物所在的格子。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定一个 m x n 的字符矩阵 grid ，包含下列不同类型的格子：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

'/' 是你的位置。矩阵中有且只有一个 '/' 格子。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

'#' 是食物。矩阵中可能存在多个食物。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

'O' 是空地，你可以穿过这些格子。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

'X' 是障碍，你不可以穿过这些格子。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

返回你到任意食物的最短路径的长度。如果不存在你到任意食物的路径，返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b> grid = [["X","X","X","X","X","X"],["X","*","O","O","O","X"],["X","O","O","#","O","X"],["X","X","X","X","X","X"]]
  <b>输出：</b> 3
  <b>解释： </b>要拿到食物，你需要走 3 步。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b> grid = [["X","X","X","X","X"],["X","*","X","O","X"],["X","O","X","#","X"],["X","X","X","X","X"]]
  <b>输出：</b> -1
  <b>解释：</b> 你不可能拿到食物。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> grid = [["X","X","X","X","X","X","X","X"],["X","*","O","X","O","#","O","X"],["X","O","O","X","O","O","X","X"],["X","O","O","O","O","#","O","X"],["X","X","X","X","X","X","X","X"]]
  <strong>输出:</strong> 6
  <strong>解释:</strong> 这里有多个食物。拿到下边的食物仅需走 6 步。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> grid = [["O","*"],["#","O"]]
  <strong>输出:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> grid = [["X","*"],["#","X"]]
  <b>输出:</b> -1</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[row][col] 是 '*'、 'X'、 'O' 或 '#' 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid 中有且只有一个 '*' 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
