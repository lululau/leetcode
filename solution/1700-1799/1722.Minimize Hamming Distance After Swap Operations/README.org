* [[https://leetcode-cn.com/problems/minimize-hamming-distance-after-swap-operations][1722.
执行交换操作后的最小汉明距离]]
  :PROPERTIES:
  :CUSTOM_ID: 执行交换操作后的最小汉明距离
  :END:
[[./solution/1700-1799/1722.Minimize Hamming Distance After Swap Operations/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个整数数组 source 和 target ，长度都是 n 。还有一个数组
allowedSwaps ，其中每个 allowedSwaps[i] = [ai, bi] 表示你可以交换数组
source 中下标为 ai 和 bi（下标从 0 开始）的两个元素。注意，你可以按 任意
顺序 多次 交换一对特定下标指向的元素。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

相同长度的两个数组 source 和 target 间的 汉明距离
是元素不同的下标数量。形式上，其值等于满足 source[i] != target[i]
（下标从 0 开始）的下标 i（0 <= i <= n-1）的数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在对数组 source 执行 任意 数量的交换操作后，返回 source 和 target 间的
最小汉明距离 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]
  <strong>输出：</strong>1
  <strong>解释：</strong>source 可以按下述方式转换：
  - 交换下标 0 和 1 指向的元素：source = [<strong>2</strong>,<strong>1</strong>,3,4]
  - 交换下标 2 和 3 指向的元素：source = [2,1,<strong>4</strong>,<strong>3</strong>]
  source 和 target 间的汉明距离是 1 ，二者有 1 处元素不同，在下标 3 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []
  <strong>输出：</strong>2
  <strong>解释：</strong>不能对 source 执行交换操作。
  source 和 target 间的汉明距离是 2 ，二者有 2 处元素不同，在下标 1 和下标 2 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == source.length == target.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= source[i], target[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= allowedSwaps.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

allowedSwaps[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= ai, bi <= n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ai != bi

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
