* [[https://leetcode.com/problems/shortest-path-in-a-hidden-grid][1778.
Shortest Path in a Hidden Grid]]
  :PROPERTIES:
  :CUSTOM_ID: shortest-path-in-a-hidden-grid
  :END:
[[./solution/1700-1799/1778.Shortest Path in a Hidden Grid/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

This is an interactive problem.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

There is a robot in a hidden grid, and you are trying to get it from its
starting cell to the target cell in this grid. The grid is of size m x
n, and each cell in the grid is either empty or blocked. It is
guaranteed that the starting cell and the target cell are different, and
neither of them is blocked.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You want to find the minimum distance to the target cell. However, you
do not know the grid's dimensions, the starting cell, nor the target
cell. You are only allowed to ask queries to the GridMaster object.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Thr GridMaster class has the following functions:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

boolean canMove(char direction) Returns true if the robot can move in
that direction. Otherwise, it returns false.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void move(char direction) Moves the robot in that direction. If this
move would move the robot to a blocked cell or off the grid, the move
will be ignored, and the robot will remain in the same position.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean isTarget() Returns true if the robot is currently on the target
cell. Otherwise, it returns false.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Note that direction in the above functions should be a character from
{'U','D','L','R'}, representing the directions up, down, left, and
right, respectively.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum distance between the robot's initial starting cell
and the target cell. If there is no valid path between the cells, return
-1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Custom testing:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The test input is read as a 2D matrix grid of size m x n where:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] == -1 indicates that the robot is in cell (i, j) (the
starting cell).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] == 0 indicates that the cell (i, j) is blocked.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] == 1 indicates that the cell (i, j) is empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] == 2 indicates that the cell (i, j) is the target cell.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

There is exactly one -1 and 2 in grid. Remember that you will not have
this information in your code.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,2],[-1,0]]
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> One possible interaction is described below:
  The robot is initially standing on cell (1, 0), denoted by the -1.
  - master.canMove(&#39;U&#39;) returns true.
  - master.canMove(&#39;D&#39;) returns false.
  - master.canMove(&#39;L&#39;) returns false.
  - master.canMove(&#39;R&#39;) returns false.
  - master.move(&#39;U&#39;) moves the robot to the cell (0, 0).
  - master.isTarget() returns false.
  - master.canMove(&#39;U&#39;) returns false.
  - master.canMove(&#39;D&#39;) returns true.
  - master.canMove(&#39;L&#39;) returns false.
  - master.canMove(&#39;R&#39;) returns true.
  - master.move(&#39;R&#39;) moves the robot to the cell (0, 1).
  - master.isTarget() returns true. 
  We now know that the target is the cell (0, 1), and the shortest path to the target cell is 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[0,0,-1],[1,1,1],[2,0,0]]
  <strong>Output:</strong> 4
  <strong>Explanation:</strong>&nbsp;The minimum distance between the robot and the target cell is 4.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[-1,0],[0,2]]
  <strong>Output:</strong> -1
  <strong>Explanation:</strong>&nbsp;There is no path from the robot to the target cell.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n, m <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] is either -1, 0, 1, or 2.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There is exactly one -1 in grid.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There is exactly one 2 in grid.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
