* [[https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence][1713.
得到子序列的最少操作次数]]
  :PROPERTIES:
  :CUSTOM_ID: 得到子序列的最少操作次数
  :END:
[[./solution/1700-1799/1713.Minimum Operations to Make a Subsequence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个数组 target ，包含若干
互不相同 的整数，以及另一个整数数组 arr ，arr 可能 包含重复元素。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每一次操作中，你可以在 arr 的任意位置插入任一整数。比方说，如果 arr =
[1,4,1,2] ，那么你可以在中间添加
3 得到 [1,4,3,1,2] 。你可以在数组最开始或最后面添加整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回 最少 操作次数，使得 target 成为 arr 的一个子序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个数组的
子序列 指的是删除原数组的某些元素（可能一个元素都不删除），同时不改变其余元素的相对顺序得到的数组。比方说，[2,7,4] 是 [4,2,3,7,2,1,4] 的子序列（加粗元素），但 [2,4,2] 不是子序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>target = [5,1,3], <code>arr</code> = [9,4,2,3,4]
  <b>输出：</b>2
  <b>解释：</b>你可以添加 5 和 1 ，使得 arr 变为 [<strong>5</strong>,9,4,<strong>1</strong>,2,3,4] ，target 为 arr 的子序列。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>target = [6,4,8,1,3,2], <code>arr</code> = [4,7,6,2,3,8,6,1]
  <b>输出：</b>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target.length, arr.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target[i], arr[i] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target 不包含任何重复元素。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
