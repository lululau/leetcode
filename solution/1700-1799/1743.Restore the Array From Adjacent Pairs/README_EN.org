* [[https://leetcode.com/problems/restore-the-array-from-adjacent-pairs][1743.
Restore the Array From Adjacent Pairs]]
  :PROPERTIES:
  :CUSTOM_ID: restore-the-array-from-adjacent-pairs
  :END:
[[./solution/1700-1799/1743.Restore the Array From Adjacent Pairs/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is an integer array nums that consists of n unique elements, but
you have forgotten it. However, you do remember every pair of adjacent
elements in nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are given a 2D integer array adjacentPairs of size n - 1 where each
adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are
adjacent in nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed that every adjacent pair of elements nums[i] and
nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or
[nums[i+1], nums[i]]. The pairs can appear in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the original array nums. If there are multiple solutions, return
any of them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> adjacentPairs = [[2,1],[3,4],[3,2]]
  <strong>Output:</strong> [1,2,3,4]
  <strong>Explanation:</strong> This array has all its adjacent pairs in adjacentPairs.
  Notice that adjacentPairs[i] may not be in left-to-right order.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> adjacentPairs = [[4,-2],[1,4],[-3,1]]
  <strong>Output:</strong> [-2,4,1,-3]
  <strong>Explanation:</strong> There can be negative numbers.
  Another solution is [-3,1,4,-2], which would also be accepted.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> adjacentPairs = [[100000,-100000]]
  <strong>Output:</strong> [100000,-100000]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

nums.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

adjacentPairs.length == n - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

adjacentPairs[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= nums[i], ui, vi <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There exists some nums that has adjacentPairs as its pairs.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
