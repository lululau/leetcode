* [[https://leetcode-cn.com/problems/maximum-binary-string-after-change][1702.
修改后的最大二进制字符串]]
  :PROPERTIES:
  :CUSTOM_ID: 修改后的最大二进制字符串
  :END:
[[./solution/1700-1799/1702.Maximum Binary String After Change/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个二进制字符串 binary ，它仅有 0 或者 1 组成。你可以使用下面的操作任意次对它进行修改：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

操作 1 ：如果二进制串包含子字符串 "00" ，你可以用 "10" 将其替换。

#+begin_example
  <ul>
      <li>比方说， <code>"<strong>00</strong>010" -> "<strong>10</strong>010"</code></li>
  </ul>
  </li>
  <li>操作 2 ：如果二进制串包含子字符串 <code>"10"</code> ，你可以用 <code>"01"</code> 将其替换。
  <ul>
      <li>比方说， <code>"000<strong>10</strong>" -> "000<strong>01</strong>"</code></li>
  </ul>
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回执行上述操作任意次以后能得到的
最大二进制字符串 。如果二进制字符串 x 对应的十进制数字大于二进制字符串
y 对应的十进制数字，那么我们称二进制字符串 x 大于二进制字符串 y 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>binary = "000110"
  <b>输出：</b>"111011"
  <b>解释：</b>一个可行的转换为：
  "0001<strong>10</strong>" -> "0001<strong>01</strong>" 
  "<strong>00</strong>0101" -> "<strong>10</strong>0101" 
  "1<strong>00</strong>101" -> "1<strong>10</strong>101" 
  "110<strong>10</strong>1" -> "110<strong>01</strong>1" 
  "11<strong>00</strong>11" -> "11<strong>10</strong>11"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>binary = "01"
  <b>输出：</b>"01"
  <b>解释：</b>"01" 没办法进行任何转换。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= binary.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

binary 仅包含 '0' 和 '1' 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
