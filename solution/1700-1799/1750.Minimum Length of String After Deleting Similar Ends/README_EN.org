* [[https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends][1750.
Minimum Length of String After Deleting Similar Ends]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-length-of-string-after-deleting-similar-ends
  :END:
[[./solution/1700-1799/1750.Minimum Length of String After Deleting Similar Ends/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s consisting only of characters 'a', 'b', and 'c'. You
are asked to apply the following algorithm on the string any number of
times:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Pick a non-empty prefix from the string s where all the characters in
the prefix are equal.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Pick a non-empty suffix from the string s where all the characters in
this suffix are equal.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The prefix and the suffix should not intersect at any index.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The characters from the prefix and suffix must be the same.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Delete both the prefix and the suffix.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum length of s after performing the above operation any
number of times (possibly zero times).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;ca&quot;
  <strong>Output:</strong> 2
  <strong>Explanation: </strong>You can&#39;t remove any characters, so the string stays as is.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;cabaabac&quot;
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> An optimal sequence of operations is:
  - Take prefix = &quot;c&quot; and suffix = &quot;c&quot; and remove them, s = &quot;abaaba&quot;.
  - Take prefix = &quot;a&quot; and suffix = &quot;a&quot; and remove them, s = &quot;baab&quot;.
  - Take prefix = &quot;b&quot; and suffix = &quot;b&quot; and remove them, s = &quot;aa&quot;.
  - Take prefix = &quot;a&quot; and suffix = &quot;a&quot; and remove them, s = &quot;&quot;.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;aabccabba&quot;
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> An optimal sequence of operations is:
  - Take prefix = &quot;aa&quot; and suffix = &quot;a&quot; and remove them, s = &quot;bccabb&quot;.
  - Take prefix = &quot;b&quot; and suffix = &quot;bb&quot; and remove them, s = &quot;cca&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s only consists of characters 'a', 'b', and 'c'.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
