* [[https://leetcode.com/problems/closest-dessert-cost][1774. Closest
Dessert Cost]]
  :PROPERTIES:
  :CUSTOM_ID: closest-dessert-cost
  :END:
[[./solution/1700-1799/1774.Closest Dessert Cost/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You would like to make dessert and are preparing to buy the ingredients.
You have n ice cream base flavors and m types of toppings to choose
from. You must follow these rules when making your dessert:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

There must be exactly one ice cream base.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

You can add one or more types of topping or have no toppings at all.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are at most two of each type of topping.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You are given three inputs:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

baseCosts, an integer array of length n, where each baseCosts[i]
represents the price of the ith ice cream base flavor.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

toppingCosts, an integer array of length m, where each toppingCosts[i]
is the price of one of the ith topping.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target, an integer representing your target price for dessert.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You want to make a dessert with a total cost as close to target as
possible.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the closest possible cost of the dessert to target. If there are
multiple, return the lower one.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> baseCosts = [1,7], toppingCosts = [3,4], target = 10
  <strong>Output:</strong> 10
  <strong>Explanation:</strong> Consider the following combination (all 0-indexed):
  - Choose base 1: cost 7
  - Take 1 of topping 0: cost 1 x 3 = 3
  - Take 0 of topping 1: cost 0 x 4 = 0
  Total: 7 + 3 + 0 = 10.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> baseCosts = [2,3], toppingCosts = [4,5,100], target = 18
  <strong>Output:</strong> 17
  <strong>Explanation:</strong> Consider the following combination (all 0-indexed):
  - Choose base 1: cost 3
  - Take 1 of topping 0: cost 1 x 4 = 4
  - Take 2 of topping 1: cost 2 x 5 = 10
  - Take 0 of topping 2: cost 0 x 100 = 0
  Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> baseCosts = [3,10], toppingCosts = [2,5], target = 9
  <strong>Output:</strong> 8
  <strong>Explanation:</strong> It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> baseCosts = [10], toppingCosts = [1], target = 1
  <strong>Output:</strong> 10
  <strong>Explanation:</strong> Notice that you don&#39;t have to have any toppings, but you must have exactly one base.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == baseCosts.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

m == toppingCosts.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n, m <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= baseCosts[i], toppingCosts[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
