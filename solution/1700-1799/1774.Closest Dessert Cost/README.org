* [[https://leetcode-cn.com/problems/closest-dessert-cost][1774.
最接近目标价格的甜点成本]]
  :PROPERTIES:
  :CUSTOM_ID: 最接近目标价格的甜点成本
  :END:
[[./solution/1700-1799/1774.Closest Dessert Cost/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你打算做甜点，现在需要购买配料。目前共有 n 种冰激凌基料和 m
种配料可供选购。而制作甜点需要遵循以下几条规则：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

必须选择 一种 冰激凌基料。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

可以添加 一种或多种 配料，也可以不添加任何配料。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每种类型的配料 最多两份 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你以下三个输入：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

baseCosts ，一个长度为 n 的整数数组，其中每个 baseCosts[i] 表示第 i
种冰激凌基料的价格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

toppingCosts，一个长度为 m 的整数数组，其中每个 toppingCosts[i] 表示
一份 第 i 种冰激凌配料的价格。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target ，一个整数，表示你制作甜点的目标价格。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

你希望自己做的甜点总成本尽可能接近目标价格 target 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回最接近 target 的甜点成本。如果有多种方案，返回 成本相对较低 的一种。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>baseCosts = [1,7], toppingCosts = [3,4], target = 10
  <strong>输出：</strong>10
  <strong>解释：</strong>考虑下面的方案组合（所有下标均从 0 开始）：
  - 选择 1 号基料：成本 7
  - 选择 1 份 0 号配料：成本 1 x 3 = 3
  - 选择 0 份 1 号配料：成本 0 x 4 = 0
  总成本：7 + 3 + 0 = 10 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>baseCosts = [2,3], toppingCosts = [4,5,100], target = 18
  <strong>输出：</strong>17
  <strong>解释：</strong>考虑下面的方案组合（所有下标均从 0 开始）：
  - 选择 1 号基料：成本 3
  - 选择 1 份 0 号配料：成本 1 x 4 = 4
  - 选择 2 份 1 号配料：成本 2 x 5 = 10
  - 选择 0 份 2 号配料：成本 0 x 100 = 0
  总成本：3 + 4 + 10 + 0 = 17 。不存在总成本为 18 的甜点制作方案。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>baseCosts = [3,10], toppingCosts = [2,5], target = 9
  <strong>输出：</strong>8
  <strong>解释：</strong>可以制作总成本为 8 和 10 的甜点。返回 8 ，因为这是成本更低的方案。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>baseCosts = [10], toppingCosts = [1], target = 1
  <strong>输出：</strong>10
  <strong>解释：</strong>注意，你可以选择不添加任何配料，但你必须选择一种基料。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == baseCosts.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

m == toppingCosts.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n, m <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= baseCosts[i], toppingCosts[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
