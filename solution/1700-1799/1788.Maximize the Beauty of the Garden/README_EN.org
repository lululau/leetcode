* [[https://leetcode.com/problems/maximize-the-beauty-of-the-garden][1788.
Maximize the Beauty of the Garden]]
  :PROPERTIES:
  :CUSTOM_ID: maximize-the-beauty-of-the-garden
  :END:
[[./solution/1700-1799/1788.Maximize the Beauty of the Garden/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is a garden of n flowers, and each flower has an integer beauty
value. The flowers are arranged in a line. You are given an integer
array flowers of size n and each flowers[i] represents the beauty of the
ith flower.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A garden is valid if it meets these conditions:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The garden has at least two flowers.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The first and the last flower of the garden have the same beauty value.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

As the appointed gardener, you have the ability to remove any (possibly
none) flowers from the garden. You want to remove flowers in a way that
makes the remaining garden valid. The beauty of the garden is the sum of
the beauty of all the remaining flowers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum possible beauty of some valid garden after you have
removed any (possibly none) flowers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> flowers = [1,2,3,1,2]

  <strong>Output:</strong> 8

  <strong>Explanation:</strong> You can produce the valid garden [2,3,1,2] to have a total beauty of 2 + 3 + 1 + 2 = 8.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> flowers = [100,1,1,-3,1]

  <strong>Output:</strong> 3

  <strong>Explanation:</strong> You can produce the valid garden [1,1,1] to have a total beauty of 1 + 1 + 1 = 3.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> flowers = [-1,-2,0,-1]

  <strong>Output:</strong> -2

  <strong>Explanation:</strong> You can produce the valid garden [-1,-1] to have a total beauty of -1 + -1 = -2.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= flowers.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= flowers[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is possible to create a valid garden by removing some (possibly none)
flowers.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
