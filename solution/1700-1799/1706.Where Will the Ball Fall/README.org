* [[https://leetcode-cn.com/problems/where-will-the-ball-fall][1706.
球会落何处]]
  :PROPERTIES:
  :CUSTOM_ID: 球会落何处
  :END:
[[./solution/1700-1799/1706.Where Will the Ball Fall/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

用一个大小为 m x n 的二维网格 grid 表示一个箱子。你有 n
颗球。箱子的顶部和底部都是开着的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的
"V" 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回一个大小为 n 的数组 answer ，其中 answer[i] 是球放在顶部的第 i
列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
  <strong>输出：</strong>[1,-1,-1,-1,-1]
  <strong>解释：</strong>示例如图：
  b0 球开始放在第 0 列上，最终从箱子底部第 1 列掉出。
  b1 球开始放在第 1 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
  b2 球开始放在第 2 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
  b3 球开始放在第 3 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
  b4 球开始放在第 4 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[-1]]
  <strong>输出：</strong>[-1]
  <strong>解释：</strong>球被卡在箱子左侧边上。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
  <strong>输出：</strong>[0,1,2,3,4,-1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

grid[i][j] 为 1 或 -1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
