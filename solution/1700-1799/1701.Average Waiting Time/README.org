* [[https://leetcode-cn.com/problems/average-waiting-time][1701.
平均等待时间]]
  :PROPERTIES:
  :CUSTOM_ID: 平均等待时间
  :END:
[[./solution/1700-1799/1701.Average Waiting Time/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

有一个餐厅，只有一位厨师。你有一个顾客数组 customers ，其中 customers[i]
= [arrivali, timei] ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

arrivali 是第 i 位顾客到达的时间，到达时间按 非递减 顺序排列。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

timei 是给第 i 位顾客做菜需要的时间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

当一位顾客到达时，他将他的订单给厨师，厨师一旦空闲的时候就开始做这位顾客的菜。每位顾客会一直等待到厨师完成他的订单。厨师同时只能做一个人的订单。厨师会严格按照
订单给他的顺序 做菜。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回所有顾客需要等待的
平均 时间。与标准答案误差在 10-5 范围以内，都视为正确结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>customers = [[1,2],[2,5],[4,3]]
  <b>输出：</b>5.00000
  <strong>解释：
  </strong>1) 第一位顾客在时刻 1 到达，厨师拿到他的订单并在时刻 1 立马开始做菜，并在时刻 3 完成，第一位顾客等待时间为 3 - 1 = 2 。
  2) 第二位顾客在时刻 2 到达，厨师在时刻 3 开始为他做菜，并在时刻 8 完成，第二位顾客等待时间为 8 - 2 = 6 。
  3) 第三位顾客在时刻 4 到达，厨师在时刻 8 开始为他做菜，并在时刻 11 完成，第三位顾客等待时间为 11 - 4 = 7 。
  平均等待时间为 (2 + 6 + 7) / 3 = 5 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>customers = [[5,2],[5,4],[10,3],[20,1]]
  <b>输出：</b>3.25000
  <strong>解释：
  </strong>1) 第一位顾客在时刻 5 到达，厨师拿到他的订单并在时刻 5 立马开始做菜，并在时刻 7 完成，第一位顾客等待时间为 7 - 5 = 2 。
  2) 第二位顾客在时刻 5 到达，厨师在时刻 7 开始为他做菜，并在时刻 11 完成，第二位顾客等待时间为 11 - 5 = 6 。
  3) 第三位顾客在时刻 10 到达，厨师在时刻 11 开始为他做菜，并在时刻 14 完成，第三位顾客等待时间为 14 - 10 = 4 。
  4) 第四位顾客在时刻 20 到达，厨师拿到他的订单并在时刻 20 立马开始做菜，并在时刻 21 完成，第四位顾客等待时间为 21 - 20 = 1 。
  平均等待时间为 (2 + 6 + 4 + 1) / 4 = 3.25 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= customers.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arrivali, timei <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arrivali <= arrivali+1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

记 totalWaitingTime 表示总等待时间，f 表示当次做菜完成时间。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def averageWaitingTime(self, customers: List[List[int]]) -> float:
          f = total_waiting_time = 0
          for arrival, time in customers:
              f = max(arrival, f) + time
              total_waiting_time += (f - arrival)
          return total_waiting_time / len(customers)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public double averageWaitingTime(int[][] customers) {
          int f = 0;
          double totalWaitingTime = 0;
          for (int[] customer : customers) {
              f = Math.max(f, customer[0]) + customer[1];
              totalWaitingTime += (f - customer[0]);
          }
          return totalWaitingTime / customers.length;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
