* [[https://leetcode.com/problems/average-waiting-time][1701. Average
Waiting Time]]
  :PROPERTIES:
  :CUSTOM_ID: average-waiting-time
  :END:
[[./solution/1700-1799/1701.Average Waiting Time/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is a restaurant with a single chef. You are given an array
customers, where customers[i] = [arrivali, timei]:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

arrivali is the arrival time of the ith customer. The arrival times are
sorted in non-decreasing order.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

timei is the time needed to prepare the order of the ith customer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

When a customer arrives, he gives the chef his order, and the chef
starts preparing it once he is idle. The customer waits till the chef
finishes preparing his order. The chef does not prepare food for more
than one customer at a time. The chef prepares food for customers in the
order they were given in the input.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the average waiting time of all customers. Solutions within 10-5
from the actual answer are considered accepted.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> customers = [[1,2],[2,5],[4,3]]
  <strong>Output:</strong> 5.00000
  <strong>Explanation:
  </strong>1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.
  2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.
  3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.
  So the average waiting time = (2 + 6 + 7) / 3 = 5.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> customers = [[5,2],[5,4],[10,3],[20,1]]
  <strong>Output:</strong> 3.25000
  <strong>Explanation:
  </strong>1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.
  2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.
  3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.
  4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.
  So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= customers.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arrivali, timei <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

arrivali <= arrivali+1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def averageWaitingTime(self, customers: List[List[int]]) -> float:
          f = total_waiting_time = 0
          for arrival, time in customers:
              f = max(arrival, f) + time
              total_waiting_time += (f - arrival)
          return total_waiting_time / len(customers)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public double averageWaitingTime(int[][] customers) {
          int f = 0;
          double totalWaitingTime = 0;
          for (int[] customer : customers) {
              f = Math.max(f, customer[0]) + customer[1];
              totalWaitingTime += (f - customer[0]);
          }
          return totalWaitingTime / customers.length;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
