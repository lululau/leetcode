* [[https://leetcode-cn.com/problems/maximum-number-of-consecutive-values-you-can-make][1798.
你能构造出连续值的最大数目]]
  :PROPERTIES:
  :CUSTOM_ID: 你能构造出连续值的最大数目
  :END:
[[./solution/1700-1799/1798.Maximum Number of Consecutive Values You Can Make/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个长度为
n 的整数数组 coins ，它代表你拥有的 n 个硬币。第 i 个硬币的值为 coins[i] 。如果你从这些硬币中选出一部分硬币，它们的和为 x ，那么称，你可以 构造 出 x 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请返回从 0 开始（包括 0 ），你最多能 构造 出多少个连续整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可能有多个相同值的硬币。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>coins = [1,3]
  <b>输出：</b>2
  <strong>解释：</strong>你可以得到以下这些值：
  - 0：什么都不取 []
  - 1：取 [1]
  从 0 开始，你可以构造出 2 个连续整数。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>coins = [1,1,1,4]
  <b>输出：</b>8
  <strong>解释：</strong>你可以得到以下这些值：
  - 0：什么都不取 []
  - 1：取 [1]
  - 2：取 [1,1]
  - 3：取 [1,1,1]
  - 4：取 [4]
  - 5：取 [4,1]
  - 6：取 [4,1,1]
  - 7：取 [4,1,1,1]
  从 0 开始，你可以构造出 8 个连续整数。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>nums = [1,4,10,3,1]
  <b>输出：</b>20</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

coins.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 4 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= coins[i] <= 4 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

先对 =coins= 数组进行排序。

假设前 i 个数所有构造的的连续整数的个数为 res，初始化为 1。

遍历排序后的 =coins= 数组：

- 若 =coins[i] > res=，说明接下来无法组成 =res + 1=
  个连续整数，跳出循环。

  #+begin_quote
    对于 =1, 3=，若遍历到 3，此时前面的连续整数个数为
    2，即连续整数为：=0, 1=。此时 3 大于 2，无法构成连续整数
    =0, 1, 2=，所以最大连续整数个数为 2。
  #+end_quote

- 若 =coins[i] <= res=，说明有 =coins[i]= 个数也能构成连续整数。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def getMaximumConsecutive(self, coins: List[int]) -> int:
          res = 1
          for coin in sorted(coins):
              if coin > res:
                  break
              res += coin
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int getMaximumConsecutive(int[] coins) {
          int res = 1;
          Arrays.sort(coins);
          for (int coin : coins) {
              if (coin > res) {
                  break;
              }
              res += coin;
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
