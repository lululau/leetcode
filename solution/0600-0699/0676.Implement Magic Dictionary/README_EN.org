* [[https://leetcode.com/problems/implement-magic-dictionary][676.
Implement Magic Dictionary]]
  :PROPERTIES:
  :CUSTOM_ID: implement-magic-dictionary
  :END:
[[./solution/0600-0699/0676.Implement Magic Dictionary/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a data structure that is initialized with a list of different
words. Provided a string, you should determine if you can change exactly
one character in this string to match any word in the data structure.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the MagicDictionary class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MagicDictionary() Initializes the object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void buildDict(String[] dictionary) Sets the data structure with an
array of distinct strings dictionary.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool search(String searchWord) Returns true if you can change exactly
one character in searchWord to match any string in the data structure,
otherwise returns false.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;MagicDictionary&quot;, &quot;buildDict&quot;, &quot;search&quot;, &quot;search&quot;, &quot;search&quot;, &quot;search&quot;]
  [[], [[&quot;hello&quot;, &quot;leetcode&quot;]], [&quot;hello&quot;], [&quot;hhllo&quot;], [&quot;hell&quot;], [&quot;leetcoded&quot;]]
  <strong>Output</strong>
  [null, null, false, true, false, false]

  <strong>Explanation</strong>
  MagicDictionary magicDictionary = new MagicDictionary();
  magicDictionary.buildDict([&quot;hello&quot;, &quot;leetcode&quot;]);
  magicDictionary.search(&quot;hello&quot;); // return False
  magicDictionary.search(&quot;hhllo&quot;); // We can change the second &#39;h&#39; to &#39;e&#39; to match &quot;hello&quot; so we return True
  magicDictionary.search(&quot;hell&quot;); // return False
  magicDictionary.search(&quot;leetcoded&quot;); // return False
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= dictionary.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= dictionary[i].length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

dictionary[i] consists of only lower-case English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the strings in dictionary are distinct.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= searchWord.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

searchWord consists of only lower-case English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

buildDict will be called only once before search.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 100 calls will be made to search.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
