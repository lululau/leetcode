* [[https://leetcode-cn.com/problems/implement-magic-dictionary][676.
实现一个魔法字典]]
  :PROPERTIES:
  :CUSTOM_ID: 实现一个魔法字典
  :END:
[[./solution/0600-0699/0676.Implement Magic Dictionary/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

设计一个使用单词列表进行初始化的数据结构，单词列表中的单词 互不相同 。
如果给出一个单词，请判定能否只将这个单词中一个字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 MagicDictionary 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MagicDictionary() 初始化对象

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void buildDict(String[] dictionary) 使用字符串数组 dictionary
设定该数据结构，dictionary 中的字符串互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

bool search(String searchWord) 给定一个字符串 searchWord
，判定能否只将字符串中 一个
字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回
true ；否则，返回 false 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入</strong>
  ["MagicDictionary", "buildDict", "search", "search", "search", "search"]
  [[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]
  <strong>输出</strong>
  [null, null, false, true, false, false]

  <strong>解释</strong>
  MagicDictionary magicDictionary = new MagicDictionary();
  magicDictionary.buildDict(["hello", "leetcode"]);
  magicDictionary.search("hello"); // 返回 False
  magicDictionary.search("hhllo"); // 将第二个 'h' 替换为 'e' 可以匹配 "hello" ，所以返回 True
  magicDictionary.search("hell"); // 返回 False
  magicDictionary.search("leetcoded"); // 返回 False
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= dictionary.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= dictionary[i].length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

dictionary[i] 仅由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

dictionary 中的所有字符串 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= searchWord.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

searchWord 仅由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

buildDict 仅在 search 之前调用一次

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 100 次 search

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
