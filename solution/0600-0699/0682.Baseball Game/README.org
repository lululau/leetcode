* [[https://leetcode-cn.com/problems/baseball-game][682. 棒球比赛]]
  :PROPERTIES:
  :CUSTOM_ID: 棒球比赛
  :END:
[[./solution/0600-0699/0682.Baseball Game/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中
ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

整数 x - 表示本回合新获得分数 x

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"+" -
表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"D" -
表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"C" -
表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回记录中所有得分的总和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>ops = ["5","2","C","D","+"]
  <strong>输出：</strong>30
  <strong>解释：</strong>
  "5" - 记录加 5 ，记录现在是 [5]
  "2" - 记录加 2 ，记录现在是 [5, 2]
  "C" - 使前一次得分的记录无效并将其移除，记录现在是 [5].
  "D" - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].
  "+" - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].
  所有得分的总和 5 + 10 + 15 = 30
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>ops = ["5","-2","4","C","D","9","+","+"]
  <strong>输出：</strong>27
  <strong>解释：</strong>
  "5" - 记录加 5 ，记录现在是 [5]
  "-2" - 记录加 -2 ，记录现在是 [5, -2]
  "4" - 记录加 4 ，记录现在是 [5, -2, 4]
  "C" - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]
  "D" - 记录加 2 * -2 = -4 ，记录现在是 [5, -2, -4]
  "9" - 记录加 9 ，记录现在是 [5, -2, -4, 9]
  "+" - 记录加 -4 + 9 = 5 ，记录现在是 [5, -2, -4, 9, 5]
  "+" - 记录加 9 + 5 = 14 ，记录现在是 [5, -2, -4, 9, 5, 14]
  所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 = 27
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>ops = ["1"]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ops.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

ops[i] 为 "C"、"D"、"+"，或者一个表示整数的字符串。整数范围是 [-3 * 104,
3 * 104]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于 "+" 操作，题目数据保证记录此操作时前面总是存在两个有效的分数

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于 "C" 和 "D" 操作，题目数据保证记录此操作时前面总是存在一个有效的分数

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

栈实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def calPoints(self, ops: List[str]) -> int:
          stack = []
          for op in ops:
              if op == 'C':
                  stack.pop()
              elif op == 'D':
                  stack.append(stack[-1] << 1)
              elif op == '+':
                  stack.append(stack[-1] + stack[-2])
              else:
                  stack.append(int(op))
          return sum(stack)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int calPoints(String[] ops) {
          Deque<Integer> stack = new ArrayDeque<>();
          for (String op : ops) {
              if ("C".equals(op)) {
                  stack.pop();
              } else if ("D".equals(op)) {
                  stack.push(stack.peek() << 1);
              } else if ("+".equals(op)) {
                  Integer a = stack.pop();
                  Integer b = stack.peek();
                  stack.push(a);
                  stack.push(a + b);
              } else {
                  stack.push(Integer.valueOf(op));
              }
          }
          int res = 0;
          for (Integer score : stack) {
              res += score;
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
