* [[https://leetcode-cn.com/problems/stickers-to-spell-word][691.
贴纸拼词]]
  :PROPERTIES:
  :CUSTOM_ID: 贴纸拼词
  :END:
[[./solution/0600-0699/0691.Stickers to Spell Word/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们给出了 N 种不同类型的贴纸。每个贴纸上都有一个小写的英文单词。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你希望从自己的贴纸集合中裁剪单个字母并重新排列它们，从而拼写出给定的目标字符串
target。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果你愿意的话，你可以不止一次地使用每一张贴纸，而且每一张贴纸的数量都是无限的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

拼出目标 target 所需的最小贴纸数量是多少？如果任务不可能，则返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输入：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>[&quot;with&quot;, &quot;example&quot;, &quot;science&quot;], &quot;thehat&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

输出：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

解释：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>我们可以使用 2 个 &quot;with&quot; 贴纸，和 1 个 &quot;example&quot; 贴纸。
  把贴纸上的字母剪下来并重新排列后，就可以形成目标 &ldquo;thehat&ldquo; 了。
  此外，这是形成目标字符串所需的最小贴纸数量。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输入：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>[&quot;notice&quot;, &quot;possible&quot;], &quot;basicbasic&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

输出：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>-1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

解释：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>我们不能通过剪切给定贴纸的字母来形成目标&ldquo;basicbasic&rdquo;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

stickers 长度范围是 [1, 50]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

stickers 由小写英文单词组成（不带撇号）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target 的长度在 [1, 15] 范围内，由小写字母组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

在所有的测试案例中，所有的单词都是从 1000
个最常见的美国英语单词中随机选取的，目标是两个随机单词的串联。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

时间限制可能比平时更具挑战性。预计 50
个贴纸的测试案例平均可在35ms内解决。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
