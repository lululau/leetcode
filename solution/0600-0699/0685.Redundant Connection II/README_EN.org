* [[https://leetcode.com/problems/redundant-connection-ii][685.
Redundant Connection II]]
  :PROPERTIES:
  :CUSTOM_ID: redundant-connection-ii
  :END:
[[./solution/0600-0699/0685.Redundant Connection II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In this problem, a rooted tree is a directed graph such that, there is
exactly one node (the root) for which all other nodes are descendants of
this node, plus every node has exactly one parent, except for the root
node which has no parents.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The given input is a directed graph that started as a rooted tree with n
nodes (with distinct values from 1 to n), with one additional directed
edge added. The added edge has two different vertices chosen from 1 to
n, and was not an edge that already existed.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The resulting graph is given as a 2D-array of edges. Each element of
edges is a pair [ui, vi] that represents a directed edge connecting
nodes ui and vi, where ui is a parent of child vi.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an edge that can be removed so that the resulting graph is a
rooted tree of n nodes. If there are multiple answers, return the answer
that occurs last in the given 2D-array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> edges = [[1,2],[1,3],[2,3]]
  <strong>Output:</strong> [2,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]
  <strong>Output:</strong> [4,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == edges.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ui, vi <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
