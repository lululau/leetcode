* [[https://leetcode-cn.com/problems/redundant-connection-ii][685.
冗余连接 II]]
  :PROPERTIES:
  :CUSTOM_ID: 冗余连接-ii
  :END:
[[./solution/0600-0699/0685.Redundant Connection II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在本问题中，有根树指满足以下条件的 有向
图。该树只有一个根节点，所有其他节点都是该根节点的后继。该树除了根节点之外的每一个节点都有且只有一个父节点，而根节点没有父节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

输入一个有向图，该图由一个有着 n 个节点（节点值不重复，从 1 到
n）的树及一条附加的有向边构成。附加的边包含在 1 到 n
中的两个不同顶点间，这条附加的边不属于树中已存在的边。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

结果图是一个以边组成的二维数组 edges 。 每个元素是一对 [ui,
vi]，用以表示 有向 图中连接顶点 ui 和顶点 vi 的边，其中 ui 是 vi
的一个父节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回一条能删除的边，使得剩下的图是有 n
个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>edges = [[1,2],[1,3],[2,3]]
  <strong>输出：</strong>[2,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]
  <strong>输出：</strong>[4,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == edges.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

edges[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= ui, vi <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
