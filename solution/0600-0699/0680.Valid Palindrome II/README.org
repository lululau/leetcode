* [[https://leetcode-cn.com/problems/valid-palindrome-ii][680.
验证回文字符串 Ⅱ]]
  :PROPERTIES:
  :CUSTOM_ID: 验证回文字符串-ⅱ
  :END:
[[./solution/0600-0699/0680.Valid Palindrome II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> &quot;aba&quot;
  <strong>输出:</strong> True
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> &quot;abca&quot;
  <strong>输出:</strong> True
  <strong>解释:</strong> 你可以删除c字符。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def validPalindrome(self, s: str) -> bool:
          def isPalindrome(s):
              i, j = 0, len(s) - 1
              while i < j:
                  if s[i] != s[j]:
                      return False
                  i += 1
                  j -= 1
              return True

          i, j = 0, len(s) - 1
          while i < j:
              if s[i] != s[j]:
                  return isPalindrome(s[i: j]) or isPalindrome(s[i + 1: j + 1])
              i += 1
              j -= 1
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean validPalindrome(String s) {
          for (int i = 0, j = s.length() - 1; i < j; ++i, --j) {
              if (s.charAt(i) != s.charAt(j)) {
                  return isPalindrome(s.substring(i, j)) || isPalindrome(s.substring(i + 1, j + 1));
              }
          }
          return true;
      }

      private boolean isPalindrome(String s) {
          for (int i = 0, j = s.length() - 1; i < j; ++i, --j) {
              if (s.charAt(i) != s.charAt(j)) {
                  return false;
              }
          }
          return true;
      }
  }
#+end_src

*** *TypeScript*
    :PROPERTIES:
    :CUSTOM_ID: typescript
    :END:
#+begin_example
  function validPalindrome(s: string): boolean {
      for (let i: number = 0, j = s.length - 1; i < j; ++i, --j) {
          if (s.charAt(i) != s.charAt(j)) {
              return isPalinddrome(s.slice(i, j)) || isPalinddrome(s.slice(i + 1, j + 1));
          }
      }
      return true;
  };

  function isPalinddrome(s: string): boolean {
      for (let i: number = 0, j = s.length - 1; i < j; ++i, --j) {
          if (s.charAt(i) != s.charAt(j)) {
              return false;
          }
      }
      return true;
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
