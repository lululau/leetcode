* [[https://leetcode.com/problems/design-search-autocomplete-system][642.
Design Search Autocomplete System]]
  :PROPERTIES:
  :CUSTOM_ID: design-search-autocomplete-system
  :END:
[[./solution/0600-0699/0642.Design Search Autocomplete System/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a search autocomplete system for a search engine. Users may input
a sentence (at least one word and end with a special character '#'). For
each character they type except '#', you need to return the top 3
historical hot sentences that have prefix the same as the part of
sentence already typed. Here are the specific rules:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The hot degree for a sentence is defined as the number of times a user
typed the exactly same sentence before.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The returned top 3 hot sentences should be sorted by hot degree (The
first is the hottest one). If several sentences have the same degree of
hot, you need to use ASCII-code order (smaller one appears first).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If less than 3 hot sentences exist, then just return as many as you can.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

When the input is a special character, it means the sentence ends, and
in this case, you need to return an empty list.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Your job is to implement the following functions:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The constructor function:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

AutocompleteSystem(String[] sentences, int[] times): This is the
constructor. The input is historical data. Sentences is a string array
consists of previously typed sentences. Times is the corresponding times
a sentence has been typed. Your system should record these historical
data.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Now, the user wants to input a new sentence. The following function will
provide the next character the user types:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

List<String> input(char c): The input c is the next character typed by
the user. The character will only be lower-case letters ('a' to 'z'),
blank space (' ') or a special character ('#'). Also, the previously
typed sentence should be recorded in your system. The output will be the
top 3 historical hot sentences that have prefix the same as the part of
sentence already typed.

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <p>
#+end_html

Example:

Operation: AutocompleteSystem(["i love you", "island","ironman", "i love
leetcode"], [5,3,2,2])

The system have already tracked down the following sentences and their
corresponding times:

"i love you" : 5 times

"island" : 3 times

"ironman" : 2 times

"i love leetcode" : 2 times

Now, the user begins another search:

Operation: input('i')

Output: ["i love you", "island","i love leetcode"]

Explanation:

There are four sentences that have prefix "i". Among them, "ironman" and
"i love leetcode" have same hot degree. Since ' ' has ASCII code 32 and
'r' has ASCII code 114, "i love leetcode" should be in front of
"ironman". Also we only need to output top 3 hot sentences, so "ironman"
will be ignored.

Operation: input(' ')

Output: ["i love you","i love leetcode"]

Explanation:

There are only two sentences that have prefix "i ".

Operation: input('a')

Output: []

Explanation:

There are no sentences that have prefix "i a".

Operation: input('#')

Output: []

Explanation:

The user finished the input, the sentence "i a" should be saved as a
historical sentence in system. And the following input will be counted
as a new search.

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The input sentence will always start with a letter and end with '#', and
only one blank space will exist between two words.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The number of complete sentences that to be searched won't exceed 100.
The length of each sentence including those in the historical data won't
exceed 100.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Please use double-quote instead of single-quote when you write test
cases even for a character input.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Please remember to RESET your class variables declared in class
AutocompleteSystem, as static/class variables are persisted across
multiple test cases. Please see here for more details.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
