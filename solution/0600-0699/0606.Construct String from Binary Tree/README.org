* [[https://leetcode-cn.com/problems/construct-string-from-binary-tree][606.
根据二叉树创建字符串]]
  :PROPERTIES:
  :CUSTOM_ID: 根据二叉树创建字符串
  :END:
[[./solution/0600-0699/0606.Construct String from Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

空节点则用一对空括号 "()"
表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 二叉树: [1,2,3,4]
         1
       /   \
      2     3
     /    
    4     

  <strong>输出:</strong> &quot;1(2(4))(3)&quot;

  <strong>解释:</strong> 原本将是&ldquo;1(2(4)())(3())&rdquo;，
  在你省略所有不必要的空括号对之后，
  它将是&ldquo;1(2(4))(3)&rdquo;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 二叉树: [1,2,3,null,4]
         1
       /   \
      2     3
       \  
        4 

  <strong>输出:</strong> &quot;1(2()(4))(3)&quot;

  <strong>解释:</strong> 和第一个示例相似，
  除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
