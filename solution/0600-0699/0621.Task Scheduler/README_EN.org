* [[https://leetcode.com/problems/task-scheduler][621. Task Scheduler]]
  :PROPERTIES:
  :CUSTOM_ID: task-scheduler
  :END:
[[./solution/0600-0699/0621.Task Scheduler/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a characters array tasks, representing the tasks a CPU needs to
do, where each letter represents a different task. Tasks could be done
in any order. Each task is done in one unit of time. For each unit of
time, the CPU could complete either one task or just be idle.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

However, there is a non-negative integer n that represents the cooldown
period between two same tasks (the same letter in the array), that is
that there must be at least n units of time between any two same tasks.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the least number of units of times that the CPU will take to
finish all the given tasks.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2
  <strong>Output:</strong> 8
  <strong>Explanation:</strong> 
  A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B
  There is at least 2 units of time between any two same tasks.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 0
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> On this case any permutation of size 6 would work since n = 0.
  [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]
  [&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;]
  [&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;]
  ...
  And so on.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;], n = 2
  <strong>Output:</strong> 16
  <strong>Explanation:</strong> 
  One possible solution is
  A -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= task.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

tasks[i] is upper-case English letter.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The integer n is in the range [0, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
