* [[https://leetcode-cn.com/problems/task-scheduler][621. 任务调度器]]
  :PROPERTIES:
  :CUSTOM_ID: 任务调度器
  :END:
[[./solution/0600-0699/0621.Task Scheduler/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个用字符数组 tasks 表示的 CPU
需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在
1 个单位时间内执行完。在任何一个单位时间，CPU
可以完成一个任务，或者处于待命状态。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

然而，两个 相同种类 的任务之间必须有长度为整数 n
的冷却时间，因此至少有连续 n 个单位时间内 CPU
在执行不同的任务，或者在待命状态。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你需要计算完成所有任务所需要的 最短时间 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tasks = ["A","A","A","B","B","B"], n = 2
  <strong>输出：</strong>8
  <strong>解释：</strong>A -> B -> (待命) -> A -> B -> (待命) -> A -> B
       在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。 </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tasks = ["A","A","A","B","B","B"], n = 0
  <strong>输出：</strong>6
  <strong>解释：</strong>在这种情况下，任何大小为 6 的排列都可以满足要求，因为 n = 0
  ["A","A","A","B","B","B"]
  ["A","B","A","B","A","B"]
  ["B","B","B","A","A","A"]
  ...
  诸如此类
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
  <strong>输出：</strong>16
  <strong>解释：</strong>一种可能的解决方案是：
       A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (待命) -> (待命) -> A -> (待命) -> (待命) -> A
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= task.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

tasks[i] 是大写英文字母

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n 的取值范围为 [0, 100]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
