* [[https://leetcode.com/problems/maximum-binary-tree][654. Maximum
Binary Tree]]
  :PROPERTIES:
  :CUSTOM_ID: maximum-binary-tree
  :END:
[[./solution/0600-0699/0654.Maximum Binary Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an integer array nums with no duplicates. A maximum binary
tree can be built recursively from nums using the following algorithm:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Create a root node whose value is the maximum value in nums.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Recursively build the left subtree on the subarray prefix to the left of
the maximum value.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Recursively build the right subtree on the subarray suffix to the right
of the maximum value.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum binary tree built from nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [3,2,1,6,0,5]
  <strong>Output:</strong> [6,3,5,null,2,0,null,null,1]
  <strong>Explanation:</strong> The recursive calls are as follow:
  - The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].
      - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].
          - Empty array, so no child.
          - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].
              - Empty array, so no child.
              - Only one element, so child is a node with value 1.
      - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].
          - Only one element, so child is a node with value 0.
          - Empty array, so no child.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [3,2,1]
  <strong>Output:</strong> [3,null,2,null,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All integers in nums are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
