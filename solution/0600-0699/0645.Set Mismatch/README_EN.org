* [[https://leetcode.com/problems/set-mismatch][645. Set Mismatch]]
  :PROPERTIES:
  :CUSTOM_ID: set-mismatch
  :END:
[[./solution/0600-0699/0645.Set Mismatch/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You have a set of integers s, which originally contains all the numbers
from 1 to n. Unfortunately, due to some error, one of the numbers in s
got duplicated to another number in the set, which results in repetition
of one number and loss of another number.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are given an integer array nums representing the data status of this
set after the error.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Find the number that occurs twice and the number that is missing and
return them in the form of an array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,2,2,4]
  <strong>Output:</strong> [2,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,1]
  <strong>Output:</strong> [1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def findErrorNums(self, nums: List[int]) -> List[int]:
          res = 0
          for num in nums:
              res ^= num
          for i in range(1, len(nums) + 1):
              res ^= i
          pos = 0
          while (res & 1) == 0:
              res >>= 1
              pos += 1
          a = b = 0
          for num in nums:
              if ((num >> pos) & 1) == 0:
                  a ^= num
              else:
                  b ^= num
          for i in range(1, len(nums) + 1):
              if ((i >> pos) & 1) == 0:
                  a ^= i
              else:
                  b ^= i
          for num in nums:
              if num == a:
                  return [a, b]
          return [b, a]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[] findErrorNums(int[] nums) {
          int res = 0;
          for (int num : nums) {
              res ^= num;
          }
          for (int i = 1, n = nums.length; i < n + 1; ++i) {
              res ^= i;
          }
          int pos = 0;
          while ((res & 1) == 0) {
              res >>= 1;
              ++pos;
          }
          int a = 0, b = 0;
          for (int num : nums) {
              if (((num >> pos) & 1) == 0) {
                  a ^= num;
              } else {
                  b ^= num;
              }
          }
          for (int i = 1, n = nums.length; i < n + 1; ++i) {
              if (((i >> pos) & 1) == 0) {
                  a ^= i;
              } else {
                  b ^= i;
              }
          }
          for (int num : nums) {
              if (num == a) {
                  return new int[]{a, b};
              }
          }
          return new int[]{b, a};
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
