* [[https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence][674.
最长连续递增序列]]
  :PROPERTIES:
  :CUSTOM_ID: 最长连续递增序列
  :END:
[[./solution/0600-0699/0674.Longest Continuous Increasing Subsequence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个未经排序的整数数组，找到最长且
连续递增的子序列，并返回该序列的长度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

连续递增的子序列 可以由两个下标 l 和 r（l < r）确定，如果对于每个 l <= i
< r，都有 nums[i] < nums[i + 1] ，那么子序列 [nums[l], nums[l + 1], ...,
nums[r - 1], nums[r]] 就是连续递增子序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,3,5,4,7]
  <strong>输出：</strong>3
  <strong>解释：</strong>最长连续递增序列是 [1,3,5], 长度为3。
  尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [2,2,2,2,2]
  <strong>输出：</strong>1
  <strong>解释：</strong>最长连续递增序列是 [2], 长度为1。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= nums[i] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

设 f(i) 表示将数组第 i
项作为最长连续递增子序列的最后一项时，子序列的长度。

那么，当 =nums[i - 1] < nums[i]=，即 =f(i) = f(i - 1)= + 1，否则
=f(i) = 1=。问题转换为求 f(i) (=i ∈ [0 ,n - 1]=) 的最大值。

由于 f(i) 只与前一项 f(i - 1) 有关联，故不需要用一个数组存储。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def findLengthOfLCIS(self, nums: List[int]) -> int:
          n = len(nums)
          if n < 2:
              return n
          res = f = 1
          for i in range(1, n):
              f = 1 + (f if nums[i - 1] < nums[i] else 0)
              res = max(res, f)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int findLengthOfLCIS(int[] nums) {
          int n;
          if ((n = nums.length) < 2) return n;
          int res = 1, f = 1;
          for (int i = 1; i < n; ++i) {
              f = 1 + (nums[i - 1] < nums[i] ? f : 0);
              res = Math.max(res, f);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
