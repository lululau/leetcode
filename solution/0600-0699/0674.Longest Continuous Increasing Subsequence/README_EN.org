* [[https://leetcode.com/problems/longest-continuous-increasing-subsequence][674.
Longest Continuous Increasing Subsequence]]
  :PROPERTIES:
  :CUSTOM_ID: longest-continuous-increasing-subsequence
  :END:
[[./solution/0600-0699/0674.Longest Continuous Increasing Subsequence/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an unsorted array of integers nums, return the length of the
longest continuous increasing subsequence (i.e. subarray). The
subsequence must be strictly increasing.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A continuous increasing subsequence is defined by two indices l and r (l
< r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]
and for each l <= i < r, nums[i] < nums[i + 1].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,3,5,4,7]
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> The longest continuous increasing subsequence is [1,3,5] with length 3.
  Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
  4.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [2,2,2,2,2]
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
  increasing.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= nums[i] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def findLengthOfLCIS(self, nums: List[int]) -> int:
          n = len(nums)
          if n < 2:
              return n
          res = f = 1
          for i in range(1, n):
              f = 1 + (f if nums[i - 1] < nums[i] else 0)
              res = max(res, f)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int findLengthOfLCIS(int[] nums) {
          int n;
          if ((n = nums.length) < 2) return n;
          int res = 1, f = 1;
          for (int i = 1; i < n; ++i) {
              f = 1 + (nums[i - 1] < nums[i] ? f : 0);
              res = Math.max(res, f);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
