* [[https://leetcode.com/problems/design-excel-sum-formula][631. Design
Excel Sum Formula]]
  :PROPERTIES:
  :CUSTOM_ID: design-excel-sum-formula
  :END:
[[./solution/0600-0699/0631.Design Excel Sum Formula/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Your task is to design the basic function of Excel and implement the
function of sum formula. Specifically, you need to implement the
following functions:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Excel(int H, char W): This is the constructor. The inputs represents the
height and width of the Excel form. H is a positive integer, range from
1 to 26. It represents the height. W is a character range from 'A' to
'Z'. It represents that the width is the number of characters from 'A'
to W. The Excel form content is represented by a height * width 2D
integer array C, it should be initialized to zero. You should assume
that the first row of C starts from 1, and the first column of C starts
from 'A'.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

void Set(int row, char column, int val): Change the value at C(row,
column) to be val.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

int Get(int row, char column): Return the value at C(row, column).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

int Sum(int row, char column, List of Strings : numbers): This function
calculate and set the value at C(row, column), where the value should be
the sum of cells represented by numbers. This function return the sum
result at C(row, column). This sum formula should exist until this cell
is overlapped by another value or another sum formula.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

numbers is a list of strings that each string represent a cell or a
range of cells. If the string represent a single cell, then it has the
following format : ColRow. For example, "F7" represents the cell at (7,
F).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If the string represent a range of cells, then it has the following
format : ColRow1:ColRow2. The range will always be a rectangle, and
ColRow1 represent the position of the top-left cell, and ColRow2
represents the position of the bottom-right cell.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  <pre>

  Excel(3,"C"); 

  // construct a 3*3 2D array with all zero.

  //   A B C

  // 1 0 0 0

  // 2 0 0 0

  // 3 0 0 0



  Set(1, "A", 2);

  // set C(1,"A") to be 2.

  //   A B C

  // 1 2 0 0

  // 2 0 0 0

  // 3 0 0 0



  Sum(3, "C", ["A1", "A1:B2"]);

  // set C(3,"C") to be the sum of value at C(1,"A") and the values sum of the rectangle range whose top-left cell is C(1,"A") and bottom-right cell is C(2,"B"). Return 4. 

  //   A B C

  // 1 2 0 0

  // 2 0 0 0

  // 3 0 0 4



  Set(2, "B", 2);

  // set C(2,"B") to be 2. Note C(3, "C") should also be changed.

  //   A B C

  // 1 2 0 0

  // 2 0 2 0

  // 3 0 0 6

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

You could assume that there won't be any circular sum reference. For
example, A1 = sum(B1) and B1 = sum(A1).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The test cases are using double-quotes to represent a character.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Please remember to RESET your class variables declared in class Excel,
as static/class variables are persisted across multiple test cases.
Please see here for more details.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
