* [[https://leetcode-cn.com/problems/design-excel-sum-formula][631. 设计
Excel 求和公式]]
  :PROPERTIES:
  :CUSTOM_ID: 设计-excel-求和公式
  :END:
[[./solution/0600-0699/0631.Design Excel Sum Formula/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你的任务是实现 Excel 的求和功能，具体的操作如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Excel(int H, char W): 这是一个构造函数，输入表明了 Excel 的高度和宽度。H
是一个正整数，范围从 1 到 26，代表高度。W 是一个字符，范围从 'A' 到
'Z'，宽度等于从 'A' 到 W 的字母个数。Excel 表格是一个高度 *
宽度的二维整数数组，数组中元素初始化为 0。第一行下标从 1
开始，第一列下标从 'A' 开始。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

void Set(int row, char column, int val): 设置 C(row, column) 中的值为
val。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

int Get(int row, char column): 返回 C(row, column) 中的值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

int Sum(int row, char column, List of Strings : numbers):
这个函数会将计算的结果放入 C(row, column) 中，计算的结果等于在 numbers
中代表的所有元素之和，这个函数同时也会将这个结果返回。求和公式会一直计算更新结果直到这个公式被其他的值或者公式覆盖。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

numbers 是若干字符串的集合，每个字符串代表单个位置或一个区间。如果这个字符串表示单个位置，它的格式如下：ColRow，例如
"F7" 表示位置 (7, F)
。如果这个字符串表示一个区间，它的格式如下：ColRow1:ColRow2。区间就是左上角为
ColRow1 右下角为 ColRow2 的长方形。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

样例 1 ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>Excel(3,&quot;C&quot;); 
  // 构造一个 3*3 的二维数组，初始化全是 0。
  //   A B C
  // 1 0 0 0
  // 2 0 0 0
  // 3 0 0 0

  Set(1, &quot;A&quot;, 2);
  // 设置 C(1,&quot;A&quot;) 为 2。
  //   A B C
  // 1 2 0 0
  // 2 0 0 0
  // 3 0 0 0

  Sum(3, &quot;C&quot;, [&quot;A1&quot;, &quot;A1:B2&quot;]);
  // 将 C(3,&quot;C&quot;) 的值设为 C(1,&quot;A&quot;) 单点，左上角为 C(1,&quot;A&quot;) 右下角为 C(2,&quot;B&quot;) 的长方形，所有元素之和。返回值 4。 
  //   A B C
  // 1 2 0 0
  // 2 0 0 0
  // 3 0 0 4

  Set(2, &quot;B&quot;, 2);
  // 将 C(2,&quot;B&quot;) 设为 2。 注意 C(3, &quot;C&quot;) 的值也同时改变。
  //   A B C
  // 1 2 0 0
  // 2 0 2 0
  // 3 0 0 6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注释 ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

你可以认为不会出现循环求和的定义，比如说： A1 = sum(B1) ，B1 = sum(A1)。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

测试数据中，字母表示用双引号。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

请记住清零 Excel
类中的变量，因为静态变量、类变量会在多组测试数据中保存之前结果。详情请看这里。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
