* [[https://leetcode.com/problems/trim-a-binary-search-tree][669. Trim a
Binary Search Tree]]
  :PROPERTIES:
  :CUSTOM_ID: trim-a-binary-search-tree
  :END:
[[./solution/0600-0699/0669.Trim a Binary Search Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary search tree and the lowest and highest
boundaries as low and high, trim the tree so that all its elements lies
in [low, high]. Trimming the tree should not change the relative
structure of the elements that will remain in the tree (i.e., any node's
descendant should remain a descendant). It can be proven that there is a
unique answer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the root of the trimmed binary search tree. Note that the root
may change depending on the given bounds.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,0,2], low = 1, high = 2
  <strong>Output:</strong> [1,null,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,0,4,null,2,null,null,1], low = 1, high = 3
  <strong>Output:</strong> [3,2,null,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1], low = 1, high = 2
  <strong>Output:</strong> [1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,null,2], low = 1, high = 3
  <strong>Output:</strong> [1,null,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,null,2], low = 2, high = 4
  <strong>Output:</strong> [2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree in the range [1, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The value of each node in the tree is unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

root is guaranteed to be a valid binary search tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= low <= high <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
