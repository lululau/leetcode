* [[https://leetcode-cn.com/problems/cut-off-trees-for-golf-event][675.
为高尔夫比赛砍树]]
  :PROPERTIES:
  :CUSTOM_ID: 为高尔夫比赛砍树
  :END:
[[./solution/0600-0699/0675.Cut Off Trees for Golf Event/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你被请来给一个要举办高尔夫比赛的树林砍树。树林由一个 m x n 的矩阵表示，
在这个矩阵中：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 表示障碍，无法触碰

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 表示地面，可以行走

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

比 1 大的数 表示有树的单元格，可以行走，数值表示树的高度

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

每一步，你都可以向上、下、左、右四个方向之一移动一个单位，如果你站的地方有一棵树，那么你可以决定是否要砍倒它。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你需要按照树的高度从低向高砍掉所有的树，每砍过一颗树，该单元格的值变为
1（即变为地面）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你将从 (0, 0) 点开始工作，返回你砍完所有树需要走的最小步数。
如果你无法砍完所有的树，返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

可以保证的是，没有两棵树的高度是相同的，并且你至少需要砍倒一棵树。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>forest = [[1,2,3],[0,0,4],[7,6,5]]
  <strong>输出：</strong>6
  <strong>解释：</strong>沿着上面的路径，你可以用 6 步，按从最矮到最高的顺序砍掉这些树。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>forest = [[1,2,3],[0,0,0],[7,6,5]]
  <strong>输出：</strong>-1
  <strong>解释：</strong>由于中间一行被障碍阻塞，无法访问最下面一行中的树。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>forest = [[2,3,4],[0,0,5],[8,7,6]]
  <strong>输出：</strong>6
  <strong>解释：</strong>可以按与示例 1 相同的路径来砍掉所有的树。
  (0,0) 位置的树，可以直接砍去，不用算步数。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == forest.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == forest[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= forest[i][j] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
