* [[https://leetcode.com/problems/exclusive-time-of-functions][636.
Exclusive Time of Functions]]
  :PROPERTIES:
  :CUSTOM_ID: exclusive-time-of-functions
  :END:
[[./solution/0600-0699/0636.Exclusive Time of Functions/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

On a single-threaded CPU, we execute a program containing n functions.
Each function has a unique ID between 0 and n-1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Function calls are stored in a call stack: when a function call starts,
its ID is pushed onto the stack, and when a function call ends, its ID
is popped off the stack. The function whose ID is at the top of the
stack is the current function being executed. Each time a function
starts or ends, we write a log with the ID, whether it started or ended,
and the timestamp.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are given a list logs, where logs[i] represents the ith log message
formatted as a string "{function_id}:{"start" | "end"}:{timestamp}". For
example, "0:start:3" means a function call with function ID 0 started at
the beginning of timestamp 3, and "1:end:2" means a function call with
function ID 1 ended at the end of timestamp 2. Note that a function can
be called multiple times, possibly recursively.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A function's exclusive time is the sum of execution times for all
function calls in the program. For example, if a function is called
twice, one call executing for 2 time units and another call executing
for 1 time unit, the exclusive time is 2 + 1 = 3.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the exclusive time of each function in an array, where the value
at the ith index represents the exclusive time for the function with ID
i.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;1:start:2&quot;,&quot;1:end:5&quot;,&quot;0:end:6&quot;]
  <strong>Output:</strong> [3,4]
  <strong>Explanation:</strong>
  Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.
  Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.
  Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.
  So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 1, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;0:start:6&quot;,&quot;0:end:6&quot;,&quot;0:end:7&quot;]
  <strong>Output:</strong> [8]
  <strong>Explanation:</strong>
  Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.
  Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.
  Function 0 (initial call) resumes execution then immediately calls itself again.
  Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.
  Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.
  So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:6&quot;,&quot;1:end:6&quot;,&quot;0:end:7&quot;]
  <strong>Output:</strong> [7,1]
  <strong>Explanation:</strong>
  Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.
  Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.
  Function 0 (initial call) resumes execution then immediately calls function 1.
  Function 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6.
  Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.
  So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:7&quot;,&quot;1:end:7&quot;,&quot;0:end:8&quot;]
  <strong>Output:</strong> [8,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 1, logs = [&quot;0:start:0&quot;,&quot;0:end:0&quot;]
  <strong>Output:</strong> [1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= logs.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= function_id < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= timestamp <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

No two start events will happen at the same timestamp.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

No two end events will happen at the same timestamp.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each function has an "end" log for each "start" log.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
