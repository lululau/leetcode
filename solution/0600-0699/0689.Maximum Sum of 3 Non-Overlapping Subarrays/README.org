* [[https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays][689.
三个无重叠子数组的最大和]]
  :PROPERTIES:
  :CUSTOM_ID: 三个无重叠子数组的最大和
  :END:
[[./solution/0600-0699/0689.Maximum Sum of 3 Non-Overlapping Subarrays/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定数组 nums 由正整数组成，找到三个互不重叠的子数组的最大和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每个子数组的长度为k，我们要使这3*k个项的和最大化。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回每个区间起始索引的列表（索引从 0
开始）。如果有多个结果，返回字典序最小的一个。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> [1,2,1,2,6,7,5,1], 2
  <strong>输出:</strong> [0, 3, 5]
  <strong>解释:</strong> 子数组 [1, 2], [2, 6], [7, 5] 对应的起始索引为 [0, 3, 5]。
  我们也可以取 [2, 1], 但是结果 [1, 3, 5] 在字典序上更大。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

nums.length的范围在[1, 20000]之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums[i]的范围在[1, 65535]之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

k的范围在[1, floor(nums.length / 3)]之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
