* [[https://leetcode.com/problems/map-sum-pairs][677. Map Sum Pairs]]
  :PROPERTIES:
  :CUSTOM_ID: map-sum-pairs
  :END:
[[./solution/0600-0699/0677.Map Sum Pairs/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement the MapSum class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MapSum() Initializes the MapSum object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void insert(String key, int val) Inserts the key-val pair into the map.
If the key already existed, the original key-value pair will be
overridden to the new one.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int sum(string prefix) Returns the sum of all the pairs' value whose key
starts with the prefix.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;MapSum&quot;, &quot;insert&quot;, &quot;sum&quot;, &quot;insert&quot;, &quot;sum&quot;]
  [[], [&quot;apple&quot;, 3], [&quot;ap&quot;], [&quot;app&quot;, 2], [&quot;ap&quot;]]
  <strong>Output</strong>
  [null, null, 3, null, 5]

  <strong>Explanation</strong>
  MapSum mapSum = new MapSum();
  mapSum.insert(&quot;apple&quot;, 3);  
  mapSum.sum(&quot;ap&quot;);           // return 3 (<u>ap</u>ple = 3)
  mapSum.insert(&quot;app&quot;, 2);    
  mapSum.sum(&quot;ap&quot;);           // return 5 (<u>ap</u>ple + <u>ap</u>p = 3 + 2 = 5)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= key.length, prefix.length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

key and prefix consist of only lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 50 calls will be made to insert and sum.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
