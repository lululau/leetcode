* [[https://leetcode-cn.com/problems/map-sum-pairs][677. 键值映射]]
  :PROPERTIES:
  :CUSTOM_ID: 键值映射
  :END:
[[./solution/0600-0699/0677.Map Sum Pairs/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

实现一个 MapSum 类，支持两个方法，insert 和 sum：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MapSum() 初始化 MapSum 对象

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key
，整数表示值 val 。如果键 key
已经存在，那么原来的键值对将被替代成新的键值对。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["MapSum", "insert", "sum", "insert", "sum"]
  [[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]
  <strong>输出：</strong>
  [null, null, 3, null, 5]

  <strong>解释：</strong>
  MapSum mapSum = new MapSum();
  mapSum.insert("apple", 3);  
  mapSum.sum("ap");           // return 3 (<u>ap</u>ple = 3)
  mapSum.insert("app", 2);    
  mapSum.sum("ap");           // return 5 (<u>ap</u>ple + <u>ap</u>p = 3 + 2 = 5)
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= key.length, prefix.length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

key 和 prefix 仅由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 50 次 insert 和 sum

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
