* [[https://leetcode.com/problems/find-duplicate-file-in-system][609.
Find Duplicate File in System]]
  :PROPERTIES:
  :CUSTOM_ID: find-duplicate-file-in-system
  :END:
[[./solution/0600-0699/0609.Find Duplicate File in System/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a list paths of directory info, including the directory path, and
all the files with contents in this directory, return all the duplicate
files in the file system in terms of their paths. You may return the
answer in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A group of duplicate files consists of at least two files that have the
same content.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A single directory info string in the input list has the following
format:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ...
fn.txt(fn_content)"

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

It means there are n files (f1.txt, f2.txt ... fn.txt) with content
(f1_content, f2_content ... fn_content) respectively in the directory
"root/d1/d2/.../dm". Note that n >= 1 and m >= 0. If m = 0, it means the
directory is just the root directory.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The output is a list of groups of duplicate file paths. For each group,
it contains all the file paths of the files that have the same content.
A file path is a string that has the following format:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

"directory_path/file_name.txt"

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)","root 4.txt(efgh)"]
  <strong>Output:</strong> [["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)"]
  <strong>Output:</strong> [["root/a/2.txt","root/c/d/4.txt"],["root/a/1.txt","root/c/3.txt"]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= paths.length <= 2 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= paths[i].length <= 3000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= sum(paths[i].length) <= 5 * 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

paths[i] consist of English letters, digits, '/', '.', '(', ')', and '
'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

You may assume no files or directories share the same name in the same
directory.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

You may assume each given directory info represents a unique directory.
A single blank space separates the directory path and file info.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Imagine you are given a real file system, how will you search files? DFS
or BFS?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If the file content is very large (GB level), how will you modify your
solution?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If you can only read the file by 1kb each time, how will you modify your
solution?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

What is the time complexity of your modified solution? What is the most
time-consuming part and memory-consuming part of it? How to optimize?

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

How to make sure the duplicated files you find are not false positive?

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
