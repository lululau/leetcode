* [[https://leetcode-cn.com/problems/coin-path][656. 金币路径]]
  :PROPERTIES:
  :CUSTOM_ID: 金币路径
  :END:
[[./solution/0600-0699/0656.Coin Path/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个数组 A（下标从 1 开始）包含 N
个整数：A1，A2，......，AN 和一个整数 B。你可以从数组 A
中的任何一个位置（下标为
i）跳到下标 i+1，i+2，......，i+B 的任意一个可以跳到的位置上。如果你在下标为
i 的位置上，你需要支付 Ai 个金币。如果 Ai 是 -1，意味着下标为 i
的位置是不可以跳到的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

现在，你希望花费最少的金币从数组 A 的 1 位置跳到 N
位置，你需要输出花费最少的路径，依次输出所有经过的下标（从 1 到 N）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果有多种花费最少的方案，输出字典顺序最小的路径。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果无法到达 N 位置，请返回一个空数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

样例 1 :

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [1,2,4,-1,2], 2
  <strong>输出:</strong> [1,3,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

样例 2 :

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [1,2,4,-1,2], 1
  <strong>输出:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注释 :

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

路径 Pa1，Pa2，......，Pan 是字典序小于
Pb1，Pb2，......，Pbm 的，当且仅当第一个 Pai 和 Pbi 不同的 i 满足 Pai <
Pbi，如果不存在这样的 i 那么满足 n < m。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A1 >= 0。 A2, ..., AN （如果存在） 的范围是 [-1, 100]。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A 数组的长度范围 [1, 1000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

B 的范围 [1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
