* [[https://leetcode.com/problems/coin-path][656. Coin Path]]
  :PROPERTIES:
  :CUSTOM_ID: coin-path
  :END:
[[./solution/0600-0699/0656.Coin Path/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array A (index starts at 1) consisting of N integers: A1, A2,
..., AN and an integer B. The integer B denotes that from any place
(suppose the index is i) in the array A, you can jump to any one of the
place in the array A indexed i+1, i+2, ..., i+B if this place can be
jumped to. Also, if you step on the index i, you have to pay Ai coins.
If Ai is -1, it means you can't jump to the place indexed i in the
array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Now, you start from the place indexed 1 in the array A, and your aim is
to reach the place indexed N using the minimum coins. You need to return
the path of indexes (starting from 1 to N) in the array you should take
to get to the place indexed N using minimum coins.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If there are multiple paths with the same cost, return the
lexicographically smallest such path.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If it's not possible to reach the place indexed N then you need to
return an empty array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <b>Input:</b> [1,2,4,-1,2], 2

  <b>Output:</b> [1,3,5]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <b>Input:</b> [1,2,4,-1,2], 1

  <b>Output:</b> []

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Path Pa1, Pa2, ..., Pan is lexicographically smaller than Pb1, Pb2, ...,
Pbm, if and only if at the first i where Pai and Pbi differ, Pai < Pbi;
when no such i exists, then n < m.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A1 >= 0. A2, ..., AN (if exist) will in the range of [-1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Length of A is in the range of [1, 1000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

B is in the range of [1, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
