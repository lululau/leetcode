* [[https://leetcode-cn.com/problems/merge-two-binary-trees][617.
合并二叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 合并二叉树
  :END:
[[./solution/0600-0699/0617.Merge Two Binary Trees/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL
的节点将直接作为新二叉树的节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 
      Tree 1                     Tree 2                  
            1                         2                             
           / \                       / \                            
          3   2                     1   3                        
         /                           \   \                      
        5                             4   7                  
  <strong>输出:</strong> 
  合并后的树:
           3
          / \
         4   5
        / \   \ 
       5   4   7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意: 合并必须从两个树的根节点开始。

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  /**
   * Definition for a binary tree node.
   * type TreeNode struct {
   *     Val int
   *     Left *TreeNode
   *     Right *TreeNode
   * }
   */
  func mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {
      if t1 == nil {
          return t2
      }
      if t2 == nil {
          return t1
      }
      t1.Val += t2.Val
      t1.Left = mergeTrees(t1.Left, t2.Left)
      t1.Right = mergeTrees(t1.Right, t2.Right)
      return t1
  }
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
