* [[https://leetcode-cn.com/problems/friend-requests-ii-who-has-the-most-friends][602.
好友申请 II ：谁有最多的好友]]
  :PROPERTIES:
  :CUSTOM_ID: 好友申请-ii-谁有最多的好友
  :END:
[[./solution/0600-0699/0602.Friend Requests II Who Has the Most Friends/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在 Facebook 或者 Twitter
这样的社交应用中，人们经常会发好友申请也会收到其他人的好友申请。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

表 request_accepted 存储了所有好友申请通过的数据记录，其中，
requester_id 和 accepter_id 都是用户的编号。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>| requester_id | accepter_id | accept_date|
  |--------------|-------------|------------|
  | 1            | 2           | 2016_06-03 |
  | 1            | 3           | 2016-06-08 |
  | 2            | 3           | 2016-06-08 |
  | 3            | 4           | 2016-06-09 |
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

写一个查询语句，求出谁拥有最多的好友和他拥有的好友数目。对于上面的样例数据，结果为：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>| id | num |
  |----|-----|
  | 3  | 3   |
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

保证拥有最多好友数目的只有 1 个人。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

好友申请只会被接受一次，所以不会有 requester_id 和 accepter_id 值都相同的重复记录。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

解释：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

编号为 '3' 的人是编号为 '1'，'2' 和 '4' 的好友，所以他总共有 3
个好友，比其他人都多。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在真实世界里，可能会有多个人拥有好友数相同且最多，你能找到所有这些人吗？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *SQL*
    :PROPERTIES:
    :CUSTOM_ID: sql
    :END:
#+begin_src sql
#+end_src

#+begin_html
  <!-- tabs:end -->
#+end_html
