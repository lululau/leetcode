* [[https://leetcode-cn.com/problems/design-circular-deque][641.
设计循环双端队列]]
  :PROPERTIES:
  :CUSTOM_ID: 设计循环双端队列
  :END:
[[./solution/0600-0699/0641.Design Circular Deque/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

设计实现双端队列。 你的实现需要支持以下操作：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MyCircularDeque(k)：构造函数,双端队列的大小为k。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

getRear()：获得双端队列的最后一个元素。 如果双端队列为空，返回 -1。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isEmpty()：检查双端队列是否为空。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

isFull()：检查双端队列是否满了。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>MyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3
  circularDeque.insertLast(1);                    // 返回 true
  circularDeque.insertLast(2);                    // 返回 true
  circularDeque.insertFront(3);                   // 返回 true
  circularDeque.insertFront(4);                   // 已经满了，返回 false
  circularDeque.getRear();                // 返回 2
  circularDeque.isFull();                     // 返回 true
  circularDeque.deleteLast();                 // 返回 true
  circularDeque.insertFront(4);                   // 返回 true
  circularDeque.getFront();               // 返回 4
  &nbsp;</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

所有值的范围为 [1, 1000]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

操作次数的范围为 [1, 1000]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

请不要使用内置的双端队列库。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"循环数组"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class MyCircularDeque:

      def __init__(self, k: int):
          """
          Initialize your data structure here. Set the size of the deque to be k.
          """
          self.q = [0] * k
          self.front = 0
          self.size = 0
          self.capacity = k

      def insertFront(self, value: int) -> bool:
          """
          Adds an item at the front of Deque. Return true if the operation is successful.
          """
          if self.isFull():
              return False
          if not self.isEmpty():
              self.front = (self.front - 1 + self.capacity) % self.capacity
          self.q[self.front] = value
          self.size += 1
          return True

      def insertLast(self, value: int) -> bool:
          """
          Adds an item at the rear of Deque. Return true if the operation is successful.
          """
          if self.isFull():
              return False
          idx = (self.front + self.size) % self.capacity
          self.q[idx] = value
          self.size += 1
          return True

      def deleteFront(self) -> bool:
          """
          Deletes an item from the front of Deque. Return true if the operation is successful.
          """
          if self.isEmpty():
              return False
          self.front = (self.front + 1) % self.capacity
          self.size -= 1
          return True

      def deleteLast(self) -> bool:
          """
          Deletes an item from the rear of Deque. Return true if the operation is successful.
          """
          if self.isEmpty():
              return False
          self.size -= 1
          return True

      def getFront(self) -> int:
          """
          Get the front item from the deque.
          """
          if self.isEmpty():
              return -1
          return self.q[self.front]

      def getRear(self) -> int:
          """
          Get the last item from the deque.
          """
          if self.isEmpty():
              return -1
          idx = (self.front + self.size - 1) % self.capacity
          return self.q[idx]

      def isEmpty(self) -> bool:
          """
          Checks whether the circular deque is empty or not.
          """
          return self.size == 0

      def isFull(self) -> bool:
          """
          Checks whether the circular deque is full or not.
          """
          return self.size == self.capacity


  # Your MyCircularDeque object will be instantiated and called as such:
  # obj = MyCircularDeque(k)
  # param_1 = obj.insertFront(value)
  # param_2 = obj.insertLast(value)
  # param_3 = obj.deleteFront()
  # param_4 = obj.deleteLast()
  # param_5 = obj.getFront()
  # param_6 = obj.getRear()
  # param_7 = obj.isEmpty()
  # param_8 = obj.isFull()
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class MyCircularDeque {
      private int[] q;
      private int front;
      private int size;
      private int capacity;

      /** Initialize your data structure here. Set the size of the deque to be k. */
      public MyCircularDeque(int k) {
          q = new int[k];
          capacity = k;
      }

      /** Adds an item at the front of Deque. Return true if the operation is successful. */
      public boolean insertFront(int value) {
          if (isFull()) {
              return false;
          }
          if (!isEmpty()) {
              front = (front - 1 + capacity) % capacity;
          }
          q[front] = value;
          ++size;
          return true;
      }

      /** Adds an item at the rear of Deque. Return true if the operation is successful. */
      public boolean insertLast(int value) {
          if (isFull()) {
              return false;
          }
          int idx = (front + size) % capacity;
          q[idx] = value;
          ++size;
          return true;
      }

      /** Deletes an item from the front of Deque. Return true if the operation is successful. */
      public boolean deleteFront() {
          if (isEmpty()) {
              return false;
          }
          front = (front + 1) % capacity;
          --size;
          return true;
      }

      /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
      public boolean deleteLast() {
          if (isEmpty()) {
              return false;
          }
          --size;
          return true;
      }

      /** Get the front item from the deque. */
      public int getFront() {
          if (isEmpty()) {
              return -1;
          }
          return q[front];
      }

      /** Get the last item from the deque. */
      public int getRear() {
          if (isEmpty()) {
              return -1;
          }
          int idx = (front + size - 1) % capacity;
          return q[idx];
      }

      /** Checks whether the circular deque is empty or not. */
      public boolean isEmpty() {
          return size == 0;
      }

      /** Checks whether the circular deque is full or not. */
      public boolean isFull() {
          return size == capacity;
      }
  }

  /**
   * Your MyCircularDeque object will be instantiated and called as such:
   * MyCircularDeque obj = new MyCircularDeque(k);
   * boolean param_1 = obj.insertFront(value);
   * boolean param_2 = obj.insertLast(value);
   * boolean param_3 = obj.deleteFront();
   * boolean param_4 = obj.deleteLast();
   * int param_5 = obj.getFront();
   * int param_6 = obj.getRear();
   * boolean param_7 = obj.isEmpty();
   * boolean param_8 = obj.isFull();
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
