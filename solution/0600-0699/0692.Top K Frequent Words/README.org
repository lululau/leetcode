* [[https://leetcode-cn.com/problems/top-k-frequent-words][692. 前 K
个高频单词]]
  :PROPERTIES:
  :CUSTOM_ID: 前-k-个高频单词
  :END:
[[./solution/0600-0699/0692.Top K Frequent Words/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给一非空的单词列表，返回前 k 个出现次数最多的单词。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> [&quot;i&quot;, &quot;love&quot;, &quot;leetcode&quot;, &quot;i&quot;, &quot;love&quot;, &quot;coding&quot;], k = 2
  <strong>输出:</strong> [&quot;i&quot;, &quot;love&quot;]
  <strong>解析:</strong> &quot;i&quot; 和 &quot;love&quot; 为出现次数最多的两个单词，均为2次。
      注意，按字母顺序 &quot;i&quot; 在 &quot;love&quot; 之前。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> [&quot;the&quot;, &quot;day&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;the&quot;, &quot;the&quot;, &quot;the&quot;, &quot;sunny&quot;, &quot;is&quot;, &quot;is&quot;], k = 4
  <strong>输出:</strong> [&quot;the&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;day&quot;]
  <strong>解析:</strong> &quot;the&quot;, &quot;is&quot;, &quot;sunny&quot; 和 &quot;day&quot; 是出现次数最多的四个单词，
      出现次数依次为 4, 3, 2 和 1 次。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

假定 k 总为有效值， 1 ≤ k ≤ 集合元素数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

输入的单词均由小写字母组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

扩展练习：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

尝试以 O(n log k) 时间复杂度和 O(n) 空间复杂度解决。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def topKFrequent(self, words: List[str], k: int) -> List[str]:
          counter = collections.Counter(words)
          res = sorted(counter, key=lambda word: (-counter[word], word))
          return res[:k]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public List<String> topKFrequent(String[] words, int k) {
          Map<String, Integer> counter = new HashMap<>();
          for (String word : words) {
              counter.put(word, counter.getOrDefault(word, 0) + 1);
          }
          PriorityQueue<String> minHeap = new PriorityQueue<>((a, b) -> {
              if (counter.get(a).equals(counter.get(b))) {
                  return b.compareTo(a);
              }
              return counter.get(a) - counter.get(b);
          });
          for (String word : counter.keySet()) {
              minHeap.offer(word);
              if (minHeap.size() > k) {
                  minHeap.poll();
              }
          }
          List<String> res = new ArrayList<>();
          while (!minHeap.isEmpty()) {
              res.add(minHeap.poll());
          }
          Collections.reverse(res);
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
