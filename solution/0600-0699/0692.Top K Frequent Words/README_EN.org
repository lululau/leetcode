* [[https://leetcode.com/problems/top-k-frequent-words][692. Top K
Frequent Words]]
  :PROPERTIES:
  :CUSTOM_ID: top-k-frequent-words
  :END:
[[./solution/0600-0699/0692.Top K Frequent Words/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a non-empty list of words, return the k most frequent elements.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Your answer should be sorted by frequency from highest to lowest. If two
words have the same frequency, then the word with the lower alphabetical
order comes first.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  <pre>

  <b>Input:</b> ["i", "love", "leetcode", "i", "love", "coding"], k = 2

  <b>Output:</b> ["i", "love"]

  <b>Explanation:</b> "i" and "love" are the two most frequent words.

      Note that "i" comes before "love" due to a lower alphabetical order.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  <pre>

  <b>Input:</b> ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4

  <b>Output:</b> ["the", "is", "sunny", "day"]

  <b>Explanation:</b> "the", "is", "sunny" and "day" are the four most frequent words,

      with the number of occurrence being 4, 3, 2 and 1 respectively.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Input words contain only lowercase letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Try to solve it in O(n log k) time and O(n) extra space.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def topKFrequent(self, words: List[str], k: int) -> List[str]:
          counter = collections.Counter(words)
          res = sorted(counter, key=lambda word: (-counter[word], word))
          return res[:k]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<String> topKFrequent(String[] words, int k) {
          Map<String, Integer> counter = new HashMap<>();
          for (String word : words) {
              counter.put(word, counter.getOrDefault(word, 0) + 1);
          }
          PriorityQueue<String> minHeap = new PriorityQueue<>((a, b) -> {
              if (counter.get(a).equals(counter.get(b))) {
                  return b.compareTo(a);
              }
              return counter.get(a) - counter.get(b);
          });
          for (String word : counter.keySet()) {
              minHeap.offer(word);
              if (minHeap.size() > k) {
                  minHeap.poll();
              }
          }
          List<String> res = new ArrayList<>();
          while (!minHeap.isEmpty()) {
              res.add(minHeap.poll());
          }
          Collections.reverse(res);
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
