* [[https://leetcode-cn.com/problems/binary-number-with-alternating-bits][693.
交替位二进制数]]
  :PROPERTIES:
  :CUSTOM_ID: 交替位二进制数
  :END:
[[./solution/0600-0699/0693.Binary Number with Alternating Bits/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个正整数，检查它的二进制表示是否总是 0、1
交替出现：换句话说，就是二进制表示中相邻两位的数字永不相同。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 5
  <strong>输出：</strong>true
  <strong>解释：</strong>5 的二进制表示是：101
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 7
  <strong>输出：</strong>false
  <strong>解释：</strong>7 的二进制表示是：111.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 11
  <strong>输出：</strong>false
  <strong>解释：</strong>11 的二进制表示是：1011.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 10
  <strong>输出：</strong>true
  <strong>解释：</strong>10 的二进制表示是：1010.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 3
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

假设 01 交替出现，那么我们可以通过错位异或将尾部全部转为 1，加 1
可以得到 2 的幂次的一个数 n（n 中只有一个位是 1），接着利用
=n & (n - 1)= 可以消除最后一位的 1。

此时判断是否为 0，若是，说明假设成立，是 01 交替串。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def hasAlternatingBits(self, n: int) -> bool:
          n = (n ^ (n >> 1)) + 1
          return (n & (n - 1)) == 0
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean hasAlternatingBits(int n) {
          n = (n ^ (n >> 1)) + 1;
          return (n & (n - 1)) == 0;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool hasAlternatingBits(int n) {
          n ^= (n >> 1);
          return (n & ((long) n + 1)) == 0;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
