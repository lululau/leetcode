* [[https://leetcode.com/problems/binary-number-with-alternating-bits][693.
Binary Number with Alternating Bits]]
  :PROPERTIES:
  :CUSTOM_ID: binary-number-with-alternating-bits
  :END:
[[./solution/0600-0699/0693.Binary Number with Alternating Bits/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a positive integer, check whether it has alternating bits: namely,
if two adjacent bits will always have different values.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 5
  <strong>Output:</strong> true
  <strong>Explanation:</strong> The binary representation of 5 is: 101
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 7
  <strong>Output:</strong> false
  <strong>Explanation:</strong> The binary representation of 7 is: 111.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 11
  <strong>Output:</strong> false
  <strong>Explanation:</strong> The binary representation of 11 is: 1011.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 10
  <strong>Output:</strong> true
  <strong>Explanation:</strong> The binary representation of 10 is: 1010.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 3
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def hasAlternatingBits(self, n: int) -> bool:
          n = (n ^ (n >> 1)) + 1
          return (n & (n - 1)) == 0
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean hasAlternatingBits(int n) {
          n = (n ^ (n >> 1)) + 1;
          return (n & (n - 1)) == 0;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool hasAlternatingBits(int n) {
          n ^= (n >> 1);
          return (n & ((long) n + 1)) == 0;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
