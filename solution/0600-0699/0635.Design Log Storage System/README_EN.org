* [[https://leetcode.com/problems/design-log-storage-system][635. Design
Log Storage System]]
  :PROPERTIES:
  :CUSTOM_ID: design-log-storage-system
  :END:
[[./solution/0600-0699/0635.Design Log Storage System/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given several logs, where each log contains a unique ID and
timestamp. Timestamp is a string that has the following format:
Year:Month:Day:Hour:Minute:Second, for example, 2017:01:01:23:59:59. All
domains are zero-padded decimal numbers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the LogSystem class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

LogSystem() Initializes the LogSystem object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void put(int id, string timestamp) Stores the given log (id, timestamp)
in your storage system.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int[] retrieve(string start, string end, string granularity) Returns the
IDs of the logs whose timestamps are within the range from start to end
inclusive. start and end all have the same format as timestamp, and
granularity means how precise the range should be (i.e. to the exact
Day, Minute, etc.). For example, start = "2017:01:01:23:59:59", end =
"2017:01:02:23:59:59", and granularity = "Day" means that we need to
find the logs within the inclusive range from Jan. 1st 2017 to Jan. 2nd
2017, and the Hour, Minute, and Second for each log entry can be
ignored.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;LogSystem&quot;, &quot;put&quot;, &quot;put&quot;, &quot;put&quot;, &quot;retrieve&quot;, &quot;retrieve&quot;]
  [[], [1, &quot;2017:01:01:23:59:59&quot;], [2, &quot;2017:01:01:22:59:59&quot;], [3, &quot;2016:01:01:00:00:00&quot;], [&quot;2016:01:01:01:01:01&quot;, &quot;2017:01:01:23:00:00&quot;, &quot;Year&quot;], [&quot;2016:01:01:01:01:01&quot;, &quot;2017:01:01:23:00:00&quot;, &quot;Hour&quot;]]
  <strong>Output</strong>
  [null, null, null, null, [3, 2, 1], [2, 1]]

  <strong>Explanation</strong>
  LogSystem logSystem = new LogSystem();
  logSystem.put(1, &quot;2017:01:01:23:59:59&quot;);
  logSystem.put(2, &quot;2017:01:01:22:59:59&quot;);
  logSystem.put(3, &quot;2016:01:01:00:00:00&quot;);

  // return [3,2,1], because you need to return all logs between 2016 and 2017.
  logSystem.retrieve(&quot;2016:01:01:01:01:01&quot;, &quot;2017:01:01:23:00:00&quot;, &quot;Year&quot;);

  // return [2,1], because you need to return all logs between Jan. 1, 2016 01:XX:XX and Jan. 1, 2017 23:XX:XX.
  // Log 3 is not returned because Jan. 1, 2016 00:00:00 comes before the start of the range.
  logSystem.retrieve(&quot;2016:01:01:01:01:01&quot;, &quot;2017:01:01:23:00:00&quot;, &quot;Hour&quot;);
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= id <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2000 <= Year <= 2017

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Month <= 12

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Day <= 31

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Hour <= 23

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Minute, Second <= 59

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

granularity is one of the values ["Year", "Month", "Day", "Hour",
"Minute", "Second"].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 500 calls will be made to put and retrieve.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
