* [[https://leetcode-cn.com/problems/design-log-storage-system][635.
设计日志存储系统]]
  :PROPERTIES:
  :CUSTOM_ID: 设计日志存储系统
  :END:
[[./solution/0600-0699/0635.Design Log Storage System/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你将获得多条日志，每条日志都有唯一的 id 和 timestamp ，timestamp 是形如
Year:Month:Day:Hour:Minute:Second 的字符串，2017:01:01:23:59:59
，所有值域都是零填充的十进制数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现 LogSystem 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

LogSystem() 初始化 LogSystem 对象

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void put(int id, string timestamp) 给定日志的 id 和 timestamp
，将这个日志存入你的存储系统中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int[] retrieve(string start, string end, string granularity)
返回在给定时间区间 [start, end] （包含两端）内的所有日志的 id 。start
、end 和 timestamp 的格式相同，granularity
表示考虑的时间粒度（例如，精确到 Day、Minute 等）。例如 start =
"2017:01:01:23:59:59"、end = "2017:01:02:23:59:59" 且 granularity =
"Day" 意味着需要查找从 Jan. 1st 2017 到 Jan. 2nd 2017
范围内的日志，可以忽略日志的 Hour、Minute 和 Second 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

 

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["LogSystem", "put", "put", "put", "retrieve", "retrieve"]
  [[], [1, "2017:01:01:23:59:59"], [2, "2017:01:01:22:59:59"], [3, "2016:01:01:00:00:00"], ["2016:01:01:01:01:01", "2017:01:01:23:00:00", "Year"], ["2016:01:01:01:01:01", "2017:01:01:23:00:00", "Hour"]]
  <strong>输出：</strong>
  [null, null, null, null, [3, 2, 1], [2, 1]]

  <strong>解释：</strong>
  LogSystem logSystem = new LogSystem();
  logSystem.put(1, "2017:01:01:23:59:59");
  logSystem.put(2, "2017:01:01:22:59:59");
  logSystem.put(3, "2016:01:01:00:00:00");

  // 返回 [3,2,1]，返回从 2016 年到 2017 年所有的日志。
  logSystem.retrieve("2016:01:01:01:01:01", "2017:01:01:23:00:00", "Year");

  // 返回 [2,1]，返回从 Jan. 1, 2016 01:XX:XX 到 Jan. 1, 2017 23:XX:XX 之间的所有日志
  // 不返回日志 3 因为记录时间 Jan. 1, 2016 00:00:00 超过范围的起始时间
  logSystem.retrieve("2016:01:01:01:01:01", "2017:01:01:23:00:00", "Hour");
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= id <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2000 <= Year <= 2017

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Month <= 12

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Day <= 31

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Hour <= 23

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Minute, Second <= 59

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

granularity 是这些值 ["Year", "Month", "Day", "Hour", "Minute",
"Second"] 之一

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多调用 500 次 put 和 retrieve

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
