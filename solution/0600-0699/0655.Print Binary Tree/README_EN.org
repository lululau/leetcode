* [[https://leetcode.com/problems/print-binary-tree][655. Print Binary
Tree]]
  :PROPERTIES:
  :CUSTOM_ID: print-binary-tree
  :END:
[[./solution/0600-0699/0655.Print Binary Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Print a binary tree in an m*n 2D string array following these rules:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The row number m should be equal to the height of the given binary tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The column number n should always be an odd number.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The root node's value (in string format) should be put in the exactly
middle of the first row it can be put. The column and the row where the
root node belongs will separate the rest space into two parts
(left-bottom part and right-bottom part). You should print the left
subtree in the left-bottom part and print the right subtree in the
right-bottom part. The left-bottom part and the right-bottom part should
have the same size. Even if one subtree is none while the other is not,
you don't need to print anything for the none subtree but still need to
leave the space as large as that for the other subtree. However, if two
subtrees are none, then you don't need to leave space for both of them.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each unused space should contain an empty string ““.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Print the subtrees following the same rules.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  <pre>

  <b>Input:</b>

       1

      /

     2

  <b>Output:</b>

  [["", "1", ""],

   ["2", "", ""]]

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  <pre>

  <b>Input:</b>

       1

      / \

     2   3

      \

       4

  <b>Output:</b>

  [["", "", "", "1", "", "", ""],

   ["", "2", "", "", "", "3", ""],

   ["", "", "4", "", "", "", ""]]

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  <pre>

  <b>Input:</b>

        1

       / \

      2   5

     / 

    3 

   / 

  4 

  <b>Output:</b>



  [["",  "",  "", "",  "", "", "", "1", "",  "",  "",  "",  "", "", ""]

   ["",  "",  "", "2", "", "", "", "",  "",  "",  "",  "5", "", "", ""]

   ["",  "3", "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]

   ["4", "",  "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]]

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

The height of binary tree is in the range of [1, 10].

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
