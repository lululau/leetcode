* [[https://leetcode.com/problems/degree-of-an-array][697. Degree of an
Array]]
  :PROPERTIES:
  :CUSTOM_ID: degree-of-an-array
  :END:
[[./solution/0600-0699/0697.Degree of an Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a non-empty array of non-negative integers nums, the degree of
this array is defined as the maximum frequency of any one of its
elements.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Your task is to find the smallest possible length of a (contiguous)
subarray of nums, that has the same degree as nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,2,2,3,1]
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> 
  The input array has a degree of 2 because both elements 1 and 2 appear twice.
  Of the subarrays that have the same degree:
  [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
  The shortest length is 2. So return 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,2,2,3,1,4,2]
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> 
  The degree is 3 because the element 2 is repeated 3 times.
  So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

nums.length will be between 1 and 50,000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums[i] will be an integer between 0 and 49,999.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def findShortestSubArray(self, nums: List[int]) -> int:
          mapper = {}
          for i, v in enumerate(nums):
              if v in mapper:
                  arr = mapper[v]
                  arr[0] += 1
                  arr[2] = i
              else:
                  arr = [1, i, i]
                  mapper[v] = arr
          max_degree = min_len = 0
          for arr in mapper.values():
              if max_degree < arr[0]:
                  max_degree = arr[0]
                  min_len = arr[2] - arr[1] + 1
              elif max_degree == arr[0]:
                  min_len = min(min_len, arr[2] - arr[1] + 1)
          return min_len
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int findShortestSubArray(int[] nums) {
          Map<Integer, int[]> mapper = new HashMap<>();
          for (int i = 0, n = nums.length; i < n; ++i) {
              if (mapper.containsKey(nums[i])) {
                  int[] arr = mapper.get(nums[i]);
                  ++arr[0];
                  arr[2] = i;
              } else {
                  int[] arr = new int[]{1, i, i};
                  mapper.put(nums[i], arr);
              }
          }

          int maxDegree = 0, minLen = 0;
          for (Map.Entry<Integer, int[]> entry : mapper.entrySet()) {
              int[] arr = entry.getValue();
              if (maxDegree < arr[0]) {
                  maxDegree = arr[0];
                  minLen = arr[2] - arr[1] + 1;
              } else if (maxDegree == arr[0]) {
                  minLen = Math.min(minLen, arr[2] - arr[1] + 1);
              }
          }
          return minLen;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
