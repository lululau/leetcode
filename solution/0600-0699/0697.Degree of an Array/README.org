* [[https://leetcode-cn.com/problems/degree-of-an-array][697. 数组的度]]
  :PROPERTIES:
  :CUSTOM_ID: 数组的度
  :END:
[[./solution/0600-0699/0697.Degree of an Array/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个非空且只包含非负数的整数数组 nums，数组的度的定义是指数组里任一元素出现频数的最大值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你的任务是在 nums
中找到与 nums 拥有相同大小的度的最短连续子数组，返回其长度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[1, 2, 2, 3, 1]
  <strong>输出：</strong>2
  <strong>解释：</strong>
  输入数组的度是2，因为元素1和2的出现频数最大，均为2.
  连续子数组里面拥有相同度的有如下所示:
  [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
  最短连续子数组[2, 2]的长度为2，所以返回2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[1,2,2,3,1,4,2]
  <strong>输出：</strong>6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

nums.length 在1到 50,000 区间范围内。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums[i] 是一个在 0 到 49,999 范围内的整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

遍历数组，用哈希表记录数组每个元素出现的次数，以及首次、末次出现的位置。然后遍历哈希表，获取元素出现次数最多（可能有多个）且首末位置差最小的数。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def findShortestSubArray(self, nums: List[int]) -> int:
          mapper = {}
          for i, v in enumerate(nums):
              if v in mapper:
                  arr = mapper[v]
                  arr[0] += 1
                  arr[2] = i
              else:
                  arr = [1, i, i]
                  mapper[v] = arr
          max_degree = min_len = 0
          for arr in mapper.values():
              if max_degree < arr[0]:
                  max_degree = arr[0]
                  min_len = arr[2] - arr[1] + 1
              elif max_degree == arr[0]:
                  min_len = min(min_len, arr[2] - arr[1] + 1)
          return min_len
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int findShortestSubArray(int[] nums) {
          Map<Integer, int[]> mapper = new HashMap<>();
          for (int i = 0, n = nums.length; i < n; ++i) {
              if (mapper.containsKey(nums[i])) {
                  int[] arr = mapper.get(nums[i]);
                  ++arr[0];
                  arr[2] = i;
              } else {
                  int[] arr = new int[]{1, i, i};
                  mapper.put(nums[i], arr);
              }
          }

          int maxDegree = 0, minLen = 0;
          for (Map.Entry<Integer, int[]> entry : mapper.entrySet()) {
              int[] arr = entry.getValue();
              if (maxDegree < arr[0]) {
                  maxDegree = arr[0];
                  minLen = arr[2] - arr[1] + 1;
              } else if (maxDegree == arr[0]) {
                  minLen = Math.min(minLen, arr[2] - arr[1] + 1);
              }
          }
          return minLen;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
