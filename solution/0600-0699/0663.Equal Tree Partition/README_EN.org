* [[https://leetcode.com/problems/equal-tree-partition][663. Equal Tree
Partition]]
  :PROPERTIES:
  :CUSTOM_ID: equal-tree-partition
  :END:
[[./solution/0600-0699/0663.Equal Tree Partition/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a binary tree with n nodes, your task is to check if it's possible
to partition the tree to two trees which have the equal sum of values
after removing exactly one edge on the original tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  <pre>

  <b>Input:</b>     

      5

     / \

    10 10

      /  \

     2   3



  <b>Output:</b> True

  <b>Explanation:</b> 

      5

     / 

    10

        

  Sum: 15



     10

    /  \

   2    3



  Sum: 15

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  <pre>

  <b>Input:</b>     

      1

     / \

    2  10

      /  \

     2   20



  <b>Output:</b> False

  <b>Explanation:</b> You can't split the tree into two trees with equal sum after removing exactly one edge on the tree.

  </pre>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

The range of tree node value is in the range of [-100000, 100000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
