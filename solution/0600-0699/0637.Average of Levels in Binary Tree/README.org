* [[https://leetcode-cn.com/problems/average-of-levels-in-binary-tree][637.
二叉树的层平均值]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树的层平均值
  :END:
[[./solution/0600-0699/0637.Average of Levels in Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>
      3
     / \
    9  20
      /  \
     15   7
  <strong>输出：</strong>[3, 14.5, 11]
  <strong>解释：</strong>
  第 0 层的平均值是 3 ,  第1层是 14.5 , 第2层是 11 。因此返回 [3, 14.5, 11] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

节点值的范围在32位有符号整数范围内。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def averageOfLevels(self, root: TreeNode) -> List[float]:
          res = []
          q = collections.deque([root])
          while q:
              n = len(q)
              s = 0
              for _ in range(n):
                  node = q.popleft()
                  s += node.val
                  if node.left:
                      q.append(node.left)
                  if node.right:
                      q.append(node.right)
              res.append(s / n)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public List<Double> averageOfLevels(TreeNode root) {
          List<Double> res = new ArrayList<>();
          Queue<TreeNode> q = new LinkedList<>();
          q.offer(root);
          while (!q.isEmpty()) {
              double s = 0, n = q.size();
              for (int i = 0; i < n; ++i) {
                  TreeNode node = q.poll();
                  s += node.val;
                  if (node.left != null) {
                      q.offer(node.left);
                  }
                  if (node.right != null) {
                      q.offer(node.right);
                  }
              }
              res.add(s / n);
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for a binary tree node.
   * function TreeNode(val, left, right) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.left = (left===undefined ? null : left)
   *     this.right = (right===undefined ? null : right)
   * }
   */
  /**
   * @param {TreeNode} root
   * @return {number[]}
   */
  var averageOfLevels = function(root) {
      let res = [];
      let queue = [root];
      while (queue.length > 0) {
          n = queue.length;
          let sum = 0;
          for (let i = 0; i < n; i++) {
              let node = queue.shift();
              sum += node.val;
              if (node.left) {
                  queue.push(node.left);
              }
              if (node.right) {
                  queue.push(node.right);
              }
          }
          res.push(sum / n);
      }
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
