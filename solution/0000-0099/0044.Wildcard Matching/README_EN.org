* [[https://leetcode.com/problems/wildcard-matching][44. Wildcard
Matching]]
  :PROPERTIES:
  :CUSTOM_ID: wildcard-matching
  :END:
[[./solution/0000-0099/0044.Wildcard Matching/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an input string (s) and a pattern (p), implement wildcard pattern
matching with support for '?' and '*' where:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

'?' Matches any single character.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

'*' Matches any sequence of characters (including the empty sequence).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

The matching should cover the entire input string (not partial).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;
  <strong>Output:</strong> false
  <strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;aa&quot;, p = &quot;*&quot;
  <strong>Output:</strong> true
  <strong>Explanation:</strong>&nbsp;&#39;*&#39; matches any sequence.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;cb&quot;, p = &quot;?a&quot;
  <strong>Output:</strong> false
  <strong>Explanation:</strong>&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;adceb&quot;, p = &quot;*a*b&quot;
  <strong>Output:</strong> true
  <strong>Explanation:</strong>&nbsp;The first &#39;*&#39; matches the empty sequence, while the second &#39;*&#39; matches the substring &quot;dce&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;acdcb&quot;, p = &quot;a*c?b&quot;
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= s.length, p.length <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s contains only lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p contains only lowercase English letters, '?' or '*'.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
