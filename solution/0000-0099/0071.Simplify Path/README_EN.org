* [[https://leetcode.com/problems/simplify-path][71. Simplify Path]]
  :PROPERTIES:
  :CUSTOM_ID: simplify-path
  :END:
[[./solution/0000-0099/0071.Simplify Path/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string path, which is an absolute path (starting with a slash
'/') to a file or directory in a Unix-style file system, convert it to
the simplified canonical path.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In a Unix-style file system, a period '.' refers to the current
directory, a double period '..' refers to the directory up a level, and
any multiple consecutive slashes (i.e. '//') are treated as a single
slash '/'. For this problem, any other format of periods such as '...'
are treated as file/directory names.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The canonical path should have the following format:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The path starts with a single slash '/'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Any two directories are separated by a single slash '/'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The path does not end with a trailing '/'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The path only contains the directories on the path from the root
directory to the target file or directory (i.e., no period '.' or double
period '..')

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the simplified canonical path.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> path = &quot;/home/&quot;
  <strong>Output:</strong> &quot;/home&quot;
  <strong>Explanation:</strong> Note that there is no trailing slash after the last directory name.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> path = &quot;/../&quot;
  <strong>Output:</strong> &quot;/&quot;
  <strong>Explanation:</strong> Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> path = &quot;/home//foo/&quot;
  <strong>Output:</strong> &quot;/home/foo&quot;
  <strong>Explanation: </strong>In the canonical path, multiple consecutive slashes are replaced by a single one.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> path = &quot;/a/./b/../../c/&quot;
  <strong>Output:</strong> &quot;/c&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= path.length <= 3000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

path consists of English letters, digits, period '.', slash '/' or '_'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

path is a valid absolute Unix path.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
