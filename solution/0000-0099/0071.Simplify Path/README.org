* [[https://leetcode-cn.com/problems/simplify-path][71. 简化路径]]
  :PROPERTIES:
  :CUSTOM_ID: 简化路径
  :END:
[[./solution/0000-0099/0071.Simplify Path/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以
'/' 开头），请你将其转化为更加简洁的规范路径。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p class="MachineTrans-lang-zh-CN">
#+end_html

在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点
（..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，'//'）都被视为单个斜杠
'/' 。
对于此问题，任何其他格式的点（例如，'...'）均被视为文件/目录名称。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请注意，返回的 规范路径 必须遵循下述格式：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

始终以斜杠 '/' 开头。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

两个目录名之间必须只有一个斜杠 '/' 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最后一个目录名（如果存在）不能 以 '/' 结尾。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 '.' 或
'..'）。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

返回简化后得到的 规范路径 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>path = "/home/"
  <strong>输出：</strong>"/home"
  <strong>解释：</strong>注意，最后一个目录名后面没有斜杠。 </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>path = "/../"
  <strong>输出：</strong>"/"
  <strong>解释：</strong>从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>path = "/home//foo/"
  <strong>输出：</strong>"/home/foo"
  <strong>解释：</strong>在规范路径中，多个连续斜杠需要用一个斜杠替换。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>path = "/a/./b/../../c/"
  <strong>输出：</strong>"/c"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= path.length <= 3000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

path 由英文字母，数字，'.'，'/' 或 '_' 组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

path 是一个有效的 Unix 风格绝对路径。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
