* [[https://leetcode.com/problems/merge-k-sorted-lists][23. Merge k
Sorted Lists]]
  :PROPERTIES:
  :CUSTOM_ID: merge-k-sorted-lists
  :END:
[[./solution/0000-0099/0023.Merge k Sorted Lists/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an array of k linked-lists lists, each linked-list is
sorted in ascending order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Merge all the linked-lists into one sorted linked-list and return it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> lists = [[1,4,5],[1,3,4],[2,6]]
  <strong>Output:</strong> [1,1,2,3,4,4,5,6]
  <strong>Explanation:</strong> The linked-lists are:
  [
    1-&gt;4-&gt;5,
    1-&gt;3-&gt;4,
    2-&gt;6
  ]
  merging them into one sorted list:
  1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> lists = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> lists = [[]]
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

k == lists.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= k <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= lists[i].length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10^4 <= lists[i][j] <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

lists[i] is sorted in ascending order.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The sum of lists[i].length won't exceed 10^4.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def mergeKLists(self, lists: List[ListNode]) -> ListNode:
          if not lists:
              return None
          n = len(lists)
          for i in range(1, n):
              lists[i] = self.mergeTwoLists(lists[i - 1], lists[i])
          return lists[n - 1]

      def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
          dummy = ListNode()
          cur = dummy
          while l1 and l2:
              if l1.val <= l2.val:
                  cur.next = l1
                  l1 = l1.next
              else:
                  cur.next = l2
                  l2 = l2.next
              cur = cur.next
          cur.next = l1 or l2
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode mergeKLists(ListNode[] lists) {
          int n;
          if (lists == null || (n = lists.length) == 0) {
              return null;
          }
          for (int i = 1; i < n; ++i) {
              lists[i] = mergeTwoLists(lists[i - 1], lists[i]);
          }
          return lists[n - 1];
      }

      private ListNode mergeTwoLists(ListNode l1, ListNode l2) {
          ListNode dummy = new ListNode();
          ListNode cur = dummy;
          while (l1 != null && l2 != null) {
              if (l1.val <= l2.val) {
                  cur.next = l1;
                  l1 = l1.next;
              } else {
                  cur.next = l2;
                  l2 = l2.next;
              }
              cur = cur.next;
          }
          cur.next = l1 == null ? l2 : l1;
          return dummy.next;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode() : val(0), next(nullptr) {}
   *     ListNode(int x) : val(x), next(nullptr) {}
   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
   * };
   */
  class Solution {
  public:
      ListNode* mergeKLists(vector<ListNode*>& lists) {
          int n = lists.size();
          if (n == 0) {
              return nullptr;
          }
          for (int i = 1; i < n; ++i) {
              lists[i] = mergeTwoLists(lists[i - 1], lists[i]);
          }
          return lists[n - 1];
      }

  private:
      ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
          ListNode* dummy = new ListNode();
          ListNode* cur = dummy;
          while (l1 && l2) {
              if (l1->val <= l2->val) {
                  cur->next = l1;
                  l1 = l1->next;
              } else {
                  cur->next = l2;
                  l2 = l2->next;
              }
              cur = cur->next;
          }
          cur->next = l1 ? l1 : l2;
          return dummy->next;
      }
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * type ListNode struct {
   *     Val int
   *     Next *ListNode
   * }
   */
  func mergeKLists(lists []*ListNode) *ListNode {
      n := len(lists)
      if n == 0 {
          return nil
      }
      for i := 1; i < n; i++ {
          lists[i] = mergeTwoLists(lists[i-1], lists[i])
      }
      return lists[n-1]
  }

   func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
      dummy := &ListNode{}
      cur := dummy
      for l1 != nil && l2 != nil {
          if l1.Val <= l2.Val {
              cur.Next = l1
              l1 = l1.Next
          } else {
              cur.Next = l2
              l2 = l2.Next
          }
          cur = cur.Next
      }
      if l1 != nil {
          cur.Next = l1
      } else if l2 != nil {
          cur.Next = l2
      }
      return dummy.Next
  }
#+end_example

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val, next) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.next = (next===undefined ? null : next)
   * }
   */
  /**
   * @param {ListNode[]} lists
   * @return {ListNode}
   */
  var mergeKLists = function(lists) {
      const n = lists.length;
      if (n == 0) {
          return null;
      }
      for (let i = 1; i < n; ++i) {
          lists[i] = mergeTwoLists(lists[i - 1], lists[i]);
      }
      return lists[n - 1];
  };

  function mergeTwoLists(l1, l2) {
      const dummy = new ListNode();
      let cur = dummy;
      while (l1 && l2) {
          if (l1.val <= l2.val) {
              cur.next = l1;
              l1 = l1.next;
          } else {
              cur.next = l2;
              l2 = l2.next;
          }
          cur = cur.next;
      }
      cur.next = l1 || l2;
      return dummy.next;
  }
#+end_src

*** *Ruby*
    :PROPERTIES:
    :CUSTOM_ID: ruby
    :END:
#+begin_example
  # Definition for singly-linked list.
  # class ListNode
  #     attr_accessor :val, :next
  #     def initialize(val = 0, _next = nil)
  #         @val = val
  #         @next = _next
  #     end
  # end
  # @param {ListNode[]} lists
  # @return {ListNode}
  def merge_k_lists(lists)
      n = lists.length
      i = 1
      while i < n
          lists[i] = merge_two_lists(lists[i - 1], lists[i])
          i += 1
      end
      lists[n - 1]
  end

  def merge_two_lists(l1, l2)
    dummy = ListNode.new()
    cur = dummy
    while l1 && l2
        if l1.val <= l2.val
            cur.next = l1
            l1 = l1.next
        else
            cur.next = l2
            l2 = l2.next
        end
        cur = cur.next
    end
    cur.next = l1 || l2
    dummy.next
  end
#+end_example

*** *C#*
    :PROPERTIES:
    :CUSTOM_ID: c-1
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     public int val;
   *     public ListNode next;
   *     public ListNode(int val=0, ListNode next=null) {
   *         this.val = val;
   *         this.next = next;
   *     }
   * }
   */
  public class Solution {
      public ListNode MergeKLists(ListNode[] lists) {
          int n = lists.Length;
          if (n == 0) {
              return null;
          }
          for (int i = 1; i < n; ++i) {
              lists[i] = MergeTwoLists(lists[i - 1], lists[i]);
          }
          return lists[n - 1];
      }

      private ListNode MergeTwoLists(ListNode l1, ListNode l2) {
          ListNode dummy = new ListNode();
          ListNode cur = dummy;
          while (l1 != null && l2 != null) {
              if (l1.val <= l2.val) {
                  cur.next = l1;
                  l1 = l1.next;
              } else {
                  cur.next = l2;
                  l2 = l2.next;
              }
              cur = cur.next;
          }
          cur.next = l1 == null ? l2 : l1;
          return dummy.next;
      }
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
