* [[https://leetcode-cn.com/problems/reverse-nodes-in-k-group][25. K
个一组翻转链表]]
  :PROPERTIES:
  :CUSTOM_ID: k-个一组翻转链表
  :END:
[[./solution/0000-0099/0025.Reverse Nodes in k-Group/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

k 是一个正整数，它的值小于或等于链表的长度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你可以设计一个只使用常数额外空间的算法来解决此问题吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,2,3,4,5], k = 2
  <strong>输出：</strong>[2,1,4,3,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,2,3,4,5], k = 3
  <strong>输出：</strong>[3,2,1,4,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,2,3,4,5], k = 1
  <strong>输出：</strong>[1,2,3,4,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1], k = 1
  <strong>输出：</strong>[1]
  </pre>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

列表中节点的数量在范围 sz 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= sz <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= sz

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
