* [[https://leetcode-cn.com/problems/spiral-matrix-ii][59. 螺旋矩阵 II]]
  :PROPERTIES:
  :CUSTOM_ID: 螺旋矩阵-ii
  :END:
[[./solution/0000-0099/0059.Spiral Matrix II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个正整数 n ，生成一个包含 1
到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 3
  <strong>输出：</strong>[[1,2,3],[8,9,4],[7,6,5]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 1
  <strong>输出：</strong>[[1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def generateMatrix(self, n: int) -> List[List[int]]:
          res = [[0] * n for _ in range(n)]
          num = 1
          m1, m2 = 0, n - 1
          while m1 < m2:
              for j in range(m1, m2):
                  res[m1][j] = num
                  num += 1
              for i in range(m1, m2):
                  res[i][m2] = num
                  num += 1
              for j in range(m2, m1, -1):
                  res[m2][j] = num
                  num += 1
              for i in range(m2, m1, -1):
                  res[i][m1] = num
                  num += 1
              m1 += 1
              m2 -= 1
          if m1 == m2:
              res[m1][m1] = num
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[][] generateMatrix(int n) {
          int[][] res = new int[n][n];
          int num = 1;
          int m1 = 0, m2 = n - 1;
          while (m1 < m2) {
              for (int j = m1; j < m2; ++j) {
                  res[m1][j] = num++;
              }
              for (int i = m1; i < m2; ++i) {
                  res[i][m2] = num++;
              }
              for (int j = m2; j > m1; --j) {
                  res[m2][j] = num++;
              }
              for (int i = m2; i > m1; --i) {
                  res[i][m1] = num++;
              }
              ++m1;
              --m2;
          }
          if (m1 == m2) {
              res[m1][m1] = num;
          }

          return res;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      vector<vector<int>> generateMatrix(int n) {
          vector<vector<int>> res(n, vector<int>(n, 0));
          int num = 1;
          int m1 = 0, m2 = n - 1;
          while (m1 < m2) {
              for (int j = m1; j < m2; ++j) {
                  res[m1][j] = num++;
              }
              for (int i = m1; i < m2; ++i) {
                  res[i][m2] = num++;
              }
              for (int j = m2; j > m1; --j) {
                  res[m2][j] = num++;
              }
              for (int i = m2; i > m1; --i) {
                  res[i][m1] = num++;
              }
              ++m1;
              --m2;
          }
          if (m1 == m2) {
              res[m1][m1] = num;
          }
          return res;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
