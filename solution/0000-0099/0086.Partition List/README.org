* [[https://leetcode-cn.com/problems/partition-list][86. 分隔链表]]
  :PROPERTIES:
  :CUSTOM_ID: 分隔链表
  :END:
[[./solution/0000-0099/0086.Partition List/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个链表的头节点 head 和一个特定值 x ，请你对链表进行分隔，使得所有
小于 x 的节点都出现在 大于或等于 x 的节点之前。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你应当 保留 两个分区中每个节点的初始相对位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,4,3,2,5,2], x = 3
  <strong>输出</strong>：[1,2,2,4,3,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [2,1], x = 2
  <strong>输出</strong>：[1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

链表中节点的数目在范围 [0, 200] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-200 <= x <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

创建两个链表，一个存放小于 =x= 的节点，另一个存放大于等于 =x=
的节点，之后进行拼接即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def partition(self, head: ListNode, x: int) -> ListNode:
          l1, l2 = ListNode(), ListNode()
          cur1, cur2 = l1, l2
          while head:
              if head.val < x:
                  cur1.next = head
                  cur1 = cur1.next
              else:
                  cur2.next = head
                  cur2 = cur2.next
              head = head.next
          cur1.next = l2.next
          cur2.next = None
          return l1.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode partition(ListNode head, int x) {
          ListNode l1 = new ListNode(0);
          ListNode l2 = new ListNode(0);
          ListNode cur1 = l1, cur2 = l2;
          while (head != null) {
              if (head.val < x) {
                  cur1.next = head;
                  cur1 = cur1.next;
              } else {
                  cur2.next = head;
                  cur2 = cur2.next;
              }
              head = head.next;
          }
          cur1.next = l2.next;
          cur2.next = null;
          return l1.next;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode() : val(0), next(nullptr) {}
   *     ListNode(int x) : val(x), next(nullptr) {}
   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
   * };
   */
  class Solution {
  public:
      ListNode* partition(ListNode* head, int x) {
          ListNode* l1 = new ListNode();
          ListNode* l2 = new ListNode();
          ListNode* cur1 = l1;
          ListNode* cur2 = l2;
          while (head != nullptr) {
              if (head->val < x) {
                  cur1->next = head;
                  cur1 = cur1->next;
              } else {
                  cur2->next = head;
                  cur2 = cur2->next;
              }
              head = head->next;
          }
          cur1->next = l2->next;
          cur2->next = nullptr;
          return l1->next;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
