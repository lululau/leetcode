* [[https://leetcode.com/problems/partition-list][86. Partition List]]
  :PROPERTIES:
  :CUSTOM_ID: partition-list
  :END:
[[./solution/0000-0099/0086.Partition List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the head of a linked list and a value x, partition it such that
all nodes less than x come before nodes greater than or equal to x.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You should preserve the original relative order of the nodes in each of
the two partitions.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,4,3,2,5,2], x = 3
  <strong>Output:</strong> [1,2,2,4,3,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [2,1], x = 2
  <strong>Output:</strong> [1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the list is in the range [0, 200].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-200 <= x <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def partition(self, head: ListNode, x: int) -> ListNode:
          l1, l2 = ListNode(), ListNode()
          cur1, cur2 = l1, l2
          while head:
              if head.val < x:
                  cur1.next = head
                  cur1 = cur1.next
              else:
                  cur2.next = head
                  cur2 = cur2.next
              head = head.next
          cur1.next = l2.next
          cur2.next = None
          return l1.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode partition(ListNode head, int x) {
          ListNode l1 = new ListNode(0);
          ListNode l2 = new ListNode(0);
          ListNode cur1 = l1, cur2 = l2;
          while (head != null) {
              if (head.val < x) {
                  cur1.next = head;
                  cur1 = cur1.next;
              } else {
                  cur2.next = head;
                  cur2 = cur2.next;
              }
              head = head.next;
          }
          cur1.next = l2.next;
          cur2.next = null;
          return l1.next;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode() : val(0), next(nullptr) {}
   *     ListNode(int x) : val(x), next(nullptr) {}
   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
   * };
   */
  class Solution {
  public:
      ListNode* partition(ListNode* head, int x) {
          ListNode* l1 = new ListNode();
          ListNode* l2 = new ListNode();
          ListNode* cur1 = l1;
          ListNode* cur2 = l2;
          while (head != nullptr) {
              if (head->val < x) {
                  cur1->next = head;
                  cur1 = cur1->next;
              } else {
                  cur2->next = head;
                  cur2 = cur2->next;
              }
              head = head->next;
          }
          cur1->next = l2->next;
          cur2->next = nullptr;
          return l1->next;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
