* [[https://leetcode-cn.com/problems/reverse-linked-list-ii][92.
反转链表 II]]
  :PROPERTIES:
  :CUSTOM_ID: 反转链表-ii
  :END:
[[./solution/0000-0099/0092.Reverse Linked List II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

给你单链表的头指针 head 和两个整数 left 和 right ，其中 left <= right
。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,2,3,4,5], left = 2, right = 4
  <strong>输出：</strong>[1,4,3,2,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [5], left = 1, right = 1
  <strong>输出：</strong>[5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

链表中节点数目为 n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-500 <= Node.val <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= left <= right <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶： 你可以使用一趟扫描完成反转吗？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:
          if head is None or head.next is None or m == n:
              return head
          dummy = ListNode(0)
          dummy.next = head
          pre, cur = dummy, head
          for _ in range(m - 1):
              pre = cur
              cur = cur.next
          p, q = pre, cur
          for _ in range(n - m + 1):
              t = cur.next
              cur.next = pre
              pre = cur
              cur = t
          p.next = pre
          q.next = cur
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  class Solution {
      public ListNode reverseBetween(ListNode head, int m, int n) {
          if (head == null || head.next == null || m == n) {
              return head;
          }
          ListNode dummy = new ListNode(0);
          dummy.next = head;
          ListNode pre = dummy, cur = head;
          for (int i = 0; i < m - 1; ++i) {
              pre = cur;
              cur = cur.next;
          }
          ListNode p = pre, q = cur;
          for (int i = 0; i < n - m + 1; ++i) {
              ListNode t = cur.next;
              cur.next = pre;
              pre = cur;
              cur = t;
          }
          p.next = pre;
          q.next = cur;
          return dummy.next;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
