* [[https://leetcode-cn.com/problems/subsets][78. 子集]]
  :PROPERTIES:
  :CUSTOM_ID: 子集
  :END:
[[./solution/0000-0099/0078.Subsets/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums ，数组中的元素 互不相同
。返回该数组所有可能的子集（幂集）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,2,3]
  <strong>输出：</strong>[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [0]
  <strong>输出：</strong>[[],[0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10 <= nums[i] <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums 中的所有元素 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

回溯法的基本模板：

#+begin_example
  res = []
  path = []

  def backtrack(未探索区域, res, path):
      if path 满足条件:
          res.add(path) # 深度拷贝
          # return  # 如果不用继续搜索需要 return
      for 选择 in 未探索区域当前可能的选择:
          if 当前选择符合要求:
              path.add(当前选择)
              backtrack(新的未探索区域, res, path)
              path.pop()
#+end_example

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def subsets(self, nums: List[int]) -> List[List[int]]:
          def dfs(nums, i, res, path):
              res.append(copy.deepcopy(path))
              while i < len(nums):
                  path.append(nums[i])
                  dfs(nums, i + 1, res, path)
                  path.pop()
                  i += 1
          res, path = [], []
          dfs(nums, 0, res, path)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public List<List<Integer>> subsets(int[] nums) {
          List<Integer> path = new ArrayList<>();
          List<List<Integer>> res = new ArrayList<>();
          dfs(nums, 0, res, path);
          return res;
      }

      private void dfs(int[] nums, int i, List<List<Integer>> res, List<Integer> path) {
          res.add(new ArrayList<>(path));
          while (i < nums.length) {
              path.add(nums[i]);
              dfs(nums, i + 1, res, path);
              path.remove(path.size() - 1);
              ++i;
          }
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
