* [[https://leetcode.com/problems/valid-parentheses][20. Valid
Parentheses]]
  :PROPERTIES:
  :CUSTOM_ID: valid-parentheses
  :END:
[[./solution/0000-0099/0020.Valid Parentheses/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string s containing just the characters '(', ')', '{', '}', '['
and ']', determine if the input string is valid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

An input string is valid if:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Open brackets must be closed by the same type of brackets.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Open brackets must be closed in the correct order.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;()&quot;
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;()[]{}&quot;
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;(]&quot;
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;([)]&quot;
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;{[]}&quot;
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consists of parentheses only '()<<>>'.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def isValid(self, s: str) -> bool:
          q = []
          parentheses = {'()', '[]', '{}'}
          for ch in s:
              if ch in '([{':
                  q.append(ch)
              elif not q or q.pop() + ch not in parentheses:
                  return False
          return not q
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean isValid(String s) {
          char[] chars = s.toCharArray();
          Deque<Character> q = new ArrayDeque<>();
          for (char ch : chars) {
              boolean left = ch == '(' || ch == '[' || ch == '{';
              if (left) q.push(ch);
              else if (q.isEmpty() || !match(q.pop(), ch)) return false;
          }
          return q.isEmpty();
      }

      private boolean match(char l, char r) {
          return (l == '(' && r == ')') || (l == '{' && r == '}') || (l == '[' && r == ']');
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool isValid(string s) {
          stack<char> q;
          for (int i = 0, n = s.length(); i < n; ++i) {
              if (s[i] == '{' || s[i] == '[' || s[i] == '(') q.push(s[i]);
              else if (q.empty() || !match(q.top(), s[i])) return false;
              else q.pop();
          }
          return q.empty();
      }
  private:
      bool match(char l, char r) {
          return (l == '(' && r == ')') || (l == '[' && r == ']') || (l == '{' && r == '}');
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
