* [[https://leetcode.com/problems/subsets-ii][90. Subsets II]]
  :PROPERTIES:
  :CUSTOM_ID: subsets-ii
  :END:
[[./solution/0000-0099/0090.Subsets II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums that may contain duplicates, return all
possible subsets (the power set).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The solution set must not contain duplicate subsets. Return the solution
in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,2,2]
  <strong>Output:</strong> [[],[1],[1,2],[1,2,2],[2],[2,2]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [0]
  <strong>Output:</strong> [[],[0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10 <= nums[i] <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
          def dfs(nums, i, res, path):
              res.append(copy.deepcopy(path))
              for j in range(i, len(nums)):
                  if j != i and nums[j] == nums[j - 1]:
                      continue
                  path.append(nums[j])
                  dfs(nums, j + 1, res, path)
                  path.pop()
          res, path = [], []
          nums.sort()
          dfs(nums, 0, res, path)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<List<Integer>> subsetsWithDup(int[] nums) {
          List<Integer> path = new ArrayList<>();
          List<List<Integer>> res = new ArrayList<>();
          Arrays.sort(nums);
          dfs(nums, 0, res, path);
          return res;
      }

      private void dfs(int[] nums, int i, List<List<Integer>> res, List<Integer> path) {
          res.add(new ArrayList<>(path));
          for (int j = i; j < nums.length; ++j) {
              if (j != i && nums[j] == nums[j - 1]) {
                  continue;
              }
              path.add(nums[j]);
              dfs(nums, i + 1, res, path);
              path.remove(path.size() - 1);
          }
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
