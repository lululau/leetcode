* [[https://leetcode.com/problems/minimum-path-sum][64. Minimum Path
Sum]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-path-sum
  :END:
[[./solution/0000-0099/0064.Minimum Path Sum/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a m x n grid filled with non-negative numbers, find a path from
top left to bottom right, which minimizes the sum of all numbers along
its path.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note: You can only move either down or right at any point in time.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,3,1],[1,5,1],[4,2,1]]
  <strong>Output:</strong> 7
  <strong>Explanation:</strong> Because the path 1 &rarr; 3 &rarr; 1 &rarr; 1 &rarr; 1 minimizes the sum.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> grid = [[1,2,3],[4,5,6]]
  <strong>Output:</strong> 12
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == grid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == grid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= grid[i][j] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def minPathSum(self, grid: List[List[int]]) -> int:
          m, n = len(grid), len(grid[0])
          dp = [[grid[0][0]] * n for _ in range(m)]
          for i in range(1, m):
              dp[i][0] = dp[i - 1][0] + grid[i][0]
          for j in range(1, n):
              dp[0][j] = dp[0][j - 1] + grid[0][j]
          for i in range(1, m):
              for j in range(1, n):
                  dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]
          return dp[m - 1][n - 1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int minPathSum(int[][] grid) {
          int m = grid.length, n = grid[0].length;
          int[][] dp = new int[m][n];
          dp[0][0] = grid[0][0];
          for (int i = 1; i < m; ++i) {
              dp[i][0] = dp[i - 1][0] + grid[i][0];
          }
          for (int j = 1; j < n; ++j) {
              dp[0][j] = dp[0][j - 1] + grid[0][j];
          }
          for (int i = 1; i < m; ++i) {
              for (int j = 1; j < n; ++j) {
                  dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
              }
          }
          return dp[m - 1][n - 1];
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int minPathSum(vector<vector<int>>& grid) {
          int m = grid.size(), n = grid[0].size();
          vector<vector<int>> dp(m, vector<int>(n, grid[0][0]));
          for (int i = 1; i < m; ++i) {
              dp[i][0] = dp[i - 1][0] + grid[i][0];
          }
          for (int j = 1; j < n; ++j) {
              dp[0][j] = dp[0][j - 1] + grid[0][j];
          }
          for (int i = 1; i < m; ++i) {
              for (int j = 1; j < n; ++j) {
                  dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
              }
          }
          return dp[m - 1][n - 1];
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
