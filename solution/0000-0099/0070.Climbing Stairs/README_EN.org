* [[https://leetcode.com/problems/climbing-stairs][70. Climbing Stairs]]
  :PROPERTIES:
  :CUSTOM_ID: climbing-stairs
  :END:
[[./solution/0000-0099/0070.Climbing Stairs/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are climbing a staircase. It takes n steps to reach the top.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each time you can either climb 1 or 2 steps. In how many distinct ways
can you climb to the top?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> There are two ways to climb to the top.
  1. 1 step + 1 step
  2. 2 steps
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 3
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> There are three ways to climb to the top.
  1. 1 step + 1 step + 1 step
  2. 1 step + 2 steps
  3. 2 steps + 1 step
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 45

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def climbStairs(self, n: int) -> int:
          a, b = 0, 1
          for _ in range(n):
              a, b = b, a + b
          return b
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int climbStairs(int n) {
          int a = 0, b = 1;
          for (int i = 0; i < n; ++i) {
              int c = a + b;
              a = b;
              b = c;
          }
          return b;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int climbStairs(int n) {
          int a = 0, b = 1;
          for (int i = 0; i < n; ++i) {
              int c = a + b;
              a = b;
              b = c;
          }
          return b;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number} n
   * @return {number}
   */
  var climbStairs = function (n) {
    let a = 0,
      b = 1;
    for (let i = 0; i < n; ++i) {
      const c = a + b;
      a = b;
      b = c;
    }
    return b;
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func climbStairs(n int) int {
      a, b := 0, 1
      for i := 0; i < n; i++ {
          a, b = b, a + b
      }
      return b
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
