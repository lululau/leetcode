* [[https://leetcode-cn.com/problems/add-two-numbers][2. 两数相加]]
  :PROPERTIES:
  :CUSTOM_ID: 两数相加
  :END:
[[./solution/0000-0099/0002.Add Two Numbers/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个 非空
的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你将两个数相加，并以相同形式返回一个表示和的链表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>l1 = [2,4,3], l2 = [5,6,4]
  <strong>输出：</strong>[7,0,8]
  <strong>解释：</strong>342 + 465 = 807.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>l1 = [0], l2 = [0]
  <strong>输出：</strong>[0]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
  <strong>输出：</strong>[8,9,9,9,0,0,0,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每个链表中的节点数在范围 [1, 100] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目数据保证列表表示的数字不含前导零

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
          dummy = ListNode()
          carry, cur = 0, dummy
          while l1 or l2 or carry:
              s = (0 if not l1 else l1.val) + (0 if not l2 else l2.val) + carry
              carry, val = divmod(s, 10)
              cur.next = ListNode(val)
              cur = cur.next
              l1 = None if not l1 else l1.next
              l2 = None if not l2 else l2.next
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
          ListNode dummy = new ListNode(0);
          int carry = 0;
          ListNode cur = dummy;
          while (l1 != null || l2 != null || carry != 0) {
              int s = (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val) + carry;
              carry = s / 10;
              cur.next = new ListNode(s % 10);
              cur = cur.next;
              l1 = l1 == null ? null : l1.next;
              l2 = l2 == null ? null : l2.next;
          }
          return dummy.next;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode() : val(0), next(nullptr) {}
   *     ListNode(int x) : val(x), next(nullptr) {}
   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
   * };
   */
  class Solution {
  public:
      ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
          ListNode* dummy = new ListNode();
          int carry = 0;
          ListNode* cur = dummy;
          while (l1 || l2 || carry) {
              int s = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + carry;
              carry = s / 10;
              cur->next = new ListNode(s % 10);
              cur = cur->next;
              l1 = l1 ? l1->next : nullptr;
              l2 = l2 ? l2->next : nullptr;
          }
          return dummy->next;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val, next) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.next = (next===undefined ? null : next)
   * }
   */
  /**
   * @param {ListNode} l1
   * @param {ListNode} l2
   * @return {ListNode}
   */
  var addTwoNumbers = function(l1, l2) {
      const dummy = new ListNode();
      let carry = 0;
      let cur = dummy;
      while (l1 || l2 || carry) {
          const s = (l1?.val || 0) + (l2?.val || 0) + carry;
          carry = Math.floor(s / 10);
          cur.next = new ListNode(s % 10);
          cur = cur.next;
          l1 = l1?.next;
          l2 = l2?.next;
      }
      return dummy.next;
  };
#+end_src

*** *C#*
    :PROPERTIES:
    :CUSTOM_ID: c-1
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     public int val;
   *     public ListNode next;
   *     public ListNode(int val=0, ListNode next=null) {
   *         this.val = val;
   *         this.next = next;
   *     }
   * }
   */
  public class Solution {
      public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
          ListNode dummy = new ListNode();
          int carry = 0;
          ListNode cur = dummy;
          while (l1 != null || l2 != null || carry != 0) {
              int s = (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val) + carry;
              carry = s / 10;
              cur.next = new ListNode(s % 10);
              cur = cur.next;
              l1 = l1 == null ? null : l1.next;
              l2 = l2 == null ? null : l2.next;
          }
          return dummy.next;
      }
  }
#+end_example

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * type ListNode struct {
   *     Val int
   *     Next *ListNode
   * }
   */
  func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
      dummy := &ListNode{}
      carry := 0
      cur := dummy
      for l1 != nil || l2 != nil || carry != 0 {
          s := carry
          if l1 != nil {
              s += l1.Val
          }
          if l2 != nil {
              s += l2.Val
          }
          carry = s / 10
          cur.Next = &ListNode{s % 10, nil}
          cur = cur.Next
          if l1 != nil {
              l1 = l1.Next
          }
          if l2 != nil {
              l2 = l2.Next
          }
      }
      return dummy.Next
  }
#+end_example

*** *Ruby*
    :PROPERTIES:
    :CUSTOM_ID: ruby
    :END:
#+begin_example
  # Definition for singly-linked list.
  # class ListNode
  #     attr_accessor :val, :next
  #     def initialize(val = 0, _next = nil)
  #         @val = val
  #         @next = _next
  #     end
  # end
  # @param {ListNode} l1
  # @param {ListNode} l2
  # @return {ListNode}
  def add_two_numbers(l1, l2)
      dummy = ListNode.new()
      carry = 0
      cur = dummy
      while !l1.nil? || !l2.nil? || carry > 0
          s = (l1.nil? ? 0 : l1.val) + (l2.nil? ? 0 : l2.val) + carry
          carry = s / 10
          cur.next = ListNode.new(s % 10)
          cur = cur.next
          l1 = l1.nil? ? l1 : l1.next
          l2 = l2.nil? ? l2 : l2.next
      end
      dummy.next
  end
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
