* [[https://leetcode-cn.com/problems/validate-binary-search-tree][98.
验证二叉搜索树]]
  :PROPERTIES:
  :CUSTOM_ID: 验证二叉搜索树
  :END:
[[./solution/0000-0099/0098.Validate Binary Search Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树，判断其是否是一个有效的二叉搜索树。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设一个二叉搜索树具有如下特征：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

节点的左子树只包含小于当前节点的数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

节点的右子树只包含大于当前节点的数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有左子树和右子树自身必须也是二叉搜索树。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong>
      2
     / \
    1   3
  <strong>输出:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:
  </strong>    5
     / \
    1   4
  &nbsp;    / \
  &nbsp;   3   6
  <strong>输出:</strong> false
  <strong>解释:</strong> 输入为: [5,1,4,null,null,3,6]。
  &nbsp;    根节点的值为 5 ，但是其右子节点值为 4 。
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

中序遍历，若是一个有效的二叉搜索树，那么遍历到的序列应该是单调递增的。所以只要比较判断遍历到的当前数是否
=>== 上一个数即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      pre = None
      def isValidBST(self, root: TreeNode) -> bool:
          if not root:
              return True
          if not self.isValidBST(root.left):
              return False
          if self.pre is not None and self.pre >= root.val:
              return False
          self.pre = root.val
          if not self.isValidBST(root.right):
              return False
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      private Integer pre = null;
      public boolean isValidBST(TreeNode root) {
          if (root == null) return true;
          if (!isValidBST(root.left)) return false;
          if (pre != null && pre >= root.val) return false;
          pre = root.val;
          if (!isValidBST(root.right)) return false;
          return true;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
