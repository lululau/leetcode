* [[https://leetcode.com/problems/validate-binary-search-tree][98.
Validate Binary Search Tree]]
  :PROPERTIES:
  :CUSTOM_ID: validate-binary-search-tree
  :END:
[[./solution/0000-0099/0098.Validate Binary Search Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary tree, determine if it is a valid binary
search tree (BST).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A valid BST is defined as follows:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The left subtree of a node contains only nodes with keys less than the
node's key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The right subtree of a node contains only nodes with keys greater than
the node's key.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Both the left and right subtrees must also be binary search trees.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [2,1,3]
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [5,1,4,null,null,3,6]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> The root node&#39;s value is 5 but its right child&#39;s value is 4.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= Node.val <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      pre = None
      def isValidBST(self, root: TreeNode) -> bool:
          if not root:
              return True
          if not self.isValidBST(root.left):
              return False
          if self.pre is not None and self.pre >= root.val:
              return False
          self.pre = root.val
          if not self.isValidBST(root.right):
              return False
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      private Integer pre = null;
      public boolean isValidBST(TreeNode root) {
          if (root == null) return true;
          if (!isValidBST(root.left)) return false;
          if (pre != null && pre >= root.val) return false;
          pre = root.val;
          if (!isValidBST(root.right)) return false;
          return true;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
