* [[https://leetcode.com/problems/search-a-2d-matrix][74. Search a 2D
Matrix]]
  :PROPERTIES:
  :CUSTOM_ID: search-a-2d-matrix
  :END:
[[./solution/0000-0099/0074.Search a 2D Matrix/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Write an efficient algorithm that searches for a value in an m x n
matrix. This matrix has the following properties:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Integers in each row are sorted from left to right.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The first integer of each row is greater than the last integer of the
previous row.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == matrix.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= matrix[i][j], target <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
          m, n = len(matrix), len(matrix[0])
          l, h = 0, m * n - 1
          while l <= h:
              mid = (l + h) >> 1
              x, y = divmod(mid, n)
              if matrix[x][y] == target:
                  return True
              if matrix[x][y] < target:
                  l = mid + 1
              else:
                  h = mid - 1
          return False
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean searchMatrix(int[][] matrix, int target) {
          int m = matrix.length, n = matrix[0].length;
          int l = 0, h = m * n - 1;
          while (l <= h) {
              int mid = (l + h) >>> 1;
              int x = mid / n, y = mid % n;
              if (matrix[x][y] == target) return true;
              if (matrix[x][y] < target) l = mid + 1;
              else h = mid - 1;
          }
          return false;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool searchMatrix(vector<vector<int>>& matrix, int target) {
          int m = matrix.size(), n = matrix[0].size();
          int l = 0, h = m * n - 1;
          while (l <= h) {
              int mid = l + ((h - l) >> 1);
              int x = mid / n, y = mid % n;
              if (matrix[x][y] == target) return true;
              if (matrix[x][y] < target) l = mid + 1;
              else h = mid - 1;
          }
          return false;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[][]} matrix
   * @param {number} target
   * @return {boolean}
   */
  var searchMatrix = function (matrix, target) {
    const m = matrix.length;
    const n = matrix[0].length;
    let l = 0;
    let h = m * n - 1;
    while (l <= h) {
      const mid = (l + h) >>> 1;
      const x = Math.floor(mid / n);
      const y = mid % n;
      if (matrix[x][y] == target) {
        return true;
      }
      if (matrix[x][y] < target) {
        l = mid + 1;
      } else {
        h = mid - 1;
      }
    }
    return false;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
