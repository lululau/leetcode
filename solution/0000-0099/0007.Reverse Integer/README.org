* [[https://leetcode-cn.com/problems/reverse-integer][7. 整数反转]]
  :PROPERTIES:
  :CUSTOM_ID: 整数反转
  :END:
[[./solution/0000-0099/0007.Reverse Integer/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。

#+begin_html
  </p>
#+end_html

假设环境不允许存储 64 位整数（有符号或无符号）。

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>x = 123
  <strong>输出：</strong>321
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>x = -123
  <strong>输出：</strong>-321
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>x = 120
  <strong>输出：</strong>21
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>x = 0
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= x <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

转字符串，进行翻转。

#+begin_src python
  class Solution:
      def reverse(self, x: int) -> int:
          y = int(str(abs(x))[::-1])
          res = -y if x < 0 else y
          return 0 if res < -2**31 or res > 2**31 -1 else res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int reverse(int x) {
          long res = 0;
          // 考虑负数情况，所以这里条件为: x != 0
          while (x != 0) {
              res = res * 10 + (x % 10);
              x /= 10;
          }
          return res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ? 0 : (int) res;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int reverse(int x) {
          long long ans = 0;
          while (x) {
              ans = ans * 10 + x % 10;
              x /= 10;
          }
          return ans < INT_MIN || ans > INT_MAX ? 0 : ans;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number} x
   * @return {number}
   */
  var reverse = function (x) {
    let res = 0;
    while (x) {
      res = res * 10 + (x % 10);
      x = ~~(x / 10);
    }
    return res < Math.pow(-2, 31) || res > Math.pow(2, 31) - 1 ? 0 : res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
