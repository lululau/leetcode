* [[https://leetcode.com/problems/3sum-closest][16. 3Sum Closest]]
  :PROPERTIES:
  :CUSTOM_ID: sum-closest
  :END:
[[./solution/0000-0099/0016.3Sum Closest/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array nums of n integers and an integer target, find three
integers in nums such that the sum is closest to target. Return the sum
of the three integers. You may assume that each input would have exactly
one solution.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [-1,2,1,-4], target = 1
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= nums.length <= 10^3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10^3 <= nums[i] <= 10^3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10^4 <= target <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def threeSumClosest(self, nums: List[int], target: int) -> int:
          def twoSumClosest(nums, start, end, target):
              res = 0
              diff = 10000
              while start < end:
                  val = nums[start] + nums[end]
                  if val == target:
                      return val
                  if abs(val - target) < diff:
                      res = val
                      diff = abs(val - target)
                  if val < target:
                      start += 1
                  else:
                      end -= 1
              return res

          nums.sort()
          res, n = 0, len(nums)
          diff = 10000
          for i in range(n - 2):
              t = twoSumClosest(nums, i + 1, n - 1, target - nums[i])
              if abs(nums[i] + t - target) < diff:
                  res = nums[i] + t
                  diff = abs(nums[i] + t - target)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int threeSumClosest(int[] nums, int target) {
          Arrays.sort(nums);
          int res = 0;
          int n = nums.length;
          int diff = Integer.MAX_VALUE;
          for (int i = 0; i < n - 2; ++i) {
              int t = twoSumClosest(nums, i + 1, n - 1, target - nums[i]);
              if (Math.abs(nums[i] + t - target) < diff) {
                  res = nums[i] + t;
                  diff = Math.abs(nums[i] + t - target);
              }
          }
          return res;
      }

      private int twoSumClosest(int[] nums, int start, int end, int target) {
          int res = 0;
          int diff = Integer.MAX_VALUE;
          while (start < end) {
              int val = nums[start] + nums[end];
              if (val == target) {
                  return val;
              }
              if (Math.abs(val - target) < diff) {
                  res = val;
                  diff = Math.abs(val - target);
              }
              if (val < target) {
                  ++start;
              } else {
                  --end;
              }
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} target
   * @return {number}
   */
  var threeSumClosest = function (nums, target) {
      let len = nums.length;
      nums.sort((a, b) => a - b);
      let diff = Infinity;
      let res;
      for (let i = 0; i < len - 2; i++) {
          if (i > 0 && nums[i] === nums[i - 1]) continue;
          let left = i + 1, right = len - 1;
          let cur = nums[i] + nums[i + 1] + nums[i + 2];
          if (cur > target) {
              let newDiff = Math.abs((cur - target))
              if (newDiff < diff) {
                  diff = newDiff;
                  res = cur;
              }
              break;
          }
          while (left < right) {
              cur = nums[i] + nums[left] + nums[right];
              if (cur === target) return target;
              let newDiff = Math.abs((cur - target))
              if (newDiff < diff) {
                  diff = newDiff;
                  res = cur;
              }
              if (cur < target) {
                  while (nums[left] === nums[left + 1]) left++;
                  left++;
                  continue;
              } else {
                  while (nums[right] === nums[right - 1]) right--;
                  right--;
                  continue;
              }
          }
      }
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
