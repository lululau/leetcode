* [[https://leetcode.com/problems/count-and-say][38. Count and Say]]
  :PROPERTIES:
  :CUSTOM_ID: count-and-say
  :END:
[[./solution/0000-0099/0038.Count and Say/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

The count-and-say sequence is a sequence of digit strings defined by the
recursive formula:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

countAndSay(1) = "1"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

countAndSay(n) is the way you would "say" the digit string from
countAndSay(n-1), which is then converted into a different digit string.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

To determine how you "say" a digit string, split it into the minimal
number of groups so that each group is a contiguous section all of the
same character. Then for each group, say the number of characters, then
say the character. To convert the saying into a digit string, replace
the counts with a number and concatenate every saying.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, the saying and conversion for digit string "3322251":

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a positive integer n, return the nth term of the count-and-say
sequence.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 1
  <strong>Output:</strong> &quot;1&quot;
  <strong>Explanation:</strong> This is the base case.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4
  <strong>Output:</strong> &quot;1211&quot;
  <strong>Explanation:</strong>
  countAndSay(1) = &quot;1&quot;
  countAndSay(2) = say &quot;1&quot; = one 1 = &quot;11&quot;
  countAndSay(3) = say &quot;11&quot; = two 1&#39;s = &quot;21&quot;
  countAndSay(4) = say &quot;21&quot; = one 2 + one 1 = &quot;12&quot; + &quot;11&quot; = &quot;1211&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
