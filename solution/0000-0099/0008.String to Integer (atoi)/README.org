* [[https://leetcode-cn.com/problems/string-to-integer-atoi][8.
字符串转换整数 (atoi)]]
  :PROPERTIES:
  :CUSTOM_ID: 字符串转换整数-atoi
  :END:
[[./solution/0000-0099/0008.String to Integer %28atoi%29/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32
位有符号整数（类似 C/C++ 中的 atoi 函数）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

函数 myAtoi(string s) 的算法如下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

读入字符串并丢弃无用的前导空格

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。
确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" ->
32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果整数数超过 32 位有符号整数范围 [−231,  231 − 1]
，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231
的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

返回整数作为最终结果。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

注意：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

本题中的空白字符只包括空格字符 ' ' 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "42"
  <strong>输出：</strong>42
  <strong>解释：</strong>加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
  第 1 步："42"（当前没有读入字符，因为没有前导空格）
           ^
  第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
           ^
  第 3 步："<strong>42</strong>"（读入 "42"）
             ^
  解析得到整数 42 。
  由于 "42" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 42 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "   -42"
  <strong>输出：</strong>-42
  <strong>解释：</strong>
  第 1 步："<strong>   </strong>-42"（读入前导空格，但忽视掉）
              ^
  第 2 步："   <strong>-</strong>42"（读入 '-' 字符，所以结果应该是负数）
               ^
  第 3 步："   -<strong>42</strong>"（读入 "42"）
                 ^
  解析得到整数 -42 。
  由于 "-42" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 -42 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "4193 with words"
  <strong>输出：</strong>4193
  <strong>解释：</strong>
  第 1 步："4193 with words"（当前没有读入字符，因为没有前导空格）
           ^
  第 2 步："4193 with words"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
           ^
  第 3 步："<strong>4193</strong> with words"（读入 "4193"；由于下一个字符不是一个数字，所以读入停止）
               ^
  解析得到整数 4193 。
  由于 "4193" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 4193 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "words and 987"
  <strong>输出：</strong>0
  <strong>解释：</strong>
  第 1 步："words and 987"（当前没有读入字符，因为没有前导空格）
           ^
  第 2 步："words and 987"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
           ^
  第 3 步："words and 987"（由于当前字符 'w' 不是一个数字，所以读入停止）
           ^
  解析得到整数 0 ，因为没有读入任何数字。
  由于 0 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 0 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "-91283472332"
  <strong>输出：</strong>-2147483648
  <strong>解释：</strong>
  第 1 步："-91283472332"（当前没有读入字符，因为没有前导空格）
           ^
  第 2 步："<strong>-</strong>91283472332"（读入 '-' 字符，所以结果应该是负数）
            ^
  第 3 步："-<strong>91283472332</strong>"（读入 "91283472332"）
                       ^
  解析得到整数 -91283472332 。
  由于 -91283472332 小于范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 的下界，最终结果被截断为 -2<sup>31</sup> = -2147483648 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= s.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 由英文字母（大写和小写）、数字（0-9）、' '、'+'、'-' 和 '.' 组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

遍历字符串，注意做溢出处理。

同[[./lcof/面试题67. 把字符串转换成整数/README.org][面试题 67.
把字符串转换成整数]]。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def myAtoi(self, s: str) -> int:
          if not s:
              return 0
          n = len(s)
          if n == 0:
              return 0
          i = 0
          while s[i] == ' ':
              i += 1
              # 仅包含空格
              if i == n:
                  return 0
          sign = -1 if s[i] == '-' else 1
          if s[i] in ['-', '+']:
              i += 1
          res, flag = 0, (2 ** 31 - 1) // 10
          while i < n:
              # 非数字，跳出循环体
              if not s[i].isdigit():
                  break
              c = int(s[i])
              # 溢出判断
              if res > flag or (res == flag and c > 7):
                  return 2 ** 31 - 1 if sign > 0 else -2 ** 31
              res = res * 10 + c
              i += 1
          return sign * res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int myAtoi(String s) {
          if (s == null) return 0;
          int n = s.length();
          if (n == 0) return 0;
          int i = 0;
          while (s.charAt(i) == ' ') {
              // 仅包含空格
              if (++i == n) return 0;
          }
          int sign = 1;
          if (s.charAt(i) == '-') sign = -1;
          if (s.charAt(i) == '-' || s.charAt(i) == '+') ++i;
          int res = 0, flag = Integer.MAX_VALUE / 10;
          for (; i < n; ++i) {
              // 非数字，跳出循环体
              if (s.charAt(i) < '0' || s.charAt(i) > '9') break;
              // 溢出判断
              if (res > flag || (res == flag && s.charAt(i) > '7')) return sign > 0 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
              res = res * 10 + (s.charAt(i) - '0');
          }
          return sign * res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
