* [[https://leetcode-cn.com/problems/two-sum][1. 两数之和]]
  :PROPERTIES:
  :CUSTOM_ID: 两数之和
  :END:
  [[./solution/0000-0099/0001.Two Sum/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

   #+begin_html
   <!-- 这里写题目描述 -->
   #+end_html

   #+begin_html
   <p>
   #+end_html

   给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出
   和为目标值 的那 两个 整数，并返回它们的数组下标。

   #+begin_html
   </p>
   #+end_html

   #+begin_html
   <p>
   #+end_html

   你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

   #+begin_html
   </p>
   #+end_html

   #+begin_html
   <p>
   #+end_html

   你可以按任意顺序返回答案。

   #+begin_html
   </p>
   #+end_html

   #+begin_html
   <p>
   #+end_html



   #+begin_html
   </p>
   #+end_html

   #+begin_html
   <p>
   #+end_html

   示例 1：

   #+begin_html
   </p>
   #+end_html

   #+begin_html
   <pre>
   <strong>输入：</strong>nums = [2,7,11,15], target = 9
   <strong>输出：</strong>[0,1]
   <strong>解释：</strong>因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
   </pre>
   #+end_html

   #+begin_html
   <p>
   #+end_html

   示例 2：

   #+begin_html
   </p>
   #+end_html

   #+begin_html
   <pre>
   <strong>输入：</strong>nums = [3,2,4], target = 6
   <strong>输出：</strong>[1,2]
   </pre>
   #+end_html

   #+begin_html
   <p>
   #+end_html

   示例 3：

   #+begin_html
   </p>
   #+end_html

   #+begin_html
   <pre>
   <strong>输入：</strong>nums = [3,3], target = 6
   <strong>输出：</strong>[0,1]
   </pre>
   #+end_html

   #+begin_html
   <p>
   #+end_html



   #+begin_html
   </p>
   #+end_html

   #+begin_html
   <p>
   #+end_html

   提示：

   #+begin_html
   </p>
   #+end_html

   #+begin_html
   <ul>
   #+end_html

   #+begin_html
   <li>
   #+end_html

   2 <= nums.length <= 103

   #+begin_html
   </li>
   #+end_html

   #+begin_html
   <li>
   #+end_html

   -109 <= nums[i] <= 109

   #+begin_html
   </li>
   #+end_html

   #+begin_html
   <li>
   #+end_html

   -109 <= target <= 109

   #+begin_html
   </li>
   #+end_html

   #+begin_html
   <li>
   #+end_html

   只会存在一个有效答案

   #+begin_html
   </li>
   #+end_html

   #+begin_html
   </ul>
   #+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

   #+begin_html
   <!-- 这里可写通用的实现逻辑 -->
   #+end_html

   用哈希表（字典）存放数组值以及对应的下标。

   遍历数组，当发现 =target - nums[i]= 在哈希表中，说明找到了目标值。

   #+begin_html
   <!-- tabs:start -->
   #+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

    #+begin_html
    <!-- 这里可写当前语言的特殊实现逻辑 -->
    #+end_html

    #+begin_src python
      class Solution:
          def twoSum(self, nums: List[int], target: int) -> List[int]:
              helper = {}
              for i, v in enumerate(nums):
                  num = target - v
                  if num in helper:
                      return [helper[num], i]
                  helper[v] = i
    #+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

    #+begin_html
    <!-- 这里可写当前语言的特殊实现逻辑 -->
    #+end_html

    #+begin_src java
      class Solution {
          public int[] twoSum(int[] nums, int target) {
              Map<Integer, Integer> map = new HashMap<>();
              for (int i = 0, n = nums.length; i < n; ++i) {
                  int num = target - nums[i];
                  if (map.containsKey(num)) {
                      return new int[]{map.get(num), i};
                  }
                  map.put(nums[i], i);
              }
              return null;
          }
      }
    #+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
    #+begin_src js
      var twoSum = function (nums, target) {
        const map = new Map();
        for (let i = 0; i < nums.length; i++) {
          if (map.has(target - nums[i])) {
            return [map.get(target - nums[i]), i];
          }
          map.set(nums[i], i);
        }
        return [];
      };
    #+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
    #+begin_example
    #+end_example

    #+begin_html
    <!-- tabs:end -->
    #+end_html
