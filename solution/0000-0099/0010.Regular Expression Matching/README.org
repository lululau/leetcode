* [[https://leetcode-cn.com/problems/regular-expression-matching][10.
正则表达式匹配]]
  :PROPERTIES:
  :CUSTOM_ID: 正则表达式匹配
  :END:
[[./solution/0000-0099/0010.Regular Expression Matching/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 s 和一个字符规律 p，请你来实现一个支持
'.' 和 '*' 的正则表达式匹配。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

'.' 匹配任意单个字符

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

'*' 匹配零个或多个前面的那一个元素

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "aa" p = "a"
  <strong>输出：</strong>false
  <strong>解释：</strong>"a" 无法匹配 "aa" 整个字符串。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "aa" p = "a*"
  <strong>输出：</strong>true
  <strong>解释：</strong>因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "ab" p = ".*"
  <strong>输出：</strong>true
  <strong>解释：</strong>".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "aab" p = "c*a*b"
  <strong>输出：</strong>true
  <strong>解释：</strong>因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "mississippi" p = "mis*is*p*."
  <strong>输出：</strong>false</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= s.length <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= p.length <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 可能为空，且只包含从 a-z 的小写字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

保证每次出现字符 * 时，前面都匹配到有效的字符

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
