* [[https://leetcode.com/problems/trapping-rain-water][42. Trapping Rain
Water]]
  :PROPERTIES:
  :CUSTOM_ID: trapping-rain-water
  :END:
[[./solution/0000-0099/0042.Trapping Rain Water/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given n non-negative integers representing an elevation map where the
width of each bar is 1, compute how much water it can trap after
raining.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> height = [4,2,0,3,2,5]
  <strong>Output:</strong> 9
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == height.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= n <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= height[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def trap(self, height: List[int]) -> int:
          n = len(height)
          if n < 3:
              return 0

          left_max = [height[0]] * n
          for i in range(1, n):
              left_max[i] = max(left_max[i - 1], height[i])

          right_max = [height[n - 1]] * n
          for i in range(n - 2, -1, -1):
              right_max[i] = max(right_max[i + 1], height[i])

          res = 0
          for i in range(n):
              res += min(left_max[i], right_max[i]) - height[i]
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int trap(int[] height) {
          int n;
          if ((n = height.length) < 3) return 0;

          int[] leftMax = new int[n];
          leftMax[0] = height[0];
          for (int i = 1; i < n; ++i) {
              leftMax[i] = Math.max(leftMax[i - 1], height[i]);
          }

          int[] rightMax = new int[n];
          rightMax[n - 1] = height[n - 1];
          for (int i = n - 2; i >= 0; --i) {
              rightMax[i] = Math.max(rightMax[i + 1], height[i]);
          }

          int res = 0;
          for (int i = 0; i < n; ++i) {
              res += Math.min(leftMax[i], rightMax[i]) - height[i];
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
