* [[https://leetcode.com/problems/remove-nth-node-from-end-of-list][19.
Remove Nth Node From End of List]]
  :PROPERTIES:
  :CUSTOM_ID: remove-nth-node-from-end-of-list
  :END:
[[./solution/0000-0099/0019.Remove Nth Node From End of List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the head of a linked list, remove the nth node from the end of the
list and return its head.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you do this in one pass?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,3,4,5], n = 2
  <strong>Output:</strong> [1,2,3,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1], n = 1
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2], n = 1
  <strong>Output:</strong> [1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the list is sz.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= sz <= 30

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= sz

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
          dummy = ListNode(next=head)
          fast = slow = dummy
          for _ in range(n):
              fast = fast.next
          while fast.next:
              slow, fast = slow.next, fast.next
          slow.next = slow.next.next
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode removeNthFromEnd(ListNode head, int n) {
          ListNode dummy = new ListNode(0, head);
          ListNode fast = dummy, slow = dummy;
          while (n-- > 0) {
              fast = fast.next;
          }
          while (fast.next != null) {
              slow = slow.next;
              fast = fast.next;
          }
          slow.next = slow.next.next;
          return dummy.next;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode() : val(0), next(nullptr) {}
   *     ListNode(int x) : val(x), next(nullptr) {}
   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
   * };
   */
  class Solution {
  public:
      ListNode* removeNthFromEnd(ListNode* head, int n) {
          ListNode* dummy = new ListNode(0, head);
          ListNode* fast = dummy;
          ListNode* slow = dummy;
          while (n--) {
              fast = fast->next;
          }
          while (fast->next) {
              slow = slow->next;
              fast = fast->next;
          }
          slow->next = slow->next->next;
          return dummy->next;
      }
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * type ListNode struct {
   *     Val int
   *     Next *ListNode
   * }
   */
  func removeNthFromEnd(head *ListNode, n int) *ListNode {
      dummy := &ListNode{0, head}
      fast := dummy
      slow := dummy
      for n > 0 {
          fast = fast.Next
          n -= 1
      }
      for fast.Next != nil {
          slow = slow.Next
          fast = fast.Next
      }
      slow.Next = slow.Next.Next
      return dummy.Next
  }
#+end_example

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val, next) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.next = (next===undefined ? null : next)
   * }
   */
  /**
   * @param {ListNode} head
   * @param {number} n
   * @return {ListNode}
   */
  var removeNthFromEnd = function(head, n) {
      const dummy = new ListNode(0, head);
      let fast = dummy, slow = dummy;
      while (n--) {
          fast = fast.next;
      }
      while (fast.next) {
          slow = slow.next;
          fast = fast.next;
      }
      slow.next = slow.next.next;
      return dummy.next;
  };
#+end_src

*** *Ruby*
    :PROPERTIES:
    :CUSTOM_ID: ruby
    :END:
#+begin_example
  # Definition for singly-linked list.
  # class ListNode
  #     attr_accessor :val, :next
  #     def initialize(val = 0, _next = nil)
  #         @val = val
  #         @next = _next
  #     end
  # end
  # @param {ListNode} head
  # @param {Integer} n
  # @return {ListNode}
  def remove_nth_from_end(head, n)
      dummy = ListNode.new(0, head)
      fast = slow = dummy
      while n > 0
          fast = fast.next
          n -= 1
      end
      while fast.next
          slow = slow.next
          fast = fast.next
      end
      slow.next = slow.next.next
      return dummy.next
  end
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
