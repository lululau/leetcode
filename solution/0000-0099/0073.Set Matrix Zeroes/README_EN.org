* [[https://leetcode.com/problems/set-matrix-zeroes][73. Set Matrix
Zeroes]]
  :PROPERTIES:
  :CUSTOM_ID: set-matrix-zeroes
  :END:
[[./solution/0000-0099/0073.Set Matrix Zeroes/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an m x n matrix. If an element is 0, set its entire row and column
to 0. Do it in-place.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

A straight forward solution using O(mn) space is probably a bad idea.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A simple improvement uses O(m + n) space, but still not the best
solution.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Could you devise a constant space solution?

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[1,1,1],[1,0,1],[1,1,1]]
  <strong>Output:</strong> [[1,0,1],[0,0,0],[1,0,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
  <strong>Output:</strong> [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == matrix.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == matrix[0].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= matrix[i][j] <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
Solution 1:

#+begin_src python
  class Solution:
      def setZeroes(self, matrix: List[List[int]]) -> None:
          """
          Do not return anything, modify matrix in-place instead.
          """
          m, n = len(matrix), len(matrix[0])
          zero_rows = [False] * m
          zero_cols = [False] * n
          for i in range(m):
              for j in range(n):
                  if matrix[i][j] == 0:
                      zero_rows[i] = zero_cols[j] = True
          for i in range(m):
              for j in range(n):
                  if zero_rows[i] or zero_cols[j]:
                      matrix[i][j] = 0
#+end_src

Solution 2:

#+begin_src python
  class Solution:
      def setZeroes(self, matrix: List[List[int]]) -> None:
          """
          Do not return anything, modify matrix in-place instead.
          """
          m, n = len(matrix), len(matrix[0])
          first_row_has_zero = any(matrix[0][j] == 0 for j in range(n))
          first_col_has_zero = any(matrix[i][0] == 0 for i in range(m))

          for i in range(1, m):
              for j in range(1, n):
                  if matrix[i][j] == 0:
                      matrix[i][0] = matrix[0][j] = 0

          for i in range(1, m):
              for j in range(1, n):
                  if matrix[i][0] == 0 or matrix[0][j] == 0:
                      matrix[i][j] = 0

          if first_row_has_zero:
              for j in range(n):
                  matrix[0][j] = 0

          if first_col_has_zero:
              for i in range(m):
                  matrix[i][0] = 0
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
Solution 1:

#+begin_src java
  class Solution {
      public void setZeroes(int[][] matrix) {
          int m = matrix.length, n = matrix[0].length;
          boolean[] zeroRows = new boolean[m];
          boolean[] zeroCols = new boolean[n];
          for (int i = 0; i < m; ++i) {
              for (int j = 0; j < n; ++j) {
                  if (matrix[i][j] == 0) {
                      zeroRows[i] = zeroCols[j] = true;
                  }
              }
          }
          for (int i = 0; i < m; ++i) {
              for (int j = 0; j < n; ++j) {
                  if (zeroRows[i] || zeroCols[j]) {
                      matrix[i][j] = 0;
                  }
              }
          }
      }
  }
#+end_src

Solution 2:

#+begin_src java
  class Solution {
      public void setZeroes(int[][] matrix) {
          int m = matrix.length, n = matrix[0].length;
          boolean firstRowHasZero = false;
          boolean firstColHasZero = false;
          for (int j = 0; j < n; ++j) {
              if (matrix[0][j] == 0) {
                  firstRowHasZero = true;
                  break;
              }
          }
          for (int i = 0; i < m; ++i) {
              if (matrix[i][0] == 0) {
                  firstColHasZero = true;
                  break;
              }
          }
          for (int i = 1; i < m; ++i) {
              for (int j = 1; j < n; ++j) {
                  if (matrix[i][j] == 0) {
                      matrix[i][0] = matrix[0][j] = 0;
                  }
              }
          }
          for (int i = 1; i < m; ++i) {
              for (int j = 1; j < n; ++j) {
                  if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                      matrix[i][j] = 0;
                  }
              }
          }
          if (firstRowHasZero) {
              for (int j = 0; j < n; ++j) {
                  matrix[0][j] = 0;
              }
          }
          if (firstColHasZero) {
              for (int i = 0; i < m; ++i) {
                  matrix[i][0] = 0;
              }
          }
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      void setZeroes(vector<vector<int>>& matrix) {
          int m = matrix.size(), n = matrix[0].size();
          vector<bool> zeroRows(m), zeroCols(n);
          for (int i = 0; i < m; i++) {
              for (int j = 0; j < n; j++) {
                  if (matrix[i][j] == 0) {
                      zeroRows[i] = zeroCols[j] = true;
                  }
              }
          }
          for (int i = 0; i < m; i++) {
              for (int j = 0; j < n; j++) {
                  if (zeroRows[i] || zeroCols[j]) {
                      matrix[i][j] = 0;
                  }
              }
          }
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
