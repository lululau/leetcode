* [[https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii][80.
Remove Duplicates from Sorted Array II]]
  :PROPERTIES:
  :CUSTOM_ID: remove-duplicates-from-sorted-array-ii
  :END:
[[./solution/0000-0099/0080.Remove Duplicates from Sorted Array II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a sorted array nums, remove the duplicates in-place such that
duplicates appeared at most twice and return the new length.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Do not allocate extra space for another array; you must do this by
modifying the input array in-place with O(1) extra memory.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Clarification:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Confused why the returned value is an integer, but your answer is an
array?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that the input array is passed in by reference, which means a
modification to the input array will be known to the caller.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Internally you can think of this:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  // <strong>nums</strong> is passed in by reference. (i.e., without making a copy)
  int len = removeDuplicates(nums);

  // any modification to <strong>nums</strong> in your function would be known by the caller.
  // using the length returned by your function, it prints the first <strong>len</strong> elements.
  for (int i = 0; i &lt; len; i++) {
  &nbsp; &nbsp; print(nums[i]);
  }
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,1,1,2,2,3]
  <strong>Output:</strong> 5, nums = [1,1,2,2,3]
  <strong>Explanation:</strong> Your function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> being <strong><code>1, 1, 2, 2</code></strong> and <strong>3</strong> respectively. It doesn&#39;t matter what you leave beyond the returned length.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [0,0,1,1,1,1,2,3,3]
  <strong>Output:</strong> 7, nums = [0,0,1,1,2,3,3]
  <strong>Explanation:</strong> Your function should return length = <strong><code>7</code></strong>, with the first seven elements of <em><code>nums</code></em> being modified to&nbsp;<strong><code>0</code></strong>, <strong>0</strong>, <strong>1</strong>, <strong>1</strong>, <strong>2</strong>, <strong>3</strong> and&nbsp;<strong>3</strong> respectively. It doesn&#39;t matter what values are set beyond&nbsp;the returned length.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums is sorted in ascending order.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def removeDuplicates(self, nums: List[int]) -> int:
          n = len(nums)
          cnt, cur = 0, 1
          for i in range(1, n):
              if nums[i] == nums[i - 1]:
                  cnt += 1
              else:
                  cnt = 0
              if cnt < 2:
                  nums[cur] = nums[i]
                  cur += 1
          return cur
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int removeDuplicates(int[] nums) {
          int cnt = 0, cur = 1;
          for (int i = 1; i < nums.length; ++i) {
              if (nums[i] == nums[i - 1]) ++cnt;
              else cnt = 0;
              if (cnt < 2) nums[cur++] = nums[i];
          }
          return cur;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int removeDuplicates(vector<int>& nums) {
          int n = nums.size();
          int cnt = 0, cur = 1;
          for (int i = 1; i < n; ++i) {
              if (nums[i] == nums[i - 1]) ++cnt;
              else cnt = 0;
              if (cnt < 2) nums[cur++] = nums[i];
          }
          return cur;
      }
  };
#+end_src

*** *C#*
    :PROPERTIES:
    :CUSTOM_ID: c-1
    :END:
#+begin_example
  public class Solution {
      public int RemoveDuplicates(int[] nums) {
          int cnt = 0, cur = 1;
          for (int i = 1; i < nums.Length; ++i)
          {
              if (nums[i] == nums[i - 1]) ++cnt;
              else cnt = 0;
              if (cnt < 2) nums[cur++] = nums[i];
          }
          return cur;
      }
  }
#+end_example

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var removeDuplicates = function (nums) {
      if (nums.length == 0) return 0;
      let len = nums.length;
      let j = 0;
      for (let i = 0; i < nums.length - 1; i++) {
          if (nums[i] != nums[i - 1] || nums[i] != nums[i + 1]) {
              nums[j++] = nums[i];
          }
      }
      nums[j] = nums[len - 1];
      return j + 1;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
