* [[https://leetcode.com/problems/remove-element][27. Remove Element]]
  :PROPERTIES:
  :CUSTOM_ID: remove-element
  :END:
[[./solution/0000-0099/0027.Remove Element/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array nums and a value val, remove all instances of that value
in-place and return the new length.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Do not allocate extra space for another array, you must do this by
modifying the input array in-place with O(1) extra memory.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The order of elements can be changed. It doesn't matter what you leave
beyond the new length.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Clarification:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Confused why the returned value is an integer but your answer is an
array?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that the input array is passed in by reference, which means a
modification to the input array will be known to the caller as well.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Internally you can think of this:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  // <strong>nums</strong> is passed in by reference. (i.e., without making a copy)
  int len = removeElement(nums, val);

  // any modification to <strong>nums</strong> in your function would be known by the caller.
  // using the length returned by your function, it prints the first <strong>len</strong> elements.
  for (int i = 0; i &lt; len; i++) {
  &nbsp; &nbsp; print(nums[i]);
  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [3,2,2,3], val = 3
  <strong>Output:</strong> 2, nums = [2,2]
  <strong>Explanation:</strong> Your function should return length = <strong>2</strong>, with the first two elements of <em>nums</em> being <strong>2</strong>.
  It doesn&#39;t matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [0,1,2,2,3,0,4,2], val = 2
  <strong>Output:</strong> 5, nums = [0,1,4,0,3]
  <strong>Explanation:</strong> Your function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> containing&nbsp;<strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>3</code></strong>, <strong><code>0</code></strong>, and&nbsp;<strong>4</strong>. Note that the order of those five elements can be arbitrary. It doesn&#39;t matter what values are set beyond&nbsp;the returned length.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums[i] <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def removeElement(self, nums: List[int], val: int) -> int:
          cnt, n = 0, len(nums)
          for i in range(n):
              if nums[i] == val:
                  cnt += 1
              else:
                  nums[i - cnt] = nums[i]
          return n - cnt
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int removeElement(int[] nums, int val) {
          int cnt = 0, n = nums.length;
          for (int i = 0; i < n; ++i) {
              if (nums[i] == val) ++cnt;
              else nums[i - cnt] = nums[i];
          }
          return n - cnt;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int removeElement(vector<int>& nums, int val) {
          int cnt = 0, n = nums.size();
          for (int i = 0; i < n; ++i) {
              if (nums[i] == val) ++cnt;
              else nums[i - cnt] = nums[i];
          }
          return n - cnt;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} val
   * @return {number}
   */
  var removeElement = function (nums, val) {
    let cnt = 0;
    const n = nums.length;
    for (let i = 0; i < n; ++i) {
      if (nums[i] == val) ++cnt;
      else nums[i - cnt] = nums[i];
    }
    return n - cnt;
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func removeElement(nums []int, val int) int {
      cnt, n := 0, len(nums)
      for i := 0; i < n; i++ {
          if (nums[i] == val) {
              cnt++
          } else {
              nums[i - cnt] = nums[i]
          }
      }
      return n - cnt
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
