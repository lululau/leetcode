* [[https://leetcode.com/problems/permutations][46. Permutations]]
  :PROPERTIES:
  :CUSTOM_ID: permutations
  :END:
[[./solution/0000-0099/0046.Permutations/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array nums of distinct integers, return all the possible
permutations. You can return the answer in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,2,3]
  <strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [0,1]
  <strong>Output:</strong> [[0,1],[1,0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1]
  <strong>Output:</strong> [[1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 6

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10 <= nums[i] <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the integers of nums are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def permute(self, nums: List[int]) -> List[List[int]]:
          if len(nums) <= 1:
              return [nums]
          res = []
          for i, num in enumerate(nums):
              n = nums[:i] + nums[i + 1:]
              for item in self.permute(n):
                  res.append([num] + item)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
Backtracking:

#+begin_src java
  class Solution {
      public List<List<Integer>> permute(int[] nums) {
          List<List<Integer>> res = new ArrayList<>();
          List<Integer> path = new ArrayList<>();
          boolean[] used = new boolean[nums.length];
          dfs(nums, 0, res, path, used);
          return res;
      }

      private void dfs(int[] nums, int i, List<List<Integer>> res, List<Integer> path, boolean[] used) {
          if (i == nums.length) {
              res.add(new ArrayList<>(path));
              return;
          }
          for (int j = 0; j < nums.length; ++j) {
              if (!used[j]) {
                  path.add(nums[j]);
                  used[j] = true;
                  dfs(nums, i + 1, res, path, used);
                  used[j] = false;
                  path.remove(path.size() - 1);
              }
          }
      }
  }
#+end_src

- Recursion:

#+begin_src java
  class Solution {
      public List<List<Integer>> permute(int[] nums) {
          List<List<Integer>> res = new ArrayList<>();
          permute(res, nums, 0);
          return res;
      }

      private void permute(List<List<Integer>> res, int[] nums, int start) {
          if (start == nums.length) {
              List<Integer> t = new ArrayList<>();
              for (int e : nums) {
                  t.add(e);
              }
              res.add(t);
              return;
          }
          for (int i = start; i < nums.length; ++i) {
              swap(nums, i, start);
              permute(res, nums, start + 1);
              swap(nums, i, start);
          }
      }

      private void swap(int[] nums, int i, int j) {
          int t = nums[i];
          nums[i] = nums[j];
          nums[j] = t;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number[][]}
   */
  var permute = function(nums) {
      let res = [];
      let solution = [];
      let record = new Array(nums.length).fill(false);
      dfs(nums, 0, record, solution, res);
      return res;
  };

  function dfs (nums, depth, record, solution, res) {
      if (depth == nums.length) {
          res.push(solution.slice());
          return;
      }
      for (let i = 0; i < nums.length; i++) {
          if (!record[i]) {
              solution.push(nums[i]);
              record[i] = true;
              dfs(nums, depth + 1, record, solution, res);
              solution.pop();
              record[i] = false;
          }
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
