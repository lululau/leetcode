* [[https://leetcode.com/problems/integer-to-roman][12. Integer to
Roman]]
  :PROPERTIES:
  :CUSTOM_ID: integer-to-roman
  :END:
[[./solution/0000-0099/0012.Integer to Roman/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Roman numerals are represented by seven different symbols: I, V, X, L,
C, D and M.

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Symbol</strong>       <strong>Value</strong>
  I             1
  V             5
  X             10
  L             50
  C             100
  D             500
  M             1000</pre>
#+end_html

#+begin_html
  <p>
#+end_html

For example, 2 is written as II in Roman numeral, just two one's added
together. 12 is written as XII, which is simply X + II. The number 27 is
written as XXVII, which is XX + V + II.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Roman numerals are usually written largest to smallest from left to
right. However, the numeral for four is not IIII. Instead, the number
four is written as IV. Because the one is before the five we subtract it
making four. The same principle applies to the number nine, which is
written as IX. There are six instances where subtraction is used:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

I can be placed before V (5) and X (10) to make 4 and 9. 

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

X can be placed before L (50) and C (100) to make 40 and 90. 

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

C can be placed before D (500) and M (1000) to make 400 and 900.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Given an integer, convert it to a roman numeral.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num = 3
  <strong>Output:</strong> &quot;III&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num = 4
  <strong>Output:</strong> &quot;IV&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num = 9
  <strong>Output:</strong> &quot;IX&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num = 58
  <strong>Output:</strong> &quot;LVIII&quot;
  <strong>Explanation:</strong> L = 50, V = 5, III = 3.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> num = 1994
  <strong>Output:</strong> &quot;MCMXCIV&quot;
  <strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= num <= 3999

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def intToRoman(self, num: int) -> str:
          nums = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]
          res = []
          for k, v in nums:
              while num >= k:
                  num -= k
                  res.append(v)
          return ''.join(res)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public String intToRoman(int num) {
          int[] nums = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
          String[] romans = new String[]{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
          StringBuilder sb = new StringBuilder();
          for (int i = 0; i < nums.length; ++i) {
              while (num >= nums[i]) {
                  num -= nums[i];
                  sb.append(romans[i]);
              }
          }
          return sb.toString();
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      string intToRoman(int num) {
          vector<int> nums{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
          vector<string> romans{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
          string ans;
          for (int i = 0; i < nums.size(); ++i) {
              while (num >= nums[i]) {
                  num -= nums[i];
                  ans.append(romans[i]);
              }
          }
          return ans;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
