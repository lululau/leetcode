* [[https://leetcode-cn.com/problems/integer-to-roman][12.
整数转罗马数字]]
  :PROPERTIES:
  :CUSTOM_ID: 整数转罗马数字
  :END:
[[./solution/0000-0099/0012.Integer to Roman/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>字符</strong>          <strong>数值</strong>
  I             1
  V             5
  X             10
  L             50
  C             100
  D             500
  M             1000</pre>
#+end_html

#+begin_html
  <p>
#+end_html

例如， 罗马数字 2 写做 II ，即为两个并列的 1。12
写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4
不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5
减小数 1 得到的数值 4 。同样地，数字 9
表示为 IX。这个特殊的规则只适用于以下六种情况：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 3
  <strong>输出:</strong> "III"</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 4
  <strong>输出:</strong> "IV"</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 9
  <strong>输出:</strong> "IX"</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 58
  <strong>输出:</strong> "LVIII"
  <strong>解释:</strong> L = 50, V = 5, III = 3.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> 1994
  <strong>输出:</strong> "MCMXCIV"
  <strong>解释:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= num <= 3999

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

贪心算法实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def intToRoman(self, num: int) -> str:
          nums = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]
          res = []
          for k, v in nums:
              while num >= k:
                  num -= k
                  res.append(v)
          return ''.join(res)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public String intToRoman(int num) {
          int[] nums = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
          String[] romans = new String[]{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
          StringBuilder sb = new StringBuilder();
          for (int i = 0; i < nums.length; ++i) {
              while (num >= nums[i]) {
                  num -= nums[i];
                  sb.append(romans[i]);
              }
          }
          return sb.toString();
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      string intToRoman(int num) {
          vector<int> nums{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
          vector<string> romans{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
          string ans;
          for (int i = 0; i < nums.size(); ++i) {
              while (num >= nums[i]) {
                  num -= nums[i];
                  ans.append(romans[i]);
              }
          }
          return ans;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
