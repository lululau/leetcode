* [[https://leetcode.com/problems/remove-duplicates-from-sorted-list][83.
Remove Duplicates from Sorted List]]
  :PROPERTIES:
  :CUSTOM_ID: remove-duplicates-from-sorted-list
  :END:
[[./solution/0000-0099/0083.Remove Duplicates from Sorted List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the head of a sorted linked list, delete all duplicates such that
each element appears only once. Return the linked list sorted as well.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,1,2]
  <strong>Output:</strong> [1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,1,2,3,3]
  <strong>Output:</strong> [1,2,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the list is in the range [0, 300].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The list is guaranteed to be sorted in ascending order.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def deleteDuplicates(self, head: ListNode) -> ListNode:
          cur = head
          while cur and cur.next:
              if cur.val == cur.next.val:
                  cur.next = cur.next.next
              else:
                  cur = cur.next
          return head
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode deleteDuplicates(ListNode head) {
          ListNode cur = head;
          while (cur != null && cur.next != null) {
              if (cur.val == cur.next.val) {
                  cur.next = cur.next.next;
              } else {
                  cur = cur.next;
              }
          }
          return head;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode() : val(0), next(nullptr) {}
   *     ListNode(int x) : val(x), next(nullptr) {}
   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
   * };
   */
  class Solution {
  public:
      ListNode* deleteDuplicates(ListNode* head) {
          ListNode* cur = head;
          while (cur != nullptr && cur->next != nullptr) {
              if (cur->val == cur->next->val) {
                  cur->next = cur->next->next;
              } else {
                  cur = cur->next;
              }
          }
          return head;
      }
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func deleteDuplicates(head *ListNode) *ListNode {
      current := head
      for current != nil && current.Next != nil {
          if current.Val == current.Next.Val {
              current.Next = current.Next.Next
          } else {
              current = current.Next
          }
      }
      return head
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
