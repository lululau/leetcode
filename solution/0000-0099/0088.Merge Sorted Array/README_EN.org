* [[https://leetcode.com/problems/merge-sorted-array][88. Merge Sorted
Array]]
  :PROPERTIES:
  :CUSTOM_ID: merge-sorted-array
  :END:
[[./solution/0000-0099/0088.Merge Sorted Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1
as one sorted array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The number of elements initialized in nums1 and nums2 are m and n
respectively. You may assume that nums1 has a size equal to m + n such
that it has enough space to hold additional elements from nums2.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
  <strong>Output:</strong> [1,2,2,3,5,6]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0
  <strong>Output:</strong> [1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

nums1.length == m + n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums2.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= m, n <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m + n <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= nums1[i], nums2[i] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
          """
          Do not return anything, modify nums1 in-place instead.
          """
          i, j, k = m - 1, n - 1, m + n - 1
          while j >= 0:
              if i >= 0 and nums1[i] > nums2[j]:
                  nums1[k] = nums1[i]
                  i -= 1
              else:
                  nums1[k] = nums2[j]
                  j -= 1
              k -= 1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public void merge(int[] nums1, int m, int[] nums2, int n) {
          int i = m - 1, j = n - 1, k = m + n - 1;
          while (j >= 0) {
              if (i >= 0 && nums1[i] > nums2[j]) {
                  nums1[k--] = nums1[i--];
              } else {
                  nums1[k--] = nums2[j--];
              }
          }
      }
  }
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func merge(nums1 []int, m int, nums2 []int, n int)  {
      i, j, k := m - 1, n - 1, m + n - 1
      for j >= 0 {
          if i >= 0 && nums1[i] > nums2[j] {
              nums1[k] = nums1[i]
              i--
          } else {
              nums1[k] = nums2[j]
              j--
          }
          k--
      }
  }
#+end_example

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums1
   * @param {number} m
   * @param {number[]} nums2
   * @param {number} n
   * @return {void} Do not return anything, modify nums1 in-place instead.
   */
  var merge = function (nums1, m, nums2, n) {
    let i = m - 1,
      j = n - 1,
      k = m + n - 1;
    while (j >= 0) {
      if (i >= 0 && nums1[i] > nums2[j]) {
        nums1[k--] = nums1[i--];
      } else {
        nums1[k--] = nums2[j--];
      }
    }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
