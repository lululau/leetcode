* [[https://leetcode.com/problems/insert-interval][57. Insert Interval]]
  :PROPERTIES:
  :CUSTOM_ID: insert-interval
  :END:
[[./solution/0000-0099/0057.Insert Interval/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a set of non-overlapping intervals, insert a new interval into the
intervals (merge if necessary).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You may assume that the intervals were initially sorted according to
their start times.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]
  <strong>Output:</strong> [[1,5],[6,9]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
  <strong>Output:</strong> [[1,2],[3,10],[12,16]]
  <strong>Explanation:</strong> Because the new interval <code>[4,8]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> intervals = [], newInterval = [5,7]
  <strong>Output:</strong> [[5,7]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> intervals = [[1,5]], newInterval = [2,3]
  <strong>Output:</strong> [[1,5]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> intervals = [[1,5]], newInterval = [2,7]
  <strong>Output:</strong> [[1,7]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= intervals.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

intervals[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= intervals[i][0] <= intervals[i][1] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

intervals is sorted by intervals[i][0] in ascending order.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

newInterval.length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= newInterval[0] <= newInterval[1] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
