* [[https://leetcode.com/problems/rotate-image][48. Rotate Image]]
  :PROPERTIES:
  :CUSTOM_ID: rotate-image
  :END:
[[./solution/0000-0099/0048.Rotate Image/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an n x n 2D matrix representing an image, rotate the image
by 90 degrees (clockwise).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You have to rotate the image in-place, which means you have to modify
the input 2D matrix directly. DO NOT allocate another 2D matrix and do
the rotation.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]
  <strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
  <strong>Output:</strong> [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[1]]
  <strong>Output:</strong> [[1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> matrix = [[1,2],[3,4]]
  <strong>Output:</strong> [[3,1],[4,2]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

matrix.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

matrix[i].length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= matrix[i][j] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def rotate(self, matrix: List[List[int]]) -> None:
          """
          Do not return anything, modify matrix in-place instead.
          """
          s, n = 0, len(matrix)
          while s < (n >> 1):
              e = n - s - 1
              for i in range(s, e):
                  t = matrix[i][e]
                  matrix[i][e] = matrix[s][i]
                  matrix[s][i] = matrix[n - i - 1][s]
                  matrix[n - i - 1][s] = matrix[e][n - i - 1]
                  matrix[e][n - i - 1] = t
              s += 1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public void rotate(int[][] matrix) {
          int s = 0, n = matrix.length;
          while (s < (n >> 1)) {
              int e = n - s - 1;
              for (int i = s; i < e; ++i) {
                  int t = matrix[i][e];
                  matrix[i][e] = matrix[s][i];
                  matrix[s][i] = matrix[n - i - 1][s];
                  matrix[n - i - 1][s] = matrix[e][n - i - 1];
                  matrix[e][n - i - 1] = t;
              }
              ++s;
          }
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
