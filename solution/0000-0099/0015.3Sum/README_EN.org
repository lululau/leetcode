* [[https://leetcode.com/problems/3sum][15. 3Sum]]
  :PROPERTIES:
  :CUSTOM_ID: sum
  :END:
[[./solution/0000-0099/0015.3Sum/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums, return all the triplets [nums[i], nums[j],
nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] +
nums[k] == 0.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that the solution set must not contain duplicate triplets.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [-1,0,1,2,-1,-4]
  <strong>Output:</strong> [[-1,-1,2],[-1,0,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [0]
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums.length <= 3000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= nums[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def threeSum(self, nums: List[int]) -> List[List[int]]:
          if nums is None or len(nums) < 3:
              return []
          nums.sort()
          n = len(nums)
          res = []
          for i in range(n - 2):
              if i > 0 and nums[i] == nums[i - 1]:
                  continue
              p, q = i + 1, n - 1
              while p < q:
                  if p > i + 1 and nums[p] == nums[p - 1]:
                      p += 1
                      continue
                  if q < n - 1 and nums[q] == nums[q + 1]:
                      q -= 1
                      continue
                  if nums[i] + nums[p] + nums[q] < 0:
                      p += 1
                  elif nums[i] + nums[p] + nums[q] > 0:
                      q -= 1
                  else:
                      res.append([nums[i], nums[p], nums[q]])
                      p += 1
                      q -= 1
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<List<Integer>> threeSum(int[] nums) {
          int n;
          if (nums == null || (n = nums.length) < 3) {
              return Collections.emptyList();
          }
          Arrays.sort(nums);
          List<List<Integer>> res = new ArrayList<>();
          for (int i = 0; i < n - 2; ++i) {
              if (i > 0 && nums[i] == nums[i - 1]) {
                  continue;
              }
              int p = i + 1, q = n - 1;
              while (p < q) {
                  if (p > i + 1 && nums[p] == nums[p - 1]) {
                      ++p;
                      continue;
                  }
                  if (q < n - 1 && nums[q] == nums[q + 1]) {
                      --q;
                      continue;
                  }
                  if (nums[p] + nums[q] + nums[i] < 0) {
                      ++p;
                  } else if (nums[p] + nums[q] + nums[i] > 0) {
                      --q;
                  } else {
                      res.add(Arrays.asList(nums[p], nums[q], nums[i]));
                      ++p;
                      --q;
                  }
              }
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number[][]}
   */
  var threeSum = function (nums) {
      let len = nums.length;
      if (len < 3) return [];
      let res = [];
      nums.sort((a, b) => a - b);
      for (let i = 0; i < len - 2; i++) {
          if (nums[i] > 0) break;
          if (i > 0 && nums[i] === nums[i - 1]) continue;
          let left = i + 1, right = len - 1;
          while (left < right) {
              if (nums[i] + nums[left] + nums[right] === 0) {
                  res.push([nums[i], nums[left], nums[right]]);
                  while (nums[left] === nums[left + 1]) left++;
                  left++;
                  while (nums[right] === nums[right - 1]) right--;
                  right--;
                  continue;
              } else if (nums[i] + nums[left] + nums[right] > 0) {
                  right--;
                  continue;
              } else {
                  left++;
                  continue;
              }
          }
      }
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
