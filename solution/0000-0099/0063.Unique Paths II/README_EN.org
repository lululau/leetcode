* [[https://leetcode.com/problems/unique-paths-ii][63. Unique Paths II]]
  :PROPERTIES:
  :CUSTOM_ID: unique-paths-ii
  :END:
[[./solution/0000-0099/0063.Unique Paths II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A robot is located at the top-left corner of a m x n grid (marked
'Start' in the diagram below).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The robot can only move either down or right at any point in time. The
robot is trying to reach the bottom-right corner of the grid (marked
'Finish' in the diagram below).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Now consider if some obstacles are added to the grids. How many unique
paths would there be?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

An obstacle and space is marked as 1 and 0 respectively in the grid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> There is one obstacle in the middle of the 3x3 grid above.
  There are two ways to reach the bottom-right corner:
  1. Right -&gt; Right -&gt; Down -&gt; Down
  2. Down -&gt; Down -&gt; Right -&gt; Right
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> obstacleGrid = [[0,1],[0,0]]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == obstacleGrid.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == obstacleGrid[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

obstacleGrid[i][j] is 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:
*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func uniquePathsWithObstacles(obstacleGrid [][]int) int {
      m,n := len(obstacleGrid),len(obstacleGrid[0])
      dp := make([][]int,m)
      for i:=0; i < m;i++ {
          dp[i] = make([]int,n)
      }
      for i := 0; i < m; i++ {
          for j := 0; j < n; j++ {
              if obstacleGrid[i][j] == 0 {
                  if i == 0 && j == 0 {
                      dp[i][j] = 1
                  } else if i > 0 && j >0 {
                      dp[i][j] = dp[i][j-1]+dp[i-1][j]
                  } else if i > 0 {
                      dp[i][j] = dp[i-1][j]
                  } else {
                      dp[i][j] = dp[i][j-1]
                  }
              }
          }
      }
      return dp[m-1][n-1]
  }
#+end_example

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
