* [[https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii][81.
搜索旋转排序数组 II]]
  :PROPERTIES:
  :CUSTOM_ID: 搜索旋转排序数组-ii
  :END:
[[./solution/0000-0099/0081.Search in Rotated Sorted Array II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

已知存在一个按非降序排列的整数数组 nums ，数组中的值不必互不相同。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k <
nums.length）上进行了 旋转 ，使数组变为 [nums[k], nums[k+1], ...,
nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始
计数）。例如， [0,1,2,4,4,4,5,6,6,7] 在下标 5 处经旋转后可能变为
[4,5,6,6,7,0,1,2,4,4] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你 旋转后 的数组 nums 和一个整数 target
，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 nums
中存在这个目标值 target ，则返回 true ，否则返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [2<code>,5,6,0,0,1,2]</code>, target = 0
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [2<code>,5,6,0,0,1,2]</code>, target = 3
  <strong>输出：</strong>false</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目数据保证 nums 在预先未知的某个下标上进行了旋转

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= target <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

这是 搜索旋转排序数组 的延伸题目，本题中的 nums  可能包含重复元素。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

二分查找。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def search(self, nums: List[int], target: int) -> bool:
          l, r = 0, len(nums) - 1
          while l <= r:
              mid = (l + r) >> 1
              if nums[mid] == target:
                  return True
              if nums[mid] < nums[r] or nums[mid] < nums[l]:
                  if target > nums[mid] and target <= nums[r]:
                      l = mid + 1
                  else:
                      r = mid - 1
              elif nums[mid] > nums[l] or nums[mid] > nums[r]:
                  if target < nums[mid] and target >= nums[l]:
                      r = mid - 1
                  else:
                      l = mid + 1
              else:
                  r -= 1
          return False
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean search(int[] nums, int target) {
          int l = 0, r = nums.length - 1;
          while (l <= r) {
              int mid = (l + r) >>> 1;
              if (nums[mid] == target) return true;
              if (nums[mid] < nums[r] || nums[mid] < nums[l]) {
                  if (target > nums[mid] && target <= nums[r]) l = mid + 1;
                  else r = mid - 1;
              } else if (nums[mid] > nums[l] || nums[mid] > nums[r]) {
                  if (target < nums[mid] && target >= nums[l]) r = mid - 1;
                  else l = mid + 1;
              } else r--;
          }
          return false;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src cpp
  class Solution {
  public:
      bool search(vector<int>& nums, int target) {
          int l = 0, r = nums.size() - 1;
          while (l <= r) {
              int mid = (l + r) >> 1;
              if (nums[mid] == target) return true;
              if (nums[mid] < nums[r] || nums[mid] < nums[l]) {
                  if (target > nums[mid] && target <= nums[r]) l = mid + 1;
                  else r = mid - 1;
              } else if (nums[mid] > nums[l] || nums[mid] > nums[r]) {
                  if (target < nums[mid] && target >= nums[l]) r = mid - 1;
                  else l = mid + 1;
              } else r--;
          }
          return false;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
