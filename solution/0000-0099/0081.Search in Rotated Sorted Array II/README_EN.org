* [[https://leetcode.com/problems/search-in-rotated-sorted-array-ii][81.
Search in Rotated Sorted Array II]]
  :PROPERTIES:
  :CUSTOM_ID: search-in-rotated-sorted-array-ii
  :END:
[[./solution/0000-0099/0081.Search in Rotated Sorted Array II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is an integer array nums sorted in non-decreasing order (not
necessarily with distinct values).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Before being passed to your function, nums is rotated at an unknown
pivot index k (0 <= k < nums.length) such that the resulting array is
[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]
(0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at
pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given the array nums after the rotation and an integer target, return
true if target is in nums, or false if it is not in nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [2,5,6,0,0,1,2], target = 0
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [2,5,6,0,0,1,2], target = 3
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums is guaranteed to be rotated at some pivot.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= target <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: This problem is the same as Search in Rotated Sorted Array,
where nums may contain duplicates. Would this affect the runtime
complexity? How and why?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def search(self, nums: List[int], target: int) -> bool:
          l, r = 0, len(nums) - 1
          while l <= r:
              mid = (l + r) >> 1
              if nums[mid] == target:
                  return True
              if nums[mid] < nums[r] or nums[mid] < nums[l]:
                  if target > nums[mid] and target <= nums[r]:
                      l = mid + 1
                  else:
                      r = mid - 1
              elif nums[mid] > nums[l] or nums[mid] > nums[r]:
                  if target < nums[mid] and target >= nums[l]:
                      r = mid - 1
                  else:
                      l = mid + 1
              else:
                  r -= 1
          return False
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean search(int[] nums, int target) {
          int l = 0, r = nums.length - 1;
          while (l <= r) {
              int mid = (l + r) >>> 1;
              if (nums[mid] == target) return true;
              if (nums[mid] < nums[r] || nums[mid] < nums[l]) {
                  if (target > nums[mid] && target <= nums[r]) l = mid + 1;
                  else r = mid - 1;
              } else if (nums[mid] > nums[l] || nums[mid] > nums[r]) {
                  if (target < nums[mid] && target >= nums[l]) r = mid - 1;
                  else l = mid + 1;
              } else r--;
          }
          return false;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src cpp
  class Solution {
  public:
      bool search(vector<int>& nums, int target) {
          int l = 0, r = nums.size() - 1;
          while (l <= r) {
              int mid = (l + r) >> 1;
              if (nums[mid] == target) return true;
              if (nums[mid] < nums[r] || nums[mid] < nums[l]) {
                  if (target > nums[mid] && target <= nums[r]) l = mid + 1;
                  else r = mid - 1;
              } else if (nums[mid] > nums[l] || nums[mid] > nums[r]) {
                  if (target < nums[mid] && target >= nums[l]) r = mid - 1;
                  else l = mid + 1;
              } else r--;
          }
          return false;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
