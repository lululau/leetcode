* [[https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array][34.
在排序数组中查找元素的第一个和最后一个位置]]
  :PROPERTIES:
  :CUSTOM_ID: 在排序数组中查找元素的第一个和最后一个位置
  :END:
[[./solution/0000-0099/0034.Find First and Last Position of Element in Sorted Array/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个按照升序排列的整数数组 nums，和一个目标值
target。找出给定目标值在数组中的开始位置和结束位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果数组中不存在目标值 target，返回 [-1, -1]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [<code>5,7,7,8,8,10]</code>, target = 8
  <strong>输出：</strong>[3,4]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [<code>5,7,7,8,8,10]</code>, target = 6
  <strong>输出：</strong>[-1,-1]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [], target = 0
  <strong>输出：</strong>[-1,-1]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= nums[i] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums 是一个非递减数组

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-109 <= target <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
