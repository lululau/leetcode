* [[https://leetcode.com/problems/search-insert-position][35. Search
Insert Position]]
  :PROPERTIES:
  :CUSTOM_ID: search-insert-position
  :END:
[[./solution/0000-0099/0035.Search Insert Position/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a sorted array of distinct integers and a target value, return the
index if the target is found. If not, return the index where it would be
if it were inserted in order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,3,5,6], target = 5
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,3,5,6], target = 2
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,3,5,6], target = 7
  <strong>Output:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,3,5,6], target = 0
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1], target = 0
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums contains distinct values sorted in ascending order.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= target <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def searchInsert(self, nums: List[int], target: int) -> int:
          l, h = 0, len(nums) - 1
          while l <= h:
              m = (l + h) >> 1
              if nums[m] == target:
                  return m
              if nums[m] < target:
                  l = m + 1
              else:
                  h = m - 1
          return l
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int searchInsert(int[] nums, int target) {
          int l = 0, h = nums.length - 1;
          while (l <= h) {
              int m = (l + h) >>> 1;
              if (nums[m] == target) return m;
              if (nums[m] < target) l = m + 1;
              else h = m - 1;
          }
          return l;
      }
  }
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func searchInsert(nums []int, target int) int {
      l, h := 0, len(nums) - 1
      for l <= h {
          m := l + ((h - l) >> 1)
          if nums[m] == target {
              return m
          }
          if nums[m] < target {
              l = m + 1
          } else {
              h = m - 1
          }
      }
      return l
  }
#+end_example

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int searchInsert(vector<int>& nums, int target) {
          int l = 0, h = nums.size() - 1;
          while (l <= h) {
              int m = l + ((h - l) >> 1);
              if (nums[m] == target) return m;
              if (nums[m] < target) l = m + 1;
              else h = m - 1;
          }
          return l;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} target
   * @return {number}
   */
  var searchInsert = function (nums, target) {
    let l = 0,
      h = nums.length;
    while (l <= h) {
      const m = (l + h) >>> 1;
      if (nums[m] == target) return m;
      if (nums[m] < target) l = m + 1;
      else h = m - 1;
    }
    return l;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
