* [[https://leetcode-cn.com/problems/search-insert-position][35.
搜索插入位置]]
  :PROPERTIES:
  :CUSTOM_ID: 搜索插入位置
  :END:
[[./solution/0000-0099/0035.Search Insert Position/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以假设数组中无重复元素。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [1,3,5,6], 5
  <strong>输出:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [1,3,5,6], 2
  <strong>输出:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [1,3,5,6], 7
  <strong>输出:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [1,3,5,6], 0
  <strong>输出:</strong> 0
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

二分查找。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def searchInsert(self, nums: List[int], target: int) -> int:
          l, h = 0, len(nums) - 1
          while l <= h:
              m = (l + h) >> 1
              if nums[m] == target:
                  return m
              if nums[m] < target:
                  l = m + 1
              else:
                  h = m - 1
          return l
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int searchInsert(int[] nums, int target) {
          int l = 0, h = nums.length - 1;
          while (l <= h) {
              int m = (l + h) >>> 1;
              if (nums[m] == target) return m;
              if (nums[m] < target) l = m + 1;
              else h = m - 1;
          }
          return l;
      }
  }
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func searchInsert(nums []int, target int) int {
      l, h := 0, len(nums) - 1
      for l <= h {
          m := l + ((h - l) >> 1)
          if nums[m] == target {
              return m
          }
          if nums[m] < target {
              l = m + 1
          } else {
              h = m - 1
          }
      }
      return l
  }
#+end_example

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int searchInsert(vector<int>& nums, int target) {
          int l = 0, h = nums.size() - 1;
          while (l <= h) {
              int m = l + ((h - l) >> 1);
              if (nums[m] == target) return m;
              if (nums[m] < target) l = m + 1;
              else h = m - 1;
          }
          return l;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} target
   * @return {number}
   */
  var searchInsert = function (nums, target) {
    let l = 0,
      h = nums.length;
    while (l <= h) {
      const m = (l + h) >>> 1;
      if (nums[m] == target) return m;
      if (nums[m] < target) l = m + 1;
      else h = m - 1;
    }
    return l;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
