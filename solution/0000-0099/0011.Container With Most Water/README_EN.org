* [[https://leetcode.com/problems/container-with-most-water][11.
Container With Most Water]]
  :PROPERTIES:
  :CUSTOM_ID: container-with-most-water
  :END:
[[./solution/0000-0099/0011.Container With Most Water/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given n non-negative integers a1, a2, ..., an , where each represents a
point at coordinate (i, ai). n vertical lines are drawn such that the
two endpoints of the line i is at (i, ai) and (i, 0). Find two lines,
which, together with the x-axis forms a container, such that the
container contains the most water.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that you may not slant the container.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]
  <strong>Output:</strong> 49
  <strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain&nbsp;is 49.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> height = [1,1]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> height = [4,3,2,1,4]
  <strong>Output:</strong> 16
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> height = [1,2,1]
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == height.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= height[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def maxArea(self, height: List[int]) -> int:
          i, j = 0, len(height) - 1
          res = 0
          while i < j:
              t = (j - i) * min(height[i], height[j])
              res = max(res, t)
              if height[i] < height[j]:
                  i += 1
              else:
                  j -= 1
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int maxArea(int[] height) {
          int i = 0, j = height.length - 1;
          int res = 0;
          while (i < j) {
              int t = (j - i) * Math.min(height[i], height[j]);
              res = Math.max(res, t);
              if (height[i] < height[j]) ++i;
              else --j;
          }
          return res;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int maxArea(vector<int>& height) {
          int i = 0, j = height.size() - 1;
          int res = 0;
          while (i < j) {
              int t = (j - i) * min(height[i], height[j]);
              res = max(res, t);
              if (height[i] < height[j]) ++i;
              else --j;
          }
          return res;
      }
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func maxArea(height []int) int {
      i, j := 0, len(height) - 1
      res := 0
      for i != j {
          t := (j - i) * min(height[i], height[j])
          res = max(res, t)
          if height[i] < height[j] {
              i++
          } else {
              j--
          }
      }
      return res
  }

  func min(a, b int) int {
      if a > b {
          return b
      }
      return a
  }

  func max(a, b int) int {
      if a > b {
          return a
      }
      return b
  }
#+end_example

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} height
   * @return {number}
   */
  var maxArea = function (height) {
    let i = 0,
      j = height.length - 1;
    let res = 0;
    while (i < j) {
      const t = (j - i) * Math.min(height[i], height[j]);
      res = Math.max(res, t);
      if (height[i] < height[j]) ++i;
      else --j;
    }
    return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
