* [[https://leetcode.com/problems/decode-ways][91. Decode Ways]]
  :PROPERTIES:
  :CUSTOM_ID: decode-ways
  :END:
[[./solution/0000-0099/0091.Decode Ways/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A message containing letters from A-Z can be encoded into numbers using
the following mapping:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  &#39;A&#39; -&gt; &quot;1&quot;
  &#39;B&#39; -&gt; &quot;2&quot;
  ...
  &#39;Z&#39; -&gt; &quot;26&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

To decode an encoded message, all the digits must be grouped then mapped
back into letters using the reverse of the mapping above (there may be
multiple ways). For example, "11106" can be mapped into:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

"AAJF" with the grouping (1 1 10 6)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"KJF" with the grouping (11 10 6)

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Note that the grouping (1 11 06) is invalid because "06" cannot be
mapped into 'F' since "6" is different from "06".

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a string s containing only digits, return the number of ways to
decode it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The answer is guaranteed to fit in a 32-bit integer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;12&quot;
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> &quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;226&quot;
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> &quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;0&quot;
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> There is no character that is mapped to a number starting with 0.
  The only valid mappings with 0 are &#39;J&#39; -&gt; &quot;10&quot; and &#39;T&#39; -&gt; &quot;20&quot;, neither of which start with 0.
  Hence, there are no valid ways to decode this since all digits need to be mapped.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;06&quot;
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> &quot;06&quot; cannot be mapped to &quot;F&quot; because of the leading zero (&quot;6&quot; is different from &quot;06&quot;).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s contains only digits and may contain leading zero(s).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
Solution1:

#+begin_src python
  class Solution:
      def numDecodings(self, s: str) -> int:
          n = len(s)
          dp = [0] * (n + 1)
          dp[0] = 1
          for i in range(1, n + 1):
              if s[i - 1] != '0':
                  dp[i] += dp[i - 1]
              if i > 1 and s[i - 2] != '0' and (int(s[i - 2]) * 10 + int(s[i - 1]) <= 26):
                  dp[i] += dp[i - 2]
          return dp[n]
#+end_src

Solution2:

#+begin_src python
  class Solution:
      def numDecodings(self, s: str) -> int:
          n = len(s)
          a, b, c = 0, 1, 0
          for i in range(1, n + 1):
              c = 0
              if s[i - 1] != '0':
                  c += b
              if i > 1 and s[i - 2] != '0' and (int(s[i - 2]) * 10 + int(s[i - 1]) <= 26):
                  c += a
              a, b = b, c
          return c
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
Solution1:

#+begin_src java
  class Solution {
      public int numDecodings(String s) {
          int n = s.length();
          int[] dp = new int[n + 1];
          dp[0] = 1;
          for (int i = 1; i <= n; ++i) {
              if (s.charAt(i - 1) != '0') {
                  dp[i] += dp[i - 1];
              }
              if (i > 1 && s.charAt(i - 2) != '0' && ((s.charAt(i - 2) - '0') * 10 + s.charAt(i - 1) - '0') <= 26) {
                  dp[i] += dp[i - 2];
              }
          }
          return dp[n];
      }
  }
#+end_src

Solution2:

#+begin_src java
  class Solution {
      public int numDecodings(String s) {
          int n = s.length();
          int a = 0, b = 1, c = 0;
          for (int i = 1; i <= n; ++i) {
              c = 0;
              if (s.charAt(i - 1) != '0') {
                  c += b;
              }
              if (i > 1 && s.charAt(i - 2) != '0' && ((s.charAt(i - 2) - '0') * 10 + s.charAt(i - 1) - '0') <= 26) {
                  c += a;
              }
              a = b;
              b = c;
          }
          return c;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
