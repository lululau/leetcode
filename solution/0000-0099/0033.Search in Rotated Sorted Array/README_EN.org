* [[https://leetcode.com/problems/search-in-rotated-sorted-array][33.
Search in Rotated Sorted Array]]
  :PROPERTIES:
  :CUSTOM_ID: search-in-rotated-sorted-array
  :END:
[[./solution/0000-0099/0033.Search in Rotated Sorted Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is an integer array nums sorted in ascending order (with distinct
values).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Prior to being passed to your function, nums is rotated at an unknown
pivot index k (0 <= k < nums.length) such that the resulting array is
[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]
(0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot
index 3 and become [4,5,6,7,0,1,2].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given the array nums after the rotation and an integer target, return
the index of target if it is in nums, or -1 if it is not in nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0
  <strong>Output:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3
  <strong>Output:</strong> -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1], target = 0
  <strong>Output:</strong> -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All values of nums are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums is guaranteed to be rotated at some pivot.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= target <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Can you achieve this in O(log n) time complexity?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def search(self, nums: List[int], target: int) -> int:
          l, r = 0, len(nums) - 1
          while l <= r:
              mid = (l + r) >> 1
              if nums[mid] == target:
                  return mid
              if nums[mid] > target:
                  if nums[mid] >= nums[r] and target < nums[l]:
                      l = mid + 1
                  else:
                      r = mid - 1
              else:
                  if nums[mid] <= nums[l] and target > nums[r]:
                      r = mid - 1
                  else:
                      l = mid + 1
          return -1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int search(int[] nums, int target) {
          int l = 0, r = nums.length - 1;
          while (l <= r) {
              int mid = (l + r) >>> 1;
              if (nums[mid] == target) return mid;
              if (nums[mid] > target) {
                  if (nums[mid] >= nums[r] && target < nums[l]) l = mid + 1;
                  else r = mid - 1;
              } else {
                  if (nums[mid] <= nums[l] && target > nums[r]) r = mid - 1;
                  else l = mid + 1;
              }
          }
          return -1;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src cpp
  class Solution {
  public:
      int search(vector<int>& nums, int target) {
          int l = 0, r = nums.size() - 1;
          while (l <= r) {
              int mid = (l + r) >> 1;
              if (nums[mid] == target) return mid;
              if (nums[mid] > target) {
                  if (nums[mid] >= nums[r] && target < nums[l]) l = mid + 1;
                  else r = mid - 1;
              } else {
                  if (nums[mid] <= nums[l] && target > nums[r]) r = mid - 1;
                  else l = mid + 1;
              }
          }
          return -1;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} target
   * @return {number}
   */
  var search = function (nums, target) {
    let l = 0, r = nums.length - 1;
    if (l > r) return -1;
    while (l <= r) {
      let mid = l + Math.floor((r - l) / 2);
      if (nums[mid] === target) return mid;
      else if (nums[mid] <= nums[r] && target <= nums[r] && target >= nums[mid])
        l = mid + 1;
      else if (nums[mid] >= nums[l] && target <= nums[mid] && target >= nums[l])
        r = mid - 1;
      else if (nums[mid] >= nums[r])
        l = mid + 1;
      else if (nums[mid] <= nums[l])
        r = mid - 1;
      else return -1;
    }
    return -1;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
