* [[https://leetcode.com/problems/word-search][79. Word Search]]
  :PROPERTIES:
  :CUSTOM_ID: word-search
  :END:
[[./solution/0000-0099/0079.Word Search/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an m x n grid of characters board and a string word, return true
if word exists in the grid.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The word can be constructed from letters of sequentially adjacent cells,
where adjacent cells are horizontally or vertically neighboring. The
same letter cell may not be used more than once.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot;
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot;
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == board.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n = board[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 6

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= word.length <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

board and word consists of only lowercase and uppercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you use search pruning to make your solution faster
with a larger board?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def exist(self, board: List[List[str]], word: str) -> bool:
          def dfs(i, j, cur):
              if cur == len(word):
                  return True
              if i < 0 or i >= m or j < 0 or j >= n or visited[i][j] or word[cur] != board[i][j]:
                  return False
              visited[i][j] = True
              next = cur + 1
              res = dfs(i + 1, j, next) or dfs(i - 1, j, next) or dfs(i, j + 1, next) or dfs(i, j - 1, next)
              visited[i][j] = False
              return res
          m, n = len(board), len(board[0])
          visited = [[False for _ in range(n)] for _ in range(m)]
          for i in range(m):
              for j in range(n):
                  res = dfs(i, j, 0)
                  if res:
                      return True
          return False
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      private boolean[][] visited;

      public boolean exist(char[][] board, String word) {
          int m = board.length, n = board[0].length;
          visited = new boolean[m][n];
          char[] chars = word.toCharArray();
          for (int i = 0; i < m; ++i) {
              for (int j = 0; j < n; ++j) {
                  boolean res = dfs(board, i, j, chars, 0);
                  if (res) return true;
              }
          }
          return false;
      }

      private boolean dfs(char[][] board, int i, int j, char[] chars, int cur) {
          if (cur == chars.length) return true;
          if (i < 0 || i >= board.length || j < 0 || j >= board[0].length) return false;
          if (visited[i][j] || board[i][j] != chars[cur]) return false;
          visited[i][j] = true;
          int next = cur + 1;
          boolean res = dfs(board, i + 1, j, chars, next)
                  || dfs(board, i - 1, j, chars, next)
                  || dfs(board, i, j + 1, chars, next)
                  || dfs(board, i, j - 1, chars, next);
          visited[i][j] = false;
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
