* [[https://leetcode-cn.com/problems/maximum-subarray][53. 最大子序和]]
  :PROPERTIES:
  :CUSTOM_ID: 最大子序和
  :END:
[[./solution/0000-0099/0053.Maximum Subarray/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个整数数组
nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [-2,1,-3,4,-1,2,1,-5,4]
  <strong>输出：</strong>6
  <strong>解释：</strong>连续子数组 [4,-1,2,1] 的和最大，为 6 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [0]
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [-1]
  <strong>输出：</strong>-1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [-100000]
  <strong>输出：</strong>-100000
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= nums[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法
求解。

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

设 =dp[i]= 表示 =[0..i]= 中，以 =nums[i]=
结尾的最大子数组和，状态转移方程 =dp[i] = nums[i] + max(dp[i - 1], 0)=。

由于 =dp[i]= 只与子问题 =dp[i-1]= 有关，故可以用一个变量 f 来表示。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def maxSubArray(self, nums: List[int]) -> int:
          n = len(nums)
          res = f = nums[0]
          for i in range(1, n):
              f = nums[i] + max(f, 0)
              res = max(res, f)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int maxSubArray(int[] nums) {
          int f = nums[0], res = nums[0];
          for (int i = 1, n = nums.length; i < n; ++i) {
              f = nums[i] + Math.max(f, 0);
              res = Math.max(res, f);
          }
          return res;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int maxSubArray(vector<int>& nums) {
          int f = nums[0], res = nums[0];
          for (int i = 1; i < nums.size(); ++i) {
              f = nums[i] + max(f, 0);
              res = max(res, f);
          }
          return res;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var maxSubArray = function (nums) {
    let f = nums[0],
      res = nums[0];
    for (let i = 1; i < nums.length; ++i) {
      f = nums[i] + Math.max(f, 0);
      res = Math.max(res, f);
    }
    return res;
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func maxSubArray(nums []int) int {
      f, res := nums[0], nums[0]
      for i := 1; i < len(nums); i++ {
          if f > 0 {
              f += nums[i]
          } else {
              f = nums[i]
          }
          if f > res {
              res = f
          }
      }
      return res
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
