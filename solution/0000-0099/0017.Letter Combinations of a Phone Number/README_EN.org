* [[https://leetcode.com/problems/letter-combinations-of-a-phone-number][17.
Letter Combinations of a Phone Number]]
  :PROPERTIES:
  :CUSTOM_ID: letter-combinations-of-a-phone-number
  :END:
[[./solution/0000-0099/0017.Letter Combinations of a Phone Number/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a string containing digits from 2-9 inclusive, return all possible
letter combinations that the number could represent. Return the answer
in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A mapping of digit to letters (just like on the telephone buttons) is
given below. Note that 1 does not map to any letters.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> digits = &quot;23&quot;
  <strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> digits = &quot;&quot;
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> digits = &quot;2&quot;
  <strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= digits.length <= 4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

digits[i] is a digit in the range ['2', '9'].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def letterCombinations(self, digits: str) -> List[str]:
          n = len(digits)
          if n == 0:
              return []
          chars = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqrs', 'tuv', 'wxyz']
          strs = [chars[int(d) - 2] for d in digits]
          res = []
          for s in strs:
              if not res:
                  res = list(s)
              else:
                  cache = []
                  for item in res:
                      for letter in s:
                          cache.append(item + letter)
                  res = cache
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<String> letterCombinations(String digits) {
          int n;
          if ((n = digits.length()) == 0) return Collections.emptyList();
          List<String> chars = Arrays.asList("abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz");

          List<String> strs = new ArrayList<>();
          for (char c : digits.toCharArray()) {
              strs.add(chars.get(c - '0' - 2));
          }
          List<String> res = new ArrayList<>();
          for (String str : strs) {
              if (res.size() == 0) {
                  for (char c : str.toCharArray()) {
                      res.add(String.valueOf(c));
                  }
              } else {
                  List<String> cache = new ArrayList<>();
                  for (String item : res) {
                      for (char c : str.toCharArray()) {
                          cache.add(item + String.valueOf(c));
                      }
                  }
                  res = cache;
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
