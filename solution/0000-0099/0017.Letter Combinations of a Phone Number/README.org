* [[https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number][17.
电话号码的字母组合]]
  :PROPERTIES:
  :CUSTOM_ID: 电话号码的字母组合
  :END:
[[./solution/0000-0099/0017.Letter Combinations of a Phone Number/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按
任意顺序 返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>digits = "23"
  <strong>输出：</strong>["ad","ae","af","bd","be","bf","cd","ce","cf"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>digits = ""
  <strong>输出：</strong>[]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>digits = "2"
  <strong>输出：</strong>["a","b","c"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= digits.length <= 4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

digits[i] 是范围 ['2', '9'] 的一个数字。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def letterCombinations(self, digits: str) -> List[str]:
          n = len(digits)
          if n == 0:
              return []
          chars = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqrs', 'tuv', 'wxyz']
          strs = [chars[int(d) - 2] for d in digits]
          res = []
          for s in strs:
              if not res:
                  res = list(s)
              else:
                  cache = []
                  for item in res:
                      for letter in s:
                          cache.append(item + letter)
                  res = cache
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public List<String> letterCombinations(String digits) {
          int n;
          if ((n = digits.length()) == 0) return Collections.emptyList();
          List<String> chars = Arrays.asList("abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz");

          List<String> strs = new ArrayList<>();
          for (char c : digits.toCharArray()) {
              strs.add(chars.get(c - '0' - 2));
          }
          List<String> res = new ArrayList<>();
          for (String str : strs) {
              if (res.size() == 0) {
                  for (char c : str.toCharArray()) {
                      res.add(String.valueOf(c));
                  }
              } else {
                  List<String> cache = new ArrayList<>();
                  for (String item : res) {
                      for (char c : str.toCharArray()) {
                          cache.add(item + String.valueOf(c));
                      }
                  }
                  res = cache;
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
