* [[https://leetcode-cn.com/problems/text-justification][68.
文本左右对齐]]
  :PROPERTIES:
  :CUSTOM_ID: 文本左右对齐
  :END:
[[./solution/0000-0099/0068.Text Justification/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个单词数组和一个长度 maxWidth，重新排版单词，使其成为每行恰好有 maxWidth 个字符，且左右两端对齐的文本。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 '
' 填充，使得每行恰好有 maxWidth 个字符。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

文本的最后一行应为左对齐，且单词之间不插入额外的空格。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

单词是指由非空格字符组成的字符序列。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个单词的长度大于 0，小于等于 maxWidth。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

输入单词数组 words 至少包含一个单词。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong>
  words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]
  maxWidth = 16
  <strong>输出:</strong>
  [
  &nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,
  &nbsp; &nbsp;&quot;example &nbsp;of text&quot;,
  &nbsp; &nbsp;&quot;justification. &nbsp;&quot;
  ]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong>
  words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;]
  maxWidth = 16
  <strong>输出:</strong>
  [
  &nbsp; &quot;What &nbsp; must &nbsp; be&quot;,
  &nbsp; &quot;acknowledgment &nbsp;&quot;,
  &nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;
  ]
  <strong>解释: </strong>注意最后一行的格式应为 &quot;shall be    &quot; 而不是 &quot;shall     be&quot;,
  &nbsp;    因为最后一行应为左对齐，而不是左右两端对齐。       
       第二行同样为左对齐，这是因为这行只包含一个单词。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong>
  words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,
  &nbsp;        &quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]
  maxWidth = 20
  <strong>输出:</strong>
  [
  &nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,
    &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,
  &nbsp; &quot;enough to explain to&quot;,
  &nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,
  &nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,
  &nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;
  ]
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
