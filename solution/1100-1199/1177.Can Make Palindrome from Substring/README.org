* [[https://leetcode-cn.com/problems/can-make-palindrome-from-substring][1177.
构建回文串检测]]
  :PROPERTIES:
  :CUSTOM_ID: 构建回文串检测
  :END:
[[./solution/1100-1199/1177.Can Make Palindrome from Substring/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 s，请你对 s 的子串进行检测。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每次检测，待检子串都可以表示为 queries[i] = [left, right, k]。我们可以
重新排列 子串 s[left], ..., s[right]，并从中选择 最多
k 项替换成任何小写英文字母。 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果在上述检测过程中，子串可以变成回文形式的字符串，那么检测结果为 true，否则结果为 false。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回答案数组 answer[]，其中 answer[i] 是第 i 个待检子串 queries[i] 的检测结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：在替换时，子串中的每个字母都必须作为 独立的
项进行计数，也就是说，如果 s[left..right] = "aaa" 且 k =
2，我们只能替换其中的两个字母。（另外，任何检测都不会修改原始字符串
s，可以认为每次检测都是独立的）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;abcda&quot;, queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
  <strong>输出：</strong>[true,false,false,true,true]
  <strong>解释：</strong>
  queries[0] : 子串 = &quot;d&quot;，回文。
  queries[1] :&nbsp;子串 = &quot;bc&quot;，不是回文。
  queries[2] :&nbsp;子串 = &quot;abcd&quot;，只替换 1 个字符是变不成回文串的。
  queries[3] :&nbsp;子串 = &quot;abcd&quot;，可以变成回文的 &quot;abba&quot;。 也可以变成 &quot;baab&quot;，先重新排序变成 &quot;bacd&quot;，然后把 &quot;cd&quot; 替换为 &quot;ab&quot;。
  queries[4] :&nbsp;子串 = &quot;abcda&quot;，可以变成回文的 &quot;abcba&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length, queries.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= queries[i][0] <= queries[i][1] < s.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= queries[i][2] <= s.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中只有小写英文字母

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
