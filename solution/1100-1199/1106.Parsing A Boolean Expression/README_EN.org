* [[https://leetcode.com/problems/parsing-a-boolean-expression][1106.
Parsing A Boolean Expression]]
  :PROPERTIES:
  :CUSTOM_ID: parsing-a-boolean-expression
  :END:
[[./solution/1100-1199/1106.Parsing A Boolean Expression/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Return the result of evaluating a given boolean expression, represented
as a string.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

An expression can either be:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

"t", evaluating to True;

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"f", evaluating to False;

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"!(expr)", evaluating to the logical NOT of the inner expression expr;

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"&(expr1,expr2,...)", evaluating to the logical AND of 2 or more inner
expressions expr1, expr2, ...;

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"|(expr1,expr2,...)", evaluating to the logical OR of 2 or more inner
expressions expr1, expr2, ...

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> expression = &quot;!(f)&quot;
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> expression = &quot;|(f,t)&quot;
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> expression = &quot;&amp;(t,f)&quot;
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> expression = &quot;|(&amp;(t,f,t),!(t))&quot;
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= expression.length <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

expression[i] consists of characters in {'(', ')', '&', '|', '!', 't',
'f', ','}.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

expression is a valid expression representing a boolean, as given in the
description.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
