* [[https://leetcode-cn.com/problems/parsing-a-boolean-expression][1106.
解析布尔表达式]]
  :PROPERTIES:
  :CUSTOM_ID: 解析布尔表达式
  :END:
[[./solution/1100-1199/1106.Parsing A Boolean Expression/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个以字符串形式表述的 布尔表达式（boolean）
expression，返回该式的运算结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

有效的表达式需遵循以下约定：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

"t"，运算结果为 True

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"f"，运算结果为 False

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"!(expr)"，运算过程为对内部表达式 expr 进行逻辑 非的运算（NOT）

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"&(expr1,expr2,...)"，运算过程为对 2 个或以上内部表达式 expr1, expr2,
... 进行逻辑 与的运算（AND）

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

"|(expr1,expr2,...)"，运算过程为对 2 个或以上内部表达式 expr1, expr2,
... 进行逻辑 或的运算（OR）

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>expression = &quot;!(f)&quot;
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>expression = &quot;|(f,t)&quot;
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>expression = &quot;&amp;(t,f)&quot;
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>expression = &quot;|(&amp;(t,f,t),!(t))&quot;
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= expression.length <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

expression[i] 由 {'(', ')', '&', '|', '!', 't', 'f', ','} 中的字符组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

expression 是以上述形式给出的有效表达式，表示一个布尔值。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
