* [[https://leetcode-cn.com/problems/largest-unique-number][1133.
最大唯一数]]
  :PROPERTIES:
  :CUSTOM_ID: 最大唯一数
  :END:
[[./solution/1100-1199/1133.Largest Unique Number/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 A，请找出并返回在该数组中仅出现一次的最大整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果不存在这个只出现一次的整数，则返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[5,7,3,9,4,9,8,3,1]
  <strong>输出：</strong>8
  <strong>解释： </strong>
  数组中最大的整数是 9，但它在数组中重复出现了。而第二大的整数是 8，它只出现了一次，所以答案是 8。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>[9,9,8,8]
  <strong>输出：</strong>-1
  <strong>解释： </strong>
  数组中不存在仅出现一次的整数。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= A.length <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= A[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

计数器实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def largestUniqueNumber(self, A: List[int]) -> int:
          counter = collections.Counter(A)
          for i in range(1000, -1, -1):
              if counter[i] == 1:
                  return i
          return -1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int largestUniqueNumber(int[] A) {
          int[] counter = new int[1001];
          for (int a : A) {
              ++counter[a];
          }
          for (int i = 1000; i >= 0; --i) {
              if (counter[i] == 1) {
                  return i;
              }
          }
          return -1;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} A
   * @return {number}
   */
  var largestUniqueNumber = function (A) {
    let counter = {};
    for (const a of A) {
      counter[a] = (counter[a] || 0) + 1;
    }
    for (let i = 1000; i >= 0; --i) {
      if (counter[i] == 1) {
        return i;
      }
    }
    return -1;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
