* [[https://leetcode-cn.com/problems/shortest-distance-to-target-color][1182.
与目标颜色间的最短距离]]
  :PROPERTIES:
  :CUSTOM_ID: 与目标颜色间的最短距离
  :END:
[[./solution/1100-1199/1182.Shortest Distance to Target Color/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个数组 colors，里面有  1、2、 3 三种颜色。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们需要在 colors 上进行一些查询操作 queries，其中每个待查项都由两个整数
i 和 c 组成。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

现在请你帮忙设计一个算法，查找从索引 i 到具有目标颜色 c 的元素之间的最短距离。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果不存在解决方案，请返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
  <strong>输出：</strong>[3,0,3]
  <strong>解释： </strong>
  距离索引 1 最近的颜色 3 位于索引 4（距离为 3）。
  距离索引 2 最近的颜色 2 就是它自己（距离为 0）。
  距离索引 6 最近的颜色 1 位于索引 3（距离为 3）。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>colors = [1,2], queries = [[0,3]]
  <strong>输出：</strong>[-1]
  <strong>解释：</strong>colors 中没有颜色 3。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= colors.length <= 5*10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= colors[i] <= 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries.length <= 5*10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= queries[i][0] < colors.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries[i][1] <= 3

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
