* [[https://leetcode.com/problems/shortest-path-with-alternating-colors][1129.
Shortest Path with Alternating Colors]]
  :PROPERTIES:
  :CUSTOM_ID: shortest-path-with-alternating-colors
  :END:
[[./solution/1100-1199/1129.Shortest Path with Alternating Colors/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Consider a directed graph, with nodes labelled 0, 1, ..., n-1.  In this
graph, each edge is either red or blue, and there could be self-edges or
parallel edges.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each [i, j] in red_edges denotes a red directed edge from node i to node
j.  Similarly, each [i, j] in blue_edges denotes a blue directed edge
from node i to node j.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an array answer of length n, where each answer[X] is the length
of the shortest path from node 0 to node X such that the edge colors
alternate along the path (or -1 if such a path doesn't exist).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> n = 3, red_edges = [[0,1],[1,2]], blue_edges = []

  <strong>Output:</strong> [0,1,-1]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]

  <strong>Output:</strong> [0,1,-1]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]

  <strong>Output:</strong> [0,-1,-1]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]

  <strong>Output:</strong> [0,1,2]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]

  <strong>Output:</strong> [0,1,1]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

red_edges.length <= 400

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

blue_edges.length <= 400

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

red_edges[i].length == blue_edges[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= red_edges[i][j], blue_edges[i][j] < n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
