* [[https://leetcode-cn.com/problems/shortest-path-with-alternating-colors][1129.
颜色交替的最短路径]]
  :PROPERTIES:
  :CUSTOM_ID: 颜色交替的最短路径
  :END:
[[./solution/1100-1199/1129.Shortest Path with Alternating Colors/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在一个有向图中，节点分别标记为 0, 1, ...,
n-1。这个图中的每条边不是红色就是蓝色，且存在自环或平行边。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

red_edges 中的每一个 [i, j] 对表示从节点 i 到节点 j
的红色有向边。类似地，blue_edges 中的每一个 [i, j] 对表示从节点 i 到节点
j 的蓝色有向边。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回长度为 n
的数组 answer，其中 answer[X] 是从节点 0 到节点 X 的红色边和蓝色边交替出现的最短路径的长度。如果不存在这样的路径，那么
answer[x] = -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
  <strong>输出：</strong>[0,1,-1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
  <strong>输出：</strong>[0,1,-1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
  <strong>输出：</strong>[0,-1,-1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
  <strong>输出：</strong>[0,1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
  <strong>输出：</strong>[0,1,1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

red_edges.length <= 400

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

blue_edges.length <= 400

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

red_edges[i].length == blue_edges[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= red_edges[i][j], blue_edges[i][j] < n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
