* [[https://leetcode-cn.com/problems/minimum-time-to-build-blocks][1199.
建造街区的最短时间]]
  :PROPERTIES:
  :CUSTOM_ID: 建造街区的最短时间
  :END:
[[./solution/1100-1199/1199.Minimum Time to Build Blocks/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你是个城市规划工作者，手里负责管辖一系列的街区。在这个街区列表中 blocks[i]
= t 意味着第  i 个街区需要 t 个单位的时间来建造。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

由于一个街区只能由一个工人来完成建造。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

所以，一个工人要么需要再召唤一个工人（工人数增加
1）；要么建造完一个街区后回家。这两个决定都需要花费一定的时间。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个工人再召唤一个工人所花费的时间由整数 split 给出。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：如果两个工人同时召唤别的工人，那么他们的行为是并行的，所以时间花费仍然是 split。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

最开始的时候只有 一个 工人，请你最后输出建造完所有街区所需要的最少时间。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>blocks = [1], split = 1
  <strong>输出：</strong>1
  <strong>解释：</strong>我们使用 1 个工人在 1 个时间单位内来建完 1 个街区。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>blocks = [1,2], split = 5
  <strong>输出：</strong>7
  <strong>解释：</strong>我们用 5 个时间单位将这个工人分裂为 2 个工人，然后指派每个工人分别去建造街区，从而时间花费为 5 + max(1, 2) = 7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>blocks = [1,2,3], split = 1
  <strong>输出：</strong>4
  <strong>解释：
  </strong>将 1 个工人分裂为 2 个工人，然后指派第一个工人去建造最后一个街区，并将第二个工人分裂为 2 个工人。
  然后，用这两个未分派的工人分别去建造前两个街区。
  时间花费为 1 + max(3, 1 + max(1, 2)) = 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= blocks.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= blocks[i] <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= split <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
