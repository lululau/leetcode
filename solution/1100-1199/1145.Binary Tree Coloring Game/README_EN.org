* [[https://leetcode.com/problems/binary-tree-coloring-game][1145.
Binary Tree Coloring Game]]
  :PROPERTIES:
  :CUSTOM_ID: binary-tree-coloring-game
  :END:
[[./solution/1100-1199/1145.Binary Tree Coloring Game/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Two players play a turn based game on a binary tree.  We are given the
root of this binary tree, and the number of nodes n in the tree.  n is
odd, and each node has a distinct value from 1 to n.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Initially, the first player names a value x with 1 <= x <= n, and the
second player names a value y with 1 <= y <= n and y != x.  The first
player colors the node with value x red, and the second player colors
the node with value y blue.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Then, the players take turns starting with the first player.  In each
turn, that player chooses a node of their color (red if player 1, blue
if player 2) and colors an uncolored neighbor of the chosen node (either
the left child, right child, or parent of the chosen node.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If (and only if) a player cannot choose such a node in this way, they
must pass their turn.  If both players pass their turn, the game ends,
and the winner is the player that colored more nodes.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are the second player.  If it is possible to choose such a y to
ensure you win the game, return true.  If it is not possible, return
false.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3
  <strong>Output:</strong> true
  <strong>Explanation: </strong>The second player can choose the node with value 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

root is the root of a binary tree with n nodes and distinct node values
from 1 to n.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n is odd.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= x <= n <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
