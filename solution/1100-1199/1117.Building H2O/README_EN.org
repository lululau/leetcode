* [[https://leetcode.com/problems/building-h2o][1117. Building H2O]]
  :PROPERTIES:
  :CUSTOM_ID: building-h2o
  :END:
[[./solution/1100-1199/1117.Building H2O/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There are two kinds of threads, oxygen and hydrogen. Your goal is to
group these threads to form water molecules. There is a barrier where
each thread has to wait until a complete molecule can be formed.
Hydrogen and oxygen threads will be given releaseHydrogen and
releaseOxygen methods respectively, which will allow them to pass the
barrier. These threads should pass the barrier in groups of three, and
they must be able to immediately bond with each other to form a water
molecule. You must guarantee that all the threads from one molecule bond
before any other threads from the next molecule do.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In other words:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If an oxygen thread arrives at the barrier when no hydrogen threads are
present, it has to wait for two hydrogen threads.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If a hydrogen thread arrives at the barrier when no other threads are
present, it has to wait for an oxygen thread and another hydrogen
thread.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

We don't have to worry about matching the threads up explicitly; that
is, the threads do not necessarily know which other threads they are
paired up with. The key is just that threads pass the barrier in
complete sets; thus, if we examine the sequence of threads that bond and
divide them into groups of three, each group should contain one oxygen
and two hydrogen threads.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Write synchronization code for oxygen and hydrogen molecules that
enforces these constraints.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong><span id="example-input-1-1">&quot;HOH&quot;</span>
  <strong>Output: </strong><span id="example-output-1">&quot;HHO&quot;
  <strong>Explanation:</strong> &quot;HOH&quot; and &quot;OHH&quot; are also valid answers.</span>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong><span id="example-input-1-1">&quot;OOHHHH&quot;</span>
  <strong>Output: </strong><span id="example-output-1">&quot;HHOHHO&quot;
  <strong>Explanation:</strong> &quot;HOHHHO&quot;, &quot;OHHHHO&quot;, &quot;HHOHOH&quot;, &quot;HOHHOH&quot;, &quot;OHHHOH&quot;, &quot;HHOOHH&quot;, &quot;HOHOHH&quot; and &quot;OHHOHH&quot; are also valid answers.</span>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Total length of input string will be 3n, where 1 ≤ n ≤ 20.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Total number of H will be 2n in the input string.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Total number of O will be n in the input string.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
