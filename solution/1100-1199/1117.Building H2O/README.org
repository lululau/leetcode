* [[https://leetcode-cn.com/problems/building-h2o][1117. H2O 生成]]
  :PROPERTIES:
  :CUSTOM_ID: h2o-生成
  :END:
[[./solution/1100-1199/1117.Building H2O/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

现在有两种线程，氧 oxygen 和氢
hydrogen，你的目标是组织这两种线程来产生水分子。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

存在一个屏障（barrier）使得每个线程必须等候直到一个完整水分子能够被产生出来。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

氢和氧线程会被分别给予 releaseHydrogen 和 releaseOxygen
方法来允许它们突破屏障。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

这些线程应该三三成组突破屏障并能立即组合产生一个水分子。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你必须保证产生一个水分子所需线程的结合必须发生在下一个水分子产生之前。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

换句话说:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果一个氧线程到达屏障时没有氢线程到达，它必须等候直到两个氢线程到达。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果一个氢线程到达屏障时没有其它线程到达，它必须等候直到一个氧线程和另一个氢线程到达。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

书写满足这些限制条件的氢、氧线程同步代码。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>&quot;HOH&quot;
  <strong>输出: </strong>&quot;HHO&quot;
  <strong>解释:</strong> &quot;HOH&quot; 和 &quot;OHH&quot; 依然都是有效解。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入: </strong>&quot;OOHHHH&quot;
  <strong>输出: </strong>&quot;HHOHHO&quot;
  <strong>解释:</strong> &quot;HOHHHO&quot;, &quot;OHHHHO&quot;, &quot;HHOHOH&quot;, &quot;HOHHOH&quot;, &quot;OHHHOH&quot;, &quot;HHOOHH&quot;, &quot;HOHOHH&quot; 和 &quot;OHHOHH&quot; 依然都是有效解。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

输入字符串的总长将会是 3n, 1 ≤ n ≤ 50；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

输入字符串中的 “H” 总数将会是 2n 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

输入字符串中的 “O” 总数将会是 n 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
