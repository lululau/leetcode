* [[https://leetcode-cn.com/problems/dinner-plate-stacks][1172. 餐盘栈]]
  :PROPERTIES:
  :CUSTOM_ID: 餐盘栈
  :END:
[[./solution/1100-1199/1172.Dinner Plate Stacks/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们把无限数量 ∞ 的栈排成一行，按从左到右的次序从 0
开始编号。每个栈的的最大容量 capacity 都相同。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

实现一个叫「餐盘」的类 DinnerPlates：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

DinnerPlates(int capacity) - 给出栈的最大容量 capacity。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void push(int val) - 将给出的正整数 val 推入 从左往右第一个 没有满的栈。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int pop() -
返回 从右往左第一个 非空栈顶部的值，并将其从栈中删除；如果所有的栈都是空的，请返回 -1。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int popAtStack(int index) -
返回编号 index 的栈顶部的值，并将其从栈中删除；如果编号 index 的栈是空的，请返回
-1。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入： </strong>
  [&quot;DinnerPlates&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;popAtStack&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]
  [[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]
  <strong>输出：</strong>
  [null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]

  <strong>解释：</strong>
  DinnerPlates D = DinnerPlates(2);  // 初始化，栈最大容量 capacity = 2
  D.push(1);
  D.push(2);
  D.push(3);
  D.push(4);
  D.push(5);         // 栈的现状为：    2 &nbsp;4
  &nbsp;                                   1 &nbsp;3 &nbsp;5
                                      ﹈ ﹈ ﹈
  D.popAtStack(0);   // 返回 2。栈的现状为：     &nbsp;4
              &nbsp;                             1 &nbsp;3 &nbsp;5
                                            ﹈ ﹈ ﹈
  D.push(20);        // 栈的现状为：  20  4
  &nbsp;                                  1 &nbsp;3 &nbsp;5
                                     ﹈ ﹈ ﹈
  D.push(21);        // 栈的现状为：  20  4 21
  &nbsp;                                  1 &nbsp;3 &nbsp;5
                                     ﹈ ﹈ ﹈
  D.popAtStack(0);   // 返回 20。栈的现状为：       4 21
               &nbsp;                              1 &nbsp;3 &nbsp;5
                                              ﹈ ﹈ ﹈
  D.popAtStack(2);   // 返回 21。栈的现状为：       4
               &nbsp;                              1 &nbsp;3 &nbsp;5
                                              ﹈ ﹈ ﹈ 
  D.pop()            // 返回 5。栈的现状为：        4
               &nbsp;                              1 &nbsp;3 
                                              ﹈ ﹈  
  D.pop()            // 返回 4。栈的现状为：    1  3 
                                             ﹈ ﹈   
  D.pop()            // 返回 3。栈的现状为：    1 
                                             ﹈   
  D.pop()            // 返回 1。现在没有栈。
  D.pop()            // 返回 -1。仍然没有栈。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= capacity <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= val <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= index <= 100000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

最多会对 push，pop，和 popAtStack 进行 200000 次调用。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
