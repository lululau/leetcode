* [[https://leetcode.com/problems/dinner-plate-stacks][1172. Dinner
Plate Stacks]]
  :PROPERTIES:
  :CUSTOM_ID: dinner-plate-stacks
  :END:
[[./solution/1100-1199/1172.Dinner Plate Stacks/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You have an infinite number of stacks arranged in a row and numbered
(left to right) from 0, each of the stacks has the same maximum
capacity.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the DinnerPlates class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

DinnerPlates(int capacity) Initializes the object with the maximum
capacity of the stacks.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void push(int val) Pushes the given positive integer val into the
leftmost stack with size less than capacity.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int pop() Returns the value at the top of the rightmost non-empty stack
and removes it from that stack, and returns -1 if all stacks are empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int popAtStack(int index) Returns the value at the top of the stack with
the given index and removes it from that stack, and returns -1 if the
stack with that given index is empty.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>Input: </b>
  [&quot;DinnerPlates&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;popAtStack&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]
  [[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]
  <b>Output: </b>
  [null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]

  <b>Explanation: </b>
  DinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2
  D.push(1);
  D.push(2);
  D.push(3);
  D.push(4);
  D.push(5);         // The stacks are now:  2 &nbsp;4
  &nbsp;                                          1 &nbsp;3 &nbsp;5
                                             ﹈ ﹈ ﹈
  D.popAtStack(0);   // Returns 2.  The stacks are now:    &nbsp;4
              &nbsp;                                          1 &nbsp;3 &nbsp;5
                                                         ﹈ ﹈ ﹈
  D.push(20);        // The stacks are now: 20  4
  &nbsp;                                          1 &nbsp;3 &nbsp;5
                                             ﹈ ﹈ ﹈
  D.push(21);        // The stacks are now: 20  4 21
  &nbsp;                                          1 &nbsp;3 &nbsp;5
                                             ﹈ ﹈ ﹈
  D.popAtStack(0);   // Returns 20.  The stacks are now:     4 21
               &nbsp;                                          1 &nbsp;3 &nbsp;5
                                                          ﹈ ﹈ ﹈
  D.popAtStack(2);   // Returns 21.  The stacks are now:     4
               &nbsp;                                          1 &nbsp;3 &nbsp;5
                                                          ﹈ ﹈ ﹈ 
  D.pop()            // Returns 5.  The stacks are now:      4
               &nbsp;                                          1 &nbsp;3 
                                                          ﹈ ﹈  
  D.pop()            // Returns 4.  The stacks are now:   1 &nbsp;3 
                                                          ﹈ ﹈   
  D.pop()            // Returns 3.  The stacks are now:   1 
                                                          ﹈   
  D.pop()            // Returns 1.  There are no stacks.
  D.pop()            // Returns -1.  There are still no stacks.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= capacity <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= val <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= index <= 100000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 200000 calls will be made to push, pop, and popAtStack.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
