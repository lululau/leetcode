* [[https://leetcode.com/problems/online-majority-element-in-subarray][1157.
Online Majority Element In Subarray]]
  :PROPERTIES:
  :CUSTOM_ID: online-majority-element-in-subarray
  :END:
[[./solution/1100-1199/1157.Online Majority Element In Subarray/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implementing the class MajorityChecker, which has the following API:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MajorityChecker(int[] arr) constructs an instance of MajorityChecker
with the given array arr;

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int query(int left, int right, int threshold) has arguments such that:

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= left <= right < arr.length representing a subarray of arr;

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 * threshold > right - left + 1, ie. the threshold is always a strict
majority of the length of the subarray

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Each query(...) returns the element in arr[left], arr[left+1], ...,
arr[right] that occurs at least threshold times, or -1 if no such
element exists.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);

  majorityChecker.query(0,5,4); // returns 1

  majorityChecker.query(0,3,3); // returns -1

  majorityChecker.query(2,3,2); // returns 2

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr.length <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i] <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

For each query, 0 <= left <= right < len(arr)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

For each query, 2 * threshold > right - left + 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The number of queries is at most 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
