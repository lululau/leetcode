* [[https://leetcode-cn.com/problems/online-majority-element-in-subarray][1157.
子数组中占绝大多数的元素]]
  :PROPERTIES:
  :CUSTOM_ID: 子数组中占绝大多数的元素
  :END:
[[./solution/1100-1199/1157.Online Majority Element In Subarray/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

实现一个 MajorityChecker 的类，它应该具有下述几个 API：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MajorityChecker(int[] arr) 会用给定的数组 arr 来构造一个 MajorityChecker
的实例。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int query(int left, int right, int threshold) 有这么几个参数：

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= left <= right < arr.length 表示数组 arr 的子数组的长度。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 * threshold > right - left + 1，也就是说阈值
threshold 始终比子序列长度的一半还要大。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

每次查询 query(...) 会返回在 arr[left], arr[left+1], ...,
arr[right] 中至少出现阈值次数 threshold 的元素，如果不存在这样的元素，就返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);
  majorityChecker.query(0,5,4); // 返回 1
  majorityChecker.query(0,3,3); // 返回 -1
  majorityChecker.query(2,3,2); // 返回 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr.length <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i] <= 20000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于每次查询，0 <= left <= right < len(arr)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于每次查询，2 * threshold > right - left + 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

查询次数最多为 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
