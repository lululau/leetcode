* [[https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves][1123.
Lowest Common Ancestor of Deepest Leaves]]
  :PROPERTIES:
  :CUSTOM_ID: lowest-common-ancestor-of-deepest-leaves
  :END:
[[./solution/1100-1199/1123.Lowest Common Ancestor of Deepest Leaves/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary tree, return the lowest common ancestor of
its deepest leaves.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Recall that:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The node of a binary tree is a leaf if and only if it has no children

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The depth of the root of the tree is 0. if the depth of a node is d, the
depth of each of its children is d + 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The lowest common ancestor of a set S of nodes, is the node A with the
largest depth such that every node in S is in the subtree with root A.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Note: This question is the same as 865:
https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4]
  <strong>Output:</strong> [2,7,4]
  <strong>Explanation:</strong> We return the node with value 2, colored in yellow in the diagram.
  The nodes coloured in blue are the deepest leaf-nodes of the tree.
  Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1]
  <strong>Output:</strong> [1]
  <strong>Explanation:</strong> The root is the deepest node in the tree, and it&#39;s the lca of itself.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [0,1,3,null,2]
  <strong>Output:</strong> [2]
  <strong>Explanation:</strong> The deepest leaf node in the tree is 2, the lca of one node is itself.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree will be in the range [1, 1000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The values of the nodes in the tree are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
