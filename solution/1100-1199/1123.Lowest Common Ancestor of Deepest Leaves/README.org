* [[https://leetcode-cn.com/problems/lowest-common-ancestor-of-deepest-leaves][1123.
最深叶节点的最近公共祖先]]
  :PROPERTIES:
  :CUSTOM_ID: 最深叶节点的最近公共祖先
  :END:
[[./solution/1100-1199/1123.Lowest Common Ancestor of Deepest Leaves/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个有根节点的二叉树，找到它最深的叶节点的最近公共祖先。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

回想一下：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

叶节点 是二叉树中没有子节点的节点

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

树的根节点的 深度 为 0，如果某一节点的深度为 d，那它的子节点的深度就是 d+1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果我们假定 A 是一组节点 S 的 最近公共祖先，S 中的每个节点都在以 A
为根节点的子树中，且 A 的深度达到此条件下可能的最大值。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：本题与力扣 865
重复：https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes/

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4]
  <strong>输出：</strong>[2,7,4]
  <strong>解释：</strong>
  我们返回值为 2 的节点，在图中用黄色标记。
  在图中用蓝色标记的是树的最深的节点。
  注意，节点 6、0 和 8 也是叶节点，但是它们的深度是 2 ，而节点 7 和 4 的深度是 3 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1]
  <strong>输出：</strong>[1]
  <strong>解释：</strong>根节点是树中最深的节点，它是它本身的最近公共祖先。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [0,1,3,null,2]
  <strong>输出：</strong>[2]
  <strong>解释：</strong>树中最深的叶节点是 2 ，最近公共祖先是它自己。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

给你的树中将有 1 到 1000 个节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

树中每个节点的值都在 1 到 1000 之间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点的值都是独一无二的。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
