* [[https://leetcode-cn.com/problems/smallest-sufficient-team][1125.
最小的必要团队]]
  :PROPERTIES:
  :CUSTOM_ID: 最小的必要团队
  :END:
[[./solution/1100-1199/1125.Smallest Sufficient Team/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

作为项目经理，你规划了一份需求的技能清单 req_skills，并打算从备选人员名单 people 中选出些人组成一个「必要团队」（
编号为 i 的备选人员 people[i] 含有一份该备选人员掌握的技能列表）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

所谓「必要团队」，就是在这个团队中，对于所需求的技能列表 req_skills
中列出的每项技能，团队中至少有一名成员已经掌握。可以用每个人的编号来表示团队中的成员：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

例如，团队 team = [0, 1,
3] 表示掌握技能分别为 people[0]，people[1]，和 people[3] 的备选人员。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回 任一 规模最小的必要团队，团队成员用人员编号表示。你可以按
任意顺序 返回答案，题目数据保证答案存在。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]]
  <strong>输出：</strong>[0,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>req_skills = ["algorithms","math","java","reactjs","csharp","aws"], people = [["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]
  <strong>输出：</strong>[1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= req_skills.length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= req_skills[i].length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

req_skills[i] 由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

req_skills 中的所有字符串 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= people.length <= 60

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= people[i].length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= people[i][j].length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

people[i][j] 由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

people[i] 中的所有字符串 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

people[i] 中的每个技能是 req_skills 中的技能

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

题目数据保证「必要团队」一定存在

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
