* [[https://leetcode.com/problems/smallest-sufficient-team][1125.
Smallest Sufficient Team]]
  :PROPERTIES:
  :CUSTOM_ID: smallest-sufficient-team
  :END:
[[./solution/1100-1199/1125.Smallest Sufficient Team/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

In a project, you have a list of required skills req_skills, and a list
of people. The ith person people[i] contains a list of skills that the
person has.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Consider a sufficient team: a set of people such that for every required
skill in req_skills, there is at least one person in the team who has
that skill. We can represent these teams by the index of each person.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, team = [0, 1, 3] represents the people with skills
people[0], people[1], and people[3].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return any sufficient team of the smallest possible size, represented by
the index of each person. You may return the answer in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed an answer exists.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]]
  <strong>Output:</strong> [0,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> req_skills = ["algorithms","math","java","reactjs","csharp","aws"], people = [["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]
  <strong>Output:</strong> [1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= req_skills.length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= req_skills[i].length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

req_skills[i] consists of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the strings of req_skills are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= people.length <= 60

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= people[i].length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= people[i][j].length <= 16

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

people[i][j] consists of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the strings of people[i] are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Every skill in people[i] is a skill in req_skills.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed a sufficient team exists.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
