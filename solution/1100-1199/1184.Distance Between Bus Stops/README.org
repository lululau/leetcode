* [[https://leetcode-cn.com/problems/distance-between-bus-stops][1184.
公交站间的距离]]
  :PROPERTIES:
  :CUSTOM_ID: 公交站间的距离
  :END:
[[./solution/1100-1199/1184.Distance Between Bus Stops/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

环形公交路线上有 n 个站，按次序从 0 到 n -
1 进行编号。我们已知每一对相邻公交站之间的距离，distance[i] 表示编号为 i 的车站和编号为 (i
+ 1) % n 的车站之间的距离。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

环线上的公交车都可以按顺时针和逆时针的方向行驶。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回乘客从出发点 start 到目的地 destination 之间的最短距离。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>distance = [1,2,3,4], start = 0, destination = 1
  <strong>输出：</strong>1
  <strong>解释：</strong>公交站 0 和 1 之间的距离是 1 或 9，最小值是 1。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>distance = [1,2,3,4], start = 0, destination = 2
  <strong>输出：</strong>3
  <strong>解释：</strong>公交站 0 和 2 之间的距离是 3 或 7，最小值是 3。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>distance = [1,2,3,4], start = 0, destination = 3
  <strong>输出：</strong>4
  <strong>解释：</strong>公交站 0 和 3 之间的距离是 6 或 4，最小值是 4。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

distance.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= start, destination < n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= distance[i] <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
