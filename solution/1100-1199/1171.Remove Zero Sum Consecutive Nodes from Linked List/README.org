* [[https://leetcode-cn.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list][1171.
从链表中删去总和值为零的连续节点]]
  :PROPERTIES:
  :CUSTOM_ID: 从链表中删去总和值为零的连续节点
  :END:
[[./solution/1100-1199/1171.Remove Zero Sum Consecutive Nodes from Linked List/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个链表的头节点 head，请你编写代码，反复删去链表中由 总和 值为 0
的连续节点组成的序列，直到不存在这样的序列为止。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

删除完毕后，请你返回最终结果链表的头节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以返回任何满足题目要求的答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

（注意，下面示例中的所有序列，都是对 ListNode 对象序列化的表示。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1,2,-3,3,1]
  <strong>输出：</strong>[3,1]
  <strong>提示：</strong>答案 [1,2,1] 也是正确的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1,2,3,-3,4]
  <strong>输出：</strong>[1,2,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>head = [1,2,3,-3,-2]
  <strong>输出：</strong>[1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

给你的链表中可能有 1 到 1000 个节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于链表中的每个节点，节点的值：-1000 <= node.val <= 1000.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"前缀和 + 哈希表"实现。

若链表节点的两个前缀和相等，说明两个前缀和之间的连续节点序列的和为
0，那么可以消去这部分连续节点。

第一次遍历链表，用哈希表 =pre_sum_node=
记录前缀和以及对应的链表节点，同一前缀和 s，*后者的链表节点覆盖前者*。

第二次遍历链表，若当前节点 cur 的前缀和 s 在 =pre_sum_node= 出现，说明
cur 与 pre_sum_node[s] 之间的所有节点和为 0，直接修改 cur
的指向，=cur.next = pre_sum_node[s].next=，就删去了这部分和为 0
的连续节点。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def removeZeroSumSublists(self, head: ListNode) -> ListNode:
          dummy = ListNode(0)
          dummy.next = head
          s, cur = 0, dummy
          pre_sum_node = {}
          while cur:
              s += cur.val
              pre_sum_node[s] = cur
              cur = cur.next
          s, cur = 0, dummy
          while cur:
              s += cur.val
              cur.next = pre_sum_node[s].next
              cur = cur.next
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  class Solution {
      public ListNode removeZeroSumSublists(ListNode head) {
          ListNode dummy = new ListNode(0);
          dummy.next = head;
          Map<Integer, ListNode> preSumNode = new HashMap<>();
          int s = 0;
          for (ListNode cur = dummy; cur != null; cur = cur.next) {
              s += cur.val;
              preSumNode.put(s, cur);
          }
          s = 0;
          for (ListNode cur = dummy; cur != null; cur = cur.next) {
              s += cur.val;
              cur.next = preSumNode.get(s).next;
          }
          return dummy.next;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
