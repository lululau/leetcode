* [[https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list][1171.
Remove Zero Sum Consecutive Nodes from Linked List]]
  :PROPERTIES:
  :CUSTOM_ID: remove-zero-sum-consecutive-nodes-from-linked-list
  :END:
[[./solution/1100-1199/1171.Remove Zero Sum Consecutive Nodes from Linked List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the head of a linked list, we repeatedly delete consecutive
sequences of nodes that sum to 0 until there are no such sequences.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

After doing so, return the head of the final linked list.  You may
return any such answer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

(Note that in the examples below, all sequences are serializations of
ListNode objects.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,-3,3,1]
  <strong>Output:</strong> [3,1]
  <strong>Note:</strong> The answer [1,2,1] would also be accepted.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,3,-3,4]
  <strong>Output:</strong> [1,2,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,3,-3,-2]
  <strong>Output:</strong> [1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The given linked list will contain between 1 and 1000 nodes.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each node in the linked list has -1000 <= node.val <= 1000.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def removeZeroSumSublists(self, head: ListNode) -> ListNode:
          dummy = ListNode(0)
          dummy.next = head
          s, cur = 0, dummy
          pre_sum_node = {}
          while cur:
              s += cur.val
              pre_sum_node[s] = cur
              cur = cur.next
          s, cur = 0, dummy
          while cur:
              s += cur.val
              cur.next = pre_sum_node[s].next
              cur = cur.next
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
   */
  class Solution {
      public ListNode removeZeroSumSublists(ListNode head) {
          ListNode dummy = new ListNode(0);
          dummy.next = head;
          Map<Integer, ListNode> preSumNode = new HashMap<>();
          int s = 0;
          for (ListNode cur = dummy; cur != null; cur = cur.next) {
              s += cur.val;
              preSumNode.put(s, cur);
          }
          s = 0;
          for (ListNode cur = dummy; cur != null; cur = cur.next) {
              s += cur.val;
              cur.next = preSumNode.get(s).next;
          }
          return dummy.next;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
