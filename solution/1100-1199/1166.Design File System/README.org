* [[https://leetcode-cn.com/problems/design-file-system][1166.
设计文件系统]]
  :PROPERTIES:
  :CUSTOM_ID: 设计文件系统
  :END:
[[./solution/1100-1199/1166.Design File System/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你需要设计一个能提供下面两个函数的文件系统：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

create(path, value): 创建一个新的路径，并尽可能将值 value 与路径 path
关联，然后返回 True。如果路径已经存在或者路径的父路径不存在，则返回 False。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

get(path): 返回与路径关联的值。如果路径不存在，则返回 -1。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

“路径”
是由一个或多个符合下述格式的字符串连接起来形成的：在 / 后跟着一个或多个小写英文字母。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如 /leetcode 和 /leetcode/problems 都是有效的路径，但空字符串和 / 不是有效的路径。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

好了，接下来就请你来实现这两个函数吧！（请参考示例以获得更多信息）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong> 
  [&quot;FileSystem&quot;,&quot;create&quot;,&quot;get&quot;]
  [[],[&quot;/a&quot;,1],[&quot;/a&quot;]]
  <strong>输出：</strong> 
  [null,true,1]
  <strong>解释：</strong> 
  FileSystem fileSystem = new FileSystem();

  fileSystem.create(&quot;/a&quot;, 1); // 返回 true
  fileSystem.get(&quot;/a&quot;); // 返回 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong> 
  [&quot;FileSystem&quot;,&quot;create&quot;,&quot;create&quot;,&quot;get&quot;,&quot;create&quot;,&quot;get&quot;]
  [[],[&quot;/leet&quot;,1],[&quot;/leet/code&quot;,2],[&quot;/leet/code&quot;],[&quot;/c/d&quot;,1],[&quot;/c&quot;]]
  <strong>输出：</strong> 
  [null,true,true,2,false,-1]
  <strong>解释：</strong>
  FileSystem fileSystem = new FileSystem();

  fileSystem.create(&quot;/leet&quot;, 1); // 返回 true
  fileSystem.create(&quot;/leet/code&quot;, 2); // 返回 true
  fileSystem.get(&quot;/leet/code&quot;); // 返回 2
  fileSystem.create(&quot;/c/d&quot;, 1); // 返回 false 因为父路径 &quot;/c&quot; 不存在。
  fileSystem.get(&quot;/c&quot;); // 返回 -1 因为该路径不存在。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

对两个函数的调用次数加起来小于等于 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= path.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= value <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
