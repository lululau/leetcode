* [[https://leetcode.com/problems/optimize-water-distribution-in-a-village][1168.
Optimize Water Distribution in a Village]]
  :PROPERTIES:
  :CUSTOM_ID: optimize-water-distribution-in-a-village
  :END:
[[./solution/1100-1199/1168.Optimize Water Distribution in a Village/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There are n houses in a village. We want to supply water for all the
houses by building wells and laying pipes.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For each house i, we can either build a well inside it directly with
cost wells[i - 1] (note the -1 due to 0-indexing), or pipe in water from
another well to it. The costs to lay pipes between houses are given by
the array pipes, where each pipes[j] = [house1j, house2j, costj]
represents the cost to connect house1j and house2j together using a
pipe. Connections are bidirectional.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum total cost to supply water to all houses.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]
  <strong>Output:</strong> 3
  <strong>Explanation: </strong>
  The image shows the costs of connecting houses using pipes.
  The best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

wells.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= wells[i] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pipes.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pipes[j].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= house1j, house2j <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= costj <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

house1j != house2j

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
