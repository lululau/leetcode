* [[https://leetcode-cn.com/problems/connecting-cities-with-minimum-cost][1135.
最低成本联通所有城市]]
  :PROPERTIES:
  :CUSTOM_ID: 最低成本联通所有城市
  :END:
[[./solution/1100-1199/1135.Connecting Cities With Minimum Cost/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

想象一下你是个城市基建规划者，地图上有 N 座城市，它们按以 1
到 N 的次序编号。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一些可连接的选项 conections，其中每个选项 conections[i] = [city1,
city2, cost] 表示将城市 city1
和城市 city2 连接所要的成本。（连接是双向的，也就是说城市
city1 和城市 city2 相连也同样意味着城市 city2 和城市 city1 相连）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回使得每对城市间都存在将它们连接在一起的连通路径（可能长度为 1
的）最小成本。该最小成本应该是所用全部连接代价的综合。如果根据已知条件无法完成该项任务，则请你返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>N = 3, conections = [[1,2,5],[1,3,6],[2,3,1]]
  <strong>输出：</strong>6
  <strong>解释：</strong>
  选出任意 2 条边都可以连接所有城市，我们从中选取成本最小的 2 条。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>N = 4, conections = [[1,2,3],[3,4,4]]
  <strong>输出：</strong>-1
  <strong>解释： </strong>
  即使连通所有的边，也无法连接所有城市。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= conections.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= conections[i][0], conections[i][1] <= N

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= conections[i][2] <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

conections[i][0] != conections[i][1]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
