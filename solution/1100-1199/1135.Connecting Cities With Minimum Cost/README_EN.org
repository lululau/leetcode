* [[https://leetcode.com/problems/connecting-cities-with-minimum-cost][1135.
Connecting Cities With Minimum Cost]]
  :PROPERTIES:
  :CUSTOM_ID: connecting-cities-with-minimum-cost
  :END:
[[./solution/1100-1199/1135.Connecting Cities With Minimum Cost/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There are N cities numbered from 1 to N.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are given connections, where each connections[i] = [city1, city2,
cost] represents the cost to connect city1 and city2 together.  (A
connection is bidirectional: connecting city1 and city2 is the same as
connecting city2 and city1.)

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum cost so that for every pair of cities, there exists a
path of connections (possibly of length 1) that connects those two
cities together.  The cost is the sum of the connection costs used. If
the task is impossible, return -1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong>N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
  <strong>Output: </strong>6
  <strong>Explanation: </strong>
  Choosing any 2 edges will connect all cities so we choose the minimum 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input: </strong>N = 4, connections = [[1,2,3],[3,4,4]]
  <strong>Output: </strong>-1
  <strong>Explanation: </strong>
  There is no way to connect all cities even if all edges are used.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= connections.length <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= connections[i][0], connections[i][1] <= N

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= connections[i][2] <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

connections[i][0] != connections[i][1]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
