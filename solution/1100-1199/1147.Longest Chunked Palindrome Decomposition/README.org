* [[https://leetcode-cn.com/problems/longest-chunked-palindrome-decomposition][1147.
段式回文]]
  :PROPERTIES:
  :CUSTOM_ID: 段式回文
  :END:
[[./solution/1100-1199/1147.Longest Chunked Palindrome Decomposition/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

段式回文 其实与 一般回文 类似，只不过是最小的单位是 一段字符 而不是
单个字母。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

举个例子，对于一般回文 "abcba" 是回文，而 "volvo"
不是，但如果我们把 "volvo" 分为 "vo"、"l"、"vo" 三段，则可以认为
“(vo)(l)(vo)” 是段式回文（分为 3 段）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 text，在确保它满足段式回文的前提下，请你返回 段
的 最大数量 k。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果段的最大数量为 k，那么存在满足以下条件的 a_1, a_2, ..., a_k：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每个 a_i 都是一个非空字符串；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

将这些字符串首位相连的结果 a_1 + a_2 + ... +
a_k 和原始字符串 text 相同；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

对于所有1 <= i <= k，都有 a_i = a_{k+1 - i}。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;ghiabcdefhelloadamhelloabcdefghi&quot;
  <strong>输出：</strong>7
  <strong>解释：</strong>我们可以把字符串拆分成 &quot;(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;merchant&quot;
  <strong>输出：</strong>1
  <strong>解释：</strong>我们可以把字符串拆分成 &quot;(merchant)&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;antaprezatepzapreanta&quot;
  <strong>输出：</strong>11
  <strong>解释：</strong>我们可以把字符串拆分成 &quot;(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>text = &quot;aaa&quot;
  <strong>输出：</strong>3
  <strong>解释：</strong>我们可以把字符串拆分成 &quot;(a)(a)(a)&quot;。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

text 仅由小写英文字符组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= text.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
