* [[https://leetcode.com/problems/longest-chunked-palindrome-decomposition][1147.
Longest Chunked Palindrome Decomposition]]
  :PROPERTIES:
  :CUSTOM_ID: longest-chunked-palindrome-decomposition
  :END:
[[./solution/1100-1199/1147.Longest Chunked Palindrome Decomposition/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a string text. You should split it to k substrings
(subtext1, subtext2, ..., subtextk) such that:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

subtexti is a non-empty string.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The concatenation of all the substrings is equal to text (i.e., subtext1
+ subtext2 + ... + subtextk == text).

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <=
k).

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the largest possible value of k.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> text = &quot;ghiabcdefhelloadamhelloabcdefghi&quot;
  <strong>Output:</strong> 7
  <strong>Explanation:</strong> We can split the string on &quot;(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> text = &quot;merchant&quot;
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> We can split the string on &quot;(merchant)&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> text = &quot;antaprezatepzapreanta&quot;
  <strong>Output:</strong> 11
  <strong>Explanation:</strong> We can split the string on &quot;(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> text = &quot;aaa&quot;
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> We can split the string on &quot;(a)(a)(a)&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= text.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

text consists only of lowercase English characters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
