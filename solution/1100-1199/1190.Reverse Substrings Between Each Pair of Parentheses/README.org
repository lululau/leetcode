* [[https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses][1190.
反转每对括号间的子串]]
  :PROPERTIES:
  :CUSTOM_ID: 反转每对括号间的子串
  :END:
[[./solution/1100-1199/1190.Reverse Substrings Between Each Pair of Parentheses/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给出一个字符串 s（仅含有小写英文字母和括号）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意，您的结果中 不应 包含任何括号。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;(abcd)&quot;
  <strong>输出：</strong>&quot;dcba&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;(u(love)i)&quot;
  <strong>输出：</strong>&quot;iloveu&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;(ed(et(oc))el)&quot;
  <strong>输出：</strong>&quot;leetcode&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;a(bcdefghijkl(mno)p)q&quot;
  <strong>输出：</strong>&quot;apmnolkjihgfedcbq&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= s.length <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中只有小写英文字母和括号

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

我们确保所有括号都是成对出现的

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

用双端队列或者栈，模拟反转过程

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def reverseParentheses(self, s: str) -> str:
          stack = []
          for c in s:
              if c == ")":
                  tmp = []
                  while stack[-1] != "(":
                      tmp += stack.pop()
                  stack.pop()
                  stack += tmp
              else:
                  stack.append(c)
          return "".join(stack)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public String reverseParentheses(String s) {
          Deque<Character> deque = new ArrayDeque<>();
          for (char c : s.toCharArray()) {
              if (c == ')') {
                  StringBuilder sb = new StringBuilder();
                  while (deque.peekLast() != '(') {
                      sb.append(deque.pollLast());
                  }
                  deque.pollLast();
                  for (int i = 0, n = sb.length(); i < n; i++) {
                      deque.offerLast(sb.charAt(i));
                  }
              } else {
                  deque.offerLast(c);
              }
          }
          StringBuilder sb = new StringBuilder();
          while (!deque.isEmpty()) {
              sb.append(deque.pollFirst());
          }
          return sb.toString();
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} s
   * @return {string}
   */
  var reverseParentheses = function(s) {
      let stack = [];
      let hashMap = {};
      const n = s.length;
      for (let i = 0; i < n; i++) {
          let cur = s.charAt(i);
          if (cur == '(') {
              stack.push(i);
          } else if (cur == ')') {
              let left = stack.pop();
              hashMap[left] = i;
              hashMap[i] = left;
          }
      }
      let res = [];
      let i = 0;
      let step = 1; // 1向右，-1向左
      while (i > -1 && i < n) {
          let cur = s.charAt(i);
          if (cur == '(' || cur == ')') {
              step = -step;
              i = hashMap[i];
          } else {
              res.push(cur);
          }
          i += step;
      }
      return res.join('');
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
