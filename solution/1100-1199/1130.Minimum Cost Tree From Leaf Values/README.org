* [[https://leetcode-cn.com/problems/minimum-cost-tree-from-leaf-values][1130.
叶值的最小代价生成树]]
  :PROPERTIES:
  :CUSTOM_ID: 叶值的最小代价生成树
  :END:
[[./solution/1100-1199/1130.Minimum Cost Tree From Leaf Values/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个正整数数组 arr，考虑所有满足以下条件的二叉树：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点都有 0 个或是 2 个子节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

数组 arr 中的值与树的中序遍历中每个叶节点的值一一对应。（知识回顾：如果一个节点有
0 个子节点，那么该节点为叶节点。）

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个非叶节点的值等于其左子树和右子树中叶节点的最大值的乘积。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

在所有这样的二叉树中，返回每个非叶节点的值的最小可能总和。这个和的值是一个 32
位整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>arr = [6,2,4]
  <strong>输出：</strong>32
  <strong>解释：</strong>
  有两种可能的树，第一种的非叶节点的总和为 36，第二种非叶节点的总和为 32。

      24            24
     /  \          /  \
    12   4        6    8
   /  \               / \
  6    2             2   4</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= arr.length <= 40

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr[i] <= 15

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

答案保证是一个 32 位带符号整数，即小于 2^31。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
