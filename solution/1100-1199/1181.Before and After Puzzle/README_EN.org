* [[https://leetcode.com/problems/before-and-after-puzzle][1181. Before
and After Puzzle]]
  :PROPERTIES:
  :CUSTOM_ID: before-and-after-puzzle
  :END:
[[./solution/1100-1199/1181.Before and After Puzzle/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a list of phrases, generate a list of Before and After puzzles.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A phrase is a string that consists of lowercase English letters and
spaces only. No space appears in the start or the end of a phrase. There
are no consecutive spaces in a phrase.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Before and After puzzles are phrases that are formed by merging two
phrases where the last word of the first phrase is the same as the first
word of the second phrase.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the Before and After puzzles that can be formed by every two
phrases phrases[i] and phrases[j] where i != j. Note that the order of
matching two phrases matters, we want to consider both orders.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You should return a list of distinct strings sorted lexicographically.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> phrases = [&quot;writing code&quot;,&quot;code rocks&quot;]
  <strong>Output:</strong> [&quot;writing code rocks&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> phrases = [&quot;mission statement&quot;,
                    &quot;a quick bite to eat&quot;,
  &nbsp;                 &quot;a chip off the old block&quot;,
  &nbsp;                 &quot;chocolate bar&quot;,
  &nbsp;                 &quot;mission impossible&quot;,
  &nbsp;                 &quot;a man on a mission&quot;,
  &nbsp;                 &quot;block party&quot;,
  &nbsp;                 &quot;eat my words&quot;,
  &nbsp;                 &quot;bar of soap&quot;]
  <strong>Output:</strong> [&quot;a chip off the old block party&quot;,
  &nbsp;        &quot;a man on a mission impossible&quot;,
  &nbsp;        &quot;a man on a mission statement&quot;,
  &nbsp;        &quot;a quick bite to eat my words&quot;,
           &quot;chocolate bar of soap&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> phrases = [&quot;a&quot;,&quot;b&quot;,&quot;a&quot;]
  <strong>Output:</strong> [&quot;a&quot;]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= phrases.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= phrases[i].length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def beforeAndAfterPuzzles(self, phrases: List[str]) -> List[str]:
          same_first_word = collections.defaultdict(set)
          for i, phrase in enumerate(phrases):
              same_first_word[phrase.split()[0]].add(i)
          res = set()
          for i, phrase in enumerate(phrases):
              words = phrase.split()
              last_word = words[-1]
              if last_word in same_first_word:
                  for j in same_first_word[last_word]:
                      if i != j:
                          res.add(' '.join(words[:-1] + phrases[j].split()))
          return sorted(list(res))
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<String> beforeAndAfterPuzzles(String[] phrases) {
          Map<String, Set<Integer>> sameFirstWord = new HashMap<>();
          for (int i = 0; i < phrases.length; ++i) {
              String phrase = phrases[i];
              String word = phrase.split(" ")[0];
              if (!sameFirstWord.containsKey(word)) {
                  sameFirstWord.put(word, new HashSet<>());
              }
              sameFirstWord.get(word).add(i);
          }
          Set<String> res = new HashSet<>();
          for (int i = 0; i < phrases.length; ++i) {
              String phrase = phrases[i];
              String[] words = phrase.split(" ");
              String lastWord = words[words.length - 1];
              if (sameFirstWord.containsKey(lastWord)) {
                  for (int j : sameFirstWord.get(lastWord)) {
                      if (i != j) {
                          List<String> t = new ArrayList<>();
                          for (int k = 0; k < words.length - 1; ++k) {
                              t.add(words[k]);
                          }
                          for (String word : phrases[j].split(" ")) {
                              t.add(word);
                          }
                          res.add(String.join(" ", t));
                      }
                  }
              }
          }
          List<String> output = new ArrayList<>(res);
          Collections.sort(output);
          return output;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
