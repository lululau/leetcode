* [[https://leetcode-cn.com/problems/alphabet-board-path][1138.
字母板上的路径]]
  :PROPERTIES:
  :CUSTOM_ID: 字母板上的路径
  :END:
[[./solution/1100-1199/1138.Alphabet Board Path/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们从一块字母板上的位置 (0, 0) 出发，该坐标对应的字符为 board[0][0]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在本题里，字母板为board = ["abcde", "fghij", "klmno", "pqrst", "uvwxy",
"z"]，如下所示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们可以按下面的指令规则行动：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果方格存在，'U' 意味着将我们的位置上移一行；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果方格存在，'D' 意味着将我们的位置下移一行；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果方格存在，'L' 意味着将我们的位置左移一列；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果方格存在，'R' 意味着将我们的位置右移一列；

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

'!' 会把在我们当前位置 (r, c) 的字符 board[r][c] 添加到答案中。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

（注意，字母板上只存在有字母的位置。）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回指令序列，用最小的行动次数让答案和目标 target 相同。你可以返回任何达成目标的路径。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = &quot;leet&quot;
  <strong>输出：</strong>&quot;DDR!UURRR!!DDD!&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>target = &quot;code&quot;
  <strong>输出：</strong>&quot;RR!DDRR!UUL!R!&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= target.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target 仅含有小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
