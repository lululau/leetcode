* [[https://leetcode-cn.com/problems/number-of-valid-words-for-each-puzzle][1178.
猜字谜]]
  :PROPERTIES:
  :CUSTOM_ID: 猜字谜
  :END:
[[./solution/1100-1199/1178.Number of Valid Words for Each Puzzle/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

外国友人仿照中国字谜设计了一个英文版猜字谜小游戏，请你来猜猜看吧。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

字谜的迷面 puzzle
按字符串形式给出，如果一个单词 word 符合下面两个条件，那么它就可以算作谜底：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

单词 word 中包含谜面 puzzle 的第一个字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

单词 word 中的每一个字母都可以在谜面 puzzle 中找到。
例如，如果字谜的谜面是 "abcdefg"，那么可以作为谜底的单词有 "faced",
"cabbage", 和 "baggage"；而 "beefed"（不含字母 "a"）以及 "based"（其中的
"s" 没有出现在谜面中）都不能作为谜底。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

返回一个答案数组 answer，数组中的每个元素 answer[i] 是在给出的单词列表
words 中可以作为字谜迷面 puzzles[i] 所对应的谜底的单词数目。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  words = ["aaaa","asas","able","ability","actt","actor","access"], 
  puzzles = ["aboveyz","abrodyz","abslute","absoryz","actresz","gaswxyz"]
  <strong>输出：</strong>[1,1,3,2,4,0]
  <strong>解释：</strong>
  1 个单词可以作为 "aboveyz" 的谜底 : "aaaa" 
  1 个单词可以作为 "abrodyz" 的谜底 : "aaaa"
  3 个单词可以作为 "abslute" 的谜底 : "aaaa", "asas", "able"
  2 个单词可以作为 "absoryz" 的谜底 : "aaaa", "asas"
  4 个单词可以作为 "actresz" 的谜底 : "aaaa", "asas", "actt", "access"
  没有单词可以作为 "gaswxyz" 的谜底，因为列表中的单词都不含字母 'g'。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words.length <= 10^5

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

4 <= words[i].length <= 50

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= puzzles.length <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

puzzles[i].length == 7

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

words[i][j], puzzles[i][j] 都是小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个 puzzles[i] 所包含的字符都不重复。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
