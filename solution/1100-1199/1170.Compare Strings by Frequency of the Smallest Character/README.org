* [[https://leetcode-cn.com/problems/compare-strings-by-frequency-of-the-smallest-character][1170.
比较字符串最小字母出现频次]]
  :PROPERTIES:
  :CUSTOM_ID: 比较字符串最小字母出现频次
  :END:
[[./solution/1100-1199/1170.Compare Strings by Frequency of the Smallest Character/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

定义一个函数 f(s)，统计 s  中（按字典序比较）最小字母的出现频次 ，其中
s 是一个非空字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，若 s = "dcce"，那么 f(s) = 2，因为字典序最小字母是 "c"，它出现了 2
次。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

现在，给你两个字符串数组待查表 queries 和词汇表 words
。对于每次查询 queries[i] ，需统计 words 中满足 f(queries[i]) < f(W) 的
词的数目 ，W 表示词汇表 words 中的每个词。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回一个整数数组 answer 作为答案，其中每个 answer[i] 是第 i
次查询的结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>queries = ["cbd"], words = ["zaaaz"]
  <strong>输出：</strong>[1]
  <strong>解释：</strong>查询 f("cbd") = 1，而 f("zaaaz") = 3 所以 f("cbd") < f("zaaaz")。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]
  <strong>输出：</strong>[1,2]
  <strong>解释：</strong>第一个查询 f("bbb") < f("aaaa")，第二个查询 f("aaa") 和 f("aaaa") 都 > f("cc")。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries.length <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words.length <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries[i].length, words[i].length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[i][j]、words[i][j] 都由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
