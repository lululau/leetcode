* [[https://leetcode.com/problems/longest-common-subsequence][1143.
Longest Common Subsequence]]
  :PROPERTIES:
  :CUSTOM_ID: longest-common-subsequence
  :END:
[[./solution/1100-1199/1143.Longest Common Subsequence/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two strings text1 and text2, return the length of their longest
common subsequence. If there is no common subsequence, return 0.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A subsequence of a string is a new string generated from the original
string with some characters (can be none) deleted without changing the
relative order of the remaining characters.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, "ace" is a subsequence of "abcde".

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

A common subsequence of two strings is a subsequence that is common to
both strings.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; 
  <strong>Output:</strong> 3  
  <strong>Explanation:</strong> The longest common subsequence is &quot;ace&quot; and its length is 3.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> text1 = &quot;abc&quot;, text2 = &quot;abc&quot;
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> The longest common subsequence is &quot;abc&quot; and its length is 3.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> text1 = &quot;abc&quot;, text2 = &quot;def&quot;
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> There is no such common subsequence, so the result is 0.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= text1.length, text2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

text1 and text2 consist of only lowercase English characters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def longestCommonSubsequence(self, text1: str, text2: str) -> int:
          m, n = len(text1), len(text2)
          dp = [[0] * (n + 1) for _ in range(m + 1)]
          for i in range(1, m + 1):
              for j in range(1, n + 1):
                  dp[i][j] = dp[i - 1][j - 1] + 1 if text1[i - 1] == text2[j - 1] else max(dp[i - 1][j], dp[i][j - 1])
          return dp[m][n]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int longestCommonSubsequence(String text1, String text2) {
          int m = text1.length(), n = text2.length();
          int[][] dp = new int[m + 1][n + 1];
          for (int i = 1; i <= m; ++i) {
              for (int j = 1; j <= n; ++j) {
                  char c1 = text1.charAt(i - 1), c2 = text2.charAt(j - 1);
                  dp[i][j] = c1 == c2 ? dp[i - 1][j - 1] + 1 : Math.max(dp[i - 1][j], dp[i][j - 1]);
              }
          }
          return dp[m][n];
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
