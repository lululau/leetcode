* [[https://leetcode-cn.com/problems/longest-common-subsequence][1143.
最长公共子序列]]
  :PROPERTIES:
  :CUSTOM_ID: 最长公共子序列
  :END:
[[./solution/1100-1199/1143.Longest Common Subsequence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列
的长度。如果不存在 公共子序列 ，返回 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

例如，"ace" 是 "abcde" 的子序列，但 "aec" 不是 "abcde" 的子序列。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>text1 = "abcde", text2 = "ace" 
  <strong>输出：</strong>3  
  <strong>解释：</strong>最长公共子序列是 "ace" ，它的长度为 3 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>text1 = "abc", text2 = "abc"
  <strong>输出：</strong>3
  <strong>解释：</strong>最长公共子序列是 "abc" ，它的长度为 3 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>text1 = "abc", text2 = "def"
  <strong>输出：</strong>0
  <strong>解释：</strong>两个字符串没有公共子序列，返回 0 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= text1.length, text2.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

text1 和 text2 仅由小写英文字符组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

动态规划法。

定义 =dp[i][j]= 表示 =text1[0:i-1]= 和 =text2[0:j-1]=
的最长公共子序列（闭区间）。

递推公式如下：

[[./images/gif.gif]]

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def longestCommonSubsequence(self, text1: str, text2: str) -> int:
          m, n = len(text1), len(text2)
          dp = [[0] * (n + 1) for _ in range(m + 1)]
          for i in range(1, m + 1):
              for j in range(1, n + 1):
                  dp[i][j] = dp[i - 1][j - 1] + 1 if text1[i - 1] == text2[j - 1] else max(dp[i - 1][j], dp[i][j - 1])
          return dp[m][n]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int longestCommonSubsequence(String text1, String text2) {
          int m = text1.length(), n = text2.length();
          int[][] dp = new int[m + 1][n + 1];
          for (int i = 1; i <= m; ++i) {
              for (int j = 1; j <= n; ++j) {
                  char c1 = text1.charAt(i - 1), c2 = text2.charAt(j - 1);
                  dp[i][j] = c1 == c2 ? dp[i - 1][j - 1] + 1 : Math.max(dp[i - 1][j], dp[i][j - 1]);
              }
          }
          return dp[m][n];
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
