* [[https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters][1160.
拼写单词]]
  :PROPERTIES:
  :CUSTOM_ID: 拼写单词
  :END:
[[./solution/1100-1199/1160.Find Words That Can Be Formed by Characters/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一份『词汇表』（字符串数组） words 和一张『字母表』（字符串） chars。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假如你可以用 chars 中的『字母』（字符）拼写出
words 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意：每次拼写（指拼写词汇表中的一个单词）时，chars
中的每个字母都只能用一次。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回词汇表 words 中你掌握的所有单词的 长度之和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>words = [&quot;cat&quot;,&quot;bt&quot;,&quot;hat&quot;,&quot;tree&quot;], chars = &quot;atach&quot;
  <strong>输出：</strong>6
  <strong>解释： </strong>
  可以形成字符串 &quot;cat&quot; 和 &quot;hat&quot;，所以答案是 3 + 3 = 6。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>words = [&quot;hello&quot;,&quot;world&quot;,&quot;leetcode&quot;], chars = &quot;welldonehoneyr&quot;
  <strong>输出：</strong>10
  <strong>解释：</strong>
  可以形成字符串 &quot;hello&quot; 和 &quot;world&quot;，所以答案是 5 + 5 = 10。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= words[i].length, chars.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有字符串中都仅包含小写英文字母

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
