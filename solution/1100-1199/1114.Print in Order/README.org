* [[https://leetcode-cn.com/problems/print-in-order][1114. 按序打印]]
  :PROPERTIES:
  :CUSTOM_ID: 按序打印
  :END:
[[./solution/1100-1199/1114.Print in Order/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

我们提供了一个类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  public class Foo {
    public void first() { print("first"); }
    public void second() { print("second"); }
    public void third() { print("third"); }
  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

三个不同的线程 A、B、C 将会共用一个 Foo 实例。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

一个将会调用 first() 方法

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

一个将会调用 second() 方法

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

还有一个将会调用 third() 方法

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请设计修改程序，以确保 second() 方法在 first() 方法之后被执行，third()
方法在 second() 方法之后被执行。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> [1,2,3]
  <strong>输出:</strong> "firstsecondthird"
  <strong>解释:</strong> 
  有三个线程会被异步启动。
  输入 [1,2,3] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 second() 方法，线程 C 将会调用 third() 方法。
  正确的输出是 "firstsecondthird"。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> [1,3,2]
  <strong>输出:</strong> "firstsecondthird"
  <strong>解释:</strong> 
  输入 [1,3,2] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 third() 方法，线程 C 将会调用 second() 方法。
  正确的输出是 "firstsecondthird"。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你看到的输入格式主要是为了确保测试的全面性。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
