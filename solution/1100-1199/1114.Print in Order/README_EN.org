* [[https://leetcode.com/problems/print-in-order][1114. Print in Order]]
  :PROPERTIES:
  :CUSTOM_ID: print-in-order
  :END:
[[./solution/1100-1199/1114.Print in Order/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Suppose we have a class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  public class Foo {
    public void first() { print(&quot;first&quot;); }
    public void second() { print(&quot;second&quot;); }
    public void third() { print(&quot;third&quot;); }
  }
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

The same instance of Foo will be passed to three different threads.
Thread A will call first(), thread B will call second(), and thread C
will call third(). Design a mechanism and modify the program to ensure
that second() is executed after first(), and third() is executed after
second().

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

We do not know how the threads will be scheduled in the operating
system, even though the numbers in the input seem to imply the ordering.
The input format you see is mainly to ensure our tests'
comprehensiveness.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,2,3]
  <strong>Output:</strong> &quot;firstsecondthird&quot;
  <strong>Explanation:</strong> There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). &quot;firstsecondthird&quot; is the correct output.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,3,2]
  <strong>Output:</strong> &quot;firstsecondthird&quot;
  <strong>Explanation:</strong> The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). &quot;firstsecondthird&quot; is the correct output.
  </pre>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
