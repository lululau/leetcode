* [[https://leetcode-cn.com/problems/parallel-courses][1136. 平行课程]]
  :PROPERTIES:
  :CUSTOM_ID: 平行课程
  :END:
[[./solution/1100-1199/1136.Parallel Courses/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

已知有 N 门课程，它们以 1 到 N 进行编号。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一份课程关系表 relations[i] = [X,
Y]，用以表示课程 X 和课程 Y 之间的先修关系：课程 X 必须在课程 Y 之前修完。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

假设在一个学期里，你可以学习任何数量的课程，但前提是你已经学习了将要学习的这些课程的所有先修课程。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回学完全部课程所需的最少学期数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果没有办法做到学完全部这些课程的话，就返回 -1。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>N = 3, relations = [[1,3],[2,3]]
  <strong>输出：</strong>2
  <strong>解释：</strong>
  在第一个学期学习课程 1 和 2，在第二个学期学习课程 3。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>N = 3, relations = [[1,2],[2,3],[3,1]]
  <strong>输出：</strong>-1
  <strong>解释：</strong>
  没有课程可以学习，因为它们相互依赖。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= relations.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

relations[i][0] != relations[i][1]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

输入中没有重复的关系

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
