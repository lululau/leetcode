* [[https://leetcode-cn.com/problems/the-earliest-moment-when-everyone-become-friends][1101.
彼此熟识的最早时间]]
  :PROPERTIES:
  :CUSTOM_ID: 彼此熟识的最早时间
  :END:
[[./solution/1100-1199/1101.The Earliest Moment When Everyone Become Friends/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在一个社交圈子当中，有 N 个人。每个人都有一个从 0 到 N-1 唯一的
id 编号。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们有一份日志列表 logs，其中每条记录都包含一个非负整数的时间戳，以及分属两个人的不同 id，logs[i]
= [timestamp, id_A, id_B]。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每条日志标识出两个人成为好友的时间，友谊是相互的：如果 A 和 B
是好友，那么 B 和 A 也是好友。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果 A 是 B 的好友，或者 A 是 B 的好友的好友，那么就可以认为 A 也与 B
熟识。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回圈子里所有人之间都熟识的最早时间。如果找不到最早时间，就返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6
  <strong>输出：</strong>20190301
  <strong>解释：</strong>
  第一次结交发生在 timestamp = 20190101，0 和 1 成为好友，社交朋友圈如下 [0,1], [2], [3], [4], [5]。
  第二次结交发生在 timestamp = 20190104，3 和 4 成为好友，社交朋友圈如下 [0,1], [2], [3,4], [5].
  第三次结交发生在 timestamp = 20190107，2 和 3 成为好友，社交朋友圈如下 [0,1], [2,3,4], [5].
  第四次结交发生在 timestamp = 20190211，1 和 5 成为好友，社交朋友圈如下 [0,1,5], [2,3,4].
  第五次结交发生在 timestamp = 20190224，2 和 4 已经是好友了。
  第六次结交发生在 timestamp = 20190301，0 和 3 成为好友，大家都互相熟识了。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= N <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= logs.length <= 10^4

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= logs[i][0] <= 10^9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= logs[i][1], logs[i][2] <= N - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

保证 logs[i][0] 中的所有时间戳都不同

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Logs 不一定按某一标准排序

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

logs[i][1] != logs[i][2]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
