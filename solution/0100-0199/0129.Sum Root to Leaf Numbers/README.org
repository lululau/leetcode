* [[https://leetcode-cn.com/problems/sum-root-to-leaf-numbers][129.
求根节点到叶节点数字之和]]
  :PROPERTIES:
  :CUSTOM_ID: 求根节点到叶节点数字之和
  :END:
[[./solution/0100-0199/0129.Sum Root to Leaf Numbers/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

给你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9
之间的数字。

#+begin_html
  <p>
#+end_html

每条从根节点到叶节点的路径都代表一个数字：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

例如，从根节点到叶节点的路径 1 -> 2 -> 3 表示数字 123 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

计算从根节点到叶节点生成的 所有数字之和 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

叶节点 是指没有子节点的节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,2,3]
  <strong>输出：</strong>25
  <strong>解释：</strong>
  从根到叶子节点路径 <code>1->2</code> 代表数字 <code>12</code>
  从根到叶子节点路径 <code>1->3</code> 代表数字 <code>13</code>
  因此，数字总和 = 12 + 13 = <code>25</code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [4,9,0,5,1]
  <strong>输出：</strong>1026
  <strong>解释：</strong>
  从根到叶子节点路径 <code>4->9->5</code> 代表数字 495
  从根到叶子节点路径 <code>4->9->1</code> 代表数字 491
  从根到叶子节点路径 <code>4->0</code> 代表数字 40
  因此，数字总和 = 495 + 491 + 40 = <code>1026</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点的数目在范围 [1, 1000] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 9

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

树的深度不超过 10

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
