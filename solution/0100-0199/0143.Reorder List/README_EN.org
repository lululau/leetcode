* [[https://leetcode.com/problems/reorder-list][143. Reorder List]]
  :PROPERTIES:
  :CUSTOM_ID: reorder-list
  :END:
[[./solution/0100-0199/0143.Reorder List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given the head of a singly linked-list. The list can be
represented as:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  L<sub>0</sub> &rarr; L<sub>1</sub> &rarr; &hellip; &rarr; L<sub>n - 1</sub> &rarr; L<sub>n</sub>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Reorder the list to be on the following form:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  L<sub>0</sub> &rarr; L<sub>n</sub> &rarr; L<sub>1</sub> &rarr; L<sub>n - 1</sub> &rarr; L<sub>2</sub> &rarr; L<sub>n - 2</sub> &rarr; &hellip;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

You may not modify the values in the list's nodes. Only nodes themselves
may be changed.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,3,4]
  <strong>Output:</strong> [1,4,2,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [1,2,3,4,5]
  <strong>Output:</strong> [1,5,2,4,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the list is in the range [1, 5 * 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def reorderList(self, head: ListNode) -> None:
          """
          Do not return anything, modify head in-place instead.
          """
          if head is None or head.next is None:
              return
          slow, fast = head, head.next
          while fast and fast.next:
              slow, fast = slow.next, fast.next.next
          cur = slow.next
          slow.next = None
          pre = None
          while cur:
              t = cur.next
              cur.next = pre
              pre = cur
              cur = t
          cur = head
          while pre:
              t1 = cur.next
              cur.next = pre
              cur = t1
              t2 = pre.next
              pre.next = t1
              pre = t2
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public void reorderList(ListNode head) {
          if (head == null || head.next == null) {
              return;
          }
          ListNode slow = head;
          ListNode fast = head.next;
          while (fast != null && fast.next != null) {
              slow = slow.next;
              fast = fast.next.next;
          }
          ListNode cur = slow.next;
          slow.next = null;
          ListNode pre = null;
          while (cur != null) {
              ListNode t = cur.next;
              cur.next = pre;
              pre = cur;
              cur = t;
          }
          cur = head;
          while (pre != null) {
              ListNode t1 = cur.next;
              cur.next = pre;
              cur = t1;
              ListNode t2 = pre.next;
              pre.next = cur;
              pre = t2;
          }
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
