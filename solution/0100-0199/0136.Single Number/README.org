* [[https://leetcode-cn.com/problems/single-number][136.
只出现一次的数字]]
  :PROPERTIES:
  :CUSTOM_ID: 只出现一次的数字
  :END:
[[./solution/0100-0199/0136.Single Number/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [2,2,1]
  <strong>输出:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [4,1,2,1,2]
  <strong>输出:</strong> 4</pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

异或运算求解。

首先明确，两个相同的数异或之后的结果为
0。对该数组所有元素进行异或运算，结果就是那个只出现一次的数字。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def singleNumber(self, nums: List[int]) -> int:
          res = 0
          for num in nums:
              res ^= num
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int singleNumber(int[] nums) {
          int res = 0;
          for (int num : nums) {
              res ^= num;
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var singleNumber = function (nums) {
    let res = 0;
    for (let num of nums) {
      res ^= num;
    }
    return res;
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func singleNumber(nums []int) int {
      res := 0
      for _, v := range nums {
          res ^= v
      }
      return res
  }
#+end_example

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int singleNumber(vector<int>& nums) {
          int res = 0;
          for (auto num : nums) {
              res ^= num;
          }
          return res;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
