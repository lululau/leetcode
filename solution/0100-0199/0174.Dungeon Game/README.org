* [[https://leetcode-cn.com/problems/dungeon-game][174. 地下城游戏]]
  :PROPERTIES:
  :CUSTOM_ID: 地下城游戏
  :END:
[[./solution/0100-0199/0174.Dungeon Game/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <style>

  table.dungeon, .dungeon th, .dungeon td {

    border:3px solid black;

  }



   .dungeon th, .dungeon td {

      text-align: center;

      height: 70px;

      width: 70px;

  }

  </style>
#+end_html

#+begin_html
  <p>
#+end_html

一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N
个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0
或以下，他会立即死亡。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为
0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

为了尽快到达公主，骑士决定每次只向右或向下移动一步。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 ->
下，则骑士的初始健康点数至少为 7。

#+begin_html
  </p>
#+end_html

#+begin_html
  <table class="dungeon">
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td>
#+end_html

-2 (K)

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

-3

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

3

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td>
#+end_html

-5

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

-10

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

1

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td>
#+end_html

10

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

30

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

-5 (P)

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </table>
#+end_html

#+begin_html
  <!---2K   -3  3

  -5   -10   1

  10 30   5P-->
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

#+begin_html
  <p>
#+end_html

骑士的健康点数没有上限。

#+begin_html
  </p>
#+end_html

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
