* [[https://leetcode-cn.com/problems/rotate-array][189. 旋转数组]]
  :PROPERTIES:
  :CUSTOM_ID: 旋转数组
  :END:
[[./solution/0100-0199/0189.Rotate Array/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入:</strong> nums = [1,2,3,4,5,6,7], k = 3
  <strong>输出:</strong> <code>[5,6,7,1,2,3,4]</code>
  <strong>解释:</strong>
  向右旋转 1 步: <code>[7,1,2,3,4,5,6]</code>
  向右旋转 2 步: <code>[6,7,1,2,3,4,5]
  </code>向右旋转 3 步: <code>[5,6,7,1,2,3,4]</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [-1,-100,3,99], k = 2
  <strong>输出：</strong>[3,99,-1,-100]
  <strong>解释:</strong> 
  向右旋转 1 步: [99,-1,-100,3]
  向右旋转 2 步: [3,99,-1,-100]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 2 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= nums[i] <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= k <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

若 =k=3=，=nums=[1,2,3,4,5,6,7]=。

先将 =nums= 整体翻转：=[1,2,3,4,5,6,7]= -> =[7,6,5,4,3,2,1]=

再翻转 =0~k-1= 范围内的元素：=[7,6,5,4,3,2,1]= -> =[5,6,7,4,3,2,1]=

最后翻转 =k~n-1= 范围内的元素，即可得到最终结果：=[5,6,7,4,3,2,1]= ->
=[5,6,7,1,2,3,4]=

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def rotate(self, nums: List[int], k: int) -> None:
          """
          Do not return anything, modify nums in-place instead.
          """
          n = len(nums)
          k %= n
          if n < 2 or k == 0:
              return
          nums[:] = nums[::-1]
          nums[:k] = nums[:k][::-1]
          nums[k:] = nums[k:][::-1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public void rotate(int[] nums, int k) {
          if (nums == null) {
              return;
          }
          int n = nums.length;
          k %= n;
          if (n < 2 || k == 0) {
              return;
          }

          rotate(nums, 0, n - 1);
          rotate(nums, 0, k - 1);
          rotate(nums, k, n - 1);
      }

      private void rotate(int[] nums, int i, int j) {
          while (i < j) {
              int t = nums[i];
              nums[i] = nums[j];
              nums[j] = t;
              ++i;
              --j;
          }
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

使用原生 API 将数组的 =k~n-1= 范围内的元素插入到前面

#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} k
   * @return {void} Do not return anything, modify nums in-place instead.
   */
  var rotate = function (nums, k) {
      k %= nums.length;
      nums.splice(0, 0, ...nums.splice(-k, k))
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
