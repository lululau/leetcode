* [[https://leetcode.com/problems/rotate-array][189. Rotate Array]]
  :PROPERTIES:
  :CUSTOM_ID: rotate-array
  :END:
[[./solution/0100-0199/0189.Rotate Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array, rotate the array to the right by k steps, where k is
non-negative.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,2,3,4,5,6,7], k = 3
  <strong>Output:</strong> [5,6,7,1,2,3,4]
  <strong>Explanation:</strong>
  rotate 1 steps to the right: [7,1,2,3,4,5,6]
  rotate 2 steps to the right: [6,7,1,2,3,4,5]
  rotate 3 steps to the right: [5,6,7,1,2,3,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [-1,-100,3,99], k = 2
  <strong>Output:</strong> [3,99,-1,-100]
  <strong>Explanation:</strong> 
  rotate 1 steps to the right: [99,-1,-100,3]
  rotate 2 steps to the right: [3,99,-1,-100]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= nums[i] <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= k <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Try to come up with as many solutions as you can. There are at least
three different ways to solve this problem.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Could you do it in-place with O(1) extra space?

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def rotate(self, nums: List[int], k: int) -> None:
          """
          Do not return anything, modify nums in-place instead.
          """
          n = len(nums)
          k %= n
          if n < 2 or k == 0:
              return
          nums[:] = nums[::-1]
          nums[:k] = nums[:k][::-1]
          nums[k:] = nums[k:][::-1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public void rotate(int[] nums, int k) {
          if (nums == null) {
              return;
          }
          int n = nums.length;
          k %= n;
          if (n < 2 || k == 0) {
              return;
          }

          rotate(nums, 0, n - 1);
          rotate(nums, 0, k - 1);
          rotate(nums, k, n - 1);
      }

      private void rotate(int[] nums, int i, int j) {
          while (i < j) {
              int t = nums[i];
              nums[i] = nums[j];
              nums[j] = t;
              ++i;
              --j;
          }
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @param {number} k
   * @return {void} Do not return anything, modify nums in-place instead.
   */
  var rotate = function (nums, k) {
      k %= nums.length;
      nums.splice(0, 0, ...nums.splice(-k, k))
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
