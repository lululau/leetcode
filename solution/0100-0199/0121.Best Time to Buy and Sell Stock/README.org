* [[https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock][121.
买卖股票的最佳时机]]
  :PROPERTIES:
  :CUSTOM_ID: 买卖股票的最佳时机
  :END:
[[./solution/0100-0199/0121.Best Time to Buy and Sell Stock/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i
天的价格。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子
卖出该股票。设计一个算法来计算你所能获取的最大利润。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[7,1,5,3,6,4]
  <strong>输出：</strong>5
  <strong>解释：</strong>在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
       注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>prices = [7,6,4,3,1]
  <strong>输出：</strong>0
  <strong>解释：</strong>在这种情况下, 没有交易完成, 所以最大利润为 0。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= prices.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= prices[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def maxProfit(self, prices: List[int]) -> int:
          if not prices:
              return 0
          res = 0
          min_price = prices[0]
          for price in prices:
              min_price = min(min_price, price)
              res = max(res, price - min_price)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int maxProfit(int[] prices) {
          if (prices == null) return 0;
          int res = 0;
          int min = Integer.MAX_VALUE;
          for (int price : prices) {
              min = Math.min(min, price);
              res = Math.max(res, price - min);
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} prices
   * @return {number}
   */
  const maxProfit = function (prices) {
    let min = prices[0];
    let profit = 0;
    for (let i = 0; i < prices.length; i++) {
      if (prices[i] < min) {
        min = prices[i];
      }
      if (profit < prices[i] - min) {
        profit = prices[i] - min;
      }
    }
    return profit;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
