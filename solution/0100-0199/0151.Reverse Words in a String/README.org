* [[https://leetcode-cn.com/problems/reverse-words-in-a-string][151.
翻转字符串里的单词]]
  :PROPERTIES:
  :CUSTOM_ID: 翻转字符串里的单词
  :END:
[[./solution/0100-0199/0151.Reverse Words in a String/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个字符串，逐个翻转字符串中的每个单词。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

无空格字符构成一个 单词 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;<code>the sky is blue</code>&quot;
  <strong>输出：</strong>&quot;<code>blue is sky the</code>&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot; &nbsp;hello world! &nbsp;&quot;
  <strong>输出：</strong>&quot;world! hello&quot;
  <strong>解释：</strong>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>&quot;a good &nbsp; example&quot;
  <strong>输出：</strong>&quot;example good a&quot;
  <strong>解释：</strong>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;  Bob    Loves  Alice   &quot;
  <strong>输出：</strong>&quot;Alice Loves Bob&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 5：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = &quot;Alice does not even like bob&quot;
  <strong>输出：</strong>&quot;bob like even not does Alice&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 包含英文大小写字母、数字和空格 ' '

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中 至少存在一个 单词

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

请尝试使用 O(1) 额外空间复杂度的原地解法。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def reverseWords(self, s: str) -> str:
          words = s.strip().split()
          return ' '.join(words[::-1])
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public String reverseWords(String s) {
          List<String> words = Arrays.asList(s.trim().split("\\s+"));
          Collections.reverse(words);
          return String.join(" ", words);
      }
  }
#+end_src

*** *C#*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_example
  public class Solution {
      public string ReverseWords(string s) {
           return string.Join(" ", s.Trim().Split(" ").Where(word => !string.IsNullOrEmpty(word) && !string.IsNullOrEmpty(word.Trim())).Reverse());
      }
  }
#+end_example

*** *TypeScript*
    :PROPERTIES:
    :CUSTOM_ID: typescript
    :END:
#+begin_example
  function reverseWords(s: string): string {
      let words: string[] = s.trim().split(/\s+/g);
      words.reverse();
      return words.join(' ');
  };
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
