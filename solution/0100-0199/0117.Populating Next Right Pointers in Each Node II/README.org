* [[https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii][117.
填充每个节点的下一个右侧节点指针 II]]
  :PROPERTIES:
  :CUSTOM_ID: 填充每个节点的下一个右侧节点指针-ii
  :END:
[[./solution/0100-0199/0117.Populating Next Right Pointers in Each Node II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  struct Node {
    int val;
    Node *left;
    Node *right;
    Node *next;
  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

填充它的每个 next
指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将
next 指针设置为 NULL。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

初始状态下，所有 next 指针都被设置为 NULL。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你只能使用常量级额外空间。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入</strong>：root = [1,2,3,4,5,null,7]
  <strong>输出：</strong>[1,#,2,3,#,4,5,7,#]
  <strong>解释：</strong>给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化输出按层序遍历顺序（由 next 指针连接），'#' 表示每层的末尾。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中的节点数小于 6000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"BFS 层次遍历"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  """
  # Definition for a Node.
  class Node:
      def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
          self.val = val
          self.left = left
          self.right = right
          self.next = next
  """

  class Solution:
      def connect(self, root: 'Node') -> 'Node':
          if root is None or (root.left is None and root.right is None):
              return root
          q = collections.deque([root])
          while q:
              size = len(q)
              cur = None
              for _ in range(size):
                  node = q.popleft()
                  if node.right:
                      q.append(node.right)
                  if node.left:
                      q.append(node.left)
                  node.next = cur
                  cur = node
          return root
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /*
  // Definition for a Node.
  class Node {
      public int val;
      public Node left;
      public Node right;
      public Node next;

      public Node() {}

      public Node(int _val) {
          val = _val;
      }

      public Node(int _val, Node _left, Node _right, Node _next) {
          val = _val;
          left = _left;
          right = _right;
          next = _next;
      }
  };
  */

  class Solution {
      public Node connect(Node root) {
          if (root == null || (root.left == null && root.right == null)) {
              return root;
          }
          Deque<Node> q = new ArrayDeque<>();
          q.offer(root);
          while (!q.isEmpty()) {
              Node cur = null;
              for (int i = 0, n = q.size(); i < n; ++i) {
                  Node node = q.pollFirst();
                  if (node.right != null) {
                      q.offer(node.right);
                  }
                  if (node.left != null) {
                      q.offer(node.left);
                  }
                  node.next = cur;
                  cur = node;
              }
          }
          return root;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /*
  // Definition for a Node.
  class Node {
  public:
      int val;
      Node* left;
      Node* right;
      Node* next;

      Node() : val(0), left(NULL), right(NULL), next(NULL) {}

      Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

      Node(int _val, Node* _left, Node* _right, Node* _next)
          : val(_val), left(_left), right(_right), next(_next) {}
  };
  */

  class Solution {
  public:
      Node* connect(Node* root) {
          if (!root || (!root->left && !root->right)) {
              return root;
          }
          queue<Node*> q;
          q.push(root);
          while (!q.empty()) {
              Node* cur = nullptr;
              for (int i = 0, n = q.size(); i < n; ++i) {
                  Node* node = q.front();
                  q.pop();
                  if (node->right) {
                      q.push(node->right);
                  }
                  if (node->left) {
                      q.push(node->left);
                  }
                  node->next = cur;
                  cur = node;
              }
          }
          return root;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
