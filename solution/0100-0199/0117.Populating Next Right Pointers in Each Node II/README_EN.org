* [[https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii][117.
Populating Next Right Pointers in Each Node II]]
  :PROPERTIES:
  :CUSTOM_ID: populating-next-right-pointers-in-each-node-ii
  :END:
[[./solution/0100-0199/0117.Populating Next Right Pointers in Each Node II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a binary tree

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  struct Node {

    int val;

    Node *left;

    Node *right;

    Node *next;

  }

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Populate each next pointer to point to its next right node. If there is
no next right node, the next pointer should be set to NULL.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Initially, all next pointers are set to NULL.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

You may only use constant extra space.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Recursive approach is fine, you may assume implicit stack space does not
count as extra space for this problem.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2,3,4,5,null,7]
  <strong>Output:</strong> [1,#,2,3,#,4,5,7,#]
  <strong>Explanation: </strong>Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the given tree is less than 6000.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  """
  # Definition for a Node.
  class Node:
      def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
          self.val = val
          self.left = left
          self.right = right
          self.next = next
  """

  class Solution:
      def connect(self, root: 'Node') -> 'Node':
          if root is None or (root.left is None and root.right is None):
              return root
          q = collections.deque([root])
          while q:
              size = len(q)
              cur = None
              for _ in range(size):
                  node = q.popleft()
                  if node.right:
                      q.append(node.right)
                  if node.left:
                      q.append(node.left)
                  node.next = cur
                  cur = node
          return root
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /*
  // Definition for a Node.
  class Node {
      public int val;
      public Node left;
      public Node right;
      public Node next;

      public Node() {}

      public Node(int _val) {
          val = _val;
      }

      public Node(int _val, Node _left, Node _right, Node _next) {
          val = _val;
          left = _left;
          right = _right;
          next = _next;
      }
  };
  */

  class Solution {
      public Node connect(Node root) {
          if (root == null || (root.left == null && root.right == null)) {
              return root;
          }
          Deque<Node> q = new ArrayDeque<>();
          q.offer(root);
          while (!q.isEmpty()) {
              Node cur = null;
              for (int i = 0, n = q.size(); i < n; ++i) {
                  Node node = q.pollFirst();
                  if (node.right != null) {
                      q.offer(node.right);
                  }
                  if (node.left != null) {
                      q.offer(node.left);
                  }
                  node.next = cur;
                  cur = node;
              }
          }
          return root;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /*
  // Definition for a Node.
  class Node {
  public:
      int val;
      Node* left;
      Node* right;
      Node* next;

      Node() : val(0), left(NULL), right(NULL), next(NULL) {}

      Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

      Node(int _val, Node* _left, Node* _right, Node* _next)
          : val(_val), left(_left), right(_right), next(_next) {}
  };
  */

  class Solution {
  public:
      Node* connect(Node* root) {
          if (!root || (!root->left && !root->right)) {
              return root;
          }
          queue<Node*> q;
          q.push(root);
          while (!q.empty()) {
              Node* cur = nullptr;
              for (int i = 0, n = q.size(); i < n; ++i) {
                  Node* node = q.front();
                  q.pop();
                  if (node->right) {
                      q.push(node->right);
                  }
                  if (node->left) {
                      q.push(node->left);
                  }
                  node->next = cur;
                  cur = node;
              }
          }
          return root;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
