* [[https://leetcode.com/problems/binary-search-tree-iterator][173.
Binary Search Tree Iterator]]
  :PROPERTIES:
  :CUSTOM_ID: binary-search-tree-iterator
  :END:
[[./solution/0100-0199/0173.Binary Search Tree Iterator/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Implement the BSTIterator class that represents an iterator over the
in-order traversal of a binary search tree (BST):

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

BSTIterator(TreeNode root) Initializes an object of the BSTIterator
class. The root of the BST is given as part of the constructor. The
pointer should be initialized to a non-existent number smaller than any
element in the BST.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean hasNext() Returns true if there exists a number in the traversal
to the right of the pointer, otherwise returns false.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int next() Moves the pointer to the right, then returns the number at
the pointer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that by initializing the pointer to a non-existent smallest
number, the first call to next() will return the smallest element in the
BST.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You may assume that next() calls will always be valid. That is, there
will be at least a next number in the in-order traversal when next() is
called.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;BSTIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;]
  [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
  <strong>Output</strong>
  [null, 3, 7, true, 9, true, 15, true, 20, false]

  <strong>Explanation</strong>
  BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
  bSTIterator.next();    // return 3
  bSTIterator.next();    // return 7
  bSTIterator.hasNext(); // return True
  bSTIterator.next();    // return 9
  bSTIterator.hasNext(); // return True
  bSTIterator.next();    // return 15
  bSTIterator.hasNext(); // return True
  bSTIterator.next();    // return 20
  bSTIterator.hasNext(); // return False
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 105].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= Node.val <= 106

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 105 calls will be made to hasNext, and next.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Could you implement next() and hasNext() to run in average O(1) time and
use O(h) memory, where h is the height of the tree?

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class BSTIterator:

      def __init__(self, root: TreeNode):
          def inorder(root):
              if root is None:
                  return
              inorder(root.left)
              self.vals.append(root.val)
              inorder(root.right)

          self.cur = 0
          self.vals = []
          inorder(root)

      def next(self) -> int:
          res = self.vals[self.cur]
          self.cur += 1
          return res

      def hasNext(self) -> bool:
          return self.cur < len(self.vals)


  # Your BSTIterator object will be instantiated and called as such:
  # obj = BSTIterator(root)
  # param_1 = obj.next()
  # param_2 = obj.hasNext()
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class BSTIterator {

      private List<Integer> vals;
      private int next;

      public BSTIterator(TreeNode root) {
          next = 0;
          vals = new ArrayList<>();
          inorder(root);
      }

      public int next() {
          return vals.get(next++);
      }

      public boolean hasNext() {
          return next < vals.size();
      }

      private void inorder(TreeNode root) {
          if (root == null) {
              return;
          }
          inorder(root.left);
          vals.add(root.val);
          inorder(root.right);
      }
  }

  /**
   * Your BSTIterator object will be instantiated and called as such:
   * BSTIterator obj = new BSTIterator(root);
   * int param_1 = obj.next();
   * boolean param_2 = obj.hasNext();
   */
#+end_src

** *JavaScript*
   :PROPERTIES:
   :CUSTOM_ID: javascript
   :END:
#+begin_src js
  /**
   * Definition for a binary tree node.
   * function TreeNode(val, left, right) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.left = (left===undefined ? null : left)
   *     this.right = (right===undefined ? null : right)
   * }
   */
  /**
   * @param {TreeNode} root
   */
  var BSTIterator = function (root) {
      this.stk = [];
      this.cur = root;
  }


  /**
   * @return {number}
   */
  BSTIterator.prototype.next = function () {
      while (this.cur) {
          this.stk.push(this.cur);
          this.cur = this.cur.left;
      }
      this.cur = this.stk.pop();
      let res = this.cur.val;
      this.cur = this.cur.right;
      return (res);
  };

  /**
   * @return {boolean}
   */
  BSTIterator.prototype.hasNext = function () {
      if (this.stk.length === 0 && this.cur === null) return false;
      return true;
  };

  /**
   * Your BSTIterator object will be instantiated and called as such:
   * var obj = new BSTIterator(root)
   * var param_1 = obj.next()
   * var param_2 = obj.hasNext()
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
