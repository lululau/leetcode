* [[https://leetcode.com/problems/maximum-product-subarray][152. Maximum
Product Subarray]]
  :PROPERTIES:
  :CUSTOM_ID: maximum-product-subarray
  :END:
[[./solution/0100-0199/0152.Maximum Product Subarray/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums, find a contiguous non-empty subarray within
the array that has the largest product, and return the product.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed that the answer will fit in a 32-bit integer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A subarray is a contiguous subsequence of the array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [2,3,-2,4]
  <strong>Output:</strong> 6
  <strong>Explanation:</strong> [2,3] has the largest product 6.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [-2,0,-1]
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> The result cannot be 2, because [-2,-1] is not a subarray.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 2 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10 <= nums[i] <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The product of any prefix or suffix of nums is guaranteed to fit in a
32-bit integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def maxProduct(self, nums: List[int]) -> int:
          maxf = minf = nums[0]
          res, n = nums[0], len(nums)
          for i in range(1, n):
              p, q = maxf, minf
              maxf = max(nums[i], p * nums[i], q * nums[i])
              minf = min(nums[i], p * nums[i], q * nums[i])
              res = max(res, maxf)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int maxProduct(int[] nums) {
          int maxf = nums[0], minf = nums[0];
          int res = nums[0], n = nums.length;
          for (int i = 1; i < n; ++i) {
              int p = maxf, q = minf;
              maxf = Math.max(nums[i], Math.max(p * nums[i], q * nums[i]));
              minf = Math.min(nums[i], Math.min(p * nums[i], q * nums[i]));
              res = Math.max(res, maxf);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
