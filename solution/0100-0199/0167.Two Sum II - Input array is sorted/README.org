* [[https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted][167.
两数之和 II - 输入有序数组]]
  :PROPERTIES:
  :CUSTOM_ID: 两数之和-ii---输入有序数组
  :END:
[[./solution/0100-0199/0167.Two Sum II - Input array is sorted/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个已按照 升序排列  的整数数组 numbers
，请你从数组中找出两个数满足相加之和等于目标数 target 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标
从 1 开始计数 ，所以答案数组应当满足 1 <= answer[0] < answer[1] <=
numbers.length 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>numbers = [2,7,11,15], target = 9
  <strong>输出：</strong>[1,2]
  <strong>解释：</strong>2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>numbers = [2,3,4], target = 6
  <strong>输出：</strong>[1,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>numbers = [-1,0], target = -1
  <strong>输出：</strong>[1,2]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= numbers.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= numbers[i] <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

numbers 按 递增顺序 排列

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= target <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

仅存在一个有效答案

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

双指针解决。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def twoSum(self, numbers: List[int], target: int) -> List[int]:
          low, high = 0, len(numbers) - 1
          while low <= high:
              if numbers[low] + numbers[high] == target:
                  return [low + 1, high + 1]
              if numbers[low] + numbers[high] < target:
                  low += 1
              else:
                  high -= 1
          return [-1, -1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[] twoSum(int[] numbers, int target) {
          int low = 0, high = numbers.length - 1;
          while (low <= high) {
              if (numbers[low] + numbers[high] == target) {
                  return new int[]{low + 1, high + 1};
              }
              if (numbers[low] + numbers[high] < target) {
                  ++low;
              } else {
                  --high;
              }
          }
          return new int[]{-1, -1};
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      vector<int> twoSum(vector<int>& numbers, int target) {
          int low = 0, high = numbers.size() - 1;
          while (low <= high) {
              if (numbers[low] + numbers[high] == target) {
                  return {low + 1, high + 1};
              }
              if (numbers[low] + numbers[high] < target) {
                  ++low;
              } else {
                  --high;
              }
          }
          return {-1, -1};
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
