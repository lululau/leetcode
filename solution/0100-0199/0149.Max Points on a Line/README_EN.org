* [[https://leetcode.com/problems/max-points-on-a-line][149. Max Points
on a Line]]
  :PROPERTIES:
  :CUSTOM_ID: max-points-on-a-line
  :END:
[[./solution/0100-0199/0149.Max Points on a Line/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an array of points where points[i] = [xi, yi] represents a point
on the X-Y plane, return the maximum number of points that lie on the
same straight line.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> points = [[1,1],[2,2],[3,3]]
  <strong>Output:</strong> 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
  <strong>Output:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= points.length <= 300

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

points[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= xi, yi <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the points are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def maxPoints(self, points: List[List[int]]) -> int:
          def gcd(a, b) -> int:
              return a if b == 0 else gcd(b, a % b)
              
          n = len(points)
          if n < 3:
              return n
          res = 0
          for i in range(n - 1):
              counter = collections.Counter()
              t_max = duplicate = 0
              for j in range(i + 1, n):
                  delta_x = points[i][0] - points[j][0]
                  delta_y = points[i][1] - points[j][1]
                  if delta_x == 0 and delta_y == 0:
                      duplicate += 1
                      continue
                  g = gcd(delta_x, delta_y)
                  d_x = delta_x // g
                  d_y = delta_y // g
                  key = f'{d_x}.{d_y}'
                  counter[key] += 1
                  t_max = max(t_max, counter[key])
              res = max(res, t_max + duplicate + 1)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int maxPoints(int[][] points) {
          int n = points.length;
          if (n < 3) {
              return n;
          }
          int res = 0;
          for (int i = 0; i < n - 1; ++i) {
              Map<String, Integer> kCounter = new HashMap<>();
              int max = 0;
              int duplicate = 0;
              for (int j = i + 1; j < n; ++j) {
                  int deltaX = points[i][0] - points[j][0];
                  int deltaY = points[i][1] - points[j][1];
                  if (deltaX == 0 && deltaY == 0) {
                      ++duplicate;
                      continue;
                  }
                  int gcd = gcd(deltaX, deltaY);
                  int dX = deltaX / gcd;
                  int dY = deltaY / gcd;
                  String key = dX + "." + dY;
                  kCounter.put(key, kCounter.getOrDefault(key, 0) + 1);
                  max = Math.max(max, kCounter.get(key));
              }
              res = Math.max(res, max + duplicate + 1);
          }
          return res;
      }

      private int gcd(int a, int b) {
          return b == 0 ? a : gcd(b, a % b);
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
