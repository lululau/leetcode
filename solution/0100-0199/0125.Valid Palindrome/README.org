* [[https://leetcode-cn.com/problems/valid-palindrome][125. 验证回文串]]
  :PROPERTIES:
  :CUSTOM_ID: 验证回文串
  :END:
[[./solution/0100-0199/0125.Valid Palindrome/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明：本题中，我们将空字符串定义为有效的回文串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> &quot;A man, a plan, a canal: Panama&quot;
  <strong>输出:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> &quot;race a car&quot;
  <strong>输出:</strong> false
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def isPalindrome(self, s: str) -> bool:
          i, j = 0, len(s) - 1
          while i < j:
              if not s[i].isalnum():
                  i += 1
              elif not s[j].isalnum():
                  j -= 1
              elif s[i].lower() != s[j].lower():
                  return False
              else:
                  i += 1
                  j -= 1
          return True
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean isPalindrome(String s) {
          int i = 0, j = s.length() - 1;
          while (i < j) {
              if (!Character.isLetterOrDigit(s.charAt(i))) {
                  ++i;
              } else if (!Character.isLetterOrDigit(s.charAt(j))) {
                  --j;
              } else if (Character.toUpperCase(s.charAt(i)) != Character.toUpperCase(s.charAt(j))) {
                  return false;
              } else {
                  ++i;
                  --j;
              }
          }
          return true;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool isPalindrome(string s) {
          int i = 0, j = s.size() - 1;
          while (i < j) {
              if (!isAlphaNum(s[i])) ++i;
              else if (!isAlphaNum(s[j])) --j;
              else if ((s[i] + 32 - 'a') % 32 != (s[j] + 32 - 'a') % 32) return false;
              else {
                  ++i;
                  --j;
              }
          }
          return true;
      }

  private:
      bool isAlphaNum(char &ch) {
          if (ch >= 'a' && ch <= 'z') return true;
          if (ch >= 'A' && ch <= 'Z') return true;
          if (ch >= '0' && ch <= '9') return true;
          return false;
      }
  };
#+end_src

*** *tTypeScript*
    :PROPERTIES:
    :CUSTOM_ID: ttypescript
    :END:
#+begin_example
  function isPalindrome(s: string): boolean {
      let left: number = 0, right: number = s.length - 1;
      while (left < right) {
          let char1: string = s.charAt(left);
          let char2: string = s.charAt(right);
          if (!(/[a-zA-Z0-9]/).test(char1)) {
              ++left;
          } else if (!(/[a-zA-Z0-9]/).test(char2)) {
              --right;
          } else if (char1.toLocaleLowerCase() != char2.toLocaleLowerCase()) {
              return false;
          } else {
              ++left;
              --right;
          }
      }
      return true;
  };
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
