* [[https://leetcode.com/problems/minimum-depth-of-binary-tree][111.
Minimum Depth of Binary Tree]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-depth-of-binary-tree
  :END:
[[./solution/0100-0199/0111.Minimum Depth of Binary Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a binary tree, find its minimum depth.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The minimum depth is the number of nodes along the shortest path from
the root node down to the nearest leaf node.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note: A leaf is a node with no children.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,9,20,null,null,15,7]
  <strong>Output:</strong> 2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [2,null,3,null,4,null,5,null,6]
  <strong>Output:</strong> 5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [0, 105].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def minDepth(self, root: TreeNode) -> int:
          if root is None:
              return 0
          if root.left is None:
              return 1 + self.minDepth(root.right)
          if root.right is None:
              return 1 + self.minDepth(root.left)
          return 1 + min(self.minDepth(root.left), self.minDepth(root.right))
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public int minDepth(TreeNode root) {
          if (root == null) {
              return 0;
          }
          if (root.left == null) {
              return 1 + minDepth(root.right);
          }
          if (root.right == null) {
              return 1 + minDepth(root.left);
          }
          return 1 + Math.min(minDepth(root.left), minDepth(root.right));
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for a binary tree node.
   * function TreeNode(val, left, right) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.left = (left===undefined ? null : left)
   *     this.right = (right===undefined ? null : right)
   * }
   */
  /**
   * @param {TreeNode} root
   * @return {number}
   */
  var minDepth = function(root) {
      if (root == null) return 0;
      if (root.left == null) return minDepth(root.right) + 1;
      if (root.right == null) return minDepth(root.left) + 1;
      return Math.min(minDepth(root.left), minDepth(root.right)) + 1;
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
   * };
   */
  class Solution {
  public:
      int minDepth(TreeNode* root) {
          if (root == nullptr) {
              return 0;
          }
          if (root->left == nullptr) {
              return 1 + minDepth(root->right);
          }
          if (root->right == nullptr) {
              return 1 + minDepth(root->left);
          }
          return 1 + min(minDepth(root->left), minDepth(root->right));
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
