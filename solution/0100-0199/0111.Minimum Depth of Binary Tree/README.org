* [[https://leetcode-cn.com/problems/minimum-depth-of-binary-tree][111.
二叉树的最小深度]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树的最小深度
  :END:
[[./solution/0100-0199/0111.Minimum Depth of Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树，找出其最小深度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明：叶子节点是指没有子节点的节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [3,9,20,null,null,15,7]
  <strong>输出：</strong>2
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [2,null,3,null,4,null,5,null,6]
  <strong>输出：</strong>5
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中节点数的范围在 [0, 105] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def minDepth(self, root: TreeNode) -> int:
          if root is None:
              return 0
          # 如果左子树和右子树其中一个为空，那么需要返回比较大的那个子树的深度+1
          if root.left is None:
              return 1 + self.minDepth(root.right)
          if root.right is None:
              return 1 + self.minDepth(root.left)
          # 左右子树都不为空，返回最小深度+1即可
          return 1 + min(self.minDepth(root.left), self.minDepth(root.right))
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public int minDepth(TreeNode root) {
          if (root == null) {
              return 0;
          }
          if (root.left == null) {
              return 1 + minDepth(root.right);
          }
          if (root.right == null) {
              return 1 + minDepth(root.left);
          }
          return 1 + Math.min(minDepth(root.left), minDepth(root.right));
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for a binary tree node.
   * function TreeNode(val, left, right) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.left = (left===undefined ? null : left)
   *     this.right = (right===undefined ? null : right)
   * }
   */
  /**
   * @param {TreeNode} root
   * @return {number}
   */
  var minDepth = function(root) {
      if (root == null) return 0;
      if (root.left == null) return minDepth(root.right) + 1;
      if (root.right == null) return minDepth(root.left) + 1;
      return Math.min(minDepth(root.left), minDepth(root.right)) + 1;
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
   * };
   */
  class Solution {
  public:
      int minDepth(TreeNode* root) {
          if (root == nullptr) {
              return 0;
          }
          if (root->left == nullptr) {
              return 1 + minDepth(root->right);
          }
          if (root->right == nullptr) {
              return 1 + minDepth(root->left);
          }
          return 1 + min(minDepth(root->left), minDepth(root->right));
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
