* [[https://leetcode-cn.com/problems/balanced-binary-tree][110.
平衡二叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 平衡二叉树
  :END:
[[./solution/0100-0199/0110.Balanced Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树，判断它是否是高度平衡的二叉树。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

本题中，一棵高度平衡二叉树定义为：

#+begin_html
  </p>
#+end_html

#+begin_html
  <blockquote>
#+end_html

#+begin_html
  <p>
#+end_html

一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  </blockquote>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [3,9,20,null,null,15,7]
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = [1,2,2,3,3,null,null,4,4]
  <strong>输出：</strong>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>root = []
  <strong>输出：</strong>true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

树中的节点数在范围 [0, 5000] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= Node.val <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def isBalanced(self, root: TreeNode) -> bool:
          def height(root):
              if not root:
                  return 0
              return 1 + max(height(root.left), height(root.right))
          if not root:
              return True
          left_height, right_height = height(root.left), height(root.right)
          return abs(left_height - right_height) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public boolean isBalanced(TreeNode root) {
          if (root == null) {
              return true;
          }
          int leftHeight = height(root.left);
          int rightHeight = height(root.right);
          return Math.abs(leftHeight - rightHeight) <= 1 && isBalanced(root.left) && isBalanced(root.right);
      }

      private int height(TreeNode root) {
          if (root == null) {
              return 0;
          }
          int l = height(root.left);
          int r = height(root.right);
          return 1 + Math.max(l, r);
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for a binary tree node.
   * function TreeNode(val, left, right) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.left = (left===undefined ? null : left)
   *     this.right = (right===undefined ? null : right)
   * }
   */
  /**
   * @param {TreeNode} root
   * @return {boolean}
   */
   var isBalanced = function(root) {
      if (root == null) return true; 
      let left = root.left;
      let right = root.right;
      return isBalanced(left) && isBalanced(right) && Math.abs(depth(left) - depth(right)) <= 1;
  };

  function depth(root) {
      if (root == null) return 0;
      return Math.max(depth(root.left), depth(root.right)) + 1;
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
   * };
   */
  class Solution {
  public:
      bool isBalanced(TreeNode* root) {
          if (root == nullptr) {
              return true;
          }
          int leftHeight = height(root->left);
          int rightHeight = height(root->right);
          return abs(leftHeight - rightHeight) <= 1 && isBalanced(root->left) && isBalanced(root->right);
      }
  private:
      int height(TreeNode* root) {
          if (root == nullptr) {
              return 0;
          }
          int l = height(root->left);
          int r = height(root->right);
          return 1 + max(l, r);
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
