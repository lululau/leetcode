* [[https://leetcode-cn.com/problems/distinct-subsequences][115.
不同的子序列]]
  :PROPERTIES:
  :CUSTOM_ID: 不同的子序列
  :END:
[[./solution/0100-0199/0115.Distinct Subsequences/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

字符串的一个 子序列
是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

题目数据保证答案符合 32 位带符号整数范围。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "rabbbit", t = "rabbit"<code>
  <strong>输出</strong></code><strong>：</strong><code>3
  </code><strong>解释：</strong>
  如下图所示, 有 3 种可以从 s 中得到 <code>"rabbit" 的方案</code>。
  (上箭头符号 ^ 表示选取的字母)
  <code>rabbbit</code>
  ^^^^ ^^
  <code>rabbbit</code>
  ^^ ^^^^
  <code>rabbbit</code>
  ^^^ ^^^
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "babgbag", t = "bag"
  <code><strong>输出</strong></code><strong>：</strong><code>5
  </code><strong>解释：</strong>
  如下图所示, 有 5 种可以从 s 中得到 <code>"bag" 的方案</code>。 
  (上箭头符号 ^ 表示选取的字母)
  <code>babgbag</code>
  ^^ ^
  <code>babgbag</code>
  ^^    ^
  <code>babgbag</code>
  ^    ^^
  <code>babgbag</code>
    ^  ^^
  <code>babgbag</code>
      ^^^</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= s.length, t.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 和 t 由英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
