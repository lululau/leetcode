* [[https://leetcode-cn.com/problems/maximum-depth-of-binary-tree][104.
二叉树的最大深度]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树的最大深度
  :END:
[[./solution/0100-0199/0104.Maximum Depth of Binary Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树，找出其最大深度。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明: 叶子节点是指没有子节点的节点。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例： 给定二叉树 [3,9,20,null,null,15,7]，

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>    3
     / \
    9  20
      /  \
     15   7</pre>
#+end_html

#+begin_html
  <p>
#+end_html

返回它的最大深度 3 。

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

递归遍历左右子树，求左右子树的最大深度 +1 即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def maxDepth(self, root: TreeNode) -> int:
          if root is None:
              return 0
          l = self.maxDepth(root.left)
          r = self.maxDepth(root.right)
          return 1 + max(l, r)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public int maxDepth(TreeNode root) {
          if (root == null) return 0;
          int l = maxDepth(root.left);
          int r = maxDepth(root.right);
          return 1 + Math.max(l, r);
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int maxDepth(TreeNode* root) {
          if (!root) return 0;
          int l = maxDepth(root->left);
          int r = maxDepth(root->right);
          return max(l, r) + 1;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
