* [[https://leetcode.com/problems/insertion-sort-list][147. Insertion
Sort List]]
  :PROPERTIES:
  :CUSTOM_ID: insertion-sort-list
  :END:
[[./solution/0100-0199/0147.Insertion Sort List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the head of a singly linked list, sort the list using insertion
sort, and return the sorted list's head.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The steps of the insertion sort algorithm:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Insertion sort iterates, consuming one input element each repetition and
growing a sorted output list.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At each iteration, insertion sort removes one element from the input
data, finds the location it belongs within the sorted list and inserts
it there.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It repeats until no input elements remain.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

The following is a graphical example of the insertion sort algorithm.
The partially sorted list (black) initially contains only the first
element in the list. One element (red) is removed from the input data
and inserted in-place into the sorted list with each iteration.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [4,2,1,3]
  <strong>Output:</strong> [1,2,3,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [-1,5,3,4,0]
  <strong>Output:</strong> [-1,0,3,4,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the list is in the range [1, 5000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-5000 <= Node.val <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def insertionSortList(self, head: ListNode) -> ListNode:
          if head is None or head.next is None:
              return head
          dummy = ListNode(head.val, head)
          pre, cur = dummy, head
          while cur:
              if pre.val <= cur.val:
                  pre, cur = cur, cur.next
                  continue
              p = dummy
              while p.next.val <= cur.val:
                  p = p.next
              t = cur.next
              cur.next = p.next
              p.next = cur
              pre.next = t
              cur = t
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode insertionSortList(ListNode head) {
          if (head == null || head.next == null) {
              return head;
          }
          ListNode dummy = new ListNode(head.val, head);
          ListNode pre = dummy, cur = head;
          while (cur != null) {
              if (pre.val <= cur.val) {
                  pre = cur;
                  cur = cur.next;
                  continue;
              }
              ListNode p = dummy;
              while (p.next.val <= cur.val) {
                  p = p.next;
              }
              ListNode t = cur.next;
              cur.next = p.next;
              p.next = cur;
              pre.next = t;
              cur = t;
          }
          return dummy.next;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val, next) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.next = (next===undefined ? null : next)
   * }
   */
  /**
   * @param {ListNode} head
   * @return {ListNode}
   */
   var insertionSortList = function(head) {
      if (head == null || head.next == null) return head;
      let dummy = new ListNode(head.val, head);
      let prev = dummy, cur = head;
      while (cur != null) {
          if (prev.val <= cur.val) {
              prev = cur;
              cur = cur.next;
              continue;
          }
          let p = dummy;
          while (p.next.val <= cur.val) {
              p = p.next;
          }
          let t = cur.next;
          cur.next = p.next;
          p.next = cur;
          prev.next = t;
          cur = t;
      }
      return dummy.next;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
