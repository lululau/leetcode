* [[https://leetcode.com/problems/two-sum-iii-data-structure-design][170.
Two Sum III - Data structure design]]
  :PROPERTIES:
  :CUSTOM_ID: two-sum-iii---data-structure-design
  :END:
[[./solution/0100-0199/0170.Two Sum III - Data structure design/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a data structure that accepts a stream of integers and checks if
it has a pair of integers that sum up to a particular value.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the TwoSum class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

TwoSum() Initializes the TwoSum object, with an empty array initially.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void add(int number) Adds number to the data structure.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

boolean find(int value) Returns true if there exists any pair of numbers
whose sum is equal to value, otherwise, it returns false.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;TwoSum&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;find&quot;, &quot;find&quot;]
  [[], [1], [3], [5], [4], [7]]
  <strong>Output</strong>
  [null, null, null, null, true, false]

  <strong>Explanation</strong>
  TwoSum twoSum = new TwoSum();
  twoSum.add(1);   // [] --&gt; [1]
  twoSum.add(3);   // [1] --&gt; [1,3]
  twoSum.add(5);   // [1,3] --&gt; [1,3,5]
  twoSum.find(4);  // 1 + 3 = 4, return true
  twoSum.find(7);  // No two integers sum up to 7, return false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= number <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= value <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 5 * 104 calls will be made to add and find.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class TwoSum:

      def __init__(self):
          """
          Initialize your data structure here.
          """
          self.counter = collections.Counter()

      def add(self, number: int) -> None:
          """
          Add the number to an internal data structure..
          """
          self.counter[number] += 1

      def find(self, value: int) -> bool:
          """
          Find if there exists any pair of numbers which sum is equal to the value.
          """
          for num in self.counter.keys():
              other = value - num
              if other in self.counter:
                  if other != num:
                      return True
                  if other == num and self.counter[num] > 1:
                      return True
          return False


  # Your TwoSum object will be instantiated and called as such:
  # obj = TwoSum()
  # obj.add(number)
  # param_2 = obj.find(value)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class TwoSum {
      private Map<Integer, Integer> counter;

      /** Initialize your data structure here. */
      public TwoSum() {
          counter = new HashMap<>();
      }
      
      /** Add the number to an internal data structure.. */
      public void add(int number) {
          counter.put(number, counter.getOrDefault(number, 0) + 1);
      }
      
      /** Find if there exists any pair of numbers which sum is equal to the value. */
      public boolean find(int value) {
          for (int num : counter.keySet()) {
              int other = value - num;
              if (counter.containsKey(other)) {
                  if (num != other) {
                      return true;
                  }
                  if (num == other && counter.get(other) > 1) {
                      return true;
                  }
              }
          }
          return false;
      }
  }

  /**
   * Your TwoSum object will be instantiated and called as such:
   * TwoSum obj = new TwoSum();
   * obj.add(number);
   * boolean param_2 = obj.find(value);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
