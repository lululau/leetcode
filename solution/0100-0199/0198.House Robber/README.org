* [[https://leetcode-cn.com/problems/house-robber][198. 打家劫舍]]
  :PROPERTIES:
  :CUSTOM_ID: 打家劫舍
  :END:
[[./solution/0100-0199/0198.House Robber/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定一个代表每个房屋存放金额的非负整数数组，计算你
不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[1,2,3,1]
  <strong>输出：</strong>4
  <strong>解释：</strong>偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
       偷窃到的最高金额 = 1 + 3 = 4 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>[2,7,9,3,1]
  <strong>输出：</strong>12
  <strong>解释：</strong>偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
       偷窃到的最高金额 = 2 + 9 + 1 = 12 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums[i] <= 400

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

动态规划法。状态转移方程：=f(n) = Math.max(f(n - 2) + nums[n], nums[n - 1])=。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def rob(self, nums: List[int]) -> int:
          def robRange(nums, start, end):
              if end - start == 0:
                  return nums[start]
              pre, cur = 0, nums[start]
              for i in range(start + 1, end + 1):
                  pre, cur = cur, max(pre + nums[i], cur)
              return cur
          if not nums:
              return 0
          return robRange(nums, 0, len(nums) - 1)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int rob(int[] nums) {
          int n;
          if ((n = nums.length) == 0) return 0;
          return robRange(nums, 0, n - 1);
      }

      private int robRange(int[] nums, int start, int end) {
          if (end - start == 0) return nums[start];
          int pre = 0;
          int cur = nums[start];
          for (int i = start + 1; i < end + 1; ++i) {
              int t = Math.max(pre + nums[i], cur);
              pre = cur;
              cur = t;
          }
          return cur;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int rob(vector<int>& nums) {
          int n;
          if ((n = nums.size()) == 0) return 0;
          return robRange(nums, 0, n - 1);
      }

  private:
      int robRange(vector<int>& nums, int start, int end) {
          if (end - start == 0) return nums[start];
          int pre = 0;
          int cur = nums[start];
          for (int i = start + 1; i < end + 1; ++i) {
              int t = max(pre + nums[i], cur);
              pre = cur;
              cur = t;
          }
          return cur;
      }
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  func rob(nums []int) int {
      n := len(nums)
      if n == 0 {
          return 0
      }
      return robRange(nums, 0, n - 1)
  }

  func robRange(nums[]int, start int, end int) int {
      if end - start == 0 {
          return nums[start]
      }
      pre, cur := 0, nums[start]
      for i := start + 1; i < end + 1; i++ {
          pre, cur = cur, max(pre + nums[i], cur)
      }
      return cur
  }

  func max(a, b int) int {
      if (a > b) {
          return a
      }
      return b
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
