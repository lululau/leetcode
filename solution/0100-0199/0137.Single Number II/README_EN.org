* [[https://leetcode.com/problems/single-number-ii][137. Single Number
II]]
  :PROPERTIES:
  :CUSTOM_ID: single-number-ii
  :END:
[[./solution/0100-0199/0137.Single Number II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums where every element appears three times
except for one, which appears exactly once. Find the single element and
return it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [2,2,3,2]
  <strong>Output:</strong> 3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [0,1,0,1,0,1,99]
  <strong>Output:</strong> 99
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-231 <= nums[i] <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each element in nums appears exactly three times except for one element
which appears once.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Your algorithm should have a linear runtime complexity. Could
you implement it without using extra memory?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def singleNumber(self, nums: List[int]) -> int:
          bits = [0] * 32
          for num in nums:
              for i in range(32):
                  bits[i] += (num & 1)
                  num >>= 1
          res = 0
          for i in range(32):
              if bits[i] % 3 != 0:
                  res |= (1 << i)
          return res if bits[31] % 3 == 0 else ~(res ^ 0xffffffff)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int singleNumber(int[] nums) {
          int[] bits = new int[32];
          for (int num : nums) {
              for (int i = 0; i < 32; ++i) {
                  bits[i] += (num & 1);
                  num >>= 1;
              }
          }

          int res = 0;
          for (int i = 0; i < 32; ++i) {
              if (bits[i] % 3 == 1) {
                  res |= (1 << i);
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
