* [[https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal][105.
Construct Binary Tree from Preorder and Inorder Traversal]]
  :PROPERTIES:
  :CUSTOM_ID: construct-binary-tree-from-preorder-and-inorder-traversal
  :END:
[[./solution/0100-0199/0105.Construct Binary Tree from Preorder and Inorder Traversal/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two integer arrays preorder and inorder where preorder is the
preorder traversal of a binary tree and inorder is the inorder traversal
of the same tree, construct and return the binary tree.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
  <strong>Output:</strong> [3,9,20,null,null,15,7]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> preorder = [-1], inorder = [-1]
  <strong>Output:</strong> [-1]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= preorder.length <= 3000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

inorder.length == preorder.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-3000 <= preorder[i], inorder[i] <= 3000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

preorder and inorder consist of unique values.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Each value of inorder also appears in preorder.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

preorder is guaranteed to be the preorder traversal of the tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

inorder is guaranteed to be the inorder traversal of the tree.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      indexes = {}
      def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
          def build(preorder, inorder, p1, p2, i1, i2) -> TreeNode:
              if p1 > p2 or i1 > i2:
                  return None
              root_val = preorder[p1]
              pos = self.indexes[root_val]
              root = TreeNode(root_val)
              root.left = None if pos == i1 else build(preorder, inorder, p1 + 1, p1 - i1 + pos, i1, pos - 1)
              root.right = None if pos == i2 else build(preorder, inorder, p1 - i1 + pos + 1, p2, pos + 1, i2)
              return root
          n = len(inorder)
          for i in range(n):
              self.indexes[inorder[i]] = i
          return build(preorder, inorder, 0, n - 1, 0, n - 1)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      private Map<Integer, Integer> indexes = new HashMap<>();

      public TreeNode buildTree(int[] preorder, int[] inorder) {
          int n = inorder.length;
          for (int i = 0; i < n; ++i) {
              indexes.put(inorder[i], i);
          }
          return build(preorder, inorder, 0, n - 1, 0, n - 1);
      }

      private TreeNode build(int[] preorder, int[] inorder, int p1, int p2, int i1, int i2) {
          if (p1 > p2 || i1 > i2) return null;
          int rootVal = preorder[p1];
          int pos = indexes.get(rootVal);
          TreeNode node = new TreeNode(rootVal);
          node.left = pos == i1 ? null : build(preorder, inorder, p1 + 1, pos - i1 + p1, i1, pos - 1);
          node.right = pos == i2 ? null : build(preorder, inorder, pos - i1 + p1 + 1, p2, pos + 1, i2);
          return node;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
