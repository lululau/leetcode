* [[https://leetcode-cn.com/problems/binary-tree-postorder-traversal][145.
二叉树的后序遍历]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树的后序遍历
  :END:
[[./solution/0100-0199/0145.Binary Tree Postorder Traversal/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树，返回它的 后序 遍历。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入:</strong> [1,null,2,3]  
     1
      \
       2
      /
     3 

  <strong>输出:</strong> [3,2,1]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

进阶: 递归算法很简单，你可以通过迭代算法完成吗？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

递归遍历或利用栈实现非递归遍历。

非递归的思路如下：

先序遍历的顺序是：头、左、右，如果我们改变左右孩子的顺序，就能将顺序变成：头、右、左。

我们先不打印头节点，而是存放到另一个收集栈 s2
中，最后遍历结束，输出收集栈元素，即是后序遍历：左、右、头。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

递归：

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def postorderTraversal(self, root: TreeNode) -> List[int]:
          def postorder(root):
              if root:
                  postorder(root.left)
                  postorder(root.right)
                  res.append(root.val)
          res = []
          postorder(root)
          return res
#+end_src

非递归：

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def postorderTraversal(self, root: TreeNode) -> List[int]:
          if not root:
              return []
          s1 = [root]
          s2 = []
          while s1:
              node = s1.pop()
              s2.append(node.val)
              if node.left:
                  s1.append(node.left)
              if node.right:
                  s1.append(node.right)
          return s2[::-1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

递归：

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {

      private List<Integer> res;

      public List<Integer> postorderTraversal(TreeNode root) {
          res = new ArrayList<>();
          postorder(root);
          return res;
      }

      private void postorder(TreeNode root) {
          if (root != null) {
              postorder(root.left);
              postorder(root.right);
              res.add(root.val);
          }
      }
  }
#+end_src

非递归：

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public List<Integer> postorderTraversal(TreeNode root) {
          if (root == null) {
              return Collections.emptyList();
          }
          Deque<TreeNode> s1 = new ArrayDeque<>();
          List<Integer> s2 = new ArrayList<>();
          s1.push(root);
          while (!s1.isEmpty()) {
              TreeNode node = s1.pop();
              s2.add(node.val);
              if (node.left != null) {
                  s1.push(node.left);
              }
              if (node.right != null) {
                  s1.push(node.right);
              }
          }
          Collections.reverse(s2);
          return s2;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
