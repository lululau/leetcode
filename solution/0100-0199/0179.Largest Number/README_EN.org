* [[https://leetcode.com/problems/largest-number][179. Largest Number]]
  :PROPERTIES:
  :CUSTOM_ID: largest-number
  :END:
[[./solution/0100-0199/0179.Largest Number/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a list of non-negative integers nums, arrange them such that they
form the largest number.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note: The result may be very large, so you need to return a string
instead of an integer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [10,2]
  <strong>Output:</strong> &quot;210&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [3,30,34,5,9]
  <strong>Output:</strong> &quot;9534330&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1]
  <strong>Output:</strong> &quot;1&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [10]
  <strong>Output:</strong> &quot;10&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= nums[i] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  from functools import cmp_to_key

  class Solution:
      def largestNumber(self, nums: List[int]) -> str:
          num_list = list(map(str, nums))
          num_list.sort(key=cmp_to_key(lambda x, y: int(y + x) - int(x + y)))
          return '0' if num_list[0] == '0' else ''.join(num_list)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public String largestNumber(int[] nums) {
          List<String> numList = new ArrayList<>();
          for (int num : nums) {
              numList.add(String.valueOf(num));
          }
          numList.sort((a, b) -> (b + a).compareTo(a + b));
          if ("0".equals(numList.get(0))) return "0";
          StringBuilder sb = new StringBuilder();
          for (String s : numList) {
              sb.append(s);
          }
          return sb.toString();
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
