* [[https://leetcode.com/problems/clone-graph][133. Clone Graph]]
  :PROPERTIES:
  :CUSTOM_ID: clone-graph
  :END:
[[./solution/0100-0199/0133.Clone Graph/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a reference of a node in a connected undirected graph.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return a deep copy (clone) of the graph.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Each node in the graph contains a val (int) and a list (List[Node]) of
its neighbors.

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  class Node {

      public int val;

      public List&lt;Node&gt; neighbors;

  }

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Test case format:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For simplicity sake, each node's value is the same as the node's index
(1-indexed). For example, the first node with val = 1, the second node
with val = 2, and so on. The graph is represented in the test case using
an adjacency list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Adjacency list is a collection of unordered lists used to represent a
finite graph. Each list describes the set of neighbors of a node in the
graph.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The given node will always be the first node with val = 1. You must
return the copy of the given node as a reference to the cloned graph.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> adjList = [[2,4],[1,3],[2,4],[1,3]]
  <strong>Output:</strong> [[2,4],[1,3],[2,4],[1,3]]
  <strong>Explanation:</strong> There are 4 nodes in the graph.
  1st node (val = 1)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).
  2nd node (val = 2)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).
  3rd node (val = 3)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).
  4th node (val = 4)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> adjList = [[]]
  <strong>Output:</strong> [[]]
  <strong>Explanation:</strong> Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> adjList = []
  <strong>Output:</strong> []
  <strong>Explanation:</strong> This an empty graph, it does not have any nodes.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> adjList = [[2],[1]]
  <strong>Output:</strong> [[2],[1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Node.val is unique for each node.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Number of Nodes will not exceed 100.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There is no repeated edges and no self-loops in the graph.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The Graph is connected and all nodes can be visited starting from the
given node.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
