* [[https://leetcode-cn.com/problems/clone-graph][133. 克隆图]]
  :PROPERTIES:
  :CUSTOM_ID: 克隆图
  :END:
[[./solution/0100-0199/0133.Clone Graph/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

图中的每个节点都包含它的值 val（int） 和其邻居的列表（list[Node]）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>class Node {
      public int val;
      public List&lt;Node&gt; neighbors;
  }</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

测试用例格式：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

简单起见，每个节点的值都和它的索引相同。例如，第一个节点值为 1（val =
1），第二个节点值为 2（val =
2），以此类推。该图在测试用例中使用邻接列表表示。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

邻接列表
是用于表示有限图的无序列表的集合。每个列表都描述了图中节点的邻居集。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给定节点将始终是图中的第一个节点（值为
1）。你必须将 给定节点的拷贝 作为对克隆图的引用返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>adjList = [[2,4],[1,3],[2,4],[1,3]]
  <strong>输出：</strong>[[2,4],[1,3],[2,4],[1,3]]
  <strong>解释：
  </strong>图中有 4 个节点。
  节点 1 的值是 1，它有两个邻居：节点 2 和 4 。
  节点 2 的值是 2，它有两个邻居：节点 1 和 3 。
  节点 3 的值是 3，它有两个邻居：节点 2 和 4 。
  节点 4 的值是 4，它有两个邻居：节点 1 和 3 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>adjList = [[]]
  <strong>输出：</strong>[[]]
  <strong>解释：</strong>输入包含一个空列表。该图仅仅只有一个值为 1 的节点，它没有任何邻居。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>adjList = []
  <strong>输出：</strong>[]
  <strong>解释：</strong>这个图是空的，它不含任何节点。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>adjList = [[2],[1]]
  <strong>输出：</strong>[[2],[1]]</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

节点数不超过 100 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每个节点值 Node.val 都是唯一的，1 <= Node.val <= 100。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

无向图是一个简单图，这意味着图中没有重复的边，也没有自环。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

由于图是无向的，如果节点 p 是节点 q 的邻居，那么节点 q 也必须是节点
p 的邻居。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

图是连通图，你可以从给定节点访问到所有节点。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
