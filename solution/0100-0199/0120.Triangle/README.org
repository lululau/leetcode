* [[https://leetcode-cn.com/problems/triangle][120. 三角形最小路径和]]
  :PROPERTIES:
  :CUSTOM_ID: 三角形最小路径和
  :END:
[[./solution/0100-0199/0120.Triangle/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个三角形 triangle ，找出自顶向下的最小路径和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与
上一层结点下标 相同或者等于 上一层结点下标 + 1
的两个结点。也就是说，如果正位于当前行的下标 i
，那么下一步可以移动到下一行的下标 i 或 i + 1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
  <strong>输出：</strong>11
  <strong>解释：</strong>如下面简图所示：
     <strong>2</strong>
    <strong>3</strong> 4
   6 <strong>5</strong> 7
  4 <strong>1</strong> 8 3
  自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>triangle = [[-10]]
  <strong>输出：</strong>-10
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= triangle.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

triangle[0].length == 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

triangle[i].length == triangle[i - 1].length + 1

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= triangle[i][j] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题吗？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
