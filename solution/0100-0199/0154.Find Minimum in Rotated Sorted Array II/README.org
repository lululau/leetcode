* [[https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii][154.
寻找旋转排序数组中的最小值 II]]
  :PROPERTIES:
  :CUSTOM_ID: 寻找旋转排序数组中的最小值-ii
  :END:
[[./solution/0100-0199/0154.Find Minimum in Rotated Sorted Array II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转
后，得到输入数组。例如，原数组 nums = [0,1,4,4,5,6,7] 在变化后可能得到：

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

若旋转 4 次，则可以得到 [4,5,6,7,0,1,4]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

若旋转 7 次，则可以得到 [0,1,4,4,5,6,7]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组
[a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个可能存在 重复 元素值的数组 nums
，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的
最小元素 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,3,5]
  <strong>输出：</strong>1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [2,2,2,0,1]
  <strong>输出：</strong>0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-5000 <= nums[i] <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

这道题是 寻找旋转排序数组中的最小值 的延伸题目。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

允许重复会影响算法的时间复杂度吗？会如何影响，为什么？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

二分法。

若 =nums[m] > nums[r]=，说明最小值在 m 的右边；若
=nums[m] < nums[r]=，说明最小值在 m 的左边（包括
m）；若相等，无法判断，直接将 r 减 1。循环比较。

最后返回 =nums[l]= 即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def findMin(self, nums: List[int]) -> int:
          l, r = 0, len(nums) - 1
          while l < r:
              m = (l + r) >> 1
              if nums[m] > nums[r]:
                  l = m + 1
              elif nums[m] < nums[r]:
                  r = m
              else:
                  r -= 1
          return nums[l]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int findMin(int[] nums) {
          int l = 0, r = nums.length - 1;
          while (l < r) {
              int m = (l + r) >>> 1;
              if (nums[m] > nums[r]) l = m + 1;
              else if (nums[m] < nums[r]) r = m;
              else --r;
          }
          return nums[l];
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int findMin(vector<int>& nums) {
          int l = 0, r = nums.size() - 1;
          while (l < r) {
              int m = (l + r) >> 1;
              if (nums[m] > nums[r]) l = m + 1;
              else if (nums[m] < nums[r]) r = m;
              else --r;
          }
          return nums[l];
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var findMin = function (nums) {
    let l = 0,
      r = nums.length - 1;
    while (l < r) {
      const m = (l + r) >> 1;
      if (nums[m] > nums[r]) l = m + 1;
      else if (nums[m] < nums[r]) r = m;
      else --r;
    }
    return nums[l];
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
