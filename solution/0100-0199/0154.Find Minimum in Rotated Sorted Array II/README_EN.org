* [[https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii][154.
Find Minimum in Rotated Sorted Array II]]
  :PROPERTIES:
  :CUSTOM_ID: find-minimum-in-rotated-sorted-array-ii
  :END:
[[./solution/0100-0199/0154.Find Minimum in Rotated Sorted Array II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Suppose an array of length n sorted in ascending order is rotated
between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7]
might become:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

[4,5,6,7,0,1,4] if it was rotated 4 times.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

[0,1,4,4,5,6,7] if it was rotated 7 times.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time
results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given the sorted rotated array nums that may contain duplicates, return
the minimum element of this array.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [1,3,5]
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> nums = [2,2,2,0,1]
  <strong>Output:</strong> 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-5000 <= nums[i] <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

nums is sorted and rotated between 1 and n times.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: This is the same as Find Minimum in Rotated Sorted Array but
with duplicates. Would allow duplicates affect the run-time complexity?
How and why?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def findMin(self, nums: List[int]) -> int:
          l, r = 0, len(nums) - 1
          while l < r:
              m = (l + r) >> 1
              if nums[m] > nums[r]:
                  l = m + 1
              elif nums[m] < nums[r]:
                  r = m
              else:
                  r -= 1
          return nums[l]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int findMin(int[] nums) {
          int l = 0, r = nums.length - 1;
          while (l < r) {
              int m = (l + r) >>> 1;
              if (nums[m] > nums[r]) l = m + 1;
              else if (nums[m] < nums[r]) r = m;
              else --r;
          }
          return nums[l];
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int findMin(vector<int>& nums) {
          int l = 0, r = nums.size() - 1;
          while (l < r) {
              int m = (l + r) >> 1;
              if (nums[m] > nums[r]) l = m + 1;
              else if (nums[m] < nums[r]) r = m;
              else --r;
          }
          return nums[l];
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var findMin = function (nums) {
    let l = 0,
      r = nums.length - 1;
    while (l < r) {
      const m = (l + r) >> 1;
      if (nums[m] > nums[r]) l = m + 1;
      else if (nums[m] < nums[r]) r = m;
      else --r;
    }
    return nums[l];
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
