* [[https://leetcode.com/problems/compare-version-numbers][165. Compare
Version Numbers]]
  :PROPERTIES:
  :CUSTOM_ID: compare-version-numbers
  :END:
[[./solution/0100-0199/0165.Compare Version Numbers/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two version numbers, version1 and version2, compare them.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Version numbers consist of one or more revisions joined by a dot '.'.
Each revision consists of digits and may contain leading zeros. Every
revision contains at least one character. Revisions are 0-indexed from
left to right, with the leftmost revision being revision 0, the next
revision being revision 1, and so on. For example 2.5.33 and 0.1 are
valid version numbers.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

To compare version numbers, compare their revisions in left-to-right
order. Revisions are compared using their integer value ignoring any
leading zeros. This means that revisions 1 and 001 are considered equal.
If a version number does not specify a revision at an index, then treat
the revision as 0. For example, version 1.0 is less than
version 1.1 because their revision 0s are the same, but their revision
1s are 0 and 1 respectively, and 0 < 1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the following:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If version1 < version2, return -1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If version1 > version2, return 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Otherwise, return 0.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> Ignoring leading zeroes, both &quot;01&quot; and &quot;001&quot; represent the same integer &quot;1&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> version1 does not specify revision 2, which means it is treated as &quot;0&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;
  <strong>Output:</strong> -1
  <strong>Explanation:</strong>&nbsp;version1&#39;s revision 0 is &quot;0&quot;, while version2&#39;s revision 0 is &quot;1&quot;. 0 &lt; 1, so version1 &lt; version2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> version1 = &quot;1.0.1&quot;, version2 = &quot;1&quot;
  <strong>Output:</strong> 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 5:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> version1 = &quot;7.5.2.4&quot;, version2 = &quot;7.5.3&quot;
  <strong>Output:</strong> -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= version1.length, version2.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

version1 and version2 only contain digits and '.'.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

version1 and version2 are valid version numbers.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the given revisions in version1 and version2 can be stored
in a 32-bit integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
