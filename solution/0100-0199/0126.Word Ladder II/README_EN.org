* [[https://leetcode.com/problems/word-ladder-ii][126. Word Ladder II]]
  :PROPERTIES:
  :CUSTOM_ID: word-ladder-ii
  :END:
[[./solution/0100-0199/0126.Word Ladder II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A transformation sequence from word beginWord to word endWord using a
dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ...
-> sk such that:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Every adjacent pair of words differs by a single letter.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Every si for 1 <= i <= k is in wordList. Note that beginWord does not
need to be in wordList.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sk == endWord

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Given two words, beginWord and endWord, and a dictionary wordList,
return all the shortest transformation sequences from beginWord to
endWord, or an empty list if no such sequence exists. Each sequence
should be returned as a list of the words [beginWord, s1, s2, ..., sk].

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]
  <strong>Output:</strong> [[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]]
  <strong>Explanation:</strong>&nbsp;There are 2 shortest transformation sequences:
  &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;
  &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;lot&quot; -&gt; &quot;log&quot; -&gt; &quot;cog&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]
  <strong>Output:</strong> []
  <strong>Explanation:</strong> The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= beginWord.length <= 7

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

endWord.length == beginWord.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= wordList.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

wordList[i].length == beginWord.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

beginWord, endWord, and wordList[i] consist of lowercase English
letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

beginWord != endWord

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All the words in wordList are unique.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
