* [[https://leetcode-cn.com/problems/word-ladder-ii][126. 单词接龙 II]]
  :PROPERTIES:
  :CUSTOM_ID: 单词接龙-ii
  :END:
[[./solution/0100-0199/0126.Word Ladder II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

按字典 wordList 完成从单词 beginWord 到单词 endWord
转化，一个表示此过程的 转换序列 是形式上像 beginWord -> s1 -> s2 -> ...
-> sk 这样的单词序列，并满足：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每对相邻的单词之间仅有单个字母不同。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

转换过程中的每个单词 si（1 <= i <= k）必须是字典 wordList
中的单词。注意，beginWord 不必是字典 wordList 中的单词。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

sk == endWord

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你两个单词 beginWord 和 endWord ，以及一个字典 wordList
。请你找出并返回所有从 beginWord 到 endWord 的 最短转换序列
，如果不存在这样的转换序列，返回一个空列表。每个序列都应该以单词列表
[beginWord, s1, s2, ..., sk] 的形式返回。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
  <strong>输出：</strong>[["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]
  <strong>解释：</strong>存在 2 种最短的转换序列：
  "hit" -> "hot" -> "dot" -> "dog" -> "cog"
  "hit" -> "hot" -> "lot" -> "log" -> "cog"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
  <strong>输出：</strong>[]
  <strong>解释：</strong>endWord "cog" 不在字典 wordList 中，所以不存在符合要求的转换序列。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= beginWord.length <= 7

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

endWord.length == beginWord.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= wordList.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

wordList[i].length == beginWord.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

beginWord、endWord 和 wordList[i] 由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

beginWord != endWord

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

wordList 中的所有单词 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
