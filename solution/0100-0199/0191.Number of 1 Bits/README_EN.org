* [[https://leetcode.com/problems/number-of-1-bits][191. Number of 1
Bits]]
  :PROPERTIES:
  :CUSTOM_ID: number-of-1-bits
  :END:
[[./solution/0100-0199/0191.Number of 1 Bits/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Write a function that takes an unsigned integer and returns the number
of '1' bits it has (also known as the Hamming weight).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Note that in some languages, such as Java, there is no unsigned integer
type. In this case, the input will be given as a signed integer type. It
should not affect your implementation, as the integer's internal binary
representation is the same, whether it is signed or unsigned.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

In Java, the compiler represents the signed integers using 2's
complement notation. Therefore, in Example 3, the input represents the
signed integer. -3.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 00000000000000000000000000001011
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> The input binary string <strong>00000000000000000000000000001011</strong> has a total of three &#39;1&#39; bits.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 00000000000000000000000010000000
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> The input binary string <strong>00000000000000000000000010000000</strong> has a total of one &#39;1&#39; bit.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 11111111111111111111111111111101
  <strong>Output:</strong> 31
  <strong>Explanation:</strong> The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one &#39;1&#39; bits.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The input must be a binary string of length 32.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: If this function is called many times, how would you optimize
it?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def hammingWeight(self, n: int) -> int:
          res = 0
          while n:
              n &= (n - 1)
              res += 1
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  public class Solution {
      // you need to treat n as an unsigned value
      public int hammingWeight(int n) {
          int res = 0;
          while (n != 0) {
              n &= (n - 1);
              ++res;
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number} n - a positive integer
   * @return {number}
   */
  var hammingWeight = function (n) {
    let res = 0;
    while (n) {
      n &= n - 1;
      ++res;
    }
    return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
