* [[https://leetcode.com/problems/repeated-dna-sequences][187. Repeated
DNA Sequences]]
  :PROPERTIES:
  :CUSTOM_ID: repeated-dna-sequences
  :END:
[[./solution/0100-0199/0187.Repeated DNA Sequences/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

The DNA sequence is composed of a series of nucleotides abbreviated as
'A', 'C', 'G', and 'T'.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, "ACGAATTCCG" is a DNA sequence.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

When studying DNA, it is useful to identify repeated sequences within
the DNA.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a string s that represents a DNA sequence, return all the
10-letter-long sequences (substrings) that occur more than once in a DNA
molecule. You may return the answer in any order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
  <strong>Output:</strong> ["AAAAACCCCC","CCCCCAAAAA"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>Input:</strong> s = "AAAAAAAAAAAAA"
  <strong>Output:</strong> ["AAAAAAAAAA"]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[i] is either 'A', 'C', 'G', or 'T'.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def findRepeatedDnaSequences(self, s: str) -> List[str]:
          n = 10
          subs = set()
          res = set()
          for i in range(len(s) - n + 1):
              sub = s[i:i + n]
              if sub in subs:
                  res.add(sub)
              subs.add(sub)
          return list(res)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public List<String> findRepeatedDnaSequences(String s) {
          int len = 10;
          Set<String> subs = new HashSet<>();
          Set<String> res = new HashSet<>();
          for (int i = 0; i < s.length() - len + 1; ++i) {
              String sub = s.substring(i, i + len);
              if (subs.contains(sub)) {
                  res.add(sub);
              }
              subs.add(sub);
          }
          return new ArrayList<>(res);
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} s
   * @return {string[]}
   */
  var findRepeatedDnaSequences = function(s) {
      let n = 10;
      let subs = new Set();
      let res = new Set();
      for (let i = 0; i < s.length - n + 1; i++) {
          let sub = s.slice(i, i + n);
          if (subs.has(sub)) {
              res.add(sub);
          }
          subs.add(sub);
      }
      return [...res];
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
