* [[https://leetcode-cn.com/problems/read-n-characters-given-read4][157.
用 Read4 读取 N 个字符]]
  :PROPERTIES:
  :CUSTOM_ID: 用-read4-读取-n-个字符
  :END:
[[./solution/0100-0199/0157.Read N Characters Given Read4/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个文件，并且该文件只能通过给定的 read4 方法来读取，请实现一个方法使其能够读取
n 个字符。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

read4 方法：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

API read4 可以从文件中读取 4
个连续的字符，并且将它们写入缓存数组 buf 中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回值为实际读取的字符个数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意 read4() 自身拥有文件指针，很类似于 C 语言中的 FILE *fp 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

read4 的定义：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>参数类型: char[] buf4
  返回类型: int

  注意: buf4[] 是目标缓存区不是源缓存区，read4 的返回结果将会复制到 buf4[] 当中。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

下列是一些使用 read4 的例子：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><code>File file(&quot;abcde&quot;); // 文件名为 &quot;abcde&quot;， 初始文件指针 (fp) 指向 &#39;a&#39; 
  char[] buf4 = new char[4]; // 创建一个缓存区使其能容纳足够的字符
  read4(buf4); // read4 返回 4。现在 buf4 = &quot;abcd&quot;，fp 指向 &#39;e&#39;
  read4(buf4); // read4 返回 1。现在 buf4 = &quot;e&quot;，fp 指向文件末尾
  read4(buf4); // read4 返回 0。现在 buf = &quot;&quot;，fp 指向文件末尾</code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

read 方法：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

通过使用 read4 方法，实现 read 方法。该方法可以从文件中读取 n
个字符并将其存储到缓存数组 buf 中。您 不能 直接操作文件。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回值为实际读取的字符。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

read 的定义：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>参数类型:   char[] buf, int n
  返回类型:   int

  注意: buf[] 是目标缓存区不是源缓存区，你需要将结果写入 buf[] 中。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入： </strong>file = &quot;abc&quot;, n = 4
  <strong>输出： </strong>3
  <strong>解释：</strong> 当执行你的 read 方法后，buf 需要包含 &quot;abc&quot;。 文件一共 3 个字符，因此返回 3。 注意 &quot;abc&quot; 是文件的内容，不是 buf 的内容，buf 是你需要写入结果的目标缓存区。 </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入： </strong>file = &quot;abcde&quot;, n = 5
  <strong>输出： </strong>5
  <strong>解释： </strong>当执行你的 read 方法后，buf 需要包含 &quot;abcde&quot;。文件共 5 个字符，因此返回 5。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入： </strong>file = &quot;abcdABCD1234&quot;, n = 12
  <strong>输出： </strong>12
  <strong>解释： </strong>当执行你的 read 方法后，buf 需要包含 &quot;abcdABCD1234&quot;。文件一共 12 个字符，因此返回 12。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入： </strong>file = &quot;leetcode&quot;, n = 5
  <strong>输出： </strong>5
  <strong>解释：</strong> 当执行你的 read 方法后，buf 需要包含 &quot;leetc&quot;。文件中一共 5 个字符，因此返回 5。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你 不能 直接操作该文件，文件只能通过 read4 获取而 不能 通过 read。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

read  函数只在每个测试用例调用一次。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你可以假定目标缓存数组 buf 保证有足够的空间存下 n 个字符。 

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
