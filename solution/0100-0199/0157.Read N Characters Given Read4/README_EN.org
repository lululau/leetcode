* [[https://leetcode.com/problems/read-n-characters-given-read4][157.
Read N Characters Given Read4]]
  :PROPERTIES:
  :CUSTOM_ID: read-n-characters-given-read4
  :END:
[[./solution/0100-0199/0157.Read N Characters Given Read4/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given a file and assume that you can only read the file using a given
method read4, implement a method to read n characters.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Method read4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The API read4 reads four consecutive characters from file, then writes
those characters into the buffer array buf4.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The return value is the number of actual characters read.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that read4() has its own file pointer, much like FILE *fp in C.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Definition of read4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
      Parameter:  char[] buf4
      Returns:    int

  buf4[] is a destination, not a source. The results from read4 will be copied to buf4[].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Below is a high-level example of how read4 works:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  File file(&quot;abcde<code>&quot;); // File is &quot;</code>abcde<code>&quot;, initially file pointer (fp) points to &#39;a&#39;
  char[] buf4 = new char[4]; // Create buffer with enough space to store characters
  read4(buf4); // read4 returns 4. Now buf4 = &quot;abcd&quot;, fp points to &#39;e&#39;
  read4(buf4); // read4 returns 1. Now buf4 = &quot;e&quot;, fp points to end of file
  read4(buf4); // read4 returns 0. Now buf4 = &quot;&quot;, fp points to end of file</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Method read:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

By using the read4 method, implement the method read that reads n
characters from file and store it in the buffer array buf. Consider that
you cannot manipulate file directly.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The return value is the number of actual characters read.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Definition of read:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
      Parameters: char[] buf, int n
      Returns:    int

  buf[] is a destination, not a source. You will need to write the results to buf[].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Consider that you cannot manipulate the file directly. The file is only
accessible for read4 but not for read.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The read function will only be called once for each test case.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

You may assume the destination buffer array, buf, is guaranteed to have
enough space for storing n characters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> file = &quot;abc&quot;, n = 4
  <strong>Output:</strong> 3
  <strong>Explanation:</strong> After calling your read method, buf should contain &quot;abc&quot;. We read a total of 3 characters from the file, so return 3.
  Note that &quot;abc&quot; is the file&#39;s content, not buf. buf is the destination buffer that you will have to write the results to.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> file = &quot;abcde&quot;, n = 5
  <strong>Output:</strong> 5
  <strong>Explanation:</strong> After calling your read method, buf should contain &quot;abcde&quot;. We read a total of 5 characters from the file, so return 5.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> file = &quot;abcdABCD1234&quot;, n = 12
  <strong>Output:</strong> 12
  <strong>Explanation:</strong> After calling your read method, buf should contain &quot;abcdABCD1234&quot;. We read a total of 12 characters from the file, so return 12.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> file = &quot;leetcode&quot;, n = 5
  <strong>Output:</strong> 5
  <strong>Explanation:</strong> After calling your read method, buf should contain &quot;leetc&quot;. We read a total of 5 characters from the file, so return 5.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= file.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

file consist of English letters and digits.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
