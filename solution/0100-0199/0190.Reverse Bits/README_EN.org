* [[https://leetcode.com/problems/reverse-bits][190. Reverse Bits]]
  :PROPERTIES:
  :CUSTOM_ID: reverse-bits
  :END:
[[./solution/0100-0199/0190.Reverse Bits/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Reverse bits of a given 32 bits unsigned integer.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Note that in some languages such as Java, there is no unsigned integer
type. In this case, both input and output will be given as a signed
integer type. They should not affect your implementation, as the
integer's internal binary representation is the same, whether it is
signed or unsigned.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

In Java, the compiler represents the signed integers using 2's
complement notation. Therefore, in Example 2 above, the input represents
the signed integer -3 and the output represents the signed integer
-1073741825.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

If this function is called many times, how would you optimize it?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 00000010100101000001111010011100
  <strong>Output:</strong>    964176192 (00111001011110000010100101000000)
  <strong>Explanation: </strong>The input binary string <strong>00000010100101000001111010011100</strong> represents the unsigned integer 43261596, so return 964176192 which its binary representation is <strong>00111001011110000010100101000000</strong>.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 11111111111111111111111111111101
  <strong>Output:</strong>   3221225471 (10111111111111111111111111111111)
  <strong>Explanation: </strong>The input binary string <strong>11111111111111111111111111111101</strong> represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is <strong>10111111111111111111111111111111</strong>.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The input must be a binary string of length 32

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def reverseBits(self, n: int) -> int:
          res = 0
          for i in range(32):
              res |= ((n & 1) << (31 - i))
              n >>= 1
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  public class Solution {
      // you need treat n as an unsigned value
      public int reverseBits(int n) {
          int res = 0;
          for (int i = 0; i < 32 && n != 0; ++i) {
              res |= ((n & 1) << (31 - i));
              n >>>= 1;
          }
          return res;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      uint32_t reverseBits(uint32_t n) {
          uint32_t res = 0;
          for (int i = 0; i < 32; ++i) {
              res |= ((n & 1) << (31 - i));
              n >>= 1;
          }
          return res;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number} n - a positive integer
   * @return {number} - a positive integer
   */
  var reverseBits = function (n) {
    let res = 0;
    for (let i = 0; i < 32 && n > 0; ++i) {
      res |= (n & 1) << (31 - i);
      n >>>= 1;
    }
    return res >>> 0;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
