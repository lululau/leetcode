* [[https://leetcode.com/problems/sort-list][148. Sort List]]
  :PROPERTIES:
  :CUSTOM_ID: sort-list
  :END:
[[./solution/0100-0199/0148.Sort List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the head of a linked list, return the list after sorting it in
ascending order.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Can you sort the linked list in O(n logn) time and
O(1) memory (i.e. constant space)?

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [4,2,1,3]
  <strong>Output:</strong> [1,2,3,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [-1,5,3,4,0]
  <strong>Output:</strong> [-1,0,3,4,5]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the list is in the range [0, 5 * 104].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def sortList(self, head: ListNode) -> ListNode:
          if head is None or head.next is None:
              return head
          slow, fast = head, head.next
          while fast and fast.next:
              slow, fast = slow.next, fast.next.next
          t = slow.next
          slow.next = None
          l1, l2 = self.sortList(head), self.sortList(t)
          dummy = ListNode()
          cur = dummy
          while l1 and l2:
              if l1.val <= l2.val:
                  cur.next = l1
                  l1 = l1.next
              else:
                  cur.next = l2
                  l2 = l2.next
              cur = cur.next
          cur.next = l1 or l2
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode sortList(ListNode head) {
          if (head == null || head.next == null) {
              return head;
          }
          ListNode slow = head, fast = head.next;
          while (fast != null && fast.next != null) {
              slow = slow.next;
              fast = fast.next.next;
          }
          ListNode t = slow.next;
          slow.next = null;
          ListNode l1 = sortList(head);
          ListNode l2 = sortList(t);
          ListNode dummy = new ListNode();
          ListNode cur = dummy;
          while (l1 != null && l2 != null) {
              if (l1.val <= l2.val) {
                  cur.next = l1;
                  l1 = l1.next;
              } else {
                  cur.next = l2;
                  l2 = l2.next;
              }
              cur = cur.next;
          }
          cur.next = l1 == null ? l2 : l1;
          return dummy.next;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val, next) {
   *     this.val = (val===undefined ? 0 : val)
   *     this.next = (next===undefined ? null : next)
   * }
   */
  /**
   * @param {ListNode} head
   * @return {ListNode}
   */
  var sortList = function(head) {
      if (!head || !head.next) {
          return head;
      }
      let slow = head;
      let fast = head.next;
      while (fast && fast.next) {
          slow = slow.next;
          fast = fast.next.next;
      }
      let t = slow.next;
      slow.next = null;
      let l1 = sortList(head);
      let l2 = sortList(t);
      const dummy = new ListNode();
      let cur = dummy;
      while (l1 && l2) {
          if (l1.val <= l2.val) {
              cur.next = l1;
              l1 = l1.next;
          } else {
              cur.next = l2;
              l2 = l2.next;
          }
          cur = cur.next;
      }
      cur.next = l1 || l2;
      return dummy.next;
  };
#+end_src

*** *C#*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     public int val;
   *     public ListNode next;
   *     public ListNode(int val=0, ListNode next=null) {
   *         this.val = val;
   *         this.next = next;
   *     }
   * }
   */
  public class Solution {
      public ListNode SortList(ListNode head) {
          if (head == null || head.next == null)
          {
              return head;
          }
          ListNode slow = head, fast = head.next;
          while (fast != null && fast.next != null)
          {
              slow = slow.next;
              fast = fast.next.next;
          }
          ListNode t = slow.next;
          slow.next = null;
          ListNode l1 = SortList(head);
          ListNode l2 = SortList(t);
          ListNode dummy = new ListNode();
          ListNode cur = dummy;
          while (l1 != null && l2 != null)
          {
              if (l1.val <= l2.val)
              {
                  cur.next = l1;
                  l1 = l1.next;
              }
              else
              {
                  cur.next = l2;
                  l2 = l2.next;
              }
              cur = cur.next;
          }
          cur.next = l1 == null ? l2 : l1;
          return dummy.next;
      }
  }
#+end_example

*** *TypeScript*
    :PROPERTIES:
    :CUSTOM_ID: typescript
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * class ListNode {
   *     val: number
   *     next: ListNode | null
   *     constructor(val?: number, next?: ListNode | null) {
   *         this.val = (val===undefined ? 0 : val)
   *         this.next = (next===undefined ? null : next)
   *     }
   * }
   */

  function sortList(head: ListNode | null): ListNode | null {
      if (head == null || head.next == null) return head;
      // 快慢指针定位中点
      let slow: ListNode = head, fast: ListNode = head.next;
      while (fast != null && fast.next != null) {
          slow = slow.next;
          fast = fast.next.next;
      }
      // 归并排序
      let mid: ListNode = slow.next;
      slow.next = null;
      let l1: ListNode = sortList(head);
      let l2: ListNode = sortList(mid);
      let dummy: ListNode = new ListNode();
      let cur: ListNode = dummy;
      while (l1 != null && l2 != null) {
          if (l1.val <= l2.val) {
              cur.next = l1;
              l1 = l1.next;
          } else {
              cur.next = l2;
              l2 = l2.next;
          }
          cur = cur.next;
      }
      cur.next = l1 == null ? l2 : l1;
      return dummy.next;
  };
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
