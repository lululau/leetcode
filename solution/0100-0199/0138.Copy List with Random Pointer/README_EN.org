* [[https://leetcode.com/problems/copy-list-with-random-pointer][138.
Copy List with Random Pointer]]
  :PROPERTIES:
  :CUSTOM_ID: copy-list-with-random-pointer
  :END:
[[./solution/0100-0199/0138.Copy List with Random Pointer/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A linked list of length n is given such that each node contains an
additional random pointer, which could point to any node in the list, or
null.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Construct a deep copy of the list. The deep copy should consist of
exactly n brand new nodes, where each new node has its value set to the
value of its corresponding original node. Both the next and random
pointer of the new nodes should point to new nodes in the copied list
such that the pointers in the original list and copied list represent
the same list state. None of the pointers in the new list should point
to nodes in the original list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, if there are two nodes X and Y in the original list, where
X.random --> Y, then for the corresponding two nodes x and y in the
copied list, x.random --> y.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the head of the copied linked list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The linked list is represented in the input/output as a list of n nodes.
Each node is represented as a pair of [val, random_index] where:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

val: an integer representing Node.val

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

random_index: the index of the node (range from 0 to n-1) that the
random pointer points to, or null if it does not point to any node.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Your code will only be given the head of the original linked list.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
  <strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [[1,1],[2,1]]
  <strong>Output:</strong> [[1,1],[2,1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = [[3,null],[3,0],[3,null]]
  <strong>Output:</strong> [[3,null],[3,0],[3,null]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> head = []
  <strong>Output:</strong> []
  <strong>Explanation:</strong> The given linked list is empty (null pointer), so return null.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-10000 <= Node.val <= 10000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Node.random is null or is pointing to some node in the linked list.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  """
  # Definition for a Node.
  class Node:
      def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
          self.val = int(x)
          self.next = next
          self.random = random
  """

  class Solution:
      def copyRandomList(self, head: 'Node') -> 'Node':
          if head is None:
              return None

          cur = head
          while cur:
              node = Node(cur.val, cur.next)
              cur.next = node
              cur = node.next
          
          cur = head
          while cur:
              cur.next.random = None if cur.random is None else cur.random.next
              cur = cur.next.next
          
          copy = head.next
          cur = head
          while cur:
              next = cur.next
              cur.next = next.next
              next.next = None if next.next is None else next.next.next
              cur = cur.next
          return copy
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /*
  // Definition for a Node.
  class Node {
      int val;
      Node next;
      Node random;

      public Node(int val) {
          this.val = val;
          this.next = null;
          this.random = null;
      }
  }
  */

  class Solution {
      public Node copyRandomList(Node head) {
          if (head == null) {
              return null;
          }

          Node cur = head;
          while (cur != null) {
              Node node = new Node(cur.val);
              node.next = cur.next;
              cur.next = node;
              cur = node.next;
          }

          cur = head;
          while (cur != null) {
              cur.next.random = cur.random == null ? null : cur.random.next;
              cur = cur.next.next;
          }

          Node copy = head.next;
          cur = head;
          while (cur != null) {
              Node next = cur.next;
              cur.next = next.next;
              next.next = next.next == null ? null : next.next.next;
              cur = cur.next;
          }
          return copy;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /*
  // Definition for a Node.
  class Node {
  public:
      int val;
      Node* next;
      Node* random;
      
      Node(int _val) {
          val = _val;
          next = NULL;
          random = NULL;
      }
  };
  */

  class Solution {
  public:
      Node* copyRandomList(Node* head) {
          if (!head) {
              return nullptr;
          }
          Node* cur = head;
          while (cur) {
              Node* node = new Node(cur->val);
              node->next = cur->next;
              cur->next = node;
              cur = node->next;
          }

          cur = head;
          while (cur) {
              cur->next->random = cur->random ? cur->random->next : nullptr;
              cur = cur->next->next;
          }

          Node* copy = head->next;
          cur = head;
          while (cur) {
              Node* next = cur->next;
              cur->next = next->next;
              next->next = next->next ? next->next->next : nullptr;
              cur = cur->next;
          }
          return copy;
      }
  };
#+end_src

*** *C#*
    :PROPERTIES:
    :CUSTOM_ID: c-1
    :END:
#+begin_example
  /*
  // Definition for a Node.
  public class Node {
      public int val;
      public Node next;
      public Node random;
      
      public Node(int _val) {
          val = _val;
          next = null;
          random = null;
      }
  }
  */

  public class Solution {
      public Node CopyRandomList(Node head) {
          if (head == null) {
              return null;
          }
          
          Node cur = head;
          while (cur != null) {
              Node node = new Node(cur.val);
              node.next = cur.next;
              cur.next = node;
              cur = node.next;
          }

          cur = head;
          while (cur != null) {
              cur.next.random = cur.random == null ? null : cur.random.next;
              cur = cur.next.next;
          }

          Node copy = head.next;
          cur = head;
          while (cur != null) {
              Node next = cur.next;
              cur.next = next.next;
              next.next = next.next == null ? null : next.next.next;
              cur = cur.next;
          }
          return copy;
      }
  }
#+end_example

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  /**
   * Definition for a Node.
   * type Node struct {
   *     Val int
   *     Next *Node
   *     Random *Node
   * }
   */

  func copyRandomList(head *Node) *Node {
      if head == nil {
          return nil
      }

      cur := head
      for cur != nil {
          node := &Node{
              Val: cur.Val,
              Next: cur.Next,
              Random: nil,
          }
          cur.Next = node
          cur = node.Next
      }

      cur = head
      for cur != nil {
          if cur.Random == nil {
              cur.Next.Random = nil
          } else {
              cur.Next.Random = cur.Random.Next
          }
          cur = cur.Next.Next
      }

      copy := head.Next
      cur = head
      for cur != nil {
          next := cur.Next
          cur.Next = next.Next
          if (next.Next == nil) {
              next.Next = nil
          } else {
              next.Next = next.Next.Next
          }
          cur = cur.Next
      }
      return copy
  }
#+end_example

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * // Definition for a Node.
   * function Node(val, next, random) {
   *    this.val = val;
   *    this.next = next;
   *    this.random = random;
   * };
   */

  /**
   * @param {Node} head
   * @return {Node}
   */
  var copyRandomList = function(head) {
      if (head == null) {
          return null;
      }
      let cur = head;
      while (cur != null) {
          let node = new Node(cur.val, cur.next);
          cur.next = node;
          cur = node.next;
      }

      cur = head;
      while (cur != null) {
          cur.next.random = cur.random == null ? null : cur.random.next;
          cur = cur.next.next;
      }

      let copy = head.next;
      cur = head;
      while (cur != null) {
          let next = cur.next;
          cur.next = next.next;
          next.next = next.next == null ? null : next.next.next;
          cur = cur.next;
      }
      return copy;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
