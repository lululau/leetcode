* [[https://leetcode-cn.com/problems/word-ladder][127. 单词接龙]]
  :PROPERTIES:
  :CUSTOM_ID: 单词接龙
  :END:
[[./solution/0100-0199/0127.Word Ladder/README_EN.org][English Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

字典 wordList 中从单词 beginWord 和 endWord 的 转换序列
是一个按下述规格形成的序列：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

序列中第一个单词是 beginWord 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

序列中最后一个单词是 endWord 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

每次转换只能改变一个字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

转换过程中的中间单词必须是字典 wordList 中的单词。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你两个单词 beginWord 和 endWord 和一个字典 wordList ，找到从 beginWord
到 endWord 的 最短转换序列 中的 单词数目
。如果不存在这样的转换序列，返回 0。

#+begin_html
  </p>
#+end_html

 

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
  <strong>输出：</strong>5
  <strong>解释：</strong>一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog", 返回它的长度 5。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
  <strong>输出：</strong>0
  <strong>解释：</strong>endWord "cog" 不在字典中，所以无法进行转换。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= beginWord.length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

endWord.length == beginWord.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= wordList.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

wordList[i].length == beginWord.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

beginWord、endWord 和 wordList[i] 由小写英文字母组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

beginWord != endWord

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

wordList 中的所有字符串 互不相同

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
