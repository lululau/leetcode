* [[https://leetcode-cn.com/problems/linked-list-cycle-ii][142. 环形链表
II]]
  :PROPERTIES:
  :CUSTOM_ID: 环形链表-ii
  :END:
[[./solution/0100-0199/0142.Linked List Cycle II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

为了表示给定链表中的环，我们使用整数 pos
来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是
-1，则在该链表中没有环。注意，pos
仅仅是用于标识环的情况，并不会作为参数传递到函数中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

说明：不允许修改给定的链表。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

你是否可以使用 O(1) 空间解决此题？

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [3,2,0,-4], pos = 1
  <strong>输出：</strong>返回索引为 1 的链表节点
  <strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1,2], pos = 0
  <strong>输出：</strong>返回索引为 0 的链表节点
  <strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>head = [1], pos = -1
  <strong>输出：</strong>返回 null
  <strong>解释：</strong>链表中没有环。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

链表中节点的数目范围在范围 [0, 104] 内

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-105 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

pos 的值为 -1 或者链表中的一个有效索引

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

先利用快慢指针判断链表是否有环，没有环则直接返回 =null=。

若链表有环，我们分析快慢相遇时走过的距离。

对于慢指针（每次走 1 步），走过的距离为 =S=X+Y= ①；快指针（每次走 2
步）走过的距离为 =2S=X+Y+N(Y+Z)= ②。如下图所示，其中 =N=
表示快指针与慢指针相遇时在环中所走过的圈数，而我们要求的环入口，也即是
=X= 的距离：

[[./images/linked-list-cycle-ii.png]]

我们根据式子 ①②，得出 =X+Y=N(Y+Z)= => =X=(N-1)(Y+Z)+Z=。

当 =N=1=(快指针在环中走了一圈与慢指针相遇) 时，=X=(1-1)(Y+Z)+Z=，即
=X=Z=。此时只要定义一个 =p= 指针指向头节点，然后慢指针与 =p=
开始同时走，当慢指针与 =p= 相遇时，也就到达了环入口，直接返回 =p= 即可。

当 =N>1=时，也是同样的，说明慢指针除了走 =Z= 步，还需要绕 =N-1= 圈才能与
=p= 相遇。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def detectCycle(self, head: ListNode) -> ListNode:
          slow = fast = head
          has_cycle = False
          while not has_cycle and fast and fast.next:
              slow, fast = slow.next, fast.next.next
              has_cycle = slow == fast
          if not has_cycle:
              return None
          p = head
          while p != slow:
              p, slow = p.next, slow.next
          return p
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for singly-linked list.
   * class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) {
   *         val = x;
   *         next = null;
   *     }
   * }
   */
  public class Solution {
      public ListNode detectCycle(ListNode head) {
          ListNode slow = head, fast = head;
          boolean hasCycle = false;
          while (!hasCycle && fast != null && fast.next != null) {
              slow = slow.next;
              fast = fast.next.next;
              hasCycle = slow == fast;
          }
          if (!hasCycle) {
              return null;
          }
          ListNode p = head;
          while (p != slow) {
              p = p.next;
              slow = slow.next;
          }
          return p;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode *detectCycle(ListNode *head) {
          ListNode* slow = head;
          ListNode* fast = head;
          bool hasCycle = false;
          while (!hasCycle && fast && fast->next) {
              slow = slow->next;
              fast = fast->next->next;
              hasCycle = slow == fast;
          }
          if (!hasCycle) {
              return nullptr;
          }
          ListNode* p = head;
          while (p != slow) {
              p = p->next;
              slow = slow->next;
          }
          return p;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val) {
   *     this.val = val;
   *     this.next = null;
   * }
   */

  /**
   * @param {ListNode} head
   * @return {ListNode}
   */
  var detectCycle = function(head) {
      let slow = head;
      let fast = head;
      let hasCycle = false;
      while (!hasCycle && fast && fast.next) {
          slow = slow.next;
          fast = fast.next.next;
          hasCycle = slow == fast;
      }
      if (!hasCycle) {
          return null;
      }
      let p = head;
      while (p != slow) {
          p = p.next;
          slow = slow.next;
      }
      return p;
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * type ListNode struct {
   *     Val int
   *     Next *ListNode
   * }
   */
  func detectCycle(head *ListNode) *ListNode {
      slow, fast := head, head
      hasCycle := false
      for !hasCycle && fast != nil && fast.Next != nil {
          slow, fast = slow.Next, fast.Next.Next
          hasCycle = slow == fast
      }
      if !hasCycle {
          return nil
      }
      p := head
      for p != slow {
          p, slow = p.Next, slow.Next
      }
      return p
  }
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
