* [[https://leetcode.com/problems/intersection-of-two-linked-lists][160.
Intersection of Two Linked Lists]]
  :PROPERTIES:
  :CUSTOM_ID: intersection-of-two-linked-lists
  :END:
[[./solution/0100-0199/0160.Intersection of Two Linked Lists/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the heads of two singly linked-lists headA and headB, return the
node at which the two lists intersect. If the two linked lists have no
intersection at all, return null.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For example, the following two linked lists begin to intersect at node
c1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed that there are no cycles anywhere in the entire linked
structure.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that the linked lists must retain their original structure after
the function returns.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
  <strong>Output:</strong> Intersected at &#39;8&#39;
  <strong>Explanation:</strong> The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect).
  From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
  <strong>Output:</strong> Intersected at &#39;2&#39;
  <strong>Explanation:</strong> The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect).
  From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
  <strong>Output:</strong> No intersection
  <strong>Explanation:</strong> From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
  Explanation: The two lists do not intersect, so return null.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes of listA is in the m.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes of listB is in the n.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= m, n <= 3 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= skipA <= m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= skipB <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

intersectVal is 0 if listA and listB do not intersect.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

intersectVal == listA[skipA + 1] == listB[skipB + 1] if listA and listB
intersect.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you write a solution that runs in O(n) time and use
only O(1) memory?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
          cur1, cur2 = headA, headB
          while cur1 != cur2:
              cur1 = headB if cur1 is None else cur1.next
              cur2 = headA if cur2 is None else cur2.next
          return cur1
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) {
   *         val = x;
   *         next = null;
   *     }
   * }
   */
  public class Solution {
      public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
          ListNode cur1 = headA, cur2 = headB;
          while (cur1 != cur2) {
              cur1 = cur1 == null ? headB : cur1.next;
              cur2 = cur2 == null ? headA : cur2.next;
          }
          return cur1;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
          ListNode* cur1 = headA;
          ListNode* cur2 = headB;
          while (cur1 != cur2) {
              cur1 = cur1 ? cur1->next : headB;
              cur2 = cur2 ? cur2->next : headA;
          }
          return cur1;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * Definition for singly-linked list.
   * function ListNode(val) {
   *     this.val = val;
   *     this.next = null;
   * }
   */

  /**
   * @param {ListNode} headA
   * @param {ListNode} headB
   * @return {ListNode}
   */
   var getIntersectionNode = function(headA, headB) {
    let cur1 = headA;
    let cur2 = headB;
    while (cur1 != cur2) {
        cur1 = cur1 ? cur1.next : headB;
        cur2 = cur2 ? cur2.next : headA;
    }
    return cur1;
  };
#+end_src

*** *Go*
    :PROPERTIES:
    :CUSTOM_ID: go
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * type ListNode struct {
   *     Val int
   *     Next *ListNode
   * }
   */
   func getIntersectionNode(headA, headB *ListNode) *ListNode {
      cur1, cur2 := headA, headB
      for cur1 != cur2 {
          if cur1 == nil {
              cur1 = headB
          } else {
              cur1 = cur1.Next
          }
          if cur2 == nil {
              cur2 = headA
          } else {
              cur2 = cur2.Next
          }
      }
      return cur1
  }
#+end_example

*** *TypeScript*
    :PROPERTIES:
    :CUSTOM_ID: typescript
    :END:
#+begin_example
  /**
   * Definition for singly-linked list.
   * class ListNode {
   *     val: number
   *     next: ListNode | null
   *     constructor(val?: number, next?: ListNode | null) {
   *         this.val = (val===undefined ? 0 : val)
   *         this.next = (next===undefined ? null : next)
   *     }
   * }
   */

  function getIntersectionNode(headA: ListNode | null, headB: ListNode | null): ListNode | null {
      let p1: ListNode | null = headA;
      let p2: ListNode | null = headB;
      while (p1 != p2) {
          p1 = p1 == null ? headB : p1.next;
          p2 = p2 == null ? headA : p2.next;
      }
      return p1;
  };
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
