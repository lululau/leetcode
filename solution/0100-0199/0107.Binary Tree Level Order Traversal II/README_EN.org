* [[https://leetcode.com/problems/binary-tree-level-order-traversal-ii][107.
Binary Tree Level Order Traversal II]]
  :PROPERTIES:
  :CUSTOM_ID: binary-tree-level-order-traversal-ii
  :END:
[[./solution/0100-0199/0107.Binary Tree Level Order Traversal II/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary tree, return the bottom-up level order
traversal of its nodes' values. (i.e., from left to right, level by
level from leaf to root).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [3,9,20,null,null,15,7]
  <strong>Output:</strong> [[15,7],[9,20],[3]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1]
  <strong>Output:</strong> [[1]]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [0, 2000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1000 <= Node.val <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
          if root is None:
              return []
          q = [root]
          res = []
          while q:
              size = len(q)
              t = []
              for _ in range(size):
                  node = q.pop(0)
                  t.append(node.val)
                  if node.left is not None:
                      q.append(node.left)
                  if node.right is not None:
                      q.append(node.right)
              res.append(t)
          return res[::-1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public List<List<Integer>> levelOrderBottom(TreeNode root) {
          if (root == null) return Collections.emptyList();
          Deque<TreeNode> q = new ArrayDeque<>();
          List<List<Integer>> res = new ArrayList<>();
          q.offer(root);
          while (!q.isEmpty()) {
              int size = q.size();
              List<Integer> t = new ArrayList<>();
              while (size-- > 0) {
                  TreeNode node = q.poll();
                  t.add(node.val);
                  if (node.left != null) q.offer(node.left);
                  if (node.right != null) q.offer(node.right);
              }
              res.add(0, t);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
