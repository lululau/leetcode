* [[https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii][107.
二叉树的层序遍历 II]]
  :PROPERTIES:
  :CUSTOM_ID: 二叉树的层序遍历-ii
  :END:
[[./solution/0100-0199/0107.Binary Tree Level Order Traversal II/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树，返回其节点值自底向上的层序遍历。
（即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如： 给定二叉树 [3,9,20,null,null,15,7],

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
      3
     / \
    9  20
      /  \
     15   7
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

返回其自底向上的层序遍历为：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  [
    [15,7],
    [9,20],
    [3]
  ]
  </pre>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

同
[[./solution/0100-0199/0102.Binary Tree Level Order Traversal/README.org][102]]，最后反转一下结果即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
          if root is None:
              return []
          q = [root]
          res = []
          while q:
              size = len(q)
              t = []
              for _ in range(size):
                  node = q.pop(0)
                  t.append(node.val)
                  if node.left is not None:
                      q.append(node.left)
                  if node.right is not None:
                      q.append(node.right)
              res.append(t)
          return res[::-1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public List<List<Integer>> levelOrderBottom(TreeNode root) {
          if (root == null) return Collections.emptyList();
          Deque<TreeNode> q = new ArrayDeque<>();
          List<List<Integer>> res = new ArrayList<>();
          q.offer(root);
          while (!q.isEmpty()) {
              int size = q.size();
              List<Integer> t = new ArrayList<>();
              while (size-- > 0) {
                  TreeNode node = q.poll();
                  t.add(node.val);
                  if (node.left != null) q.offer(node.left);
                  if (node.right != null) q.offer(node.right);
              }
              res.add(0, t);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
