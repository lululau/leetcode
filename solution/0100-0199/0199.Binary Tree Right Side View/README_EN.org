* [[https://leetcode.com/problems/binary-tree-right-side-view][199.
Binary Tree Right Side View]]
  :PROPERTIES:
  :CUSTOM_ID: binary-tree-right-side-view
  :END:
[[./solution/0100-0199/0199.Binary Tree Right Side View/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary tree, imagine yourself standing on the right
side of it, return the values of the nodes you can see ordered from top
to bottom.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2,3,null,5,null,4]
  <strong>Output:</strong> [1,3,4]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,null,3]
  <strong>Output:</strong> [1,3]
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = []
  <strong>Output:</strong> []
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [0, 100].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  class Solution:
      def rightSideView(self, root: TreeNode) -> List[int]:
          if not root:
              return []
          q = collections.deque([root])
          res = []
          while q:
              size = len(q)
              res.append(q[0].val)
              for _ in range(size):
                  node = q.popleft()
                  if node.right:
                      q.append(node.right)
                  if node.left:
                      q.append(node.left)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      public List<Integer> rightSideView(TreeNode root) {
          if (root == null) return Collections.emptyList();
          Deque<TreeNode> q = new ArrayDeque<>();
          q.offer(root);
          List<Integer> res = new ArrayList<>();
          while (!q.isEmpty()) {
              int size = q.size();
              res.add(q.peek().val);
              while (size-- > 0) {
                  TreeNode node = q.poll();
                  if (node.right != null) q.offer(node.right);
                  if (node.left != null) q.offer(node.left);
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
