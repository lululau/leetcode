* [[https://leetcode.com/problems/symmetric-tree][101. Symmetric Tree]]
  :PROPERTIES:
  :CUSTOM_ID: symmetric-tree
  :END:
[[./solution/0100-0199/0101.Symmetric Tree/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the root of a binary tree, check whether it is a mirror of itself
(i.e., symmetric around its center).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2,2,3,4,4,3]
  <strong>Output:</strong> true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> root = [1,2,2,null,3,null,3]
  <strong>Output:</strong> false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the tree is in the range [1, 1000].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= Node.val <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

Follow up: Could you solve it both recursively and iteratively?

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def isSymmetric(self, root: TreeNode) -> bool:
          if root is None:
              return True
          return self.is_symmetric(root.left, root.right)

      def is_symmetric(self, left: TreeNode, right: TreeNode) -> bool:
          if left is None and right is None:
              return True
          if left is None or right is None or left.val != right.val:
              return False
          return self.is_symmetric(left.left, right.right) and self.is_symmetric(left.right, right.left)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public boolean isSymmetric(TreeNode root) {
          if (root == null) return true;
          return isSymmetric(root.left, root.right);
      }

      private boolean isSymmetric(TreeNode left, TreeNode right) {
          if (left == null && right == null) return true;
          if (left == null || right == null || left.val != right.val) return false;
          return isSymmetric(left.left, right.right) && isSymmetric(left.right, right.left);
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool isSymmetric(TreeNode* root) {
          if (!root) return true;
          return isSymmetric(root->left, root->right);
      }

  private:
      bool isSymmetric(TreeNode* left, TreeNode* right) {
          if (!left && !right) return true;
          if (!left && right || left && !right || left->val != right->val) return false;
          return isSymmetric(left->left, right->right) && isSymmetric(left->right, right->left);
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
