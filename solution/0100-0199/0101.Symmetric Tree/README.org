* [[https://leetcode-cn.com/problems/symmetric-tree][101. 对称二叉树]]
  :PROPERTIES:
  :CUSTOM_ID: 对称二叉树
  :END:
[[./solution/0100-0199/0101.Symmetric Tree/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给定一个二叉树，检查它是否是镜像对称的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>    1
     / \
    2   2
   / \ / \
  3  4 4  3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>    1
     / \
    2   2
     \   \
     3    3
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

进阶：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你可以运用递归和迭代两种方法解决这个问题吗？

#+begin_html
  </p>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def isSymmetric(self, root: TreeNode) -> bool:
          if root is None:
              return True
          return self.is_symmetric(root.left, root.right)

      def is_symmetric(self, left: TreeNode, right: TreeNode) -> bool:
          if left is None and right is None:
              return True
          if left is None or right is None or left.val != right.val:
              return False
          return self.is_symmetric(left.left, right.right) and self.is_symmetric(left.right, right.left)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {
      public boolean isSymmetric(TreeNode root) {
          if (root == null) return true;
          return isSymmetric(root.left, root.right);
      }

      private boolean isSymmetric(TreeNode left, TreeNode right) {
          if (left == null && right == null) return true;
          if (left == null || right == null || left.val != right.val) return false;
          return isSymmetric(left.left, right.right) && isSymmetric(left.right, right.left);
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool isSymmetric(TreeNode* root) {
          if (!root) return true;
          return isSymmetric(root->left, root->right);
      }

  private:
      bool isSymmetric(TreeNode* left, TreeNode* right) {
          if (!left && !right) return true;
          if (!left && right || left && !right || left->val != right->val) return false;
          return isSymmetric(left->left, right->right) && isSymmetric(left->right, right->left);
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
