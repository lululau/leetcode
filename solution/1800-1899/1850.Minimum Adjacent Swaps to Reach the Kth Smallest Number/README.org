* [[https://leetcode-cn.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number][1850.
邻位交换的最小次数]]
  :PROPERTIES:
  :CUSTOM_ID: 邻位交换的最小次数
  :END:
[[./solution/1800-1899/1850.Minimum Adjacent Swaps to Reach the Kth Smallest Number/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个表示大整数的字符串 num ，和一个整数 k 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果某个整数是 num 中各位数字的一个 排列 且它的 值大于 num
，则称这个整数为 妙数 。可能存在很多妙数，但是只需要关注 值最小 的那些。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

例如，num = "5489355142" ：

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

第 1 个最小妙数是 "5489355214"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第 2 个最小妙数是 "5489355241"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第 3 个最小妙数是 "5489355412"

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第 4 个最小妙数是 "5489355421"

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_example
  </li>
#+end_example

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

返回要得到第 k 个 最小妙数 需要对 num 执行的 相邻位数字交换的最小次数 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

测试用例是按存在第 k 个最小妙数而生成的。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>num = "5489355142", k = 4
  <strong>输出：</strong>2
  <strong>解释：</strong>第 4 个最小妙数是 "5489355421" ，要想得到这个数字：
  - 交换下标 7 和下标 8 对应的位："5489355<strong>14</strong>2" -&gt; "5489355<strong>41</strong>2"
  - 交换下标 8 和下标 9 对应的位："54893554<strong>12</strong>" -&gt; "54893554<strong>21</strong>"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>num = "11112", k = 4
  <strong>输出：</strong>4
  <strong>解释：</strong>第 4 个最小妙数是 "21111" ，要想得到这个数字：
  - 交换下标 3 和下标 4 对应的位："111<strong>12</strong>" -&gt; "111<strong>21</strong>"
  - 交换下标 2 和下标 3 对应的位："11<strong>12</strong>1" -&gt; "11<strong>21</strong>1"
  - 交换下标 1 和下标 2 对应的位："1<strong>12</strong>11" -&gt; "1<strong>21</strong>11"
  - 交换下标 0 和下标 1 对应的位："<strong>12</strong>111" -&gt; "<strong>21</strong>111"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>num = "00123", k = 1
  <strong>输出：</strong>1
  <strong>解释：</strong>第 1 个最小妙数是 "00132" ，要想得到这个数字：
  - 交换下标 3 和下标 4 对应的位："001<strong>23</strong>" -&gt; "001<strong>32</strong>"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= num.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

num 仅由数字组成

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
