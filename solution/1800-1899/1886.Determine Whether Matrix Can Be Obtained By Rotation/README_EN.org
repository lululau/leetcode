* [[https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation][1886.
Determine Whether Matrix Can Be Obtained By Rotation]]
  :PROPERTIES:
  :CUSTOM_ID: determine-whether-matrix-can-be-obtained-by-rotation
  :END:
[[./solution/1800-1899/1886.Determine Whether Matrix Can Be Obtained By Rotation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given two n x n binary matrices mat and target, return true if it is
possible to make mat equal to target by rotating mat in 90-degree
increments, or false otherwise.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
  <strong>Output:</strong> true
  <strong>Explanation: </strong>We can rotate mat 90 degrees clockwise to make mat equal target.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
  <strong>Output:</strong> false
  <strong>Explanation:</strong> It is impossible to make mat equal to target by rotating mat.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
  <strong>Output:</strong> true
  <strong>Explanation: </strong>We can rotate mat 90 degrees clockwise two times to make mat equal target.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == mat.length == target.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == mat[i].length == target[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

mat[i][j] and target[i][j] are either 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:
          def rotate(matrix):
              n = len(matrix)
              for i in range(n // 2):
                  for j in range(i, n - 1 - i):
                      t = matrix[i][j]
                      matrix[i][j] = matrix[n - j - 1][i]
                      matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]
                      matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]
                      matrix[j][n - i - 1] = t
          for _ in range(4):
              if mat == target:
                  return True
              rotate(mat)
          return False
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public boolean findRotation(int[][] mat, int[][] target) {
          int times = 4;
          while (times-- > 0) {
              if (equals(mat, target)) {
                  return true;
              }
              rotate(mat);
          }
          return false;
      }
      
      private void rotate(int[][] matrix) {
          int n = matrix.length;
          for (int i = 0; i < n / 2; ++i) {
              for (int j = i; j < n - 1 - i; ++j) {
                  int t = matrix[i][j];
                  matrix[i][j] = matrix[n - j - 1][i];
                  matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                  matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                  matrix[j][n - i - 1] = t;
              }
          }
      }
      
      private boolean equals(int[][] nums1, int[][] nums2) {
          int n = nums1.length;
          for (int i = 0; i < n; ++i) {
              for (int j = 0; j < n; ++j) {
                  if (nums1[i][j] != nums2[i][j]) {
                      return false;
                  }
              }
          }
          return true;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
