* [[https://leetcode.com/problems/implement-trie-ii-prefix-tree][1804.
Implement Trie II (Prefix Tree)]]
  :PROPERTIES:
  :CUSTOM_ID: implement-trie-ii-prefix-tree
  :END:
[[./solution/1800-1899/1804.Implement Trie II %28Prefix Tree%29/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A trie (pronounced as "try") or prefix tree is a tree data structure
used to efficiently store and retrieve keys in a dataset of strings.
There are various applications of this data structure, such as
autocomplete and spellchecker.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the Trie class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Trie() Initializes the trie object.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void insert(String word) Inserts the string word into the trie.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int countWordsEqualTo(String word) Returns the number of instances of
the string word in the trie.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int countWordsStartingWith(String prefix) Returns the number of strings
in the trie that have the string prefix as a prefix.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void erase(String word) Erases the string word from the trie.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;Trie&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;countWordsEqualTo&quot;, &quot;countWordsStartingWith&quot;, &quot;erase&quot;, &quot;countWordsEqualTo&quot;, &quot;countWordsStartingWith&quot;, &quot;erase&quot;, &quot;countWordsStartingWith&quot;]
  [[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;apple&quot;], [&quot;app&quot;]]
  <strong>Output</strong>
  [null, null, null, 2, 2, null, 1, 1, null, 0]

  <strong>Explanation</strong>
  Trie trie = new Trie();
  trie.insert(&quot;apple&quot;);               // Inserts &quot;apple&quot;.
  trie.insert(&quot;apple&quot;);               // Inserts another &quot;apple&quot;.
  trie.countWordsEqualTo(&quot;apple&quot;);    // There are two instances of &quot;apple&quot; so return 2.
  trie.countWordsStartingWith(&quot;app&quot;); // &quot;app&quot; is a prefix of &quot;apple&quot; so return 2.
  trie.erase(&quot;apple&quot;);                // Erases one &quot;apple&quot;.
  trie.countWordsEqualTo(&quot;apple&quot;);    // Now there is only one instance of &quot;apple&quot; so return 1.
  trie.countWordsStartingWith(&quot;app&quot;); // return 1
  trie.erase(&quot;apple&quot;);                // Erases &quot;apple&quot;. Now the trie is empty.
  trie.countWordsStartingWith(&quot;app&quot;); // return 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= word.length, prefix.length <= 2000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

word and prefix consist only of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 3 * 104 calls in total will be made to insert,
countWordsEqualTo, countWordsStartingWith, and erase.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

It is guaranteed that for any function call to erase, the string word
will exist in the trie.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Trie:

      def __init__(self):
          self.children = [None] * 26
          self.count = 0
          self.pre_count = 0

      def insert(self, word: str) -> None:
          node = self
          for c in word:
              index = ord(c) - ord('a')
              if node.children[index] is None:
                  node.children[index] = Trie()
              node = node.children[index]
              node.pre_count += 1
          node.count += 1

      def countWordsEqualTo(self, word: str) -> int:
          node = self._search_prefix(word)
          return 0 if node is None else node.count

      def countWordsStartingWith(self, prefix: str) -> int:
          node = self._search_prefix(prefix)
          return 0 if node is None else node.pre_count

      def erase(self, word: str) -> None:
          node = self
          for c in word:
              index = ord(c) - ord('a')
              node = node.children[index]
              node.pre_count -= 1
          node.count -= 1

      def _search_prefix(self, prefix: str):
          node = self
          for c in prefix:
              index = ord(c) - ord('a')
              if node.children[index] is None:
                  return None
              node = node.children[index]
          return node

  # Your Trie object will be instantiated and called as such:
  # obj = Trie()
  # obj.insert(word)
  # param_2 = obj.countWordsEqualTo(word)
  # param_3 = obj.countWordsStartingWith(prefix)
  # obj.erase(word)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Trie {
      private Trie[] children;
      private int count;
      private int preCount;

      public Trie() {
          children = new Trie[26];
          count = 0;
          preCount = 0;
      }
      
      public void insert(String word) {
          Trie node = this;
          for (int i = 0; i < word.length(); ++i) {
              int index = word.charAt(i) - 'a';
              if (node.children[index] == null) {
                  node.children[index] = new Trie();
              }
              node = node.children[index];
              node.preCount += 1;
          }
          node.count += 1;
      }
      
      public int countWordsEqualTo(String word) {
          Trie node = searchPrefix(word);
          return node == null ? 0 : node.count;
      }
      
      public int countWordsStartingWith(String prefix) {
          Trie node = searchPrefix(prefix);
          return node == null ? 0 : node.preCount;
      }
      
      public void erase(String word) {
          Trie node = this;
          for (int i = 0; i < word.length(); ++i) {
              int index = word.charAt(i) - 'a';
              node = node.children[index];
              node.preCount -= 1;
          }
          node.count -= 1;
      }

      private Trie searchPrefix(String prefix) {
          Trie node = this;
          for (int i = 0; i < prefix.length(); ++i) {
              int index = prefix.charAt(i) - 'a';
              if (node.children[index] == null) {
                  return null;
              }
              node = node.children[index];
          }
          return node;
      }
  }

  /**
   * Your Trie object will be instantiated and called as such:
   * Trie obj = new Trie();
   * obj.insert(word);
   * int param_2 = obj.countWordsEqualTo(word);
   * int param_3 = obj.countWordsStartingWith(prefix);
   * obj.erase(word);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
