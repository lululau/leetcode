* [[https://leetcode-cn.com/problems/maximum-ascending-subarray-sum][1800.
最大升序子数组和]]
  :PROPERTIES:
  :CUSTOM_ID: 最大升序子数组和
  :END:
[[./solution/1800-1899/1800.Maximum Ascending Subarray Sum/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个正整数组成的数组 nums ，返回 nums 中一个 升序
子数组的最大可能元素和。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

子数组是数组中的一个连续数字序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

已知子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，若对所有 i（l <= i <
r），numsi < numsi+1 都成立，则称这一子数组为 升序 子数组。注意，大小为
1 的子数组也视作 升序 子数组。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [10,20,30,5,10,50]
  <strong>输出：</strong>65
  <strong>解释：</strong>[5,10,50] 是元素和最大的升序子数组，最大元素和为 65 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [10,20,30,40,50]
  <strong>输出：</strong>150
  <strong>解释：</strong>[10,20,30,40,50] 是元素和最大的升序子数组，最大元素和为 150 。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [12,17,15,13,10,11,12]
  <strong>输出：</strong>33
  <strong>解释：</strong>[10,11,12] 是元素和最大的升序子数组，最大元素和为 33 。 
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [100,10,1]
  <strong>输出：</strong>100
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
