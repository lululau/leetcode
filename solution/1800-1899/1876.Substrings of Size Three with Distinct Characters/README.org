* [[https://leetcode-cn.com/problems/substrings-of-size-three-with-distinct-characters][1876.
长度为三且各字符不同的子字符串]]
  :PROPERTIES:
  :CUSTOM_ID: 长度为三且各字符不同的子字符串
  :END:
[[./solution/1800-1899/1876.Substrings of Size Three with Distinct Characters/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

如果一个字符串不含有任何重复字符，我们称这个字符串为 好 字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 s ，请你返回 s 中长度为 3 的 好子字符串 的数量。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

注意，如果相同的好子字符串出现多次，每一次都应该被记入答案之中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

子字符串 是一个字符串中连续的字符序列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>s = "xyzzaz"
  <b>输出：</b>1
  <b>解释：</b>总共有 4 个长度为 3 的子字符串："xyz"，"yzz"，"zza" 和 "zaz" 。
  唯一的长度为 3 的好子字符串是 "xyz" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>s = "aababcabc"
  <b>输出：</b>4
  <b>解释：</b>总共有 7 个长度为 3 的子字符串："aab"，"aba"，"bab"，"abc"，"bca"，"cab" 和 "abc" 。
  好子字符串包括 "abc"，"bca"，"cab" 和 "abc" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s​​​​​​ 只包含小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def countGoodSubstrings(self, s: str) -> int:
          count, n = 0, len(s)
          for i in range(n - 2):
              count += (s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2])
          return count
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int countGoodSubstrings(String s) {
          int count = 0, n = s.length();
          for (int i = 0; i < n - 2; ++i) {
              char a = s.charAt(i), b = s.charAt(i + 1), c = s.charAt(i + 2);
              if (a != b && a != c && b != c) {
                  ++count;
              }
          }
          return count;
      }
  }
#+end_src

*** *TypeScript*
    :PROPERTIES:
    :CUSTOM_ID: typescript
    :END:
#+begin_example
  function countGoodSubstrings(s: string): number {
      const n: number = s.length;
      let count: number = 0;
      for (let i: number = 0; i < n - 2; ++i) {
          let a: string = s.charAt(i), b: string = s.charAt(i + 1), c: string = s.charAt(i + 2);
          if (a != b && a != c && b != c) {
              ++count;
          }
      }
      return count;
  };
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
