* [[https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters][1876.
Substrings of Size Three with Distinct Characters]]
  :PROPERTIES:
  :CUSTOM_ID: substrings-of-size-three-with-distinct-characters
  :END:
[[./solution/1800-1899/1876.Substrings of Size Three with Distinct Characters/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A string is good if there are no repeated characters.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given a string s​​​​​, return the number of good substrings of length
three in s​​​​​​.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note that if there are multiple occurrences of the same substring, every
occurrence should be counted.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A substring is a contiguous sequence of characters in a string.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;xyzzaz&quot;
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> There are 4 substrings of size 3: &quot;xyz&quot;, &quot;yzz&quot;, &quot;zza&quot;, and &quot;zaz&quot;. 
  The only good substring of length 3 is &quot;xyz&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;aababcabc&quot;
  <strong>Output:</strong> 4
  <strong>Explanation:</strong> There are 7 substrings of size 3: &quot;aab&quot;, &quot;aba&quot;, &quot;bab&quot;, &quot;abc&quot;, &quot;bca&quot;, &quot;cab&quot;, and &quot;abc&quot;.
  The good substrings are &quot;abc&quot;, &quot;bca&quot;, &quot;cab&quot;, and &quot;abc&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s​​​​​​ consists of lowercase English letters.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def countGoodSubstrings(self, s: str) -> int:
          count, n = 0, len(s)
          for i in range(n - 2):
              count += (s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2])
          return count
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int countGoodSubstrings(String s) {
          int count = 0, n = s.length();
          for (int i = 0; i < n - 2; ++i) {
              char a = s.charAt(i), b = s.charAt(i + 1), c = s.charAt(i + 2);
              if (a != b && a != c && b != c) {
                  ++count;
              }
          }
          return count;
      }
  }
#+end_src

*** *TypeScript*
    :PROPERTIES:
    :CUSTOM_ID: typescript
    :END:
#+begin_example
  function countGoodSubstrings(s: string): number {
      const n: number = s.length;
      let count: number = 0;
      for (let i: number = 0; i < n - 2; ++i) {
          let a: string = s.charAt(i), b: string = s.charAt(i + 1), c: string = s.charAt(i + 2);
          if (a != b && a != c && b != c) {
              ++count;
          }
      }
      return count;
  };
#+end_example

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
