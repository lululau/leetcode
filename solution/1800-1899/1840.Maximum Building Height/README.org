* [[https://leetcode-cn.com/problems/maximum-building-height][1840.
最高建筑高度]]
  :PROPERTIES:
  :CUSTOM_ID: 最高建筑高度
  :END:
[[./solution/1800-1899/1840.Maximum Building Height/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

在一座城市里，你需要建 n 栋新的建筑。这些新的建筑会从 1 到
n 编号排成一列。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

这座城市对这些新建筑有一些规定：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

每栋建筑的高度必须是一个非负整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

第一栋建筑的高度 必须 是 0 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

任意两栋相邻建筑的高度差 不能超过  1 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

除此以外，某些建筑还有额外的最高高度限制。这些限制会以二维整数数组 restrictions 的形式给出，其中 restrictions[i]
= [idi, maxHeighti] ，表示建筑 idi 的高度 不能超过 maxHeighti 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

题目保证每栋建筑在 restrictions 中 至多出现一次 ，同时建筑
1 不会 出现在 restrictions 中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回 最高 建筑能达到的 最高高度 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>n = 5, restrictions = [[2,1],[4,1]]
  <b>输出：</b>2
  <b>解释：</b>上图中的绿色区域为每栋建筑被允许的最高高度。
  我们可以使建筑高度分别为 [0,1,2,1,2] ，最高建筑的高度为 2 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>n = 6, restrictions = []
  <b>输出：</b>5
  <b>解释：</b>上图中的绿色区域为每栋建筑被允许的最高高度。
  我们可以使建筑高度分别为 [0,1,2,3,4,5] ，最高建筑的高度为 5 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]
  <b>输出：</b>5
  <b>解释：</b>上图中的绿色区域为每栋建筑被允许的最高高度。
  我们可以使建筑高度分别为 [0,1,2,3,3,4,4,5,4,3] ，最高建筑的高度为 5 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= restrictions.length <= min(n - 1, 105)

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= idi <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

idi 是 唯一的 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= maxHeighti <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
