* [[https://leetcode-cn.com/problems/evaluate-the-bracket-pairs-of-a-string][1807.
替换字符串中的括号内容]]
  :PROPERTIES:
  :CUSTOM_ID: 替换字符串中的括号内容
  :END:
[[./solution/1800-1899/1807.Evaluate the Bracket Pairs of a String/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 s ，它包含一些括号对，每个括号中包含一个 非空 的键。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

比方说，字符串 "(name)is(age)yearsold" 中，有 两个 括号对，分别包含键 "name"
和 "age" 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

你知道许多键对应的值，这些关系由二维字符串数组 knowledge 表示，其中 knowledge[i]
= [keyi, valuei] ，表示键 keyi 对应的值为 valuei 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

你需要替换
所有 的括号对。当你替换一个括号对，且它包含的键为 keyi 时，你需要：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

将 keyi 和括号用对应的值 valuei 替换。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果从
knowledge 中无法得知某个键对应的值，你需要将 keyi 和括号用问号 "?" 替换（不需要引号）。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

knowledge 中每个键最多只会出现一次。s 中不会有嵌套的括号。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回替换 所有 括号对后的结果字符串。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>s = "(name)is(age)yearsold", knowledge = [["name","bob"],["age","two"]]
  <b>输出：</b>"bobistwoyearsold"
  <strong>解释：</strong>
  键 "name" 对应的值为 "bob" ，所以将 "(name)" 替换为 "bob" 。
  键 "age" 对应的值为 "two" ，所以将 "(age)" 替换为 "two" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>s = "hi(name)", knowledge = [["a","b"]]
  <b>输出：</b>"hi?"
  <b>解释：</b>由于不知道键 "name" 对应的值，所以用 "?" 替换 "(name)" 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>s = "(a)(a)(a)aaa", knowledge = [["a","yes"]]
  <b>输出：</b>"yesyesyesaaa"
  <b>解释：</b>相同的键在 s 中可能会出现多次。
  键 "a" 对应的值为 "yes" ，所以将所有的 "(a)" 替换为 "yes" 。
  注意，不在括号里的 "a" 不需要被替换。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 4：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>s = "(a)(b)", knowledge = [["a","b"],["b","a"]]
  <b>输出：</b>"ba"</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= knowledge.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

knowledge[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= keyi.length, valuei.length <= 10

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 只包含小写英文字母和圆括号 '(' 和 ')' 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中每一个左圆括号 '(' 都有对应的右圆括号 ')' 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中每对括号内的键都不会为空。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中不会有嵌套括号对。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

keyi 和 valuei 只包含小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

knowledge 中的 keyi 不会重复。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

先将 =knowledge= 转为哈希字典。

然后遍历字符串每个字符 =s[i]=：

- 若 =s[i] == '('=，说明遇到了左括号，因此要找到右括号 =)=
  的位置，然后截取括号间的子串作为 =key=，在哈希字典中查找 =key= 对应的
  =value=，有则追加 =value= 到结果中，没有则追加
  =?=，然后指针跳到右括号位置的下一个位置；
- 若 =s[i]= 是其他字符，则正常追加即可。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def evaluate(self, s: str, knowledge: List[List[str]]) -> str:
          def find_right_bracket(s, start, end):
              for i in range(start, end):
                  if s[i] == ')':
                      return i
          knowledge_dict = {item[0]: item[1] for item in knowledge}
          res, n = [], len(s)
          i = 0
          while i < n:
              if s[i] == '(':
                  right_bracket_pos = find_right_bracket(s, i + 1, n)
                  key = s[i + 1: right_bracket_pos]
                  res.append(knowledge_dict.get(key, '?'))
                  i = right_bracket_pos + 1
              else:
                  res.append(s[i])
                  i += 1
          return ''.join(res)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public String evaluate(String s, List<List<String>> knowledge) {
          Map<String, String> knowledgeDict = new HashMap<>();
          for (List<String> item : knowledge) {
              knowledgeDict.put(item.get(0), item.get(1));
          }
          StringBuilder res = new StringBuilder();
          int i = 0, n = s.length();
          while (i < n) {
              if (s.charAt(i) == '(') {
                  int rightBracketPos = findRightBracket(s, i + 1, n);
                  String key = s.substring(i + 1, rightBracketPos);
                  res.append(knowledgeDict.getOrDefault(key, "?"));
                  i = rightBracketPos + 1;
              } else {
                  res.append(s.charAt(i));
                  i += 1;
              }
          }
          return res.toString();
      }

      private int findRightBracket(String s, int start, int end) {
          for (int i =  start; i < end; ++i) {
              if (s.charAt(i) == ')') {
                  return i;
              }
          }
          return -1;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
