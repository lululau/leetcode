* [[https://leetcode-cn.com/problems/find-the-winner-of-the-circular-game][1823.
找出游戏的获胜者]]
  :PROPERTIES:
  :CUSTOM_ID: 找出游戏的获胜者
  :END:
[[./solution/1800-1899/1823.Find the Winner of the Circular Game/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

共有 n 名小伙伴一起做游戏。小伙伴们围成一圈，按 顺时针顺序 从 1 到 n
编号。确切地说，从第 i 名小伙伴顺时针移动一位会到达第 (i+1)
名小伙伴的位置，其中 1 <= i < n ，从第 n 名小伙伴顺时针移动一位会回到第
1 名小伙伴的位置。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

游戏遵循如下规则：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

从第 1 名小伙伴所在位置 开始 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

沿着顺时针方向数 k 名小伙伴，计数时需要 包含
起始时的那位小伙伴。逐个绕圈进行计数，一些小伙伴可能会被数过不止一次。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

你数到的最后一名小伙伴需要离开圈子，并视作输掉游戏。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果圈子中仍然有不止一名小伙伴，从刚刚输掉的小伙伴的 顺时针下一位 小伙伴
开始，回到步骤 2 继续执行。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

否则，圈子中最后一名小伙伴赢得游戏。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

给你参与游戏的小伙伴总数 n ，和一个整数 k ，返回游戏的获胜者。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 5, k = 2
  <strong>输出：</strong>3
  <strong>解释：</strong>游戏运行步骤如下：
  1) 从小伙伴 1 开始。
  2) 顺时针数 2 名小伙伴，也就是小伙伴 1 和 2 。
  3) 小伙伴 2 离开圈子。下一次从小伙伴 3 开始。
  4) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 4 。
  5) 小伙伴 4 离开圈子。下一次从小伙伴 5 开始。
  6) 顺时针数 2 名小伙伴，也就是小伙伴 5 和 1 。
  7) 小伙伴 1 离开圈子。下一次从小伙伴 3 开始。
  8) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 5 。
  9) 小伙伴 5 离开圈子。只剩下小伙伴 3 。所以小伙伴 3 是游戏的获胜者。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 6, k = 5
  <strong>输出：</strong>1
  <strong>解释：</strong>小伙伴离开圈子的顺序：5、4、6、2、3 。小伙伴 1 是游戏的获胜者。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k <= n <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
