* [[https://leetcode-cn.com/problems/queries-on-number-of-points-inside-a-circle][1828.
统计一个圆中点的数目]]
  :PROPERTIES:
  :CUSTOM_ID: 统计一个圆中点的数目
  :END:
[[./solution/1800-1899/1828.Queries on Number of Points Inside a Circle/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个数组 points ，其中 points[i] = [xi,
yi] ，表示第 i 个点在二维平面上的坐标。多个点可能会有 相同 的坐标。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

同时给你一个数组 queries ，其中 queries[j] = [xj, yj,
rj] ，表示一个圆心在 (xj, yj) 且半径为 rj 的圆。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对于每一个查询 queries[j] ，计算在第 j 个圆
内 点的数目。如果一个点在圆的 边界上 ，我们同样认为它在圆 内 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回一个数组 answer ，其中 answer[j]是第 j 个查询的答案。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]
  <b>输出：</b>[3,2,2]
  <b>解释：</b>所有的点和圆如上图所示。
  queries[0] 是绿色的圆，queries[1] 是红色的圆，queries[2] 是蓝色的圆。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]
  <b>输出：</b>[2,3,2,4]
  <b>解释：</b>所有的点和圆如上图所示。
  queries[0] 是绿色的圆，queries[1] 是红色的圆，queries[2] 是蓝色的圆，queries[3] 是紫色的圆。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= points.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

points[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= x​​​​​​i, y​​​​​​i <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[j].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= xj, yj <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rj <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

所有的坐标都是整数。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
