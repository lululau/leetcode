* [[https://leetcode.com/problems/queries-on-number-of-points-inside-a-circle][1828.
Queries on Number of Points Inside a Circle]]
  :PROPERTIES:
  :CUSTOM_ID: queries-on-number-of-points-inside-a-circle
  :END:
[[./solution/1800-1899/1828.Queries on Number of Points Inside a Circle/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an array points where points[i] = [xi, yi] is the
coordinates of the ith point on a 2D plane. Multiple points can have the
same coordinates.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You are also given an array queries where queries[j] = [xj, yj, rj]
describes a circle centered at (xj, yj) with a radius of rj.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

For each query queries[j], compute the number of points inside the jth
circle. Points on the border of the circle are considered inside.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an array answer, where answer[j] is the answer to the jth query.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]
  <strong>Output:</strong> [3,2,2]
  <b>Explanation: </b>The points and circles are shown above.
  queries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]
  <strong>Output:</strong> [2,3,2,4]
  <b>Explanation: </b>The points and circles are shown above.
  queries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= points.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

points[i].length == 2

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= x​​​​​​i, y​​​​​​i <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= queries.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

queries[j].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= xj, yj <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= rj <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

All coordinates are integers.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Follow up: Could you find the answer for each query in better complexity
than O(n)?

#+begin_html
  </p>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
