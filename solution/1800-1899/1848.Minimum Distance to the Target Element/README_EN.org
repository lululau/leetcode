* [[https://leetcode.com/problems/minimum-distance-to-the-target-element][1848.
Minimum Distance to the Target Element]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-distance-to-the-target-element
  :END:
[[./solution/1800-1899/1848.Minimum Distance to the Target Element/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums (0-indexed) and two integers target and
start, find an index i such that nums[i] == target and abs(i - start) is
minimized. Note that abs(x) is the absolute value of x.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return abs(i - start).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed that target exists in nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,2,3,4,5], target = 5, start = 3
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1], target = 1, start = 0
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 1.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= start < nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target is in nums.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def getMinDistance(self, nums: List[int], target: int, start: int) -> int:
          res = float('inf')
          for i, num in enumerate(nums):
              if num == target:
                  res = min(res, abs(i - start))
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int getMinDistance(int[] nums, int target, int start) {
          int res = Integer.MAX_VALUE;
          for (int i = 0; i < nums.length; ++i) {
              if (nums[i] == target) {
                  res = Math.min(res, Math.abs(i - start));
              }
          }
          return res;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int getMinDistance(vector<int>& nums, int target, int start) {
          int res = nums.size();
          for (int i = 0; i < nums.size(); ++i) {
              if (nums[i] == target) {
                  res = min(res, abs(i - start));
              }
          }
          return res;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
