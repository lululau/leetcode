* [[https://leetcode-cn.com/problems/minimum-distance-to-the-target-element][1848.
到目标元素的最小距离]]
  :PROPERTIES:
  :CUSTOM_ID: 到目标元素的最小距离
  :END:
[[./solution/1800-1899/1848.Minimum Distance to the Target Element/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums （下标 从 0 开始 计数）以及两个整数 target 和
start ，请你找出一个下标 i ，满足 nums[i] == target 且 abs(i - start)
最小化 。注意：abs(x) 表示 x 的绝对值。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回 abs(i - start) 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

题目数据保证 target 存在于 nums 中。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [1,2,3,4,5], target = 5, start = 3
  <strong>输出：</strong>1
  <strong>解释：</strong>nums[4] = 5 是唯一一个等于 target 的值，所以答案是 abs(4 - 3) = 1 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [1], target = 1, start = 0
  <strong>输出：</strong>0
  <strong>解释：</strong>nums[0] = 1 是唯一一个等于 target 的值，所以答案是 abs(0 - 0) = 1 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0
  <strong>输出：</strong>0
  <strong>解释：</strong>nums 中的每个值都是 1 ，但 nums[0] 使 abs(i - start) 的结果得以最小化，所以答案是 abs(0 - 0) = 0 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= start < nums.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

target 存在于 nums 中

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def getMinDistance(self, nums: List[int], target: int, start: int) -> int:
          res = float('inf')
          for i, num in enumerate(nums):
              if num == target:
                  res = min(res, abs(i - start))
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int getMinDistance(int[] nums, int target, int start) {
          int res = Integer.MAX_VALUE;
          for (int i = 0; i < nums.length; ++i) {
              if (nums[i] == target) {
                  res = Math.min(res, Math.abs(i - start));
              }
          }
          return res;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int getMinDistance(vector<int>& nums, int target, int start) {
          int res = nums.size();
          for (int i = 0; i < nums.size(); ++i) {
              if (nums[i] == target) {
                  res = min(res, abs(i - start));
              }
          }
          return res;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
