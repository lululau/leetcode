* [[https://leetcode.com/problems/finding-mk-average][1825. Finding MK
Average]]
  :PROPERTIES:
  :CUSTOM_ID: finding-mk-average
  :END:
[[./solution/1800-1899/1825.Finding MK Average/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two integers, m and k, and a stream of integers. You are
tasked to implement a data structure that calculates the MKAverage for
the stream.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The MKAverage can be calculated using these steps:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

If the number of the elements in the stream is less than m you should
consider the MKAverage to be -1. Otherwise, copy the last m elements of
the stream to a separate container.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Remove the smallest k elements and the largest k elements from the
container.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Calculate the average value for the rest of the elements rounded down to
the nearest integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the MKAverage class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MKAverage(int m, int k) Initializes the MKAverage object with an empty
stream and the two integers m and k.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void addElement(int num) Inserts a new element num into the stream.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int calculateMKAverage() Calculates and returns the MKAverage for the
current stream rounded down to the nearest integer.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;MKAverage&quot;, &quot;addElement&quot;, &quot;addElement&quot;, &quot;calculateMKAverage&quot;, &quot;addElement&quot;, &quot;calculateMKAverage&quot;, &quot;addElement&quot;, &quot;addElement&quot;, &quot;addElement&quot;, &quot;calculateMKAverage&quot;]
  [[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
  <strong>Output</strong>
  [null, null, null, -1, null, 3, null, null, null, 5]

  <strong>Explanation</strong>
  MKAverage obj = new MKAverage(3, 1); 
  obj.addElement(3);        // current elements are [3]
  obj.addElement(1);        // current elements are [3,1]
  obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.
  obj.addElement(10);       // current elements are [3,1,10]
  obj.calculateMKAverage(); // The last 3 elements are [3,1,10].
                            // After removing smallest and largest 1 element the container will be <code>[3].
                            // The average of [3] equals 3/1 = 3, return 3
  obj.addElement(5);        // current elements are [3,1,10,5]
  obj.addElement(5);        // current elements are [3,1,10,5,5]
  obj.addElement(5);        // current elements are [3,1,10,5,5,5]
  obj.calculateMKAverage(); // The last 3 elements are [5,5,5].
                            // After removing smallest and largest 1 element the container will be <code>[5].
                            // The average of [5] equals 5/1 = 5, return 5
  </code></code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= m <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k*2 < m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= num <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 105 calls will be made to addElement and calculateMKAverage.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
