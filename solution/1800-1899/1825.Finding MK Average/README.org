* [[https://leetcode-cn.com/problems/finding-mk-average][1825. 求出 MK
平均值]]
  :PROPERTIES:
  :CUSTOM_ID: 求出-mk-平均值
  :END:
[[./solution/1800-1899/1825.Finding MK Average/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个整数 m 和 k ，以及数据流形式的若干整数。你需要实现一个数据结构，计算这个数据流的
MK 平均值 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

MK 平均值 按照如下步骤计算：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

如果数据流中的整数少于 m 个，MK 平均值 为 -1 ，否则将数据流中最后
m 个元素拷贝到一个独立的容器中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

从这个容器中删除最小的 k 个数和最大的 k 个数。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

计算剩余元素的平均值，并 向下取整到最近的整数 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

请你实现 MKAverage 类：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

MKAverage(int m, int k) 用一个空的数据流和两个整数 m 和
k 初始化 MKAverage 对象。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void addElement(int num) 往数据流中插入一个新的元素 num 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int calculateMKAverage() 对当前的数据流计算并返回 MK 平均数 ，结果需
向下取整到最近的整数 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>
  ["MKAverage", "addElement", "addElement", "calculateMKAverage", "addElement", "calculateMKAverage", "addElement", "addElement", "addElement", "calculateMKAverage"]
  [[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
  <strong>输出：</strong>
  [null, null, null, -1, null, 3, null, null, null, 5]

  <strong>解释：</strong>
  MKAverage obj = new MKAverage(3, 1); 
  obj.addElement(3);        // 当前元素为 [3]
  obj.addElement(1);        // 当前元素为 [3,1]
  obj.calculateMKAverage(); // 返回 -1 ，因为 m = 3 ，但数据流中只有 2 个元素
  obj.addElement(10);       // 当前元素为 [3,1,10]
  obj.calculateMKAverage(); // 最后 3 个元素为 [3,1,10]
                            // 删除最小以及最大的 1 个元素后，容器为 <code>[3]
                            // [3] 的平均值等于 3/1 = 3 ，故返回 3
  obj.addElement(5);        // 当前元素为 [3,1,10,5]
  obj.addElement(5);        // 当前元素为 [3,1,10,5,5]
  obj.addElement(5);        // 当前元素为 [3,1,10,5,5,5]
  obj.calculateMKAverage(); // 最后 3 个元素为 [5,5,5]
                            // </code>删除最小以及最大的 1 个元素后，容器为 <code>[5]<code>
                            // </code>[5] 的平均值等于 5/1 = 5 ，故返回 5<code>
  </code></code></pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

3 <= m <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= k*2 < m

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= num <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

addElement 与 calculateMKAverage 总操作次数不超过 105 次。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
