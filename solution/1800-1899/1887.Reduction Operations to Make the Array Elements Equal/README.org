* [[https://leetcode-cn.com/problems/reduction-operations-to-make-the-array-elements-equal][1887.
使数组元素相等的减少操作次数]]
  :PROPERTIES:
  :CUSTOM_ID: 使数组元素相等的减少操作次数
  :END:
[[./solution/1800-1899/1887.Reduction Operations to Make the Array Elements Equal/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个整数数组 nums ，你的目标是令 nums
中的所有元素相等。完成一次减少操作需要遵照下面的几个步骤：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

找出 nums 中的 最大 值。记这个值为 largest 并取其下标 i （下标从 0
开始计数）。如果有多个元素都是最大值，则取最小的 i 。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

找出 nums 中的 下一个最大 值，这个值 严格小于 largest ，记为 nextLargest
。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

将 nums[i] 减少到 nextLargest 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

返回使 nums 中的所有元素相等的操作次数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [5,1,3]
  <strong>输出：</strong>3
  <strong>解释：</strong>需要 3 次操作使 nums 中的所有元素相等：
  1. largest = 5 下标为 0 。nextLargest = 3 。将 nums[0] 减少到 3 。nums = [<strong>3</strong>,1,3] 。
  2. largest = 3 下标为 0 。nextLargest = 1 。将 nums[0] 减少到 1 。nums = [<strong>1</strong>,1,3] 。
  3. largest = 3 下标为 2 。nextLargest = 1 。将 nums[2] 减少到 1 。nums = [<strong>1</strong>,1,<strong>1</strong>] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,1,1]
  <strong>输出：</strong>0
  <strong>解释：</strong>nums 中的所有元素已经是相等的。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>nums = [1,1,2,2,3]
  <strong>输出：</strong>4
  <strong>解释：</strong>需要 4 次操作使 nums 中的所有元素相等：
  1. largest = 3 下标为 4 。nextLargest = 2 。将 nums[4] 减少到 2 。nums = [1,1,2,2,<strong>2</strong>] 。
  2. largest = 2 下标为 2 。nextLargest = 1 。将 nums[2] 减少到 1 。nums = [1,1,<strong>1</strong>,2,2] 。 
  3. largest = 2 下标为 3 。nextLargest = 1 。将 nums[3] 减少到 1 。nums = [1,1,1,<strong>1</strong>,2] 。 
  4. largest = 2 下标为 4 。nextLargest = 1 。将 nums[4] 减少到 1 。nums = [1,1,1,1,<strong>1</strong>] 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 5 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 5 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"有序字典"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def reductionOperations(self, nums: List[int]) -> int:
          counter = collections.Counter(nums)
          f = res = 0
          n = len(nums)
          for _, v in sorted(counter.items(), key=lambda x: x[0]):
              f += v
              res += (n - f)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int reductionOperations(int[] nums) {
          TreeMap<Integer, Integer> counter = new TreeMap<>();
          for (int num : nums) {
              counter.put(num, counter.getOrDefault(num, 0) + 1);
          }
          int n = nums.length;
          int f = 0, res = 0;
          while (counter.size() != 0) {
              f += counter.pollFirstEntry().getValue();
              res += (n - f);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
