* [[https://leetcode.com/problems/reduction-operations-to-make-the-array-elements-equal][1887.
Reduction Operations to Make the Array Elements Equal]]
  :PROPERTIES:
  :CUSTOM_ID: reduction-operations-to-make-the-array-elements-equal
  :END:
[[./solution/1800-1899/1887.Reduction Operations to Make the Array Elements Equal/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given an integer array nums, your goal is to make all elements in nums
equal. To complete one operation, follow these steps:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Find the largest value in nums. Let its index be i (0-indexed) and its
value be largest. If there are multiple elements with the largest value,
pick the smallest i.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Find the next largest value in nums strictly smaller than largest. Let
its value be nextLargest.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Reduce nums[i] to nextLargest.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

Return the number of operations to make all elements in nums equal.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [5,1,3]
  <strong>Output:</strong> 3
  <strong>Explanation:</strong>&nbsp;It takes 3 operations to make all elements in nums equal:
  1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [<u>3</u>,1,3].
  2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [<u>1</u>,1,3].
  3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,<u>1</u>].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,1,1]
  <strong>Output:</strong> 0
  <strong>Explanation:</strong>&nbsp;All elements in nums are already equal.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,1,2,2,3]
  <strong>Output:</strong> 4
  <strong>Explanation:</strong>&nbsp;It takes 4 operations to make all elements in nums equal:
  1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,<u>2</u>].
  2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,<u>1</u>,2,2].
  3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,<u>1</u>,2].
  4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,<u>1</u>].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 5 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 5 * 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def reductionOperations(self, nums: List[int]) -> int:
          counter = collections.Counter(nums)
          f = res = 0
          n = len(nums)
          for _, v in sorted(counter.items(), key=lambda x: x[0]):
              f += v
              res += (n - f)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int reductionOperations(int[] nums) {
          TreeMap<Integer, Integer> counter = new TreeMap<>();
          for (int num : nums) {
              counter.put(num, counter.getOrDefault(num, 0) + 1);
          }
          int n = nums.length;
          int f = 0, res = 0;
          while (counter.size() != 0) {
              f += counter.pollFirstEntry().getValue();
              res += (n - f);
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
