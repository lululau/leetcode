* [[https://leetcode-cn.com/problems/longer-contiguous-segments-of-ones-than-zeros][1869.
哪种连续子字符串更长]]
  :PROPERTIES:
  :CUSTOM_ID: 哪种连续子字符串更长
  :END:
[[./solution/1800-1899/1869.Longer Contiguous Segments of Ones than Zeros/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个二进制字符串 s 。如果字符串中由 1 组成的 最长 连续子字符串
严格长于 由 0 组成的 最长 连续子字符串，返回 true ；否则，返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

例如，s = "110100010" 中，由 1 组成的最长连续子字符串的长度是 2 ，由 0
组成的最长连续子字符串的长度是 3 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

注意，如果字符串中不存在 0 ，此时认为由 0 组成的最长连续子字符串的长度是
0 。字符串中不存在 1 的情况也适用此规则。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "1101"
  <strong>输出：</strong>true
  <strong>解释：</strong>
  由 1 组成的最长连续子字符串的长度是 2："<strong>11</strong>01"
  由 0 组成的最长连续子字符串的长度是 1："11<strong>0</strong>1"
  由 1 组成的子字符串更长，故返回 true 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "111000"
  <strong>输出：</strong>false
  <strong>解释：</strong>
  由 1 组成的最长连续子字符串的长度是 3："<strong>111</strong>000"
  由 0 组成的最长连续子字符串的长度是 3："111<strong>000</strong>"
  由 1 组成的子字符串不比由 0 组成的子字符串长，故返回 false 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>s = "110100010"
  <strong>输出：</strong>false
  <strong>解释：</strong>
  由 1 组成的最长连续子字符串的长度是 2："<strong>11</strong>0100010"
  由 0 组成的最长连续子字符串的长度是 3："1101<strong>000</strong>10"
  由 1 组成的子字符串不比由 0 组成的子字符串长，故返回 false 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[i] 不是 '0' 就是 '1'

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

直接遍历字符串，获取“0 子串”和“1 子串”的最大长度 =len0=、=len1=。

遍历结束后，若 =len1 > len0=，返回 true，否则返回 false。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def checkZeroOnes(self, s: str) -> bool:
          len0 = len1 = 0
          t0 = t1 = 0
          for c in s:
              if c == '0':
                  t0 += 1
                  t1 = 0
              else:
                  t0 = 0
                  t1 += 1
              len0 = max(len0, t0)
              len1 = max(len1, t1)
          return len1 > len0
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean checkZeroOnes(String s) {
          int len0 = 0, len1 = 0;
          int t0 = 0, t1 = 0;
          for (int i = 0; i < s.length(); ++i) {
              if (s.charAt(i) == '0') {
                  t0 += 1;
                  t1 = 0;
              } else {
                  t0 = 0;
                  t1 += 1;
              }
              len0 = Math.max(len0, t0);
              len1 = Math.max(len1, t1);
          }
          return len1 > len0;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} s
   * @return {boolean}
   */
   var checkZeroOnes = function(s) {
      let max0 = 0, max1 = 0;
      let t0 = 0, t1 = 0;
      for (let char of s) {
          if (char == '0') {
              t0++;
              t1 = 0;
          } else {
              t1++;
              t0 = 0;
          }
          max0 = Math.max(max0, t0);
          max1 = Math.max(max1, t1);
      }
      return max1 > max0;
  }; 
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
