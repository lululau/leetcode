* [[https://leetcode.com/problems/minimum-number-of-operations-to-reinitialize-a-permutation][1806.
Minimum Number of Operations to Reinitialize a Permutation]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-number-of-operations-to-reinitialize-a-permutation
  :END:
[[./solution/1800-1899/1806.Minimum Number of Operations to Reinitialize a Permutation/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an even integer n​​​​​​. You initially have a permutation
perm of size n​​ where perm[i] == i​ (0-indexed)​​​​.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In one operation, you will create a new array arr, and for each i:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If i % 2 == 0, then arr[i] = perm[i / 2].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You will then assign arr​​​​ to perm.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum non-zero number of operations you need to perform on
perm to return the permutation to its initial value.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> perm = [0,1] initially.
  After the 1<sup>st</sup> operation, perm = [0,1]
  So it takes only 1 operation.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 4
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> perm = [0,1,2,3] initially.
  After the 1<sup>st</sup> operation, perm = [0,2,1,3]
  After the 2<sup>nd</sup> operation, perm = [0,1,2,3]
  So it takes only 2 operations.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 6
  <strong>Output:</strong> 4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n​​​​​​ is even.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
