* [[https://leetcode-cn.com/problems/minimum-number-of-operations-to-reinitialize-a-permutation][1806.
还原排列的最少操作步数]]
  :PROPERTIES:
  :CUSTOM_ID: 还原排列的最少操作步数
  :END:
[[./solution/1800-1899/1806.Minimum Number of Operations to Reinitialize a Permutation/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个偶数 n​​​​​​ ，已知存在一个长度为 n 的排列 perm ，其中 perm[i]
== i​（下标 从 0 开始 计数）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

一步操作中，你将创建一个新数组 arr ，对于每个 i ：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果 i % 2 == 0 ，那么 arr[i] = perm[i / 2]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

如果 i % 2 == 1 ，那么 arr[i] = perm[n / 2 + (i - 1) / 2]

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

然后将 arr​​ 赋值​​给 perm 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

要想使 perm 回到排列初始值，至少需要执行多少步操作？返回最小的 非零
操作步数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 2
  <strong>输出：</strong>1
  <strong>解释：</strong>最初，perm = [0,1]
  第 1 步操作后，perm = [0,1]
  所以，仅需执行 1 步操作</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 4
  <strong>输出：</strong>2
  <strong>解释：</strong>最初，perm = [0,1,2,3]
  第 1 步操作后，perm = [0,2,1,3]
  第 2 步操作后，perm = [0,1,2,3]
  所以，仅需执行 2 步操作</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>n = 6
  <strong>输出：</strong>4
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n​​​​​​ 是一个偶数

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
