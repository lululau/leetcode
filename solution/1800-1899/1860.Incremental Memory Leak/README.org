* [[https://leetcode-cn.com/problems/incremental-memory-leak][1860.
增长的内存泄露]]
  :PROPERTIES:
  :CUSTOM_ID: 增长的内存泄露
  :END:
[[./solution/1800-1899/1860.Incremental Memory Leak/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你两个整数 memory1
和 memory2 分别表示两个内存条剩余可用内存的位数。现在有一个程序每秒递增的速度消耗着内存。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

在第 i 秒（秒数从 1 开始），有
i 位内存被分配到 剩余内存较多 的内存条（如果两者一样多，则分配到第一个内存条）。如果两者剩余内存都不足
i 位，那么程序将 意外退出 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回一个数组，包含 [crashTime, memory1crash,
memory2crash] ，其中 crashTime是程序意外退出的时间（单位为秒）， memory1crash
和 memory2crash 分别是两个内存条最后剩余内存的位数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>memory1 = 2, memory2 = 2
  <b>输出：</b>[3,1,0]
  <b>解释：</b>内存分配如下：
  - 第 1 秒，内存条 1 被占用 1 位内存。内存条 1 现在有 1 位剩余可用内存。
  - 第 2 秒，内存条 2 被占用 2 位内存。内存条 2 现在有 0 位剩余可用内存。
  - 第 3 秒，程序意外退出，两个内存条分别有 1 位和 0 位剩余可用内存。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>memory1 = 8, memory2 = 11
  <b>输出：</b>[6,0,4]
  <b>解释：</b>内存分配如下：
  - 第 1 秒，内存条 2 被占用 1 位内存，内存条 2 现在有 10 位剩余可用内存。
  - 第 2 秒，内存条 2 被占用 2 位内存，内存条 2 现在有 8 位剩余可用内存。
  - 第 3 秒，内存条 1 被占用 3 位内存，内存条 1 现在有 5 位剩余可用内存。
  - 第 4 秒，内存条 2 被占用 4 位内存，内存条 2 现在有 4 位剩余可用内存。
  - 第 5 秒，内存条 1 被占用 5 位内存，内存条 1 现在有 0 位剩余可用内存。
  - 第 6 秒，程序意外退出，两个内存条分别有 0 位和 4 位剩余可用内存。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= memory1, memory2 <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def memLeak(self, memory1: int, memory2: int) -> List[int]:
          i = 1
          while memory1 >= i or memory2 >= i:
              if memory1 >= memory2:
                  memory1 -= i
              else:
                  memory2 -= i
              i += 1
          return [i, memory1, memory2]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public int[] memLeak(int memory1, int memory2) {
          int i = 1;
          while (memory1 >= i || memory2 >= i) {
              if (memory1 >= memory2) {
                  memory1 -= i;
              } else {
                  memory2 -= i;
              }
              ++i;
          }
          return new int[]{i, memory1, memory2};
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number} memory1
   * @param {number} memory2
   * @return {number[]}
   */
  var memLeak = function(memory1, memory2) {
      let i = 1;
      while (memory1 >= i || memory2 >= i) {
          if (memory1 >= memory2) {
              memory1 -= i;
          } else {
              memory2 -= i;
          }
          i++;
      }
      return [i, memory1, memory2];
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      vector<int> memLeak(int memory1, int memory2) {
          int i = 1;
          while (memory1 >= i || memory2 >= i) {
              if (memory1 >= memory2) {
                  memory1 -= i;
              } else {
                  memory2 -= i;
              }
              ++i;
          }
          return {i, memory1, memory2};
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
