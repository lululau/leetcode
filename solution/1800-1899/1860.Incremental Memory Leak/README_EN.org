* [[https://leetcode.com/problems/incremental-memory-leak][1860.
Incremental Memory Leak]]
  :PROPERTIES:
  :CUSTOM_ID: incremental-memory-leak
  :END:
[[./solution/1800-1899/1860.Incremental Memory Leak/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two integers memory1 and memory2 representing the
available memory in bits on two memory sticks. There is currently a
faulty program running that consumes an increasing amount of memory
every second.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

At the ith second (starting from 1), i bits of memory are allocated to
the stick with more available memory (or from the first memory stick if
both have the same available memory). If neither stick has at least i
bits of available memory, the program crashes.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an array containing [crashTime, memory1crash, memory2crash],
where crashTime is the time (in seconds) when the program crashed and
memory1crash and memory2crash are the available bits of memory in the
first and second sticks respectively.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> memory1 = 2, memory2 = 2
  <strong>Output:</strong> [3,1,0]
  <strong>Explanation:</strong> The memory is allocated as follows:
  - At the 1<sup>st</sup> second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.
  - At the 2<sup>nd</sup> second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.
  - At the 3<sup>rd</sup> second, the program crashes. The sticks have 1 and 0 bits available respectively.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> memory1 = 8, memory2 = 11
  <strong>Output:</strong> [6,0,4]
  <strong>Explanation:</strong> The memory is allocated as follows:
  - At the 1<sup>st</sup> second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.
  - At the 2<sup>nd</sup> second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.
  - At the 3<sup>rd</sup> second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.
  - At the 4<sup>th</sup> second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.
  - At the 5<sup>th</sup> second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.
  - At the 6<sup>th</sup> second, the program crashes. The sticks have 0 and 4 bits available respectively.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= memory1, memory2 <= 231 - 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def memLeak(self, memory1: int, memory2: int) -> List[int]:
          i = 1
          while memory1 >= i or memory2 >= i:
              if memory1 >= memory2:
                  memory1 -= i
              else:
                  memory2 -= i
              i += 1
          return [i, memory1, memory2]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int[] memLeak(int memory1, int memory2) {
          int i = 1;
          while (memory1 >= i || memory2 >= i) {
              if (memory1 >= memory2) {
                  memory1 -= i;
              } else {
                  memory2 -= i;
              }
              ++i;
          }
          return new int[]{i, memory1, memory2};
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number} memory1
   * @param {number} memory2
   * @return {number[]}
   */
  var memLeak = function(memory1, memory2) {
      let i = 1;
      while (memory1 >= i || memory2 >= i) {
          if (memory1 >= memory2) {
              memory1 -= i;
          } else {
              memory2 -= i;
          }
          i++;
      }
      return [i, memory1, memory2];
  };
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      vector<int> memLeak(int memory1, int memory2) {
          int i = 1;
          while (memory1 >= i || memory2 >= i) {
              if (memory1 >= memory2) {
                  memory1 -= i;
              } else {
                  memory2 -= i;
              }
              ++i;
          }
          return {i, memory1, memory2};
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
