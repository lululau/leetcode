* [[https://leetcode-cn.com/problems/maximize-number-of-nice-divisors][1808.
好因子的最大数目]]
  :PROPERTIES:
  :CUSTOM_ID: 好因子的最大数目
  :END:
[[./solution/1800-1899/1808.Maximize Number of Nice Divisors/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个正整数 primeFactors 。你需要构造一个正整数 n ，它满足以下条件：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n 质因数（质因数需要考虑重复的情况）的数目 不超过 primeFactors 个。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n 好因子的数目最大化。如果 n 的一个因子可以被
n 的每一个质因数整除，我们称这个因子是 好因子 。比方说，如果 n =
12 ，那么它的质因数为 [2,2,3] ，那么 6 和 12 是好因子，但 3 和 4 不是。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回 n 的好因子的数目。由于答案可能会很大，请返回答案对 109 +
7 取余 的结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请注意，一个质数的定义是大于
1 ，且不能被分解为两个小于该数的自然数相乘。一个数 n 的质因子是将
n 分解为若干个质因子，且它们的乘积为 n 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>primeFactors = 5
  <strong>输出：</strong>6
  <b>解释：</b>200 是一个可行的 n 。
  它有 5 个质因子：[2,2,2,5,5] ，且有 6 个好因子：[10,20,40,50,100,200] 。
  不存在别的 n 有至多 5 个质因子，且同时有更多的好因子。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>primeFactors = 8
  <b>输出：</b>18
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= primeFactors <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
