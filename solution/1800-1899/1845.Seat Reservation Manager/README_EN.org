* [[https://leetcode.com/problems/seat-reservation-manager][1845. Seat
Reservation Manager]]
  :PROPERTIES:
  :CUSTOM_ID: seat-reservation-manager
  :END:
[[./solution/1800-1899/1845.Seat Reservation Manager/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Design a system that manages the reservation state of n seats that are
numbered from 1 to n.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Implement the SeatManager class:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

SeatManager(int n) Initializes a SeatManager object that will manage n
seats numbered from 1 to n. All seats are initially available.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

int reserve() Fetches the smallest-numbered unreserved seat, reserves
it, and returns its number.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

void unreserve(int seatNumber) Unreserves the seat with the given
seatNumber.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input</strong>
  [&quot;SeatManager&quot;, &quot;reserve&quot;, &quot;reserve&quot;, &quot;unreserve&quot;, &quot;reserve&quot;, &quot;reserve&quot;, &quot;reserve&quot;, &quot;reserve&quot;, &quot;unreserve&quot;]
  [[5], [], [], [2], [], [], [], [], [5]]
  <strong>Output</strong>
  [null, 1, 2, null, 2, 3, 4, 5, null]

  <strong>Explanation</strong>
  SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.
  seatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.
  seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.
  seatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].
  seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.
  seatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.
  seatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.
  seatManager.reserve();    // The only available seat is seat 5, so return 5.
  seatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= seatNumber <= n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

For each call to reserve, it is guaranteed that there will be at least
one unreserved seat.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

For each call to unreserve, it is guaranteed that seatNumber will be
reserved.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

At most 105 calls in total will be made to reserve and unreserve.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class SeatManager:

      def __init__(self, n: int):
          self.q = [i for i in range(1, n + 1)]

      def reserve(self) -> int:
          return heapq.heappop(self.q)

      def unreserve(self, seatNumber: int) -> None:
          heapq.heappush(self.q, seatNumber)


  # Your SeatManager object will be instantiated and called as such:
  # obj = SeatManager(n)
  # param_1 = obj.reserve()
  # obj.unreserve(seatNumber)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class SeatManager {
      private PriorityQueue<Integer> q;

      public SeatManager(int n) {
          q = new PriorityQueue<>(n);
          for (int i = 1; i <= n; ++i) {
              q.offer(i);
          }
      }
      
      public int reserve() {
          return q.poll();
      }
      
      public void unreserve(int seatNumber) {
          q.offer(seatNumber);
      }
  }

  /**
   * Your SeatManager object will be instantiated and called as such:
   * SeatManager obj = new SeatManager(n);
   * int param_1 = obj.reserve();
   * obj.unreserve(seatNumber);
   */
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
