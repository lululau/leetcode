* [[https://leetcode-cn.com/problems/sorting-the-sentence][1859.
将句子排序]]
  :PROPERTIES:
  :CUSTOM_ID: 将句子排序
  :END:
[[./solution/1800-1899/1859.Sorting the Sentence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

一个
句子 指的是一个序列的单词用单个空格连接起来，且开头和结尾没有任何空格。每个单词都只包含小写或大写英文字母。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

我们可以给一个句子添加 从 1 开始的单词位置索引
，并且将句子中所有单词 打乱顺序 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

比方说，句子 "This is a sentence" 可以被打乱顺序得到 "sentence4 a3 is2
This1" 或者 "is2 sentence4 This1 a3" 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个
打乱顺序 的句子 s ，它包含的单词不超过 9 个，请你重新构造并得到原本顺序的句子。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>s = "is2 sentence4 This1 a3"
  <b>输出：</b>"This is a sentence"
  <b>解释：</b>将 s 中的单词按照初始位置排序，得到 "This1 is2 a3 sentence4" ，然后删除数字。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>s = "Myself2 Me1 I4 and3"
  <b>输出：</b>"Me Myself and I"
  <b>解释：</b>将 s 中的单词按照初始位置排序，得到 "Me1 Myself2 and3 I4" ，然后删除数字。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= s.length <= 200

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 只包含小写和大写英文字母、空格以及从 1 到 9 的数字。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中单词数目为 1 到 9 个。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中的单词由单个空格分隔。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 不包含任何前导或者后缀空格。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def sortSentence(self, s: str) -> str:
          words = s.split(' ')
          arr = [None] * len(words)
          for word in words:
              idx = int(word[-1]) - 1
              arr[idx] = word[:-1]
          return ' '.join(arr)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public String sortSentence(String s) {
          String[] words = s.split(" ");
          String[] arr = new String[words.length];
          for (String word : words) {
              int idx = word.charAt(word.length() - 1) - '0' - 1;
              arr[idx] = word.substring(0, word.length() - 1);
          }
          return String.join(" ", arr);
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} s
   * @return {string}
   */
  var sortSentence = function(s) {
      let words = s.split(' ');
      let n = words.length;
      let res = new Array(n);
      for (let word of words) {
          let key = word.slice(-1);
          let val = word.slice(0, -1);
          res[parseInt(key) - 1] = val;
      }
      return res.join(' ');
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
