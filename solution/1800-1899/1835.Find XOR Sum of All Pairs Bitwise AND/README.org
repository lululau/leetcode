* [[https://leetcode-cn.com/problems/find-xor-sum-of-all-pairs-bitwise-and][1835.
所有数对按位与结果的异或和]]
  :PROPERTIES:
  :CUSTOM_ID: 所有数对按位与结果的异或和
  :END:
[[./solution/1800-1899/1835.Find XOR Sum of All Pairs Bitwise AND/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

列表的 异或和（XOR sum）指对所有元素进行按位 XOR
运算的结果。如果列表中仅有一个元素，那么其 异或和 就等于该元素。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

例如，[1,2,3,4] 的 异或和 等于 1 XOR 2 XOR 3 XOR 4 = 4 ，而 [3] 的
异或和 等于 3 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你两个下标 从 0 开始 计数的数组 arr1 和 arr2
，两数组均由非负整数组成。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

根据每个 (i, j) 数对，构造一个由 arr1[i] AND arr2[j]（按位 AND
运算）结果组成的列表。其中 0 <= i < arr1.length 且 0 <= j < arr2.length
。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

返回上述列表的 异或和 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>arr1 = [1,2,3], arr2 = [6,5]
  <strong>输出：</strong>0
  <strong>解释：</strong>列表 = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1] ，
  异或和 = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>arr1 = [12], arr2 = [4]
  <strong>输出：</strong>4
  <strong>解释：</strong>列表 = [12 AND 4] = [4] ，异或和 = 4 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= arr1.length, arr2.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= arr1[i], arr2[j] <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
