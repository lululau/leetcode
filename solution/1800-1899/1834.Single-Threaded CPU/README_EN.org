* [[https://leetcode.com/problems/single-threaded-cpu][1834.
Single-Threaded CPU]]
  :PROPERTIES:
  :CUSTOM_ID: single-threaded-cpu
  :END:
[[./solution/1800-1899/1834.Single-Threaded CPU/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given n​​​​​​ tasks labeled from 0 to n - 1 represented by a 2D
integer array tasks, where tasks[i] = [enqueueTimei, processingTimei]
means that the i​​​​​​th​​​​ task will be available to process at
enqueueTimei and will take processingTimei to finish processing.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You have a single-threaded CPU that can process at most one task at a
time and will act in the following way:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If the CPU is idle and there are no available tasks to process, the CPU
remains idle.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

If the CPU is idle and there are available tasks, the CPU will choose
the one with the shortest processing time. If multiple tasks have the
same shortest processing time, it will choose the task with the smallest
index.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Once a task is started, the CPU will process the entire task without
stopping.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The CPU can finish a task then start a new one instantly.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the order in which the CPU will process the tasks.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tasks = [[1,2],[2,4],[3,2],[4,1]]
  <strong>Output:</strong> [0,2,3,1]
  <strong>Explanation: </strong>The events go as follows: 
  - At time = 1, task 0 is available to process. Available tasks = {0}.
  - Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.
  - At time = 2, task 1 is available to process. Available tasks = {1}.
  - At time = 3, task 2 is available to process. Available tasks = {1, 2}.
  - Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.
  - At time = 4, task 3 is available to process. Available tasks = {1, 3}.
  - At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.
  - At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.
  - At time = 10, the CPU finishes task 1 and becomes idle.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]
  <strong>Output:</strong> [4,3,2,0,1]
  <strong>Explanation</strong><strong>: </strong>The events go as follows:
  - At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.
  - Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.
  - At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.
  - At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.
  - At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.
  - At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.
  - At time = 40, the CPU finishes task 1 and becomes idle.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

tasks.length == n

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= enqueueTimei, processingTimei <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
