* [[https://leetcode.com/problems/remove-duplicates-from-an-unsorted-linked-list][1836.
Remove Duplicates From an Unsorted Linked List]]
  :PROPERTIES:
  :CUSTOM_ID: remove-duplicates-from-an-unsorted-linked-list
  :END:
[[./solution/1800-1899/1836.Remove Duplicates From an Unsorted Linked List/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Given the head of a linked list, find all the values that appear more
than once in the list and delete the nodes that have any of those
values.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the linked list after the deletions.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> head = [1,2,3,2]

  <strong>Output:</strong> [1,3]

  <strong>Explanation:</strong> 2 appears twice in the linked list, so all 2&#39;s should be deleted. After deleting all 2&#39;s, we are left with [1,3].

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> head = [2,1,1,2]

  <strong>Output:</strong> []

  <strong>Explanation:</strong> 2 and 1 both appear twice. All the elements should be deleted.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> head = [3,2,2,1,3,2,4]

  <strong>Output:</strong> [1,4]

  <strong>Explanation: </strong>3 appears twice and 2 appears three times. After deleting all 3&#39;s and 2&#39;s, we are left with [1,4].

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

The number of nodes in the list is in the range [1, 105]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= Node.val <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def deleteDuplicatesUnsorted(self, head: ListNode) -> ListNode:
          cur = head
          counter = collections.Counter()
          while cur:
              counter[cur.val] += 1
              cur = cur.next

          dummy = ListNode(0, head)
          pre, cur = dummy, head
          while cur:
              if counter[cur.val] > 1:
                  pre.next = cur.next
              else:
                  pre = cur
              cur = cur.next
          return dummy.next
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  /**
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode() {}
   *     ListNode(int val) { this.val = val; }
   *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
   * }
   */
  class Solution {
      public ListNode deleteDuplicatesUnsorted(ListNode head) {
          Map<Integer, Integer> counter = new HashMap<>();
          for (ListNode cur = head; cur != null; cur = cur.next) {
              counter.put(cur.val, counter.getOrDefault(cur.val, 0) + 1);
          }

          ListNode dummy = new ListNode(0, head);
          for (ListNode pre = dummy, cur = head; cur != null; cur = cur.next) {
              if (counter.get(cur.val) > 1) {
                  pre.next = cur.next;
              } else {
                  pre = cur;
              }
          }
          return dummy.next;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode() : val(0), next(nullptr) {}
   *     ListNode(int x) : val(x), next(nullptr) {}
   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
   * };
   */
  class Solution {
  public:
      ListNode* deleteDuplicatesUnsorted(ListNode* head) {
          unordered_map<int, int> counter;
          for (ListNode* cur = head; cur != nullptr; cur = cur->next) {
              ++counter[cur->val];
          }

          ListNode* dummy = new ListNode(0, head);
          for (ListNode* pre = dummy, *cur = head; cur != nullptr; cur = cur->next) {
              if (counter[cur->val] > 1) {
                  pre->next = cur->next;
              } else {
                  pre = cur;
              }
          }
          return dummy->next;
      }
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
