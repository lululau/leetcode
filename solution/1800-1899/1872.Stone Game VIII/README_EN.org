* [[https://leetcode.com/problems/stone-game-viii][1872. Stone Game
VIII]]
  :PROPERTIES:
  :CUSTOM_ID: stone-game-viii
  :END:
[[./solution/1800-1899/1872.Stone Game VIII/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

Alice and Bob take turns playing a game, with Alice starting first.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

There are n stones arranged in a row. On each player's turn, while the
number of stones is more than one, they will do the following:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ol>
#+end_html

#+begin_html
  <li>
#+end_html

Choose an integer x > 1, and remove the leftmost x stones from the row.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Add the sum of the removed stones' values to the player's score.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Place a new stone, whose value is equal to that sum, on the left side of
the row.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ol>
#+end_html

#+begin_html
  <p>
#+end_html

The game stops when only one stone is left in the row.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The score difference between Alice and Bob is (Alice's score - Bob's
score). Alice's goal is to maximize the score difference, and Bob's goal
is the minimize the score difference.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Given an integer array stones of length n where stones[i] represents the
value of the ith stone from the left, return the score difference
between Alice and Bob if they both play optimally.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> stones = [-1,2,-3,4,-5]
  <strong>Output:</strong> 5
  <strong>Explanation:</strong>
  - Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of
    value 2 on the left. stones = [2,-5].
  - Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on
    the left. stones = [-3].
  The difference between their scores is 2 - (-3) = 5.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> stones = [7,-6,5,10,5,-2,-6]
  <strong>Output:</strong> 13
  <strong>Explanation:</strong>
  - Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a
    stone of value 13 on the left. stones = [13].
  The difference between their scores is 13 - 0 = 13.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> stones = [-10,-12]
  <strong>Output:</strong> -22
  <strong>Explanation:</strong>
  - Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her
    score and places a stone of value -22 on the left. stones = [-22].
  The difference between their scores is (-22) - 0 = -22.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == stones.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-104 <= stones[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def stoneGameVIII(self, stones: List[int]) -> int:
          pre_sum = list(accumulate(stones))
          f = pre_sum[len(stones) - 1]
          for i in range(len(stones) - 2, 0, -1):
              f = max(f, pre_sum[i] - f)
          return f
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int stoneGameVIII(int[] stones) {
          int n = stones.length;
          int[] preSum = new int[n];
          preSum[0] = stones[0];
          for (int i = 1; i < n; ++i) {
              preSum[i] = preSum[i - 1] + stones[i];
          }
          int f = preSum[n - 1];
          for (int i = n - 2; i > 0; --i) {
              f = Math.max(f, preSum[i] - f);
          }
          return f;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
