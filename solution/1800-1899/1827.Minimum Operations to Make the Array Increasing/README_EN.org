* [[https://leetcode.com/problems/minimum-operations-to-make-the-array-increasing][1827.
Minimum Operations to Make the Array Increasing]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-operations-to-make-the-array-increasing
  :END:
[[./solution/1800-1899/1827.Minimum Operations to Make the Array Increasing/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an integer array nums (0-indexed). In one operation, you
can choose an element of the array and increment it by 1.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, if nums = [1,2,3], you can choose to increment nums[1] to
make nums = [1,3,3].

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum number of operations needed to make nums strictly
increasing.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

An array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <=
i < nums.length - 1. An array of length 1 is trivially strictly
increasing.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> nums = [1,1,1]

  <strong>Output:</strong> 3

  <strong>Explanation:</strong> You can do the following operations:

  1) Increment nums[2], so nums becomes [1,1,<u><strong>2</strong></u>].

  2) Increment nums[1], so nums becomes [1,<u><strong>2</strong></u>,2].

  3) Increment nums[2], so nums becomes [1,2,<u><strong>3</strong></u>].

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> nums = [1,5,2,4,1]

  <strong>Output:</strong> 14

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> nums = [8]

  <strong>Output:</strong> 0

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 5000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 104

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def minOperations(self, nums: List[int]) -> int:
          n = len(nums)
          pre_max = nums[0]
          times = 0
          for i in range(1, n):
              if nums[i] <= pre_max:
                  steps = pre_max - nums[i] + 1
                  times += steps
                  pre_max = nums[i] + steps
              else:
                  pre_max = nums[i]
          return times
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int minOperations(int[] nums) {
          int n = nums.length;
          int preMax = nums[0];
          int times = 0;
          for (int i = 1; i < n; ++i) {
              if (nums[i] <= preMax) {
                  int steps = preMax - nums[i] + 1;
                  times += steps;
                  preMax = nums[i] + steps;
              } else {
                  preMax = nums[i];
              }
          }
          return times;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
