* [[https://leetcode.com/problems/sum-of-all-subset-xor-totals][1863.
Sum of All Subset XOR Totals]]
  :PROPERTIES:
  :CUSTOM_ID: sum-of-all-subset-xor-totals
  :END:
[[./solution/1800-1899/1863.Sum of All Subset XOR Totals/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

The XOR total of an array is defined as the bitwise XOR of all its
elements, or 0 if the array is empty.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Given an array nums, return the sum of all XOR totals for every subset
of nums. 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Note: Subsets with the same elements should be counted multiple times.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

An array a is a subset of an array b if a can be obtained from b by
deleting some (possibly zero) elements of b.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,3]
  <strong>Output:</strong> 6
  <strong>Explanation: </strong>The 4 subsets of [1,3] are:
  - The empty subset has an XOR total of 0.
  - [1] has an XOR total of 1.
  - [3] has an XOR total of 3.
  - [1,3] has an XOR total of 1 XOR 3 = 2.
  0 + 1 + 3 + 2 = 6
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [5,1,6]
  <strong>Output:</strong> 28
  <strong>Explanation: </strong>The 8 subsets of [5,1,6] are:
  - The empty subset has an XOR total of 0.
  - [5] has an XOR total of 5.
  - [1] has an XOR total of 1.
  - [6] has an XOR total of 6.
  - [5,1] has an XOR total of 5 XOR 1 = 4.
  - [5,6] has an XOR total of 5 XOR 6 = 3.
  - [1,6] has an XOR total of 1 XOR 6 = 7.
  - [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.
  0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [3,4,5,6,7,8]
  <strong>Output:</strong> 480
  <strong>Explanation:</strong> The sum of all XOR totals for every subset is 480.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 12

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums[i] <= 20

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def subsetXORSum(self, nums: List[int]) -> int:
          def dfs(nums, depth, prev):
              self.res += prev
              for num in nums[depth:]:
                  prev ^= num
                  depth += 1
                  dfs(nums, depth, prev)
                  prev ^= num

          self.res = 0
          dfs(nums, 0, 0)
          return self.res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      private int res;

      public int subsetXORSum(int[] nums) {
          dfs(nums, 0, 0);
          return res;
      }

      private void dfs(int[] nums, int depth, int prev) {
          res += prev;
          for (int i = depth; i < nums.length; ++i) {
              prev ^= nums[i];
              dfs(nums, ++depth, prev);
              prev ^= nums[i];
          }
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
   var subsetXORSum = function(nums) {
      let res = [];
      let prev = 0;
      dfs(nums, 0, prev, res);
      return res.reduce((a, c) => a + c, 0)
  };

  function dfs(nums, depth, prev, res) {
      res.push(prev);
      for (let i = depth; i < nums.length; i++) {
          prev ^= nums[i];
          depth++;
          dfs(nums, depth, prev, res);
          // bracktrack
          prev ^= nums[i];
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
