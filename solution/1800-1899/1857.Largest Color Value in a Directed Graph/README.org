* [[https://leetcode-cn.com/problems/largest-color-value-in-a-directed-graph][1857.
有向图中最大颜色值]]
  :PROPERTIES:
  :CUSTOM_ID: 有向图中最大颜色值
  :END:
[[./solution/1800-1899/1857.Largest Color Value in a Directed Graph/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个 有向图 ，它含有 n 个节点和 m 条边。节点编号从 0 到 n - 1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个字符串 colors ，其中 colors[i] 是小写英文字母，表示图中第
i 个节点的 颜色 （下标从
0 开始）。同时给你一个二维数组 edges ，其中 edges[j] = [aj,
bj] 表示从节点 aj 到节点 bj 有一条 有向边 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

图中一条有效 路径 是一个点序列 x1 -> x2 -> x3 -> ... -> xk ，对于所有 1
<= i < k ，从 xi 到 xi+1 在图中有一条有向边。路径的 颜色值 是路径中
出现次数最多 颜色的节点数目。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

请你返回给定图中有效路径里面的 最大颜色值 。如果图中含有环，请返回 -1 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>colors = "abaca", edges = [[0,1],[0,2],[2,3],[3,4]]
  <b>输出：</b>3
  <b>解释：</b>路径 0 -&gt; 2 -&gt; 3 -&gt; 4 含有 3 个颜色为 <code>"a" 的节点（上图中的红色节点）。</code>
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><b>输入：</b>colors = "a", edges = [[0,0]]
  <b>输出：</b>-1
  <b>解释：</b>从 0 到 0 有一个环。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

n == colors.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

m == edges.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= m <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

colors 只含有小写英文字母。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 <= aj, bj < n

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
