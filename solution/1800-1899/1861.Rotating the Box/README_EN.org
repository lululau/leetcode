* [[https://leetcode.com/problems/rotating-the-box][1861. Rotating the
Box]]
  :PROPERTIES:
  :CUSTOM_ID: rotating-the-box
  :END:
[[./solution/1800-1899/1861.Rotating the Box/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given an m x n matrix of characters box representing a side-view
of a box. Each cell of the box is one of the following:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

A stone '#'

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

A stationary obstacle '*'

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Empty '.'

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

The box is rotated 90 degrees clockwise, causing some of the stones to
fall due to gravity. Each stone falls down until it lands on an
obstacle, another stone, or the bottom of the box. Gravity does not
affect the obstacles' positions, and the inertia from the box's rotation
does not affect the stones' horizontal positions.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

It is guaranteed that each stone in box rests on an obstacle, another
stone, or the bottom of the box.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return an n x m matrix representing the box after the rotation described
above.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> box = [[&quot;#&quot;,&quot;.&quot;,&quot;#&quot;]]

  <strong>Output:</strong> [[&quot;.&quot;],

  &nbsp;        [&quot;#&quot;],

  &nbsp;        [&quot;#&quot;]]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> box = [[&quot;#&quot;,&quot;.&quot;,&quot;*&quot;,&quot;.&quot;],

  &nbsp;             [&quot;#&quot;,&quot;#&quot;,&quot;*&quot;,&quot;.&quot;]]

  <strong>Output:</strong> [[&quot;#&quot;,&quot;.&quot;],

  &nbsp;        [&quot;#&quot;,&quot;#&quot;],

  &nbsp;        [&quot;*&quot;,&quot;*&quot;],

  &nbsp;        [&quot;.&quot;,&quot;.&quot;]]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> box = [[&quot;#&quot;,&quot;#&quot;,&quot;*&quot;,&quot;.&quot;,&quot;*&quot;,&quot;.&quot;],

  &nbsp;             [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;*&quot;,&quot;.&quot;,&quot;.&quot;],

  &nbsp;             [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;.&quot;]]

  <strong>Output:</strong> [[&quot;.&quot;,&quot;#&quot;,&quot;#&quot;],

  &nbsp;        [&quot;.&quot;,&quot;#&quot;,&quot;#&quot;],

  &nbsp;        [&quot;#&quot;,&quot;#&quot;,&quot;*&quot;],

  &nbsp;        [&quot;#&quot;,&quot;*&quot;,&quot;.&quot;],

  &nbsp;        [&quot;#&quot;,&quot;.&quot;,&quot;*&quot;],

  &nbsp;        [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;]]

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

m == box.length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

n == box[i].length

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= m, n <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

box[i][j] is either '#', '*', or '.'.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:
          m, n = len(box), len(box[0])
          res = [[None] * m for _ in range(n)]
          for i in range(m):
              for j in range(n):
                  res[j][m - i - 1] = box[i][j]
          for j in range(m):
              q = collections.deque()
              for i in range(n - 1, -1, -1):
                  if res[i][j] == '*':
                      q.clear()
                      continue
                  if res[i][j] == '.':
                      q.append(i)
                  else:
                      if not q:
                          continue
                      res[q.popleft()][j] = '#'
                      res[i][j] = '.'
                      q.append(i)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public char[][] rotateTheBox(char[][] box) {
          int m = box.length, n = box[0].length;
          char[][] res = new char[n][m];
          for (int i = 0; i < m; ++i) {
              for (int j = 0; j < n; ++j) {
                  res[j][m - i - 1] = box[i][j];
              }
          }
          for (int j = 0; j < m; ++j) {
              Deque<Integer> q = new ArrayDeque<>();
              for (int i = n - 1; i >= 0; --i) {
                  if (res[i][j] == '*') {
                      q.clear();
                      continue;
                  }
                  if (res[i][j] == '.') {
                      q.offer(i);
                  } else {
                      if (q.isEmpty()) {
                          continue;
                      }
                      res[q.poll()][j] = '#';
                      res[i][j] = '.';
                      q.offer(i);
                  }
              }
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
