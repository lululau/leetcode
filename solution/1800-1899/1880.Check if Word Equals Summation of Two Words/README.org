* [[https://leetcode-cn.com/problems/check-if-word-equals-summation-of-two-words][1880.
检查某单词是否等于两单词之和]]
  :PROPERTIES:
  :CUSTOM_ID: 检查某单词是否等于两单词之和
  :END:
[[./solution/1800-1899/1880.Check if Word Equals Summation of Two Words/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

字母的 字母值 取决于字母在字母表中的位置，从 0 开始 计数。即，'a' ->
0、'b' -> 1、'c' -> 2，以此类推。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

对某个由小写字母组成的字符串 s 而言，其 数值 就等于将 s 中每个字母的
字母值 按顺序 连接 并 转换 成对应整数。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

例如，s = "acb" ，依次连接每个字母的字母值可以得到 "021"
，转换为整数得到 21 。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你三个字符串 firstWord、secondWord 和 targetWord ，每个字符串都由从
'a' 到 'j' （含 'a' 和 'j' ）的小写英文字母组成。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

如果 firstWord 和 secondWord 的 数值之和 等于 targetWord 的数值，返回
true ；否则，返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>firstWord = "acb", secondWord = "cba", targetWord = "cdb"
  <strong>输出：</strong>true
  <strong>解释：</strong>
  firstWord 的数值为 "acb" -&gt; "021" -&gt; 21
  secondWord 的数值为 "cba" -&gt; "210" -&gt; 210
  targetWord 的数值为 "cdb" -&gt; "231" -&gt; 231
  由于 21 + 210 == 231 ，返回 true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>firstWord = "aaa", secondWord = "a", targetWord = "aab"
  <strong>输出：</strong>false
  <strong>解释：</strong>
  firstWord 的数值为 "aaa" -&gt; "000" -&gt; 0
  secondWord 的数值为 "a" -&gt; "0" -&gt; 0
  targetWord 的数值为 "aab" -&gt; "001" -&gt; 1
  由于 0 + 0 != 1 ，返回 false</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>firstWord = "aaa", secondWord = "a", targetWord = "aaaa"
  <strong>输出：</strong>true
  <strong>解释：</strong>
  firstWord 的数值为 "aaa" -&gt; "000" -&gt; 0
  secondWord 的数值为 "a" -&gt; "0" -&gt; 0
  targetWord 的数值为 "aaaa" -&gt; "0000" -&gt; 0
  由于 0 + 0 == 0 ，返回 true
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= firstWord.length, secondWord.length, targetWord.length <= 8

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

firstWord、secondWord 和 targetWord 仅由从 'a' 到 'j' （含 'a' 和 'j'
）的小写英文字母组成。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def isSumEqual(self, firstWord: str, secondWord: str, targetWord: str) -> bool:
          def convert(word):
              res = 0
              for c in word:
                  res *= 10
                  res += (ord(c) - ord('a'))
              return res
          return convert(firstWord) + convert(secondWord) == convert(targetWord)
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean isSumEqual(String firstWord, String secondWord, String targetWord) {
          return convert(firstWord) + convert(secondWord) == convert(targetWord);
      }

      private int convert(String word) {
          int res = 0;
          for (char c : word.toCharArray()) {
              res *= 10;
              res += (c - 'a');
          }
          return res;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      bool isSumEqual(string firstWord, string secondWord, string targetWord) {
          return convert(firstWord) + convert(secondWord) == convert(targetWord);
      }
  private:
      int convert(string word) {
          int res = 0;
          for (char c : word) {
              res *= 10;
              res += (c - 'a');
          }
          return res;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} firstWord
   * @param {string} secondWord
   * @param {string} targetWord
   * @return {boolean}
   */
   var isSumEqual = function(firstWord, secondWord, targetWord) {
      let carry = 0;
      let n1 = firstWord.length, n2 = secondWord.length;
      let n3 = targetWord.length;
      for (let i = 0; i < n3; i++) {
          let num1 = getNum(firstWord.charAt(n1 - 1 - i));
          let num2 = getNum(secondWord.charAt(n2 - 1 - i));
          let sum = carry + num1 + num2;
          if (getNum(targetWord.charAt(n3 - 1 - i)) != (sum % 10)) return false;
          carry = parseInt(sum / 10);
      }
      return true;
  };

  function getNum (char) {
      if (!char) return 0;
      return char.charCodeAt() - 'a'.charCodeAt();
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
