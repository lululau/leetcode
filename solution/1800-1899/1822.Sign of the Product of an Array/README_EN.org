* [[https://leetcode.com/problems/sign-of-the-product-of-an-array][1822.
Sign of the Product of an Array]]
  :PROPERTIES:
  :CUSTOM_ID: sign-of-the-product-of-an-array
  :END:
[[./solution/1800-1899/1822.Sign of the Product of an Array/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

There is a function signFunc(x) that returns:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 if x is positive.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-1 if x is negative.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

0 if x is equal to 0.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You are given an integer array nums. Let product be the product of all
values in the array nums.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return signFunc(product).

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [-1,-2,-3,-4,3,2,1]
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> The product of all values in the array is 144, and signFunc(144) = 1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [1,5,0,2,-3]
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> The product of all values in the array is 0, and signFunc(0) = 0
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums = [-1,1,-1,1,-1]
  <strong>Output:</strong> -1
  <strong>Explanation:</strong> The product of all values in the array is -1, and signFunc(-1) = -1
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums.length <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

-100 <= nums[i] <= 100

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def arraySign(self, nums: List[int]) -> int:
          res = 1
          for num in nums:
              if num == 0:
                  return 0
              if num < 0:
                  res *= -1
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int arraySign(int[] nums) {
          int res = 1;
          for (int num : nums) {
              if (num == 0) return 0;
              if (num < 0) res *= -1;
          }
          return res;
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums
   * @return {number}
   */
  var arraySign = function (nums) {
    let res = 1;
    for (let num of nums) {
      if (num == 0) return 0;
      if (num < 0) res *= -1;
    }
    return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
