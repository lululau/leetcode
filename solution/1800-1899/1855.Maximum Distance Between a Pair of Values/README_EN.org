* [[https://leetcode.com/problems/maximum-distance-between-a-pair-of-values][1855.
Maximum Distance Between a Pair of Values]]
  :PROPERTIES:
  :CUSTOM_ID: maximum-distance-between-a-pair-of-values
  :END:
[[./solution/1800-1899/1855.Maximum Distance Between a Pair of Values/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two non-increasing 0-indexed integer arrays nums1​​​​​​
and nums2​​​​​​.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

A pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j <
nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. The
distance of the pair is j - i​​​​.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the maximum distance of any valid pair (i, j). If there are no
valid pairs, return 0.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

An array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i <
arr.length.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).
  The maximum distance is 2 with pair (2,4).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [2,2,2], nums2 = [10,10,1]
  <strong>Output:</strong> 1
  <strong>Explanation:</strong> The valid pairs are (0,0), (0,1), and (1,1).
  The maximum distance is 1 with pair (0,1).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).
  The maximum distance is 2 with pair (2,4).
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 4:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> nums1 = [5,4], nums2 = [3,2]
  <strong>Output:</strong> 0
  <strong>Explanation:</strong> There are no valid pairs, so return 0.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums1.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums2.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= nums1[i], nums2[j] <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Both nums1 and nums2 are non-increasing.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:
          res = 0
          for i in range(len(nums1)):
              l, r = i, len(nums2) - 1
              while l <= r:
                  mid = (l + r) >> 1
                  if nums2[mid] >= nums1[i]:
                      res = max(res, mid - i)
                      l = mid + 1
                  else:
                      r = mid - 1
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int maxDistance(int[] nums1, int[] nums2) {
          int res = 0;
          for (int i = 0; i < nums1.length; ++i) {
              int l = i, r = nums2.length - 1;
              while (l <= r) {
                  int mid = (l + r) >>> 1;
                  if (nums2[mid] >= nums1[i]) {
                      res = Math.max(res, mid - i);
                      l = mid + 1;
                  } else {
                      r = mid - 1;
                  }
              }
          }
          return res;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      int maxDistance(vector<int>& nums1, vector<int>& nums2) {
          int res = 0;
          for (int i = 0; i < nums1.size(); ++i) {
              int l = i, r = nums2.size() - 1;
              while (l <= r) {
                  int mid = (l + r) >> 1;
                  if (nums2[mid] >= nums1[i]) {
                      res = max(res, mid - i);
                      l = mid + 1;
                  } else {
                      r = mid - 1;
                  }
              }
          }
          return res;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {number[]} nums1
   * @param {number[]} nums2
   * @return {number}
   */
  var maxDistance = function(nums1, nums2) {
      let res = 0;
      for (let i = 0; i < nums1.length; i++) {
          let left = 0, right = nums2.length - 1;
          while (left <= right) {
              mid = (left + right) >> 1;
              if (nums2[mid] >= nums1[i]) {
                  res = Math.max(res, mid - i);
                  left = mid + 1;
              } else {
                  right = mid - 1;
              }
          }
      }
      return res;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
