* [[https://leetcode.com/problems/minimum-number-of-flips-to-make-the-binary-string-alternating][1888.
Minimum Number of Flips to Make the Binary String Alternating]]
  :PROPERTIES:
  :CUSTOM_ID: minimum-number-of-flips-to-make-the-binary-string-alternating
  :END:
[[./solution/1800-1899/1888.Minimum Number of Flips to Make the Binary String Alternating/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a binary string s. You are allowed to perform two types of
operations on the string in any sequence:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

Type-1: Remove the character at the start of the string s and append it
to the end of the string.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Type-2: Pick any character in s and flip its value, i.e., if its value
is '0' it becomes '1' and vice-versa.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum number of type-2 operations you need to perform such
that s becomes alternating.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

The string is called alternating if no two adjacent characters are
equal.

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, the strings "010" and "1010" are alternating, while the
string "0100" is not.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;111000&quot;
  <strong>Output:</strong> 2
  <strong>Explanation</strong>: Use the first operation two times to make s = &quot;100011&quot;.
  Then, use the second operation on the third and sixth elements to make s = &quot;10<u>1</u>01<u>0</u>&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;010&quot;
  <strong>Output:</strong> 0
  <strong>Explanation</strong>: The string is already alternating.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;1110&quot;
  <strong>Output:</strong> 1
  <strong>Explanation</strong>: Use the second operation on the second element to make s = &quot;1<u>0</u>10&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[i] is either '0' or '1'.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def minFlips(self, s: str) -> int:
          n = len(s)
          target = '01'
          cnt = 0
          for i, c in enumerate(s):
              cnt += c != target[i & 1]
          res = min(cnt, n - cnt)
          s *= 2
          for i in range(n):
              cnt -= s[i] != target[i & 1]
              cnt += s[i + n] != target[(i + n) & 1]
              res = min(res, cnt, n - cnt)
          return res
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public int minFlips(String s) {
          int n = s.length();
          String target = "01";
          int cnt = 0;
          for (int i = 0; i < n; ++i) {
              cnt += (s.charAt(i) == target.charAt(i & 1) ? 0 : 1);
          }
          int res = Math.min(cnt, n - cnt);
          s += s;
          for (int i = 0; i < n; ++i) {
              cnt -= (s.charAt(i) == target.charAt(i & 1) ? 0 : 1);
              cnt += (s.charAt(i + n) == target.charAt((i + n) & 1) ? 0 : 1);
              res = Math.min(res, Math.min(cnt, n - cnt));
          }
          return res;
      }
  }
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
