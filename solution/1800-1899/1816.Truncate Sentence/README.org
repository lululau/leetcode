* [[https://leetcode-cn.com/problems/truncate-sentence][1816. 截断句子]]
  :PROPERTIES:
  :CUSTOM_ID: 截断句子
  :END:
[[./solution/1800-1899/1816.Truncate Sentence/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

句子
是一个单词列表，列表中的单词之间用单个空格隔开，且不存在前导或尾随空格。每个单词仅由大小写英文字母组成（不含标点符号）。

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

例如，"Hello World"、"HELLO" 和 "hello world hello world" 都是句子。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

给你一个句子 s​​​​​​ 和一个整数 k​​​​​​ ，请你将 s​​ 截断
​，​​​使截断后的句子仅含 前 k​​​​​​ 个单词。返回 截断 s​​​​​​
后得到的句子。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "Hello how are you Contestant", k = 4
  <strong>输出：</strong>"Hello how are you"
  <strong>解释：</strong>
  s 中的单词为 ["Hello", "how" "are", "you", "Contestant"]
  前 4 个单词为 ["Hello", "how", "are", "you"]
  因此，应当返回 "Hello how are you"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "What is the solution to this problem", k = 4
  <strong>输出：</strong>"What is the solution"
  <strong>解释：</strong>
  s 中的单词为 ["What", "is" "the", "solution", "to", "this", "problem"]
  前 4 个单词为 ["What", "is", "the", "solution"]
  因此，应当返回 "What is the solution"</pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 3：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre><strong>输入：</strong>s = "chopper is not a tanuki", k = 5
  <strong>输出：</strong>"chopper is not a tanuki"
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

k 的取值范围是 [1,  s 中单词的数目]

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 仅由大小写英文字母和空格组成

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s 中的单词之间由单个空格隔开

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

不存在前导或尾随空格

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def truncateSentence(self, s: str, k: int) -> str:
          for i, c in enumerate(s):
              if c == ' ':
                  k -= 1
              if k == 0:
                  return s[:i]
          return s
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public String truncateSentence(String s, int k) {
          for (int i = 0; i < s.length(); ++i) {
              if (s.charAt(i) == ' ' && (--k) == 0) {
                  return s.substring(0, i);
              }
          }
          return s;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      string truncateSentence(string s, int k) {
          for (int i = 0; i < s.size(); ++i) {
              if (s[i] == ' ' && (--k) == 0) {
                  return s.substr(0, i);
              }
          }
          return s;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} s
   * @param {number} k
   * @return {string}
   */
  var truncateSentence = function (s, k) {
    for (let i = 0; i < s.length; ++i) {
      if (s[i] == " " && --k == 0) {
        return s.substring(0, i);
      }
    }
    return s;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
