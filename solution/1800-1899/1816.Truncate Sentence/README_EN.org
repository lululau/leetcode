* [[https://leetcode.com/problems/truncate-sentence][1816. Truncate
Sentence]]
  :PROPERTIES:
  :CUSTOM_ID: truncate-sentence
  :END:
[[./solution/1800-1899/1816.Truncate Sentence/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

A sentence is a list of words that are separated by a single space with
no leading or trailing spaces. Each of the words consists of only
uppercase and lowercase English letters (no punctuation).

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

For example, "Hello World", "HELLO", and "hello world hello world" are
all sentences.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

You are given a sentence s​​​​​​ and an integer k​​​​​​. You want to
truncate s​​​​​​ such that it contains only the first k​​​​​​ words.
Return s​​​​​​ after truncating it.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;Hello how are you Contestant&quot;, k = 4
  <strong>Output:</strong> &quot;Hello how are you&quot;
  <strong>Explanation:</strong>
  The words in s are [&quot;Hello&quot;, &quot;how&quot; &quot;are&quot;, &quot;you&quot;, &quot;Contestant&quot;].
  The first 4 words are [&quot;Hello&quot;, &quot;how&quot;, &quot;are&quot;, &quot;you&quot;].
  Hence, you should return &quot;Hello how are you&quot;.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;What is the solution to this problem&quot;, k = 4
  <strong>Output:</strong> &quot;What is the solution&quot;
  <strong>Explanation:</strong>
  The words in s are [&quot;What&quot;, &quot;is&quot; &quot;the&quot;, &quot;solution&quot;, &quot;to&quot;, &quot;this&quot;, &quot;problem&quot;].
  The first 4 words are [&quot;What&quot;, &quot;is&quot;, &quot;the&quot;, &quot;solution&quot;].
  Hence, you should return &quot;What is the solution&quot;.</pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 3:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> s = &quot;chopper is not a tanuki&quot;, k = 5
  <strong>Output:</strong> &quot;chopper is not a tanuki&quot;
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= s.length <= 500

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

k is in the range [1, the number of words in s].

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s consist of only lowercase and uppercase English letters and spaces.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

The words in s are separated by a single space.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

There are no leading or trailing spaces.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
  class Solution:
      def truncateSentence(self, s: str, k: int) -> str:
          for i, c in enumerate(s):
              if c == ' ':
                  k -= 1
              if k == 0:
                  return s[:i]
          return s
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
  class Solution {
      public String truncateSentence(String s, int k) {
          for (int i = 0; i < s.length(); ++i) {
              if (s.charAt(i) == ' ' && (--k) == 0) {
                  return s.substring(0, i);
              }
          }
          return s;
      }
  }
#+end_src

*** *C++*
    :PROPERTIES:
    :CUSTOM_ID: c
    :END:
#+begin_src cpp
  class Solution {
  public:
      string truncateSentence(string s, int k) {
          for (int i = 0; i < s.size(); ++i) {
              if (s[i] == ' ' && (--k) == 0) {
                  return s.substr(0, i);
              }
          }
          return s;
      }
  };
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} s
   * @param {number} k
   * @return {string}
   */
  var truncateSentence = function (s, k) {
    for (let i = 0; i < s.length; ++i) {
      if (s[i] == " " && --k == 0) {
        return s.substring(0, i);
      }
    }
    return s;
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
