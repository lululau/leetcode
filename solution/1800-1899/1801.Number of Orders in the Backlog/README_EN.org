* [[https://leetcode.com/problems/number-of-orders-in-the-backlog][1801.
Number of Orders in the Backlog]]
  :PROPERTIES:
  :CUSTOM_ID: number-of-orders-in-the-backlog
  :END:
[[./solution/1800-1899/1801.Number of Orders in the Backlog/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given a 2D integer array orders, where each orders[i] = [pricei,
amounti, orderTypei] denotes that amounti orders have been placed of
type orderTypei at the price pricei. The orderTypei is:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 if it is a batch of buy orders, or

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 if it is a batch of sell orders.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Note that orders[i] represents a batch of amounti independent orders
with the same price and order type. All orders represented by orders[i]
will be placed before all orders represented by orders[i+1] for all
valid i.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

There is a backlog that consists of orders that have not been executed.
The backlog is initially empty. When an order is placed, the following
happens:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

If the order is a buy order, you look at the sell order with the
smallest price in the backlog. If that sell order's price is smaller
than or equal to the current buy order's price, they will match and be
executed, and that sell order will be removed from the backlog. Else,
the buy order is added to the backlog.

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

Vice versa, if the order is a sell order, you look at the buy order with
the largest price in the backlog. If that buy order's price is larger
than or equal to the current sell order's price, they will match and be
executed, and that buy order will be removed from the backlog. Else, the
sell order is added to the backlog.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

Return the total amount of orders in the backlog after placing all the
orders from the input. Since this number can be large, return it modulo
109 + 7.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]

  <strong>Output:</strong> 6

  <strong>Explanation:</strong> Here is what happens with the orders:

  - 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.

  - 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.

  - 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.

  - 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3<sup>rd</sup> order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4<sup>th</sup> order is added to the backlog.

  Finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>

  <strong>Input:</strong> orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]

  <strong>Output:</strong> 999999984

  <strong>Explanation:</strong> Here is what happens with the orders:

  - 10<sup>9</sup> orders of type sell with price 7 are placed. There are no buy orders, so the 10<sup>9</sup> orders are added to the backlog.

  - 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.

  - 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.

  - 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.

  Finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (10<sup>9</sup> + 7).

  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= orders.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

orders[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pricei, amounti <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

orderTypei is either 0 or 1.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
