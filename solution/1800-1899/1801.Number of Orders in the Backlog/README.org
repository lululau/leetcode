* [[https://leetcode-cn.com/problems/number-of-orders-in-the-backlog][1801.
积压订单中的订单总数]]
  :PROPERTIES:
  :CUSTOM_ID: 积压订单中的订单总数
  :END:
[[./solution/1800-1899/1801.Number of Orders in the Backlog/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个二维整数数组 orders ，其中每个 orders[i] = [pricei, amounti,
orderTypei] 表示有 amounti 笔类型为 orderTypei 、价格为 pricei 的订单。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

订单类型 orderTypei 可以分为两种：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

0 表示这是一批采购订单 buy

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 表示这是一批销售订单 sell

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

注意，orders[i] 表示一批共计 amounti
笔的独立订单，这些订单的价格和类型相同。对于所有有效的 i ，由 orders[i]
表示的所有订单提交时间均早于 orders[i+1] 表示的所有订单。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

存在由未执行订单组成的 积压订单
。积压订单最初是空的。提交订单时，会发生以下情况：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

如果该订单是一笔采购订单 buy ，则可以查看积压订单中价格 最低 的销售订单
sell 。如果该销售订单 sell 的价格 低于或等于 当前采购订单 buy
的价格，则匹配并执行这两笔订单，并将销售订单 sell
从积压订单中删除。否则，采购订单 buy 将会添加到积压订单中。

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

反之亦然，如果该订单是一笔销售订单 sell ，则可以查看积压订单中价格 最高
的采购订单 buy 。如果该采购订单 buy 的价格 高于或等于 当前销售订单 sell
的价格，则匹配并执行这两笔订单，并将采购订单 buy
从积压订单中删除。否则，销售订单 sell 将会添加到积压订单中。

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

输入所有订单后，返回积压订单中的 订单总数
。由于数字可能很大，所以需要返回对 109 + 7 取余的结果。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
  <strong>输出：</strong>6
  <strong>解释：</strong>输入订单后会发生下述情况：
  - 提交 5 笔采购订单，价格为 10 。没有销售订单，所以这 5 笔订单添加到积压订单中。
  - 提交 2 笔销售订单，价格为 15 。没有采购订单的价格大于或等于 15 ，所以这 2 笔订单添加到积压订单中。
  - 提交 1 笔销售订单，价格为 25 。没有采购订单的价格大于或等于 25 ，所以这 1 笔订单添加到积压订单中。
  - 提交 4 笔采购订单，价格为 30 。前 2 笔采购订单与价格最低（价格为 15）的 2 笔销售订单匹配，从积压订单中删除这 2 笔销售订单。第 3 笔采购订单与价格最低的 1 笔销售订单匹配，销售订单价格为 25 ，从积压订单中删除这 1 笔销售订单。积压订单中不存在更多销售订单，所以第 4 笔采购订单需要添加到积压订单中。
  最终，积压订单中有 5 笔价格为 10 的采购订单，和 1 笔价格为 30 的采购订单。所以积压订单中的订单总数为 6 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>输入：</strong>orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
  <strong>输出：</strong>999999984
  <strong>解释：</strong>输入订单后会发生下述情况：
  - 提交 10<sup>9</sup> 笔销售订单，价格为 7 。没有采购订单，所以这 10<sup>9</sup> 笔订单添加到积压订单中。
  - 提交 3 笔采购订单，价格为 15 。这些采购订单与价格最低（价格为 7 ）的 3 笔销售订单匹配，从积压订单中删除这 3 笔销售订单。
  - 提交 999999995 笔采购订单，价格为 5 。销售订单的最低价为 7 ，所以这 999999995 笔订单添加到积压订单中。
  - 提交 1 笔销售订单，价格为 5 。这笔销售订单与价格最高（价格为 5 ）的 1 笔采购订单匹配，从积压订单中删除这 1 笔采购订单。
  最终，积压订单中有 (1000000000-3) 笔价格为 7 的销售订单，和 (999999995-1) 笔价格为 5 的采购订单。所以积压订单中的订单总数为 1999999991 ，等于 999999984 % (10<sup>9</sup> + 7) 。</pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= orders.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

orders[i].length == 3

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= pricei, amounti <= 109

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

orderTypei 为 0 或 1

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
