* [[https://leetcode-cn.com/problems/jump-game-vii][1871. 跳跃游戏 VII]]
  :PROPERTIES:
  :CUSTOM_ID: 跳跃游戏-vii
  :END:
[[./solution/1800-1899/1871.Jump Game VII/README_EN.org][English
Version]]

** 题目描述
   :PROPERTIES:
   :CUSTOM_ID: 题目描述
   :END:

#+begin_html
  <!-- 这里写题目描述 -->
#+end_html

#+begin_html
  <p>
#+end_html

给你一个下标从 0 开始的二进制字符串 s 和两个整数 minJump
和 maxJump 。一开始，你在下标 0 处，且该位置的值一定为 '0' 。当同时满足如下条件时，你可以从下标 i 移动到下标 j 处：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

i + minJump <= j <= min(i + maxJump, s.length - 1) 且

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[j] == '0'.

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

#+begin_html
  <p>
#+end_html

如果你可以到达 s 的下标 s.length -
1 处，请你返回 true ，否则返回 false 。

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

示例 1：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>s = "<strong>0</strong>11<strong>0</strong>1<strong>0</strong>", minJump = 2, maxJump = 3
  <b>输出：</b>true
  <strong>解释：</strong>
  第一步，从下标 0 移动到下标 3 。
  第二步，从下标 3 移动到下标 5 。
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

示例 2：

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <b>输入：</b>s = "01101110", minJump = 2, maxJump = 3
  <b>输出：</b>false
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

提示：

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

2 <= s.length <= 105

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[i] 要么是 '0' ，要么是 '1'

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

s[0] == '0'

#+begin_html
  </li>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= minJump <= maxJump < s.length

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** 解法
   :PROPERTIES:
   :CUSTOM_ID: 解法
   :END:

#+begin_html
  <!-- 这里可写通用的实现逻辑 -->
#+end_html

"动态规划 + 前缀和"实现。

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src python
  class Solution:
      def canReach(self, s: str, minJump: int, maxJump: int) -> bool:
          n = len(s)
          dp = [False] * n
          dp[0] = True
          pre_sum = [0] * (n + 1)
          pre_sum[1] = 1
          for i in range(1, n):
              if s[i] == '0':
                  l = max(0, i - maxJump)
                  r = i - minJump
                  if r >= l and pre_sum[r + 1] - pre_sum[l] > 0:
                      dp[i] = True
              pre_sum[i + 1] = pre_sum[i] + dp[i]
          return dp[n - 1]
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:

#+begin_html
  <!-- 这里可写当前语言的特殊实现逻辑 -->
#+end_html

#+begin_src java
  class Solution {
      public boolean canReach(String s, int minJump, int maxJump) {
          int n = s.length();
          boolean[] dp = new boolean[n];
          dp[0] = true;
          int[] preSum = new int[n + 1];
          preSum[1] = 1;
          for (int i = 1; i < n; ++i) {
              if (s.charAt(i) == '0') {
                  int l = Math.max(0, i - maxJump);
                  int r = i - minJump;
                  if (r >= l && preSum[r + 1] - preSum[l] > 0) {
                      dp[i] = true;
                  }
              }
              preSum[i + 1] = preSum[i] + (dp[i] ? 1 : 0);
          }
          return dp[n - 1];
      }
  }
#+end_src

*** *JavaScript*
    :PROPERTIES:
    :CUSTOM_ID: javascript
    :END:
#+begin_src js
  /**
   * @param {string} s
   * @param {number} minJump
   * @param {number} maxJump
   * @return {boolean}
   */
  var canReach = function(s, minJump, maxJump) {
      let n = s.length;
      let dp = new Array(n).fill(0);
      let sum = new Array(n + 1).fill(0);
      dp[0] = 1;
      sum[1] = 1;
      for (let i = 1; i < n; i++) {
          if (s.charAt(i) == '0') {
              let left = Math.max(0, i - maxJump);
              let right = i - minJump;
              if (left <= right && sum[right + 1] - sum[left] > 0) {
                  dp[i] = 1;
              }
          }
          sum[i + 1] = sum[i] + dp[i];
      }
      return dp.pop();
  };
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
