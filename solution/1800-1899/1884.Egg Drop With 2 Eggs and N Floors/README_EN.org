* [[https://leetcode.com/problems/egg-drop-with-2-eggs-and-n-floors][1884.
Egg Drop With 2 Eggs and N Floors]]
  :PROPERTIES:
  :CUSTOM_ID: egg-drop-with-2-eggs-and-n-floors
  :END:
[[./solution/1800-1899/1884.Egg Drop With 2 Eggs and N Floors/README.org][中文文档]]

** Description
   :PROPERTIES:
   :CUSTOM_ID: description
   :END:

#+begin_html
  <p>
#+end_html

You are given two identical eggs and you have access to a building with
n floors labeled from 1 to n.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

You know that there exists a floor f where 0 <= f <= n such that any egg
dropped at a floor higher than f will break, and any egg dropped at or
below floor f will not break.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

In each move, you may take an unbroken egg and drop it from any floor x
(where 1 <= x <= n). If the egg breaks, you can no longer use it.
However, if the egg does not break, you may reuse it in future moves.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Return the minimum number of moves that you need to determine with
certainty what the value of f is.

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Example 1:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 2
  <strong>Output:</strong> 2
  <strong>Explanation:</strong> We can drop the first egg from floor 1 and the second egg from floor 2.
  If the first egg breaks, we know that f = 0.
  If the second egg breaks but the first egg didn&#39;t, we know that f = 1.
  Otherwise, if both eggs survive, we know that f = 2.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

Example 2:

#+begin_html
  </p>
#+end_html

#+begin_html
  <pre>
  <strong>Input:</strong> n = 100
  <strong>Output:</strong> 14
  <strong>Explanation:</strong> One optimal strategy is:
  - Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting
    from floor 1 and going up one at a time to find f within 7 more drops. Total drops is 1 + 7 = 8.
  - If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9
    and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more
    drops. Total drops is 2 + 12 = 14.
  - If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45,
    55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.
  Regardless of the outcome, it takes at most 14 drops to determine f.
  </pre>
#+end_html

#+begin_html
  <p>
#+end_html

 

#+begin_html
  </p>
#+end_html

#+begin_html
  <p>
#+end_html

Constraints:

#+begin_html
  </p>
#+end_html

#+begin_html
  <ul>
#+end_html

#+begin_html
  <li>
#+end_html

1 <= n <= 1000

#+begin_html
  </li>
#+end_html

#+begin_html
  </ul>
#+end_html

** Solutions
   :PROPERTIES:
   :CUSTOM_ID: solutions
   :END:

#+begin_html
  <!-- tabs:start -->
#+end_html

*** *Python3*
    :PROPERTIES:
    :CUSTOM_ID: python3
    :END:
#+begin_src python
#+end_src

*** *Java*
    :PROPERTIES:
    :CUSTOM_ID: java
    :END:
#+begin_src java
#+end_src

*** *...*
    :PROPERTIES:
    :CUSTOM_ID: section
    :END:
#+begin_example
#+end_example

#+begin_html
  <!-- tabs:end -->
#+end_html
